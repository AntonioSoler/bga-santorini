//>>built
require({
    cache: {
        "dijit/Dialog": function() {
            define(["require", "dojo/_base/array", "dojo/aspect", "dojo/_base/declare", "dojo/Deferred", "dojo/dom", "dojo/dom-class", "dojo/dom-geometry", "dojo/dom-style", "dojo/_base/fx", "dojo/i18n", "dojo/keys", "dojo/_base/lang", "dojo/on", "dojo/ready", "dojo/sniff", "dojo/touch", "dojo/window", "dojo/dnd/Moveable", "dojo/dnd/TimedMoveable", "./focus", "./_base/manager", "./_Widget", "./_TemplatedMixin", "./_CssStateMixin", "./form/_FormMixin", "./_DialogMixin", "./DialogUnderlay", "./layout/ContentPane", "./layout/utils", "dojo/text!./templates/Dialog.html", "./a11yclick", "dojo/i18n!./nls/common"], function(_1, _2, _3, _4, _5, _6, _7, _8, _9, fx, _a, _b, _c, on, _d, _e, _f, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _1a, _1b, _1c, _1d) {
                var _1e = new _5();
                _1e.resolve(true);
                function nop() {}
                ;var _1f = _4("dijit._DialogBase" + (_e("dojo-bidi") ? "_NoBidi" : ""), [_16, _18, _19, _17], {
                    templateString: _1d,
                    baseClass: "dijitDialog",
                    cssStateNodes: {
                        closeButtonNode: "dijitDialogCloseIcon"
                    },
                    _setTitleAttr: {
                        node: "titleNode",
                        type: "innerHTML"
                    },
                    open: false,
                    duration: _14.defaultDuration,
                    refocus: true,
                    autofocus: true,
                    _firstFocusItem: null,
                    _lastFocusItem: null,
                    draggable: true,
                    _setDraggableAttr: function(val) {
                        this._set("draggable", val);
                    },
                    maxRatio: 0.9,
                    closable: true,
                    _setClosableAttr: function(val) {
                        this.closeButtonNode.style.display = val ? "" : "none";
                        this._set("closable", val);
                    },
                    postMixInProperties: function() {
                        var _20 = _a.getLocalization("dijit", "common");
                        _c.mixin(this, _20);
                        this.inherited(arguments);
                    },
                    postCreate: function() {
                        _9.set(this.domNode, {
                            display: "none",
                            position: "absolute"
                        });
                        this.ownerDocumentBody.appendChild(this.domNode);
                        this.inherited(arguments);
                        _3.after(this, "onExecute", _c.hitch(this, "hide"), true);
                        _3.after(this, "onCancel", _c.hitch(this, "hide"), true);
                        on(this.closeButtonNode, _f.press, function(e) {
                            e.stopPropagation();
                        });
                        this._modalconnects = [];
                    },
                    onLoad: function() {
                        this.resize();
                        this._position();
                        if (this.autofocus && _21.isTop(this)) {
                            this._getFocusItems();
                            _13.focus(this._firstFocusItem);
                        }
                        this.inherited(arguments);
                    },
                    focus: function() {
                        this._getFocusItems();
                        _13.focus(this._firstFocusItem);
                    },
                    _endDrag: function() {
                        var _22 = _8.position(this.domNode)
                          , _23 = _10.getBox(this.ownerDocument);
                        _22.y = Math.min(Math.max(_22.y, 0), (_23.h - _22.h));
                        _22.x = Math.min(Math.max(_22.x, 0), (_23.w - _22.w));
                        this._relativePosition = _22;
                        this._position();
                    },
                    _setup: function() {
                        var _24 = this.domNode;
                        if (this.titleBar && this.draggable) {
                            this._moveable = new ((_e("ie") == 6) ? _12 : _11)(_24,{
                                handle: this.titleBar
                            });
                            _3.after(this._moveable, "onMoveStop", _c.hitch(this, "_endDrag"), true);
                        } else {
                            _7.add(_24, "dijitDialogFixed");
                        }
                        this.underlayAttrs = {
                            dialogId: this.id,
                            "class": _2.map(this["class"].split(/\s/), function(s) {
                                return s + "_underlay";
                            }).join(" "),
                            _onKeyDown: _c.hitch(this, "_onKey"),
                            ownerDocument: this.ownerDocument
                        };
                    },
                    _size: function() {
                        this.resize();
                    },
                    _position: function() {
                        if (!_7.contains(this.ownerDocumentBody, "dojoMove")) {
                            var _25 = this.domNode
                              , _26 = _10.getBox(this.ownerDocument)
                              , p = this._relativePosition
                              , bb = _8.position(_25)
                              , l = Math.floor(_26.l + (p ? Math.min(p.x, _26.w - bb.w) : (_26.w - bb.w) / 2))
                              , t = Math.floor(_26.t + (p ? Math.min(p.y, _26.h - bb.h) : (_26.h - bb.h) / 2));
                            _9.set(_25, {
                                left: l + "px",
                                top: t + "px"
                            });
                        }
                    },
                    _onKey: function(evt) {
                        if (evt.keyCode == _b.TAB) {
                            this._getFocusItems();
                            var _27 = evt.target;
                            if (this._firstFocusItem == this._lastFocusItem) {
                                evt.stopPropagation();
                                evt.preventDefault();
                            } else {
                                if (_27 == this._firstFocusItem && evt.shiftKey) {
                                    _13.focus(this._lastFocusItem);
                                    evt.stopPropagation();
                                    evt.preventDefault();
                                } else {
                                    if (_27 == this._lastFocusItem && !evt.shiftKey) {
                                        _13.focus(this._firstFocusItem);
                                        evt.stopPropagation();
                                        evt.preventDefault();
                                    }
                                }
                            }
                        } else {
                            if (this.closable && evt.keyCode == _b.ESCAPE) {
                                this.onCancel();
                                evt.stopPropagation();
                                evt.preventDefault();
                            }
                        }
                    },
                    show: function() {
                        if (this.open) {
                            return _1e.promise;
                        }
                        if (!this._started) {
                            this.startup();
                        }
                        if (!this._alreadyInitialized) {
                            this._setup();
                            this._alreadyInitialized = true;
                        }
                        if (this._fadeOutDeferred) {
                            this._fadeOutDeferred.cancel();
                            _21.hide(this);
                        }
                        var win = _10.get(this.ownerDocument);
                        this._modalconnects.push(on(win, "scroll", _c.hitch(this, "resize", null)));
                        this._modalconnects.push(on(this.domNode, "keydown", _c.hitch(this, "_onKey")));
                        _9.set(this.domNode, {
                            opacity: 0,
                            display: ""
                        });
                        this._set("open", true);
                        this._onShow();
                        this.resize();
                        this._position();
                        var _28;
                        this._fadeInDeferred = new _5(_c.hitch(this, function() {
                            _28.stop();
                            delete this._fadeInDeferred;
                        }));
                        this._fadeInDeferred.then(undefined, nop);
                        var _29 = this._fadeInDeferred.promise;
                        _28 = fx.fadeIn({
                            node: this.domNode,
                            duration: this.duration,
                            beforeBegin: _c.hitch(this, function() {
                                _21.show(this, this.underlayAttrs);
                            }),
                            onEnd: _c.hitch(this, function() {
                                if (this.autofocus && _21.isTop(this)) {
                                    this._getFocusItems();
                                    _13.focus(this._firstFocusItem);
                                }
                                this._fadeInDeferred.resolve(true);
                                delete this._fadeInDeferred;
                            })
                        }).play();
                        return _29;
                    },
                    hide: function() {
                        if (!this._alreadyInitialized || !this.open) {
                            return _1e.promise;
                        }
                        if (this._fadeInDeferred) {
                            this._fadeInDeferred.cancel();
                        }
                        var _2a;
                        this._fadeOutDeferred = new _5(_c.hitch(this, function() {
                            _2a.stop();
                            delete this._fadeOutDeferred;
                        }));
                        this._fadeOutDeferred.then(undefined, nop);
                        this._fadeOutDeferred.then(_c.hitch(this, "onHide"));
                        var _2b = this._fadeOutDeferred.promise;
                        _2a = fx.fadeOut({
                            node: this.domNode,
                            duration: this.duration,
                            onEnd: _c.hitch(this, function() {
                                this.domNode.style.display = "none";
                                _21.hide(this);
                                this._fadeOutDeferred.resolve(true);
                                delete this._fadeOutDeferred;
                            })
                        }).play();
                        if (this._scrollConnected) {
                            this._scrollConnected = false;
                        }
                        var h;
                        while (h = this._modalconnects.pop()) {
                            h.remove();
                        }
                        if (this._relativePosition) {
                            delete this._relativePosition;
                        }
                        this._set("open", false);
                        return _2b;
                    },
                    resize: function(dim) {
                        if (this.domNode.style.display != "none") {
                            this._checkIfSingleChild();
                            if (!dim) {
                                if (this._shrunk) {
                                    if (this._singleChild) {
                                        if (typeof this._singleChildOriginalStyle != "undefined") {
                                            this._singleChild.domNode.style.cssText = this._singleChildOriginalStyle;
                                            delete this._singleChildOriginalStyle;
                                        }
                                    }
                                    _2.forEach([this.domNode, this.containerNode, this.titleBar, this.actionBarNode], function(_2c) {
                                        if (_2c) {
                                            _9.set(_2c, {
                                                position: "static",
                                                width: "auto",
                                                height: "auto"
                                            });
                                        }
                                    });
                                    this.domNode.style.position = "absolute";
                                }
                                var _2d = _10.getBox(this.ownerDocument);
                                _2d.w *= this.maxRatio;
                                _2d.h *= this.maxRatio;
                                var bb = _8.position(this.domNode);
                                this._shrunk = false;
                                if (bb.w >= _2d.w) {
                                    dim = {
                                        w: _2d.w
                                    };
                                    _8.setMarginBox(this.domNode, dim);
                                    bb = _8.position(this.domNode);
                                    this._shrunk = true;
                                }
                                if (bb.h >= _2d.h) {
                                    if (!dim) {
                                        dim = {
                                            w: bb.w
                                        };
                                    }
                                    dim.h = _2d.h;
                                    this._shrunk = true;
                                }
                                if (dim) {
                                    if (!dim.w) {
                                        dim.w = bb.w;
                                    }
                                    if (!dim.h) {
                                        dim.h = bb.h;
                                    }
                                }
                            }
                            if (dim) {
                                _8.setMarginBox(this.domNode, dim);
                                var _2e = [];
                                if (this.titleBar) {
                                    _2e.push({
                                        domNode: this.titleBar,
                                        region: "top"
                                    });
                                }
                                if (this.actionBarNode) {
                                    _2e.push({
                                        domNode: this.actionBarNode,
                                        region: "bottom"
                                    });
                                }
                                var _2f = {
                                    domNode: this.containerNode,
                                    region: "center"
                                };
                                _2e.push(_2f);
                                var _30 = _1c.marginBox2contentBox(this.domNode, dim);
                                _1c.layoutChildren(this.domNode, _30, _2e);
                                if (this._singleChild) {
                                    var cb = _1c.marginBox2contentBox(this.containerNode, _2f);
                                    this._singleChild.resize({
                                        w: cb.w,
                                        h: cb.h
                                    });
                                } else {
                                    this.containerNode.style.overflow = "auto";
                                    this._layoutChildren();
                                }
                            } else {
                                this._layoutChildren();
                            }
                            if (!_e("touch") && !dim) {
                                this._position();
                            }
                        }
                    },
                    _layoutChildren: function() {
                        _2.forEach(this.getChildren(), function(_31) {
                            if (_31.resize) {
                                _31.resize();
                            }
                        });
                    },
                    destroy: function() {
                        if (this._fadeInDeferred) {
                            this._fadeInDeferred.cancel();
                        }
                        if (this._fadeOutDeferred) {
                            this._fadeOutDeferred.cancel();
                        }
                        if (this._moveable) {
                            this._moveable.destroy();
                        }
                        var h;
                        while (h = this._modalconnects.pop()) {
                            h.remove();
                        }
                        _21.hide(this);
                        this.inherited(arguments);
                    }
                });
                if (_e("dojo-bidi")) {
                    _1f = _4("dijit._DialogBase", _1f, {
                        _setTitleAttr: function(_32) {
                            this._set("title", _32);
                            this.titleNode.innerHTML = _32;
                            this.applyTextDir(this.titleNode);
                        },
                        _setTextDirAttr: function(_33) {
                            if (this._created && this.textDir != _33) {
                                this._set("textDir", _33);
                                this.set("title", this.title);
                            }
                        }
                    });
                }
                var _34 = _4("dijit.Dialog", [_1b, _1f], {});
                _34._DialogBase = _1f;
                var _21 = _34._DialogLevelManager = {
                    _beginZIndex: 950,
                    show: function(_35, _36) {
                        ds[ds.length - 1].focus = _13.curNode;
                        var _37 = ds[ds.length - 1].dialog ? ds[ds.length - 1].zIndex + 2 : _34._DialogLevelManager._beginZIndex;
                        _9.set(_35.domNode, "zIndex", _37);
                        _1a.show(_36, _37 - 1);
                        ds.push({
                            dialog: _35,
                            underlayAttrs: _36,
                            zIndex: _37
                        });
                    },
                    hide: function(_38) {
                        if (ds[ds.length - 1].dialog == _38) {
                            ds.pop();
                            var pd = ds[ds.length - 1];
                            if (ds.length == 1) {
                                _1a.hide();
                            } else {
                                _1a.show(pd.underlayAttrs, pd.zIndex - 1);
                            }
                            if (_38.refocus) {
                                var _39 = pd.focus;
                                if (pd.dialog && (!_39 || !_6.isDescendant(_39, pd.dialog.domNode))) {
                                    pd.dialog._getFocusItems();
                                    _39 = pd.dialog._firstFocusItem;
                                }
                                if (_39) {
                                    try {
                                        _39.focus();
                                    } catch (e) {}
                                }
                            }
                        } else {
                            var idx = _2.indexOf(_2.map(ds, function(_3a) {
                                return _3a.dialog;
                            }), _38);
                            if (idx != -1) {
                                ds.splice(idx, 1);
                            }
                        }
                    },
                    isTop: function(_3b) {
                        return ds[ds.length - 1].dialog == _3b;
                    }
                };
                var ds = _34._dialogStack = [{
                    dialog: null,
                    focus: null,
                    underlayAttrs: null
                }];
                if (_e("dijit-legacy-requires")) {
                    _d(0, function() {
                        var _3c = ["dijit/TooltipDialog"];
                        _1(_3c);
                    });
                }
                return _34;
            });
        },
        "dojo/i18n": function() {
            define(["./_base/kernel", "require", "./has", "./_base/array", "./_base/config", "./_base/lang", "./_base/xhr", "./json", "module"], function(_3d, _3e, has, _3f, _40, _41, xhr, _42, _43) {
                has.add("dojo-preload-i18n-Api", 1);
                1 || has.add("dojo-v1x-i18n-Api", 1);
                var _44 = _3d.i18n = {}
                  , _45 = /(^.*(^|\/)nls)(\/|$)([^\/]*)\/?([^\/]*)/
                  , _46 = function(_47, _48, _49, _4a) {
                    for (var _4b = [_49 + _4a], _4c = _48.split("-"), _4d = "", i = 0; i < _4c.length; i++) {
                        _4d += (_4d ? "-" : "") + _4c[i];
                        if (!_47 || _47[_4d]) {
                            _4b.push(_49 + _4d + "/" + _4a);
                            _4b.specificity = _4d;
                        }
                    }
                    return _4b;
                }
                  , _4e = {}
                  , _4f = function(_50, _51, _52) {
                    _52 = _52 ? _52.toLowerCase() : _3d.locale;
                    _50 = _50.replace(/\./g, "/");
                    _51 = _51.replace(/\./g, "/");
                    return (/root/i.test(_52)) ? (_50 + "/nls/" + _51) : (_50 + "/nls/" + _52 + "/" + _51);
                }
                  , _53 = _3d.getL10nName = function(_54, _55, _56) {
                    return _54 = _43.id + "!" + _4f(_54, _55, _56);
                }
                  , _57 = function(_58, _59, _5a, _5b, _5c, _5d) {
                    _58([_59], function(_5e) {
                        var _5f = _5e.root === undefined ? _5e : _41.clone(_5e.root || _5e.ROOT)
                          , _60 = _46(!_5e._v1x && _5e, _5c, _5a, _5b);
                        _58(_60, function() {
                            for (var i = 1; i < _60.length; i++) {
                                _5f = _41.mixin(_41.clone(_5f), arguments[i]);
                            }
                            var _61 = _59 + "/" + _5c;
                            _4e[_61] = _5f;
                            _5f.$locale = _60.specificity;
                            _5d();
                        });
                    });
                }
                  , _62 = function(id, _63) {
                    return /^\./.test(id) ? _63(id) : id;
                }
                  , _64 = function(_65) {
                    var _66 = _40.extraLocale || [];
                    _66 = _41.isArray(_66) ? _66 : [_66];
                    _66.push(_65);
                    return _66;
                }
                  , _67 = function(id, _68, _69) {
                    var _6a = _45.exec(id)
                      , _6b = _6a[1] + "/"
                      , _6c = _6a[5] || _6a[4]
                      , _6d = _6b + _6c
                      , _6e = (_6a[5] && _6a[4])
                      , _6f = _6e || _3d.locale || ""
                      , _70 = _6d + "/" + _6f
                      , _71 = _6e ? [_6f] : _64(_6f)
                      , _72 = _71.length
                      , _73 = function() {
                        if (!--_72) {
                            _69(_41.delegate(_4e[_70]));
                        }
                    }
                      , _74 = id.split("*")
                      , _75 = _74[1] == "preload";
                    if (has("dojo-preload-i18n-Api")) {
                        if (_75) {
                            if (!_4e[id]) {
                                _4e[id] = 1;
                                _80(_74[2], _42.parse(_74[3]), 1, _68);
                            }
                            _69(1);
                        }
                        if (_75 || (_a1(id, _68, _69) && !_4e[_70])) {
                            return;
                        }
                    } else {
                        if (_75) {
                            _69(1);
                            return;
                        }
                    }
                    _3f.forEach(_71, function(_76) {
                        var _77 = _6d + "/" + _76;
                        if (has("dojo-preload-i18n-Api")) {
                            _78(_77);
                        }
                        if (!_4e[_77]) {
                            _57(_68, _6d, _6b, _6c, _76, _73);
                        } else {
                            _73();
                        }
                    });
                };
                if (has("dojo-preload-i18n-Api") || 1) {
                    var _79 = _44.normalizeLocale = function(_7a) {
                        var _7b = _7a ? _7a.toLowerCase() : _3d.locale;
                        return _7b == "root" ? "ROOT" : _7b;
                    }
                      , _7c = function(mid, _7d) {
                        return (1 && 1) ? _7d.isXdUrl(_3e.toUrl(mid + ".js")) : true;
                    }
                      , _7e = 0
                      , _7f = []
                      , _80 = _44._preloadLocalizations = function(_81, _82, _83, _84) {
                        _84 = _84 || _3e;
                        function _85(mid, _86) {
                            if (_7c(mid, _84) || _83) {
                                _84([mid], _86);
                            } else {
                                _a7([mid], _86, _84);
                            }
                        }
                        ;function _87(_88, _89) {
                            var _8a = _88.split("-");
                            while (_8a.length) {
                                if (_89(_8a.join("-"))) {
                                    return;
                                }
                                _8a.pop();
                            }
                            _89("ROOT");
                        }
                        ;function _8b() {
                            _7e++;
                        }
                        ;function _8c() {
                            --_7e;
                            while (!_7e && _7f.length) {
                                _67.apply(null, _7f.shift());
                            }
                        }
                        ;function _8d(_8e, _8f, loc, _90) {
                            return _90.toAbsMid(_8e + _8f + "/" + loc);
                        }
                        ;function _91(_92) {
                            _92 = _79(_92);
                            _87(_92, function(loc) {
                                if (_3f.indexOf(_82, loc) >= 0) {
                                    var mid = _81.replace(/\./g, "/") + "_" + loc;
                                    _8b();
                                    _85(mid, function(_93) {
                                        for (var p in _93) {
                                            var _94 = _93[p], _95 = p.match(/(.+)\/([^\/]+)$/), _96, _97;
                                            if (!_95) {
                                                continue;
                                            }
                                            _96 = _95[2];
                                            _97 = _95[1] + "/";
                                            if (!_94._localized) {
                                                continue;
                                            }
                                            var _98;
                                            if (loc === "ROOT") {
                                                var _99 = _98 = _94._localized;
                                                delete _94._localized;
                                                _99.root = _94;
                                                _4e[_3e.toAbsMid(p)] = _99;
                                            } else {
                                                _98 = _94._localized;
                                                _4e[_8d(_97, _96, loc, _3e)] = _94;
                                            }
                                            if (loc !== _92) {
                                                function _9a(_9b, _9c, _9d, _9e) {
                                                    var _9f = []
                                                      , _a0 = [];
                                                    _87(_92, function(loc) {
                                                        if (_9e[loc]) {
                                                            _9f.push(_3e.toAbsMid(_9b + loc + "/" + _9c));
                                                            _a0.push(_8d(_9b, _9c, loc, _3e));
                                                        }
                                                    });
                                                    if (_9f.length) {
                                                        _8b();
                                                        _84(_9f, function() {
                                                            for (var i = _9f.length - 1; i >= 0; i--) {
                                                                _9d = _41.mixin(_41.clone(_9d), arguments[i]);
                                                                _4e[_a0[i]] = _9d;
                                                            }
                                                            _4e[_8d(_9b, _9c, _92, _3e)] = _41.clone(_9d);
                                                            _8c();
                                                        });
                                                    } else {
                                                        _4e[_8d(_9b, _9c, _92, _3e)] = _9d;
                                                    }
                                                }
                                                ;_9a(_97, _96, _94, _98);
                                            }
                                        }
                                        _8c();
                                    });
                                    return true;
                                }
                                return false;
                            });
                        }
                        ;_91();
                        _3f.forEach(_3d.config.extraLocale, _91);
                    }
                      , _a1 = function(id, _a2, _a3) {
                        if (_7e) {
                            _7f.push([id, _a2, _a3]);
                        }
                        return _7e;
                    }
                      , _78 = function() {};
                }
                if (1) {
                    var _a4 = {}, _a5 = {}, _a6, _a7 = function(_a8, _a9, _aa) {
                        var _ab = [];
                        _3f.forEach(_a8, function(mid) {
                            var url = _aa.toUrl(mid + ".js");
                            function _67(_ac) {
                                if (!_a6) {
                                    _a6 = new Function("__bundle","__checkForLegacyModules","__mid","__amdValue","var define = function(mid, factory){define.called = 1; __amdValue.result = factory || mid;}," + "\t   require = function(){define.called = 1;};" + "try{" + "define.called = 0;" + "eval(__bundle);" + "if(define.called==1)" + "return __amdValue;" + "if((__checkForLegacyModules = __checkForLegacyModules(__mid)))" + "return __checkForLegacyModules;" + "}catch(e){}" + "try{" + "return eval('('+__bundle+')');" + "}catch(e){" + "return e;" + "}");
                                }
                                var _ad = _a6(_ac, _78, mid, _a4);
                                if (_ad === _a4) {
                                    _ab.push(_4e[url] = _a4.result);
                                } else {
                                    if (_ad instanceof Error) {
                                        console.error("failed to evaluate i18n bundle; url=" + url, _ad);
                                        _ad = {};
                                    }
                                    _ab.push(_4e[url] = (/nls\/[^\/]+\/[^\/]+$/.test(url) ? _ad : {
                                        root: _ad,
                                        _v1x: 1
                                    }));
                                }
                            }
                            ;if (_4e[url]) {
                                _ab.push(_4e[url]);
                            } else {
                                var _ae = _aa.syncLoadNls(mid);
                                if (!_ae) {
                                    _ae = _78(mid.replace(/nls\/([^\/]*)\/([^\/]*)$/, "nls/$2/$1"));
                                }
                                if (_ae) {
                                    _ab.push(_ae);
                                } else {
                                    if (!xhr) {
                                        try {
                                            _aa.getText(url, true, _67);
                                        } catch (e) {
                                            _ab.push(_4e[url] = {});
                                        }
                                    } else {
                                        xhr.get({
                                            url: url,
                                            sync: true,
                                            load: _67,
                                            error: function() {
                                                _ab.push(_4e[url] = {});
                                            }
                                        });
                                    }
                                }
                            }
                        });
                        _a9 && _a9.apply(null, _ab);
                    };
                    _78 = function(_af) {
                        for (var _b0, _b1 = _af.split("/"), _b2 = _3d.global[_b1[0]], i = 1; _b2 && i < _b1.length - 1; _b2 = _b2[_b1[i++]]) {}
                        if (_b2) {
                            _b0 = _b2[_b1[i]];
                            if (!_b0) {
                                _b0 = _b2[_b1[i].replace(/-/g, "_")];
                            }
                            if (_b0) {
                                _4e[_af] = _b0;
                            }
                        }
                        return _b0;
                    }
                    ;
                    _44.getLocalization = function(_b3, _b4, _b5) {
                        var _b6, _b7 = _4f(_b3, _b4, _b5);
                        if (_a5[_b7]) {
                            return _a5[_b7];
                        }
                        _67(_b7, (!_7c(_b7, _3e) ? function(_b8, _b9) {
                            _a7(_b8, _b9, _3e);
                        }
                        : _3e), function(_ba) {
                            _a5[_b7] = _ba;
                            _b6 = _ba;
                        });
                        return _b6;
                    }
                    ;
                }
                return _41.mixin(_44, {
                    dynamic: true,
                    normalize: _62,
                    load: _67,
                    cache: _4e,
                    getL10nName: _53
                });
            });
        },
        "dojo/touch": function() {
            define(["./_base/kernel", "./aspect", "./dom", "./dom-class", "./_base/lang", "./on", "./has", "./mouse", "./domReady", "./_base/window"], function(_bb, _bc, dom, _bd, _be, on, has, _bf, _c0, win) {
                var _c1 = has("ios") < 5;
                var _c2 = has("pointer-events") || has("MSPointer")
                  , _c3 = (function() {
                    var _c4 = {};
                    for (var _c5 in {
                        down: 1,
                        move: 1,
                        up: 1,
                        cancel: 1,
                        over: 1,
                        out: 1
                    }) {
                        _c4[_c5] = has("MSPointer") ? "MSPointer" + _c5.charAt(0).toUpperCase() + _c5.slice(1) : "pointer" + _c5;
                    }
                    return _c4;
                }
                )();
                var _c6 = has("touch-events");
                var _c7, _c8, _c9 = false, _ca, _cb, _cc, _cd, _ce, _cf;
                var _d0;
                function _d1(_d2, _d3, _d4) {
                    if (_c2 && _d4) {
                        return function(_d5, _d6) {
                            return on(_d5, _d4, _d6);
                        }
                        ;
                    } else {
                        if (_c6) {
                            return function(_d7, _d8) {
                                var _d9 = on(_d7, _d3, function(evt) {
                                    _d8.call(this, evt);
                                    _d0 = (new Date()).getTime();
                                })
                                  , _da = on(_d7, _d2, function(evt) {
                                    if (!_d0 || (new Date()).getTime() > _d0 + 1000) {
                                        _d8.call(this, evt);
                                    }
                                });
                                return {
                                    remove: function() {
                                        _d9.remove();
                                        _da.remove();
                                    }
                                };
                            }
                            ;
                        } else {
                            return function(_db, _dc) {
                                return on(_db, _d2, _dc);
                            }
                            ;
                        }
                    }
                }
                ;function _dd(_de) {
                    do {
                        if (_de.dojoClick !== undefined) {
                            return _de;
                        }
                    } while (_de = _de.parentNode);
                }
                ;function _df(e, _e0, _e1) {
                    if (_bf.isRight(e)) {
                        return;
                    }
                    var _e2 = _dd(e.target);
                    _c8 = !e.target.disabled && _e2 && _e2.dojoClick;
                    if (_c8) {
                        _c9 = (_c8 == "useTarget");
                        _ca = (_c9 ? _e2 : e.target);
                        if (_c9) {
                            e.preventDefault();
                        }
                        _cb = e.changedTouches ? e.changedTouches[0].pageX - win.global.pageXOffset : e.clientX;
                        _cc = e.changedTouches ? e.changedTouches[0].pageY - win.global.pageYOffset : e.clientY;
                        _cd = (typeof _c8 == "object" ? _c8.x : (typeof _c8 == "number" ? _c8 : 0)) || 4;
                        _ce = (typeof _c8 == "object" ? _c8.y : (typeof _c8 == "number" ? _c8 : 0)) || 4;
                        if (!_c7) {
                            _c7 = true;
                            function _e3(e) {
                                if (_c9) {
                                    _c8 = dom.isDescendant(win.doc.elementFromPoint((e.changedTouches ? e.changedTouches[0].pageX - win.global.pageXOffset : e.clientX), (e.changedTouches ? e.changedTouches[0].pageY - win.global.pageYOffset : e.clientY)), _ca);
                                } else {
                                    _c8 = _c8 && (e.changedTouches ? e.changedTouches[0].target : e.target) == _ca && Math.abs((e.changedTouches ? e.changedTouches[0].pageX - win.global.pageXOffset : e.clientX) - _cb) <= _cd && Math.abs((e.changedTouches ? e.changedTouches[0].pageY - win.global.pageYOffset : e.clientY) - _cc) <= _ce;
                                }
                            }
                            ;win.doc.addEventListener(_e0, function(e) {
                                if (_bf.isRight(e)) {
                                    return;
                                }
                                _e3(e);
                                if (_c9) {
                                    e.preventDefault();
                                }
                            }, true);
                            win.doc.addEventListener(_e1, function(e) {
                                if (_bf.isRight(e)) {
                                    return;
                                }
                                _e3(e);
                                if (_c8) {
                                    _cf = (new Date()).getTime();
                                    var _e4 = (_c9 ? _ca : e.target);
                                    if (_e4.tagName === "LABEL") {
                                        _e4 = dom.byId(_e4.getAttribute("for")) || _e4;
                                    }
                                    var src = (e.changedTouches) ? e.changedTouches[0] : e;
                                    function _e5(_e6) {
                                        var evt = document.createEvent("MouseEvents");
                                        evt._dojo_click = true;
                                        evt.initMouseEvent(_e6, true, true, e.view, e.detail, src.screenX, src.screenY, src.clientX, src.clientY, e.ctrlKey, e.altKey, e.shiftKey, e.metaKey, 0, null);
                                        return evt;
                                    }
                                    ;var _e7 = _e5("mousedown");
                                    var _e8 = _e5("mouseup");
                                    var _e9 = _e5("click");
                                    setTimeout(function() {
                                        on.emit(_e4, "mousedown", _e7);
                                        on.emit(_e4, "mouseup", _e8);
                                        on.emit(_e4, "click", _e9);
                                        _cf = (new Date()).getTime();
                                    }, 0);
                                }
                            }, true);
                            function _ea(_eb) {
                                win.doc.addEventListener(_eb, function(e) {
                                    var _ec = e.target;
                                    if (_c8 && !e._dojo_click && (new Date()).getTime() <= _cf + 1000 && !(_ec.tagName == "INPUT" && _bd.contains(_ec, "dijitOffScreen"))) {
                                        e.stopPropagation();
                                        e.stopImmediatePropagation && e.stopImmediatePropagation();
                                        if (_eb == "click" && (_ec.tagName != "INPUT" || (_ec.type == "radio" && (_bd.contains(_ec, "dijitCheckBoxInput") || _bd.contains(_ec, "mblRadioButton"))) || (_ec.type == "checkbox" && (_bd.contains(_ec, "dijitCheckBoxInput") || _bd.contains(_ec, "mblCheckBox")))) && _ec.tagName != "TEXTAREA" && _ec.tagName != "AUDIO" && _ec.tagName != "VIDEO") {
                                            e.preventDefault();
                                        }
                                    }
                                }, true);
                            }
                            ;_ea("click");
                            _ea("mousedown");
                            _ea("mouseup");
                        }
                    }
                }
                ;var _ed;
                if (has("touch")) {
                    if (_c2) {
                        _c0(function() {
                            win.doc.addEventListener(_c3.down, function(evt) {
                                _df(evt, _c3.move, _c3.up);
                            }, true);
                        });
                    } else {
                        _c0(function() {
                            _ed = win.body();
                            win.doc.addEventListener("touchstart", function(evt) {
                                _d0 = (new Date()).getTime();
                                var _ee = _ed;
                                _ed = evt.target;
                                on.emit(_ee, "dojotouchout", {
                                    relatedTarget: _ed,
                                    bubbles: true
                                });
                                on.emit(_ed, "dojotouchover", {
                                    relatedTarget: _ee,
                                    bubbles: true
                                });
                                _df(evt, "touchmove", "touchend");
                            }, true);
                            function _ef(evt) {
                                var _f0 = _be.delegate(evt, {
                                    bubbles: true
                                });
                                if (has("ios") >= 6) {
                                    _f0.touches = evt.touches;
                                    _f0.altKey = evt.altKey;
                                    _f0.changedTouches = evt.changedTouches;
                                    _f0.ctrlKey = evt.ctrlKey;
                                    _f0.metaKey = evt.metaKey;
                                    _f0.shiftKey = evt.shiftKey;
                                    _f0.targetTouches = evt.targetTouches;
                                }
                                return _f0;
                            }
                            ;on(win.doc, "touchmove", function(evt) {
                                _d0 = (new Date()).getTime();
                                var _f1 = win.doc.elementFromPoint(evt.pageX - (_c1 ? 0 : win.global.pageXOffset), evt.pageY - (_c1 ? 0 : win.global.pageYOffset));
                                if (_f1) {
                                    if (_ed !== _f1) {
                                        on.emit(_ed, "dojotouchout", {
                                            relatedTarget: _f1,
                                            bubbles: true
                                        });
                                        on.emit(_f1, "dojotouchover", {
                                            relatedTarget: _ed,
                                            bubbles: true
                                        });
                                        _ed = _f1;
                                    }
                                    if (!on.emit(_f1, "dojotouchmove", _ef(evt))) {
                                        evt.preventDefault();
                                    }
                                }
                            });
                            on(win.doc, "touchend", function(evt) {
                                _d0 = (new Date()).getTime();
                                var _f2 = win.doc.elementFromPoint(evt.pageX - (_c1 ? 0 : win.global.pageXOffset), evt.pageY - (_c1 ? 0 : win.global.pageYOffset)) || win.body();
                                on.emit(_f2, "dojotouchend", _ef(evt));
                            });
                        });
                    }
                }
                var _f3 = {
                    press: _d1("mousedown", "touchstart", _c3.down),
                    move: _d1("mousemove", "dojotouchmove", _c3.move),
                    release: _d1("mouseup", "dojotouchend", _c3.up),
                    cancel: _d1(_bf.leave, "touchcancel", _c2 ? _c3.cancel : null),
                    over: _d1("mouseover", "dojotouchover", _c3.over),
                    out: _d1("mouseout", "dojotouchout", _c3.out),
                    enter: _bf._eventHandler(_d1("mouseover", "dojotouchover", _c3.over)),
                    leave: _bf._eventHandler(_d1("mouseout", "dojotouchout", _c3.out))
                };
                1 && (_bb.touch = _f3);
                return _f3;
            });
        },
        "dojo/window": function() {
            define(["./_base/lang", "./sniff", "./_base/window", "./dom", "./dom-geometry", "./dom-style", "./dom-construct"], function(_f4, has, _f5, dom, _f6, _f7, _f8) {
                has.add("rtl-adjust-position-for-verticalScrollBar", function(win, doc) {
                    var _f9 = _f5.body(doc)
                      , _fa = _f8.create("div", {
                        style: {
                            overflow: "scroll",
                            overflowX: "visible",
                            direction: "rtl",
                            visibility: "hidden",
                            position: "absolute",
                            left: "0",
                            top: "0",
                            width: "64px",
                            height: "64px"
                        }
                    }, _f9, "last")
                      , div = _f8.create("div", {
                        style: {
                            overflow: "hidden",
                            direction: "ltr"
                        }
                    }, _fa, "last")
                      , ret = _f6.position(div).x != 0;
                    _fa.removeChild(div);
                    _f9.removeChild(_fa);
                    return ret;
                });
                has.add("position-fixed-support", function(win, doc) {
                    var _fb = _f5.body(doc)
                      , _fc = _f8.create("span", {
                        style: {
                            visibility: "hidden",
                            position: "fixed",
                            left: "1px",
                            top: "1px"
                        }
                    }, _fb, "last")
                      , _fd = _f8.create("span", {
                        style: {
                            position: "fixed",
                            left: "0",
                            top: "0"
                        }
                    }, _fc, "last")
                      , ret = _f6.position(_fd).x != _f6.position(_fc).x;
                    _fc.removeChild(_fd);
                    _fb.removeChild(_fc);
                    return ret;
                });
                var _fe = {
                    getBox: function(doc) {
                        doc = doc || _f5.doc;
                        var _ff = (doc.compatMode == "BackCompat") ? _f5.body(doc) : doc.documentElement, _100 = _f6.docScroll(doc), w, h;
                        if (has("touch")) {
                            var _101 = _fe.get(doc);
                            w = _101.innerWidth || _ff.clientWidth;
                            h = _101.innerHeight || _ff.clientHeight;
                        } else {
                            w = _ff.clientWidth;
                            h = _ff.clientHeight;
                        }
                        return {
                            l: _100.x,
                            t: _100.y,
                            w: w,
                            h: h
                        };
                    },
                    get: function(doc) {
                        if (has("ie") && _fe !== document.parentWindow) {
                            doc.parentWindow.execScript("document._parentWindow = window;", "Javascript");
                            var win = doc._parentWindow;
                            doc._parentWindow = null;
                            return win;
                        }
                        return doc.parentWindow || doc.defaultView;
                    },
                    scrollIntoView: function(node, pos) {
                        try {
                            node = dom.byId(node);
                            var doc = node.ownerDocument || _f5.doc
                              , body = _f5.body(doc)
                              , html = doc.documentElement || body.parentNode
                              , isIE = has("ie") || has("trident")
                              , isWK = has("webkit");
                            if (node == body || node == html) {
                                return;
                            }
                            if (!(has("mozilla") || isIE || isWK || has("opera") || has("trident") || has("edge")) && ("scrollIntoView"in node)) {
                                node.scrollIntoView(false);
                                return;
                            }
                            var _102 = doc.compatMode == "BackCompat"
                              , _103 = Math.min(body.clientWidth || html.clientWidth, html.clientWidth || body.clientWidth)
                              , _104 = Math.min(body.clientHeight || html.clientHeight, html.clientHeight || body.clientHeight)
                              , _105 = (isWK || _102) ? body : html
                              , _106 = pos || _f6.position(node)
                              , el = node.parentNode
                              , _107 = function(el) {
                                return (isIE <= 6 || (isIE == 7 && _102)) ? false : (has("position-fixed-support") && (_f7.get(el, "position").toLowerCase() == "fixed"));
                            }
                              , self = this
                              , _108 = function(el, x, y) {
                                if (el.tagName == "BODY" || el.tagName == "HTML") {
                                    self.get(el.ownerDocument).scrollBy(x, y);
                                } else {
                                    x && (el.scrollLeft += x);
                                    y && (el.scrollTop += y);
                                }
                            };
                            if (_107(node)) {
                                return;
                            }
                            while (el) {
                                if (el == body) {
                                    el = _105;
                                }
                                var _109 = _f6.position(el)
                                  , _10a = _107(el)
                                  , rtl = _f7.getComputedStyle(el).direction.toLowerCase() == "rtl";
                                if (el == _105) {
                                    _109.w = _103;
                                    _109.h = _104;
                                    if (_105 == html && (isIE || has("trident")) && rtl) {
                                        _109.x += _105.offsetWidth - _109.w;
                                    }
                                    _109.x = 0;
                                    _109.y = 0;
                                } else {
                                    var pb = _f6.getPadBorderExtents(el);
                                    _109.w -= pb.w;
                                    _109.h -= pb.h;
                                    _109.x += pb.l;
                                    _109.y += pb.t;
                                    var _10b = el.clientWidth
                                      , _10c = _109.w - _10b;
                                    if (_10b > 0 && _10c > 0) {
                                        if (rtl && has("rtl-adjust-position-for-verticalScrollBar")) {
                                            _109.x += _10c;
                                        }
                                        _109.w = _10b;
                                    }
                                    _10b = el.clientHeight;
                                    _10c = _109.h - _10b;
                                    if (_10b > 0 && _10c > 0) {
                                        _109.h = _10b;
                                    }
                                }
                                if (_10a) {
                                    if (_109.y < 0) {
                                        _109.h += _109.y;
                                        _109.y = 0;
                                    }
                                    if (_109.x < 0) {
                                        _109.w += _109.x;
                                        _109.x = 0;
                                    }
                                    if (_109.y + _109.h > _104) {
                                        _109.h = _104 - _109.y;
                                    }
                                    if (_109.x + _109.w > _103) {
                                        _109.w = _103 - _109.x;
                                    }
                                }
                                var l = _106.x - _109.x
                                  , t = _106.y - _109.y
                                  , r = l + _106.w - _109.w
                                  , bot = t + _106.h - _109.h;
                                var s, old;
                                if (r * l > 0 && (!!el.scrollLeft || el == _105 || el.scrollWidth > el.offsetHeight)) {
                                    s = Math[l < 0 ? "max" : "min"](l, r);
                                    if (rtl && ((isIE == 8 && !_102) || has("trident") >= 5)) {
                                        s = -s;
                                    }
                                    old = el.scrollLeft;
                                    _108(el, s, 0);
                                    s = el.scrollLeft - old;
                                    _106.x -= s;
                                }
                                if (bot * t > 0 && (!!el.scrollTop || el == _105 || el.scrollHeight > el.offsetHeight)) {
                                    s = Math.ceil(Math[t < 0 ? "max" : "min"](t, bot));
                                    old = el.scrollTop;
                                    _108(el, 0, s);
                                    s = el.scrollTop - old;
                                    _106.y -= s;
                                }
                                el = (el != _105) && !_10a && el.parentNode;
                            }
                        } catch (error) {
                            console.error("scrollIntoView: " + error);
                            node.scrollIntoView(false);
                        }
                    }
                };
                1 && _f4.setObject("dojo.window", _fe);
                return _fe;
            });
        },
        "dojo/dnd/Moveable": function() {
            define(["../_base/array", "../_base/declare", "../_base/lang", "../dom", "../dom-class", "../Evented", "../has", "../on", "../topic", "../touch", "./common", "./Mover", "../_base/window"], function(_10d, _10e, lang, dom, _10f, _110, has, on, _111, _112, dnd, _113, win) {
                var _114;
                var _115 = function() {};
                function _116() {
                    if ("touchAction"in document.body.style) {
                        _114 = "touchAction";
                    } else {
                        if ("msTouchAction"in document.body.style) {
                            _114 = "msTouchAction";
                        }
                    }
                    _115 = function _115(node, _117) {
                        node.style[_114] = _117;
                    }
                    ;
                    _115(arguments[0], arguments[1]);
                }
                ;if (has("touch-action")) {
                    _115 = _116;
                }
                var _118 = _10e("dojo.dnd.Moveable", [_110], {
                    handle: "",
                    delay: 0,
                    skip: false,
                    constructor: function(node, _119) {
                        this.node = dom.byId(node);
                        _115(this.node, "none");
                        if (!_119) {
                            _119 = {};
                        }
                        this.handle = _119.handle ? dom.byId(_119.handle) : null;
                        if (!this.handle) {
                            this.handle = this.node;
                        }
                        this.delay = _119.delay > 0 ? _119.delay : 0;
                        this.skip = _119.skip;
                        this.mover = _119.mover ? _119.mover : _113;
                        this.events = [on(this.handle, _112.press, lang.hitch(this, "onMouseDown")), on(this.handle, "dragstart", lang.hitch(this, "onSelectStart")), on(this.handle, "selectstart", lang.hitch(this, "onSelectStart"))];
                    },
                    markupFactory: function(_11a, node, Ctor) {
                        return new Ctor(node,_11a);
                    },
                    destroy: function() {
                        _10d.forEach(this.events, function(_11b) {
                            _11b.remove();
                        });
                        _115(this.node, "");
                        this.events = this.node = this.handle = null;
                    },
                    onMouseDown: function(e) {
                        if (this.skip && dnd.isFormElement(e)) {
                            return;
                        }
                        if (this.delay) {
                            this.events.push(on(this.handle, _112.move, lang.hitch(this, "onMouseMove")), on(this.handle.ownerDocument, _112.release, lang.hitch(this, "onMouseUp")));
                            this._lastX = e.pageX;
                            this._lastY = e.pageY;
                        } else {
                            this.onDragDetected(e);
                        }
                        e.stopPropagation();
                        e.preventDefault();
                    },
                    onMouseMove: function(e) {
                        if (Math.abs(e.pageX - this._lastX) > this.delay || Math.abs(e.pageY - this._lastY) > this.delay) {
                            this.onMouseUp(e);
                            this.onDragDetected(e);
                        }
                        e.stopPropagation();
                        e.preventDefault();
                    },
                    onMouseUp: function(e) {
                        for (var i = 0; i < 2; ++i) {
                            this.events.pop().remove();
                        }
                        e.stopPropagation();
                        e.preventDefault();
                    },
                    onSelectStart: function(e) {
                        if (!this.skip || !dnd.isFormElement(e)) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                    },
                    onDragDetected: function(e) {
                        new this.mover(this.node,e,this);
                    },
                    onMoveStart: function(_11c) {
                        _111.publish("/dnd/move/start", _11c);
                        _10f.add(win.body(), "dojoMove");
                        _10f.add(this.node, "dojoMoveItem");
                    },
                    onMoveStop: function(_11d) {
                        _111.publish("/dnd/move/stop", _11d);
                        _10f.remove(win.body(), "dojoMove");
                        _10f.remove(this.node, "dojoMoveItem");
                    },
                    onFirstMove: function() {},
                    onMove: function(_11e, _11f) {
                        this.onMoving(_11e, _11f);
                        var s = _11e.node.style;
                        s.left = _11f.l + "px";
                        s.top = _11f.t + "px";
                        this.onMoved(_11e, _11f);
                    },
                    onMoving: function() {},
                    onMoved: function() {}
                });
                return _118;
            });
        },
        "dojo/dnd/common": function() {
            define(["../sniff", "../_base/kernel", "../_base/lang", "../dom"], function(has, _120, lang, dom) {
                var _121 = lang.getObject("dojo.dnd", true);
                _121.getCopyKeyState = function(evt) {
                    return evt[has("mac") ? "metaKey" : "ctrlKey"];
                }
                ;
                _121._uniqueId = 0;
                _121.getUniqueId = function() {
                    var id;
                    do {
                        id = _120._scopeName + "Unique" + (++_121._uniqueId);
                    } while (dom.byId(id));return id;
                }
                ;
                _121._empty = {};
                _121.isFormElement = function(e) {
                    var t = e.target;
                    if (t.nodeType == 3) {
                        t = t.parentNode;
                    }
                    return " a button textarea input select option ".indexOf(" " + t.tagName.toLowerCase() + " ") >= 0;
                }
                ;
                return _121;
            });
        },
        "dojo/dnd/Mover": function() {
            define(["../_base/array", "../_base/declare", "../_base/lang", "../sniff", "../_base/window", "../dom", "../dom-geometry", "../dom-style", "../Evented", "../on", "../touch", "./common", "./autoscroll"], function(_122, _123, lang, has, win, dom, _124, _125, _126, on, _127, dnd, _128) {
                return _123("dojo.dnd.Mover", [_126], {
                    constructor: function(node, e, host) {
                        this.node = dom.byId(node);
                        this.marginBox = {
                            l: e.pageX,
                            t: e.pageY
                        };
                        this.mouseButton = e.button;
                        var h = (this.host = host)
                          , d = node.ownerDocument;
                        function _129(e) {
                            e.preventDefault();
                            e.stopPropagation();
                        }
                        ;this.events = [on(d, _127.move, lang.hitch(this, "onFirstMove")), on(d, _127.move, lang.hitch(this, "onMouseMove")), on(d, _127.release, lang.hitch(this, "onMouseUp")), on(d, "dragstart", _129), on(d.body, "selectstart", _129)];
                        _128.autoScrollStart(d);
                        if (h && h.onMoveStart) {
                            h.onMoveStart(this);
                        }
                    },
                    onMouseMove: function(e) {
                        _128.autoScroll(e);
                        var m = this.marginBox;
                        this.host.onMove(this, {
                            l: m.l + e.pageX,
                            t: m.t + e.pageY
                        }, e);
                        e.preventDefault();
                        e.stopPropagation();
                    },
                    onMouseUp: function(e) {
                        if (has("webkit") && has("mac") && this.mouseButton == 2 ? e.button == 0 : this.mouseButton == e.button) {
                            this.destroy();
                        }
                        e.preventDefault();
                        e.stopPropagation();
                    },
                    onFirstMove: function(e) {
                        var s = this.node.style, l, t, h = this.host;
                        switch (s.position) {
                        case "relative":
                        case "absolute":
                            l = Math.round(parseFloat(s.left)) || 0;
                            t = Math.round(parseFloat(s.top)) || 0;
                            break;
                        default:
                            s.position = "absolute";
                            var m = _124.getMarginBox(this.node);
                            var b = win.doc.body;
                            var bs = _125.getComputedStyle(b);
                            var bm = _124.getMarginBox(b, bs);
                            var bc = _124.getContentBox(b, bs);
                            l = m.l - (bc.l - bm.l);
                            t = m.t - (bc.t - bm.t);
                            break;
                        }
                        this.marginBox.l = l - this.marginBox.l;
                        this.marginBox.t = t - this.marginBox.t;
                        if (h && h.onFirstMove) {
                            h.onFirstMove(this, e);
                        }
                        this.events.shift().remove();
                    },
                    destroy: function() {
                        _122.forEach(this.events, function(_12a) {
                            _12a.remove();
                        });
                        var h = this.host;
                        if (h && h.onMoveStop) {
                            h.onMoveStop(this);
                        }
                        this.events = this.node = this.host = null;
                    }
                });
            });
        },
        "dojo/dnd/autoscroll": function() {
            define(["../_base/lang", "../sniff", "../_base/window", "../dom-geometry", "../dom-style", "../window"], function(lang, has, win, _12b, _12c, _12d) {
                var _12e = {};
                lang.setObject("dojo.dnd.autoscroll", _12e);
                _12e.getViewport = _12d.getBox;
                _12e.V_TRIGGER_AUTOSCROLL = 32;
                _12e.H_TRIGGER_AUTOSCROLL = 32;
                _12e.V_AUTOSCROLL_VALUE = 16;
                _12e.H_AUTOSCROLL_VALUE = 16;
                var _12f, doc = win.doc, _130 = Infinity, _131 = Infinity;
                _12e.autoScrollStart = function(d) {
                    doc = d;
                    _12f = _12d.getBox(doc);
                    var html = win.body(doc).parentNode;
                    _130 = Math.max(html.scrollHeight - _12f.h, 0);
                    _131 = Math.max(html.scrollWidth - _12f.w, 0);
                }
                ;
                _12e.autoScroll = function(e) {
                    var v = _12f || _12d.getBox(doc)
                      , html = win.body(doc).parentNode
                      , dx = 0
                      , dy = 0;
                    if (e.clientX < _12e.H_TRIGGER_AUTOSCROLL) {
                        dx = -_12e.H_AUTOSCROLL_VALUE;
                    } else {
                        if (e.clientX > v.w - _12e.H_TRIGGER_AUTOSCROLL) {
                            dx = Math.min(_12e.H_AUTOSCROLL_VALUE, _131 - html.scrollLeft);
                        }
                    }
                    if (e.clientY < _12e.V_TRIGGER_AUTOSCROLL) {
                        dy = -_12e.V_AUTOSCROLL_VALUE;
                    } else {
                        if (e.clientY > v.h - _12e.V_TRIGGER_AUTOSCROLL) {
                            dy = Math.min(_12e.V_AUTOSCROLL_VALUE, _130 - html.scrollTop);
                        }
                    }
                    window.scrollBy(dx, dy);
                }
                ;
                _12e._validNodes = {
                    "div": 1,
                    "p": 1,
                    "td": 1
                };
                _12e._validOverflow = {
                    "auto": 1,
                    "scroll": 1
                };
                _12e.autoScrollNodes = function(e) {
                    var b, t, w, h, rx, ry, dx = 0, dy = 0, _132, _133;
                    for (var n = e.target; n; ) {
                        if (n.nodeType == 1 && (n.tagName.toLowerCase()in _12e._validNodes)) {
                            var s = _12c.getComputedStyle(n)
                              , _134 = (s.overflowX.toLowerCase()in _12e._validOverflow)
                              , _135 = (s.overflowY.toLowerCase()in _12e._validOverflow);
                            if (_134 || _135) {
                                b = _12b.getContentBox(n, s);
                                t = _12b.position(n, true);
                            }
                            if (_134) {
                                w = Math.min(_12e.H_TRIGGER_AUTOSCROLL, b.w / 2);
                                rx = e.pageX - t.x;
                                if (has("webkit") || has("opera")) {
                                    rx += win.body().scrollLeft;
                                }
                                dx = 0;
                                if (rx > 0 && rx < b.w) {
                                    if (rx < w) {
                                        dx = -w;
                                    } else {
                                        if (rx > b.w - w) {
                                            dx = w;
                                        }
                                    }
                                    _132 = n.scrollLeft;
                                    n.scrollLeft = n.scrollLeft + dx;
                                }
                            }
                            if (_135) {
                                h = Math.min(_12e.V_TRIGGER_AUTOSCROLL, b.h / 2);
                                ry = e.pageY - t.y;
                                if (has("webkit") || has("opera")) {
                                    ry += win.body().scrollTop;
                                }
                                dy = 0;
                                if (ry > 0 && ry < b.h) {
                                    if (ry < h) {
                                        dy = -h;
                                    } else {
                                        if (ry > b.h - h) {
                                            dy = h;
                                        }
                                    }
                                    _133 = n.scrollTop;
                                    n.scrollTop = n.scrollTop + dy;
                                }
                            }
                            if (dx || dy) {
                                return;
                            }
                        }
                        try {
                            n = n.parentNode;
                        } catch (x) {
                            n = null;
                        }
                    }
                    _12e.autoScroll(e);
                }
                ;
                return _12e;
            });
        },
        "dojo/dnd/TimedMoveable": function() {
            define(["../_base/declare", "./Moveable"], function(_136, _137) {
                var _138 = _137.prototype.onMove;
                return _136("dojo.dnd.TimedMoveable", _137, {
                    timeout: 40,
                    constructor: function(node, _139) {
                        if (!_139) {
                            _139 = {};
                        }
                        if (_139.timeout && typeof _139.timeout == "number" && _139.timeout >= 0) {
                            this.timeout = _139.timeout;
                        }
                    },
                    onMoveStop: function(_13a) {
                        if (_13a._timer) {
                            clearTimeout(_13a._timer);
                            _138.call(this, _13a, _13a._leftTop);
                        }
                        _137.prototype.onMoveStop.apply(this, arguments);
                    },
                    onMove: function(_13b, _13c) {
                        _13b._leftTop = _13c;
                        if (!_13b._timer) {
                            var _13d = this;
                            _13b._timer = setTimeout(function() {
                                _13b._timer = null;
                                _138.call(_13d, _13b, _13b._leftTop);
                            }, this.timeout);
                        }
                    }
                });
            });
        },
        "dijit/focus": function() {
            define(["dojo/aspect", "dojo/_base/declare", "dojo/dom", "dojo/dom-attr", "dojo/dom-class", "dojo/dom-construct", "dojo/Evented", "dojo/_base/lang", "dojo/on", "dojo/domReady", "dojo/sniff", "dojo/Stateful", "dojo/_base/window", "dojo/window", "./a11y", "./registry", "./main"], function(_13e, _13f, dom, _140, _141, _142, _143, lang, on, _144, has, _145, win, _146, a11y, _147, _148) {
                var _149;
                var _14a;
                var _14b = _13f([_145, _143], {
                    curNode: null,
                    activeStack: [],
                    constructor: function() {
                        var _14c = lang.hitch(this, function(node) {
                            if (dom.isDescendant(this.curNode, node)) {
                                this.set("curNode", null);
                            }
                            if (dom.isDescendant(this.prevNode, node)) {
                                this.set("prevNode", null);
                            }
                        });
                        _13e.before(_142, "empty", _14c);
                        _13e.before(_142, "destroy", _14c);
                    },
                    registerIframe: function(_14d) {
                        return this.registerWin(_14d.contentWindow, _14d);
                    },
                    registerWin: function(_14e, _14f) {
                        var _150 = this
                          , body = _14e.document && _14e.document.body;
                        if (body) {
                            var _151 = has("pointer-events") ? "pointerdown" : has("MSPointer") ? "MSPointerDown" : has("touch-events") ? "mousedown, touchstart" : "mousedown";
                            var mdh = on(_14e.document, _151, function(evt) {
                                if (evt && evt.target && evt.target.parentNode == null) {
                                    return;
                                }
                                _150._onTouchNode(_14f || evt.target, "mouse");
                            });
                            var fih = on(body, "focusin", function(evt) {
                                if (!evt.target.tagName) {
                                    return;
                                }
                                var tag = evt.target.tagName.toLowerCase();
                                if (tag == "#document" || tag == "body") {
                                    return;
                                }
                                if (a11y.isFocusable(evt.target)) {
                                    _150._onFocusNode(_14f || evt.target);
                                } else {
                                    _150._onTouchNode(_14f || evt.target);
                                }
                            });
                            var foh = on(body, "focusout", function(evt) {
                                _150._onBlurNode(_14f || evt.target);
                            });
                            return {
                                remove: function() {
                                    mdh.remove();
                                    fih.remove();
                                    foh.remove();
                                    mdh = fih = foh = null;
                                    body = null;
                                }
                            };
                        }
                    },
                    _onBlurNode: function(node) {
                        var now = (new Date()).getTime();
                        if (now < _149 + 100) {
                            return;
                        }
                        if (this._clearFocusTimer) {
                            clearTimeout(this._clearFocusTimer);
                        }
                        this._clearFocusTimer = setTimeout(lang.hitch(this, function() {
                            this.set("prevNode", this.curNode);
                            this.set("curNode", null);
                        }), 0);
                        if (this._clearActiveWidgetsTimer) {
                            clearTimeout(this._clearActiveWidgetsTimer);
                        }
                        if (now < _14a + 100) {
                            return;
                        }
                        this._clearActiveWidgetsTimer = setTimeout(lang.hitch(this, function() {
                            delete this._clearActiveWidgetsTimer;
                            this._setStack([]);
                        }), 0);
                    },
                    _onTouchNode: function(node, by) {
                        _14a = (new Date()).getTime();
                        if (this._clearActiveWidgetsTimer) {
                            clearTimeout(this._clearActiveWidgetsTimer);
                            delete this._clearActiveWidgetsTimer;
                        }
                        if (_141.contains(node, "dijitPopup")) {
                            node = node.firstChild;
                        }
                        var _152 = [];
                        try {
                            while (node) {
                                var _153 = _140.get(node, "dijitPopupParent");
                                if (_153) {
                                    node = _147.byId(_153).domNode;
                                } else {
                                    if (node.tagName && node.tagName.toLowerCase() == "body") {
                                        if (node === win.body()) {
                                            break;
                                        }
                                        node = _146.get(node.ownerDocument).frameElement;
                                    } else {
                                        var id = node.getAttribute && node.getAttribute("widgetId")
                                          , _154 = id && _147.byId(id);
                                        if (_154 && !(by == "mouse" && _154.get("disabled"))) {
                                            _152.unshift(id);
                                        }
                                        node = node.parentNode;
                                    }
                                }
                            }
                        } catch (e) {}
                        this._setStack(_152, by);
                    },
                    _onFocusNode: function(node) {
                        if (!node) {
                            return;
                        }
                        if (node.nodeType == 9) {
                            return;
                        }
                        _149 = (new Date()).getTime();
                        if (this._clearFocusTimer) {
                            clearTimeout(this._clearFocusTimer);
                            delete this._clearFocusTimer;
                        }
                        this._onTouchNode(node);
                        if (node == this.curNode) {
                            return;
                        }
                        this.set("prevNode", this.curNode);
                        this.set("curNode", node);
                    },
                    _setStack: function(_155, by) {
                        var _156 = this.activeStack
                          , _157 = _156.length - 1
                          , _158 = _155.length - 1;
                        if (_155[_158] == _156[_157]) {
                            return;
                        }
                        this.set("activeStack", _155);
                        var _159, i;
                        for (i = _157; i >= 0 && _156[i] != _155[i]; i--) {
                            _159 = _147.byId(_156[i]);
                            if (_159) {
                                _159._hasBeenBlurred = true;
                                _159.set("focused", false);
                                if (_159._focusManager == this) {
                                    _159._onBlur(by);
                                }
                                this.emit("widget-blur", _159, by);
                            }
                        }
                        for (i++; i <= _158; i++) {
                            _159 = _147.byId(_155[i]);
                            if (_159) {
                                _159.set("focused", true);
                                if (_159._focusManager == this) {
                                    _159._onFocus(by);
                                }
                                this.emit("widget-focus", _159, by);
                            }
                        }
                    },
                    focus: function(node) {
                        if (node) {
                            try {
                                node.focus();
                            } catch (e) {}
                        }
                    }
                });
                var _15a = new _14b();
                _144(function() {
                    var _15b = _15a.registerWin(_146.get(document));
                    if (has("ie")) {
                        on(window, "unload", function() {
                            if (_15b) {
                                _15b.remove();
                                _15b = null;
                            }
                        });
                    }
                });
                _148.focus = function(node) {
                    _15a.focus(node);
                }
                ;
                for (var attr in _15a) {
                    if (!/^_/.test(attr)) {
                        _148.focus[attr] = typeof _15a[attr] == "function" ? lang.hitch(_15a, attr) : _15a[attr];
                    }
                }
                _15a.watch(function(attr, _15c, _15d) {
                    _148.focus[attr] = _15d;
                });
                return _15a;
            });
        },
        "dojo/Stateful": function() {
            define(["./_base/declare", "./_base/lang", "./_base/array", "./when"], function(_15e, lang, _15f, when) {
                return _15e("dojo.Stateful", null, {
                    _attrPairNames: {},
                    _getAttrNames: function(name) {
                        var apn = this._attrPairNames;
                        if (apn[name]) {
                            return apn[name];
                        }
                        return (apn[name] = {
                            s: "_" + name + "Setter",
                            g: "_" + name + "Getter"
                        });
                    },
                    postscript: function(_160) {
                        if (_160) {
                            this.set(_160);
                        }
                    },
                    _get: function(name, _161) {
                        return typeof this[_161.g] === "function" ? this[_161.g]() : this[name];
                    },
                    get: function(name) {
                        return this._get(name, this._getAttrNames(name));
                    },
                    set: function(name, _162) {
                        if (typeof name === "object") {
                            for (var x in name) {
                                if (name.hasOwnProperty(x) && x != "_watchCallbacks") {
                                    this.set(x, name[x]);
                                }
                            }
                            return this;
                        }
                        var _163 = this._getAttrNames(name), _164 = this._get(name, _163), _165 = this[_163.s], _166;
                        if (typeof _165 === "function") {
                            _166 = _165.apply(this, Array.prototype.slice.call(arguments, 1));
                        } else {
                            this[name] = _162;
                        }
                        if (this._watchCallbacks) {
                            var self = this;
                            when(_166, function() {
                                self._watchCallbacks(name, _164, _162);
                            });
                        }
                        return this;
                    },
                    _changeAttrValue: function(name, _167) {
                        var _168 = this.get(name);
                        this[name] = _167;
                        if (this._watchCallbacks) {
                            this._watchCallbacks(name, _168, _167);
                        }
                        return this;
                    },
                    watch: function(name, _169) {
                        var _16a = this._watchCallbacks;
                        if (!_16a) {
                            var self = this;
                            _16a = this._watchCallbacks = function(name, _16b, _16c, _16d) {
                                var _16e = function(_16f) {
                                    if (_16f) {
                                        _16f = _16f.slice();
                                        for (var i = 0, l = _16f.length; i < l; i++) {
                                            _16f[i].call(self, name, _16b, _16c);
                                        }
                                    }
                                };
                                _16e(_16a["_" + name]);
                                if (!_16d) {
                                    _16e(_16a["*"]);
                                }
                            }
                            ;
                        }
                        if (!_169 && typeof name === "function") {
                            _169 = name;
                            name = "*";
                        } else {
                            name = "_" + name;
                        }
                        var _170 = _16a[name];
                        if (typeof _170 !== "object") {
                            _170 = _16a[name] = [];
                        }
                        _170.push(_169);
                        var _171 = {};
                        _171.unwatch = _171.remove = function() {
                            var _172 = _15f.indexOf(_170, _169);
                            if (_172 > -1) {
                                _170.splice(_172, 1);
                            }
                        }
                        ;
                        return _171;
                    }
                });
            });
        },
        "dijit/a11y": function() {
            define(["dojo/_base/array", "dojo/dom", "dojo/dom-attr", "dojo/dom-style", "dojo/_base/lang", "dojo/sniff", "./main"], function(_173, dom, _174, _175, lang, has, _176) {
                var _177;
                var a11y = {
                    _isElementShown: function(elem) {
                        var s = _175.get(elem);
                        return (s.visibility != "hidden") && (s.visibility != "collapsed") && (s.display != "none") && (_174.get(elem, "type") != "hidden");
                    },
                    hasDefaultTabStop: function(elem) {
                        switch (elem.nodeName.toLowerCase()) {
                        case "a":
                            return _174.has(elem, "href");
                        case "area":
                        case "button":
                        case "input":
                        case "object":
                        case "select":
                        case "textarea":
                            return true;
                        case "iframe":
                            var body;
                            try {
                                var _178 = elem.contentDocument;
                                if ("designMode"in _178 && _178.designMode == "on") {
                                    return true;
                                }
                                body = _178.body;
                            } catch (e1) {
                                try {
                                    body = elem.contentWindow.document.body;
                                } catch (e2) {
                                    return false;
                                }
                            }
                            return body && (body.contentEditable == "true" || (body.firstChild && body.firstChild.contentEditable == "true"));
                        default:
                            return elem.contentEditable == "true";
                        }
                    },
                    effectiveTabIndex: function(elem) {
                        if (_174.get(elem, "disabled")) {
                            return _177;
                        } else {
                            if (_174.has(elem, "tabIndex")) {
                                return +_174.get(elem, "tabIndex");
                            } else {
                                return a11y.hasDefaultTabStop(elem) ? 0 : _177;
                            }
                        }
                    },
                    isTabNavigable: function(elem) {
                        return a11y.effectiveTabIndex(elem) >= 0;
                    },
                    isFocusable: function(elem) {
                        return a11y.effectiveTabIndex(elem) >= -1;
                    },
                    _getTabNavigable: function(root) {
                        var _179, last, _17a, _17b, _17c, _17d, _17e = {};
                        function _17f(node) {
                            return node && node.tagName.toLowerCase() == "input" && node.type && node.type.toLowerCase() == "radio" && node.name && node.name.toLowerCase();
                        }
                        ;var _180 = a11y._isElementShown
                          , _181 = a11y.effectiveTabIndex;
                        var _182 = function(_183) {
                            for (var _184 = _183.firstChild; _184; _184 = _184.nextSibling) {
                                if (_184.nodeType != 1 || (has("ie") <= 9 && _184.scopeName !== "HTML") || !_180(_184)) {
                                    continue;
                                }
                                var _185 = _181(_184);
                                if (_185 >= 0) {
                                    if (_185 == 0) {
                                        if (!_179) {
                                            _179 = _184;
                                        }
                                        last = _184;
                                    } else {
                                        if (_185 > 0) {
                                            if (!_17a || _185 < _17b) {
                                                _17b = _185;
                                                _17a = _184;
                                            }
                                            if (!_17c || _185 >= _17d) {
                                                _17d = _185;
                                                _17c = _184;
                                            }
                                        }
                                    }
                                    var rn = _17f(_184);
                                    if (_174.get(_184, "checked") && rn) {
                                        _17e[rn] = _184;
                                    }
                                }
                                if (_184.nodeName.toUpperCase() != "SELECT") {
                                    _182(_184);
                                }
                            }
                        };
                        if (_180(root)) {
                            _182(root);
                        }
                        function rs(node) {
                            return _17e[_17f(node)] || node;
                        }
                        ;return {
                            first: rs(_179),
                            last: rs(last),
                            lowest: rs(_17a),
                            highest: rs(_17c)
                        };
                    },
                    getFirstInTabbingOrder: function(root, doc) {
                        var _186 = a11y._getTabNavigable(dom.byId(root, doc));
                        return _186.lowest ? _186.lowest : _186.first;
                    },
                    getLastInTabbingOrder: function(root, doc) {
                        var _187 = a11y._getTabNavigable(dom.byId(root, doc));
                        return _187.last ? _187.last : _187.highest;
                    }
                };
                1 && lang.mixin(_176, a11y);
                return a11y;
            });
        },
        "dijit/main": function() {
            define(["dojo/_base/kernel"], function(dojo) {
                return dojo.dijit;
            });
        },
        "dijit/registry": function() {
            define(["dojo/_base/array", "dojo/_base/window", "./main"], function(_188, win, _189) {
                var _18a = {}
                  , hash = {};
                var _18b = {
                    length: 0,
                    add: function(_18c) {
                        if (hash[_18c.id]) {
                            throw new Error("Tried to register widget with id==" + _18c.id + " but that id is already registered");
                        }
                        hash[_18c.id] = _18c;
                        this.length++;
                    },
                    remove: function(id) {
                        if (hash[id]) {
                            delete hash[id];
                            this.length--;
                        }
                    },
                    byId: function(id) {
                        return typeof id == "string" ? hash[id] : id;
                    },
                    byNode: function(node) {
                        return hash[node.getAttribute("widgetId")];
                    },
                    toArray: function() {
                        var ar = [];
                        for (var id in hash) {
                            ar.push(hash[id]);
                        }
                        return ar;
                    },
                    getUniqueId: function(_18d) {
                        var id;
                        do {
                            id = _18d + "_" + (_18d in _18a ? ++_18a[_18d] : _18a[_18d] = 0);
                        } while (hash[id]);return _189._scopeName == "dijit" ? id : _189._scopeName + "_" + id;
                    },
                    findWidgets: function(root, _18e) {
                        var _18f = [];
                        function _190(root) {
                            for (var node = root.firstChild; node; node = node.nextSibling) {
                                if (node.nodeType == 1) {
                                    var _191 = node.getAttribute("widgetId");
                                    if (_191) {
                                        var _192 = hash[_191];
                                        if (_192) {
                                            _18f.push(_192);
                                        }
                                    } else {
                                        if (node !== _18e) {
                                            _190(node);
                                        }
                                    }
                                }
                            }
                        }
                        ;_190(root);
                        return _18f;
                    },
                    _destroyAll: function() {
                        _189._curFocus = null;
                        _189._prevFocus = null;
                        _189._activeStack = [];
                        _188.forEach(_18b.findWidgets(win.body()), function(_193) {
                            if (!_193._destroyed) {
                                if (_193.destroyRecursive) {
                                    _193.destroyRecursive();
                                } else {
                                    if (_193.destroy) {
                                        _193.destroy();
                                    }
                                }
                            }
                        });
                    },
                    getEnclosingWidget: function(node) {
                        while (node) {
                            var id = node.nodeType == 1 && node.getAttribute("widgetId");
                            if (id) {
                                return hash[id];
                            }
                            node = node.parentNode;
                        }
                        return null;
                    },
                    _hash: hash
                };
                _189.registry = _18b;
                return _18b;
            });
        },
        "dijit/_base/manager": function() {
            define(["dojo/_base/array", "dojo/_base/config", "dojo/_base/lang", "../registry", "../main"], function(_194, _195, lang, _196, _197) {
                var _198 = {};
                _194.forEach(["byId", "getUniqueId", "findWidgets", "_destroyAll", "byNode", "getEnclosingWidget"], function(name) {
                    _198[name] = _196[name];
                });
                lang.mixin(_198, {
                    defaultDuration: _195["defaultDuration"] || 200
                });
                lang.mixin(_197, _198);
                return _197;
            });
        },
        "dijit/_Widget": function() {
            define(["dojo/aspect", "dojo/_base/config", "dojo/_base/connect", "dojo/_base/declare", "dojo/has", "dojo/_base/kernel", "dojo/_base/lang", "dojo/query", "dojo/ready", "./registry", "./_WidgetBase", "./_OnDijitClickMixin", "./_FocusMixin", "dojo/uacss", "./hccss"], function(_199, _19a, _19b, _19c, has, _19d, lang, _19e, _19f, _1a0, _1a1, _1a2, _1a3) {
                function _1a4() {}
                ;function _1a5(_1a6) {
                    return function(obj, _1a7, _1a8, _1a9) {
                        if (obj && typeof _1a7 == "string" && obj[_1a7] == _1a4) {
                            return obj.on(_1a7.substring(2).toLowerCase(), lang.hitch(_1a8, _1a9));
                        }
                        return _1a6.apply(_19b, arguments);
                    }
                    ;
                }
                ;_199.around(_19b, "connect", _1a5);
                if (_19d.connect) {
                    _199.around(_19d, "connect", _1a5);
                }
                var _1aa = _19c("dijit._Widget", [_1a1, _1a2, _1a3], {
                    onClick: _1a4,
                    onDblClick: _1a4,
                    onKeyDown: _1a4,
                    onKeyPress: _1a4,
                    onKeyUp: _1a4,
                    onMouseDown: _1a4,
                    onMouseMove: _1a4,
                    onMouseOut: _1a4,
                    onMouseOver: _1a4,
                    onMouseLeave: _1a4,
                    onMouseEnter: _1a4,
                    onMouseUp: _1a4,
                    constructor: function(_1ab) {
                        this._toConnect = {};
                        for (var name in _1ab) {
                            if (this[name] === _1a4) {
                                this._toConnect[name.replace(/^on/, "").toLowerCase()] = _1ab[name];
                                delete _1ab[name];
                            }
                        }
                    },
                    postCreate: function() {
                        this.inherited(arguments);
                        for (var name in this._toConnect) {
                            this.on(name, this._toConnect[name]);
                        }
                        delete this._toConnect;
                    },
                    on: function(type, func) {
                        if (this[this._onMap(type)] === _1a4) {
                            return _19b.connect(this.domNode, type.toLowerCase(), this, func);
                        }
                        return this.inherited(arguments);
                    },
                    _setFocusedAttr: function(val) {
                        this._focused = val;
                        this._set("focused", val);
                    },
                    setAttribute: function(attr, _1ac) {
                        _19d.deprecated(this.declaredClass + "::setAttribute(attr, value) is deprecated. Use set() instead.", "", "2.0");
                        this.set(attr, _1ac);
                    },
                    attr: function(name, _1ad) {
                        var args = arguments.length;
                        if (args >= 2 || typeof name === "object") {
                            return this.set.apply(this, arguments);
                        } else {
                            return this.get(name);
                        }
                    },
                    getDescendants: function() {
                        _19d.deprecated(this.declaredClass + "::getDescendants() is deprecated. Use getChildren() instead.", "", "2.0");
                        return this.containerNode ? _19e("[widgetId]", this.containerNode).map(_1a0.byNode) : [];
                    },
                    _onShow: function() {
                        this.onShow();
                    },
                    onShow: function() {},
                    onHide: function() {},
                    onClose: function() {
                        return true;
                    }
                });
                if (has("dijit-legacy-requires")) {
                    _19f(0, function() {
                        var _1ae = ["dijit/_base"];
                        require(_1ae);
                    });
                }
                return _1aa;
            });
        },
        "dijit/_WidgetBase": function() {
            define(["require", "dojo/_base/array", "dojo/aspect", "dojo/_base/config", "dojo/_base/connect", "dojo/_base/declare", "dojo/dom", "dojo/dom-attr", "dojo/dom-class", "dojo/dom-construct", "dojo/dom-geometry", "dojo/dom-style", "dojo/has", "dojo/_base/kernel", "dojo/_base/lang", "dojo/on", "dojo/ready", "dojo/Stateful", "dojo/topic", "dojo/_base/window", "./Destroyable", "dojo/has!dojo-bidi?./_BidiMixin", "./registry"], function(_1af, _1b0, _1b1, _1b2, _1b3, _1b4, dom, _1b5, _1b6, _1b7, _1b8, _1b9, has, _1ba, lang, on, _1bb, _1bc, _1bd, win, _1be, _1bf, _1c0) {
                has.add("dijit-legacy-requires", !_1ba.isAsync);
                has.add("dojo-bidi", false);
                if (has("dijit-legacy-requires")) {
                    _1bb(0, function() {
                        var _1c1 = ["dijit/_base/manager"];
                        _1af(_1c1);
                    });
                }
                var _1c2 = {};
                function _1c3(obj) {
                    var ret = {};
                    for (var attr in obj) {
                        ret[attr.toLowerCase()] = true;
                    }
                    return ret;
                }
                ;function _1c4(attr) {
                    return function(val) {
                        _1b5[val ? "set" : "remove"](this.domNode, attr, val);
                        this._set(attr, val);
                    }
                    ;
                }
                ;function _1c5(a, b) {
                    return a === b || (a !== a && b !== b);
                }
                ;var _1c6 = _1b4("dijit._WidgetBase", [_1bc, _1be], {
                    id: "",
                    _setIdAttr: "domNode",
                    lang: "",
                    _setLangAttr: _1c4("lang"),
                    dir: "",
                    _setDirAttr: _1c4("dir"),
                    "class": "",
                    _setClassAttr: {
                        node: "domNode",
                        type: "class"
                    },
                    _setTypeAttr: null,
                    style: "",
                    title: "",
                    tooltip: "",
                    baseClass: "",
                    srcNodeRef: null,
                    domNode: null,
                    containerNode: null,
                    ownerDocument: null,
                    _setOwnerDocumentAttr: function(val) {
                        this._set("ownerDocument", val);
                    },
                    attributeMap: {},
                    _blankGif: _1b2.blankGif || _1af.toUrl("dojo/resources/blank.gif"),
                    textDir: "",
                    _introspect: function() {
                        var ctor = this.constructor;
                        if (!ctor._setterAttrs) {
                            var _1c7 = ctor.prototype
                              , _1c8 = ctor._setterAttrs = []
                              , _1c9 = (ctor._onMap = {});
                            for (var name in _1c7.attributeMap) {
                                _1c8.push(name);
                            }
                            for (name in _1c7) {
                                if (/^on/.test(name)) {
                                    _1c9[name.substring(2).toLowerCase()] = name;
                                }
                                if (/^_set[A-Z](.*)Attr$/.test(name)) {
                                    name = name.charAt(4).toLowerCase() + name.substr(5, name.length - 9);
                                    if (!_1c7.attributeMap || !(name in _1c7.attributeMap)) {
                                        _1c8.push(name);
                                    }
                                }
                            }
                        }
                    },
                    postscript: function(_1ca, _1cb) {
                        this.create(_1ca, _1cb);
                    },
                    create: function(_1cc, _1cd) {
                        this._introspect();
                        this.srcNodeRef = dom.byId(_1cd);
                        this._connects = [];
                        this._supportingWidgets = [];
                        if (this.srcNodeRef && this.srcNodeRef.id && (typeof this.srcNodeRef.id == "string")) {
                            this.id = this.srcNodeRef.id;
                        }
                        if (_1cc) {
                            this.params = _1cc;
                            lang.mixin(this, _1cc);
                        }
                        this.postMixInProperties();
                        if (!this.id) {
                            this.id = _1c0.getUniqueId(this.declaredClass.replace(/\./g, "_"));
                            if (this.params) {
                                delete this.params.id;
                            }
                        }
                        this.ownerDocument = this.ownerDocument || (this.srcNodeRef ? this.srcNodeRef.ownerDocument : document);
                        this.ownerDocumentBody = win.body(this.ownerDocument);
                        _1c0.add(this);
                        this.buildRendering();
                        var _1ce;
                        if (this.domNode) {
                            this._applyAttributes();
                            var _1cf = this.srcNodeRef;
                            if (_1cf && _1cf.parentNode && this.domNode !== _1cf) {
                                _1cf.parentNode.replaceChild(this.domNode, _1cf);
                                _1ce = true;
                            }
                            this.domNode.setAttribute("widgetId", this.id);
                        }
                        this.postCreate();
                        if (_1ce) {
                            delete this.srcNodeRef;
                        }
                        this._created = true;
                    },
                    _applyAttributes: function() {
                        var _1d0 = {};
                        for (var key in this.params || {}) {
                            _1d0[key] = this._get(key);
                        }
                        _1b0.forEach(this.constructor._setterAttrs, function(key) {
                            if (!(key in _1d0)) {
                                var val = this._get(key);
                                if (val) {
                                    this.set(key, val);
                                }
                            }
                        }, this);
                        for (key in _1d0) {
                            this.set(key, _1d0[key]);
                        }
                    },
                    postMixInProperties: function() {},
                    buildRendering: function() {
                        if (!this.domNode) {
                            this.domNode = this.srcNodeRef || this.ownerDocument.createElement("div");
                        }
                        if (this.baseClass) {
                            var _1d1 = this.baseClass.split(" ");
                            if (!this.isLeftToRight()) {
                                _1d1 = _1d1.concat(_1b0.map(_1d1, function(name) {
                                    return name + "Rtl";
                                }));
                            }
                            _1b6.add(this.domNode, _1d1);
                        }
                    },
                    postCreate: function() {},
                    startup: function() {
                        if (this._started) {
                            return;
                        }
                        this._started = true;
                        _1b0.forEach(this.getChildren(), function(obj) {
                            if (!obj._started && !obj._destroyed && lang.isFunction(obj.startup)) {
                                obj.startup();
                                obj._started = true;
                            }
                        });
                    },
                    destroyRecursive: function(_1d2) {
                        this._beingDestroyed = true;
                        this.destroyDescendants(_1d2);
                        this.destroy(_1d2);
                    },
                    destroy: function(_1d3) {
                        this._beingDestroyed = true;
                        this.uninitialize();
                        function _1d4(w) {
                            if (w.destroyRecursive) {
                                w.destroyRecursive(_1d3);
                            } else {
                                if (w.destroy) {
                                    w.destroy(_1d3);
                                }
                            }
                        }
                        ;_1b0.forEach(this._connects, lang.hitch(this, "disconnect"));
                        _1b0.forEach(this._supportingWidgets, _1d4);
                        if (this.domNode) {
                            _1b0.forEach(_1c0.findWidgets(this.domNode, this.containerNode), _1d4);
                        }
                        this.destroyRendering(_1d3);
                        _1c0.remove(this.id);
                        this._destroyed = true;
                    },
                    destroyRendering: function(_1d5) {
                        if (this.bgIframe) {
                            this.bgIframe.destroy(_1d5);
                            delete this.bgIframe;
                        }
                        if (this.domNode) {
                            if (_1d5) {
                                _1b5.remove(this.domNode, "widgetId");
                            } else {
                                _1b7.destroy(this.domNode);
                            }
                            delete this.domNode;
                        }
                        if (this.srcNodeRef) {
                            if (!_1d5) {
                                _1b7.destroy(this.srcNodeRef);
                            }
                            delete this.srcNodeRef;
                        }
                    },
                    destroyDescendants: function(_1d6) {
                        _1b0.forEach(this.getChildren(), function(_1d7) {
                            if (_1d7.destroyRecursive) {
                                _1d7.destroyRecursive(_1d6);
                            }
                        });
                    },
                    uninitialize: function() {
                        return false;
                    },
                    _setStyleAttr: function(_1d8) {
                        var _1d9 = this.domNode;
                        if (lang.isObject(_1d8)) {
                            _1b9.set(_1d9, _1d8);
                        } else {
                            if (_1d9.style.cssText) {
                                _1d9.style.cssText += "; " + _1d8;
                            } else {
                                _1d9.style.cssText = _1d8;
                            }
                        }
                        this._set("style", _1d8);
                    },
                    _attrToDom: function(attr, _1da, _1db) {
                        _1db = arguments.length >= 3 ? _1db : this.attributeMap[attr];
                        _1b0.forEach(lang.isArray(_1db) ? _1db : [_1db], function(_1dc) {
                            var _1dd = this[_1dc.node || _1dc || "domNode"];
                            var type = _1dc.type || "attribute";
                            switch (type) {
                            case "attribute":
                                if (lang.isFunction(_1da)) {
                                    _1da = lang.hitch(this, _1da);
                                }
                                var _1de = _1dc.attribute ? _1dc.attribute : (/^on[A-Z][a-zA-Z]*$/.test(attr) ? attr.toLowerCase() : attr);
                                if (_1dd.tagName) {
                                    _1b5.set(_1dd, _1de, _1da);
                                } else {
                                    _1dd.set(_1de, _1da);
                                }
                                break;
                            case "innerText":
                                _1dd.innerHTML = "";
                                _1dd.appendChild(this.ownerDocument.createTextNode(_1da));
                                break;
                            case "textContent":
                                _1dd.textContent = _1da;
                                break;
                            case "innerHTML":
                                _1dd.innerHTML = _1da;
                                break;
                            case "class":
                                _1b6.replace(_1dd, _1da, this[attr]);
                                break;
                            case "toggleClass":
                                _1b6.toggle(_1dd, _1dc.className || attr, _1da);
                                break;
                            }
                        }, this);
                    },
                    get: function(name) {
                        var _1df = this._getAttrNames(name);
                        return this[_1df.g] ? this[_1df.g]() : this._get(name);
                    },
                    set: function(name, _1e0) {
                        if (typeof name === "object") {
                            for (var x in name) {
                                this.set(x, name[x]);
                            }
                            return this;
                        }
                        var _1e1 = this._getAttrNames(name)
                          , _1e2 = this[_1e1.s];
                        if (lang.isFunction(_1e2)) {
                            var _1e3 = _1e2.apply(this, Array.prototype.slice.call(arguments, 1));
                        } else {
                            var _1e4 = this.focusNode && !lang.isFunction(this.focusNode) ? "focusNode" : "domNode"
                              , tag = this[_1e4] && this[_1e4].tagName
                              , _1e5 = tag && (_1c2[tag] || (_1c2[tag] = _1c3(this[_1e4])))
                              , map = name in this.attributeMap ? this.attributeMap[name] : _1e1.s in this ? this[_1e1.s] : ((_1e5 && _1e1.l in _1e5 && typeof _1e0 != "function") || /^aria-|^data-|^role$/.test(name)) ? _1e4 : null;
                            if (map != null) {
                                this._attrToDom(name, _1e0, map);
                            }
                            this._set(name, _1e0);
                        }
                        return _1e3 || this;
                    },
                    _attrPairNames: {},
                    _getAttrNames: function(name) {
                        var apn = this._attrPairNames;
                        if (apn[name]) {
                            return apn[name];
                        }
                        var uc = name.replace(/^[a-z]|-[a-zA-Z]/g, function(c) {
                            return c.charAt(c.length - 1).toUpperCase();
                        });
                        return (apn[name] = {
                            n: name + "Node",
                            s: "_set" + uc + "Attr",
                            g: "_get" + uc + "Attr",
                            l: uc.toLowerCase()
                        });
                    },
                    _set: function(name, _1e6) {
                        var _1e7 = this[name];
                        this[name] = _1e6;
                        if (this._created && !_1c5(_1e7, _1e6)) {
                            if (this._watchCallbacks) {
                                this._watchCallbacks(name, _1e7, _1e6);
                            }
                            this.emit("attrmodified-" + name, {
                                detail: {
                                    prevValue: _1e7,
                                    newValue: _1e6
                                }
                            });
                        }
                    },
                    _get: function(name) {
                        return this[name];
                    },
                    emit: function(type, _1e8, _1e9) {
                        _1e8 = _1e8 || {};
                        if (_1e8.bubbles === undefined) {
                            _1e8.bubbles = true;
                        }
                        if (_1e8.cancelable === undefined) {
                            _1e8.cancelable = true;
                        }
                        if (!_1e8.detail) {
                            _1e8.detail = {};
                        }
                        _1e8.detail.widget = this;
                        var ret, _1ea = this["on" + type];
                        if (_1ea) {
                            ret = _1ea.apply(this, _1e9 ? _1e9 : [_1e8]);
                        }
                        if (this._started && !this._beingDestroyed) {
                            on.emit(this.domNode, type.toLowerCase(), _1e8);
                        }
                        return ret;
                    },
                    on: function(type, func) {
                        var _1eb = this._onMap(type);
                        if (_1eb) {
                            return _1b1.after(this, _1eb, func, true);
                        }
                        return this.own(on(this.domNode, type, func))[0];
                    },
                    _onMap: function(type) {
                        var ctor = this.constructor
                          , map = ctor._onMap;
                        if (!map) {
                            map = (ctor._onMap = {});
                            for (var attr in ctor.prototype) {
                                if (/^on/.test(attr)) {
                                    map[attr.replace(/^on/, "").toLowerCase()] = attr;
                                }
                            }
                        }
                        return map[typeof type == "string" && type.toLowerCase()];
                    },
                    toString: function() {
                        return "[Widget " + this.declaredClass + ", " + (this.id || "NO ID") + "]";
                    },
                    getChildren: function() {
                        return this.containerNode ? _1c0.findWidgets(this.containerNode) : [];
                    },
                    getParent: function() {
                        return _1c0.getEnclosingWidget(this.domNode.parentNode);
                    },
                    connect: function(obj, _1ec, _1ed) {
                        return this.own(_1b3.connect(obj, _1ec, this, _1ed))[0];
                    },
                    disconnect: function(_1ee) {
                        _1ee.remove();
                    },
                    subscribe: function(t, _1ef) {
                        return this.own(_1bd.subscribe(t, lang.hitch(this, _1ef)))[0];
                    },
                    unsubscribe: function(_1f0) {
                        _1f0.remove();
                    },
                    isLeftToRight: function() {
                        return this.dir ? (this.dir.toLowerCase() == "ltr") : _1b8.isBodyLtr(this.ownerDocument);
                    },
                    isFocusable: function() {
                        return this.focus && (_1b9.get(this.domNode, "display") != "none");
                    },
                    placeAt: function(_1f1, _1f2) {
                        var _1f3 = !_1f1.tagName && _1c0.byId(_1f1);
                        if (_1f3 && _1f3.addChild && (!_1f2 || typeof _1f2 === "number")) {
                            _1f3.addChild(this, _1f2);
                        } else {
                            var ref = _1f3 && ("domNode"in _1f3) ? (_1f3.containerNode && !/after|before|replace/.test(_1f2 || "") ? _1f3.containerNode : _1f3.domNode) : dom.byId(_1f1, this.ownerDocument);
                            _1b7.place(this.domNode, ref, _1f2);
                            if (!this._started && (this.getParent() || {})._started) {
                                this.startup();
                            }
                        }
                        return this;
                    },
                    defer: function(fcn, _1f4) {
                        var _1f5 = setTimeout(lang.hitch(this, function() {
                            if (!_1f5) {
                                return;
                            }
                            _1f5 = null;
                            if (!this._destroyed) {
                                lang.hitch(this, fcn)();
                            }
                        }), _1f4 || 0);
                        return {
                            remove: function() {
                                if (_1f5) {
                                    clearTimeout(_1f5);
                                    _1f5 = null;
                                }
                                return null;
                            }
                        };
                    }
                });
                if (has("dojo-bidi")) {
                    _1c6.extend(_1bf);
                }
                return _1c6;
            });
        },
        "dijit/Destroyable": function() {
            define(["dojo/_base/array", "dojo/aspect", "dojo/_base/declare"], function(_1f6, _1f7, _1f8) {
                return _1f8("dijit.Destroyable", null, {
                    destroy: function(_1f9) {
                        this._destroyed = true;
                    },
                    own: function() {
                        var _1fa = ["destroyRecursive", "destroy", "remove"];
                        _1f6.forEach(arguments, function(_1fb) {
                            var _1fc;
                            var odh = _1f7.before(this, "destroy", function(_1fd) {
                                _1fb[_1fc](_1fd);
                            });
                            var hdhs = [];
                            function _1fe() {
                                odh.remove();
                                _1f6.forEach(hdhs, function(hdh) {
                                    hdh.remove();
                                });
                            }
                            ;if (_1fb.then) {
                                _1fc = "cancel";
                                _1fb.then(_1fe, _1fe);
                            } else {
                                _1f6.forEach(_1fa, function(_1ff) {
                                    if (typeof _1fb[_1ff] === "function") {
                                        if (!_1fc) {
                                            _1fc = _1ff;
                                        }
                                        hdhs.push(_1f7.after(_1fb, _1ff, _1fe, true));
                                    }
                                });
                            }
                        }, this);
                        return arguments;
                    }
                });
            });
        },
        "dijit/_OnDijitClickMixin": function() {
            define(["dojo/on", "dojo/_base/array", "dojo/keys", "dojo/_base/declare", "dojo/has", "./a11yclick"], function(on, _200, keys, _201, has, _202) {
                var ret = _201("dijit._OnDijitClickMixin", null, {
                    connect: function(obj, _203, _204) {
                        return this.inherited(arguments, [obj, _203 == "ondijitclick" ? _202 : _203, _204]);
                    }
                });
                ret.a11yclick = _202;
                return ret;
            });
        },
        "dijit/a11yclick": function() {
            define(["dojo/keys", "dojo/mouse", "dojo/on", "dojo/touch"], function(keys, _205, on, _206) {
                function _207(e) {
                    if ((e.keyCode === keys.ENTER || e.keyCode === keys.SPACE) && !/input|button|textarea/i.test(e.target.nodeName)) {
                        for (var node = e.target; node; node = node.parentNode) {
                            if (node.dojoClick) {
                                return true;
                            }
                        }
                    }
                }
                ;var _208;
                on(document, "keydown", function(e) {
                    if (_207(e)) {
                        _208 = e.target;
                        e.preventDefault();
                    } else {
                        _208 = null;
                    }
                });
                on(document, "keyup", function(e) {
                    if (_207(e) && e.target == _208) {
                        _208 = null;
                        on.emit(e.target, "click", {
                            cancelable: true,
                            bubbles: true,
                            ctrlKey: e.ctrlKey,
                            shiftKey: e.shiftKey,
                            metaKey: e.metaKey,
                            altKey: e.altKey,
                            _origType: e.type
                        });
                    }
                });
                var _209 = function(node, _20a) {
                    node.dojoClick = true;
                    return on(node, "click", _20a);
                };
                _209.click = _209;
                _209.press = function(node, _20b) {
                    var _20c = on(node, _206.press, function(evt) {
                        if (evt.type == "mousedown" && !_205.isLeft(evt)) {
                            return;
                        }
                        _20b(evt);
                    })
                      , _20d = on(node, "keydown", function(evt) {
                        if (evt.keyCode === keys.ENTER || evt.keyCode === keys.SPACE) {
                            _20b(evt);
                        }
                    });
                    return {
                        remove: function() {
                            _20c.remove();
                            _20d.remove();
                        }
                    };
                }
                ;
                _209.release = function(node, _20e) {
                    var _20f = on(node, _206.release, function(evt) {
                        if (evt.type == "mouseup" && !_205.isLeft(evt)) {
                            return;
                        }
                        _20e(evt);
                    })
                      , _210 = on(node, "keyup", function(evt) {
                        if (evt.keyCode === keys.ENTER || evt.keyCode === keys.SPACE) {
                            _20e(evt);
                        }
                    });
                    return {
                        remove: function() {
                            _20f.remove();
                            _210.remove();
                        }
                    };
                }
                ;
                _209.move = _206.move;
                return _209;
            });
        },
        "dijit/_FocusMixin": function() {
            define(["./focus", "./_WidgetBase", "dojo/_base/declare", "dojo/_base/lang"], function(_211, _212, _213, lang) {
                lang.extend(_212, {
                    focused: false,
                    onFocus: function() {},
                    onBlur: function() {},
                    _onFocus: function() {
                        this.onFocus();
                    },
                    _onBlur: function() {
                        this.onBlur();
                    }
                });
                return _213("dijit._FocusMixin", null, {
                    _focusManager: _211
                });
            });
        },
        "dojo/uacss": function() {
            define(["./dom-geometry", "./_base/lang", "./domReady", "./sniff", "./_base/window"], function(_214, lang, _215, has, _216) {
                var html = _216.doc.documentElement
                  , ie = has("ie")
                  , _217 = has("trident")
                  , _218 = has("opera")
                  , maj = Math.floor
                  , ff = has("ff")
                  , _219 = _214.boxModel.replace(/-/, "")
                  , _21a = {
                    "dj_quirks": has("quirks"),
                    "dj_opera": _218,
                    "dj_khtml": has("khtml"),
                    "dj_webkit": has("webkit"),
                    "dj_safari": has("safari"),
                    "dj_chrome": has("chrome"),
                    "dj_edge": has("edge"),
                    "dj_gecko": has("mozilla"),
                    "dj_ios": has("ios"),
                    "dj_android": has("android")
                };
                if (ie) {
                    _21a["dj_ie"] = true;
                    _21a["dj_ie" + maj(ie)] = true;
                    _21a["dj_iequirks"] = has("quirks");
                }
                if (_217) {
                    _21a["dj_trident"] = true;
                    _21a["dj_trident" + maj(_217)] = true;
                }
                if (ff) {
                    _21a["dj_ff" + maj(ff)] = true;
                }
                _21a["dj_" + _219] = true;
                var _21b = "";
                for (var clz in _21a) {
                    if (_21a[clz]) {
                        _21b += clz + " ";
                    }
                }
                html.className = lang.trim(html.className + " " + _21b);
                _215(function() {
                    if (!_214.isBodyLtr()) {
                        var _21c = "dj_rtl dijitRtl " + _21b.replace(/ /g, "-rtl ");
                        html.className = lang.trim(html.className + " " + _21c + "dj_rtl dijitRtl " + _21b.replace(/ /g, "-rtl "));
                    }
                });
                return has;
            });
        },
        "dijit/hccss": function() {
            define(["dojo/dom-class", "dojo/hccss", "dojo/domReady", "dojo/_base/window"], function(_21d, has, _21e, win) {
                _21e(function() {
                    if (has("highcontrast")) {
                        _21d.add(win.body(), "dijit_a11y");
                    }
                });
                return has;
            });
        },
        "dojo/hccss": function() {
            define(["require", "./_base/config", "./dom-class", "./dom-style", "./has", "./domReady", "./_base/window"], function(_21f, _220, _221, _222, has, _223, win) {
                has.add("highcontrast", function() {
                    var div = win.doc.createElement("div");
                    try {
                        div.style.cssText = "border: 1px solid; border-color:red green; position: absolute; height: 5px; top: -999px;" + "background-image: url(\"" + (_220.blankGif || _21f.toUrl("./resources/blank.gif")) + "\");";
                        win.body().appendChild(div);
                        var cs = _222.getComputedStyle(div)
                          , _224 = cs.backgroundImage;
                        return cs.borderTopColor == cs.borderRightColor || (_224 && (_224 == "none" || _224 == "url(invalid-url:)"));
                    } catch (e) {
                        console.warn("hccss: exception detecting high-contrast mode, document is likely hidden: " + e.toString());
                        return false;
                    } finally {
                        if (has("ie") <= 8) {
                            div.outerHTML = "";
                        } else {
                            win.body().removeChild(div);
                        }
                    }
                });
                _223(function() {
                    if (has("highcontrast")) {
                        _221.add(win.body(), "dj_a11y");
                    }
                });
                return has;
            });
        },
        "dijit/_TemplatedMixin": function() {
            define(["dojo/cache", "dojo/_base/declare", "dojo/dom-construct", "dojo/_base/lang", "dojo/on", "dojo/sniff", "dojo/string", "./_AttachMixin"], function(_225, _226, _227, lang, on, has, _228, _229) {
                var _22a = _226("dijit._TemplatedMixin", _229, {
                    templateString: null,
                    templatePath: null,
                    _skipNodeCache: false,
                    searchContainerNode: true,
                    _stringRepl: function(tmpl) {
                        var _22b = this.declaredClass
                          , _22c = this;
                        return _228.substitute(tmpl, this, function(_22d, key) {
                            if (key.charAt(0) == "!") {
                                _22d = lang.getObject(key.substr(1), false, _22c);
                            }
                            if (typeof _22d == "undefined") {
                                throw new Error(_22b + " template:" + key);
                            }
                            if (_22d == null) {
                                return "";
                            }
                            return key.charAt(0) == "!" ? _22d : this._escapeValue("" + _22d);
                        }, this);
                    },
                    _escapeValue: function(val) {
                        return val.replace(/["'<>&]/g, function(val) {
                            return {
                                "&": "&amp;",
                                "<": "&lt;",
                                ">": "&gt;",
                                "\"": "&quot;",
                                "'": "&#x27;"
                            }[val];
                        });
                    },
                    buildRendering: function() {
                        if (!this._rendered) {
                            if (!this.templateString) {
                                this.templateString = _225(this.templatePath, {
                                    sanitize: true
                                });
                            }
                            var _22e = _22a.getCachedTemplate(this.templateString, this._skipNodeCache, this.ownerDocument);
                            var node;
                            if (lang.isString(_22e)) {
                                node = _227.toDom(this._stringRepl(_22e), this.ownerDocument);
                                if (node.nodeType != 1) {
                                    throw new Error("Invalid template: " + _22e);
                                }
                            } else {
                                node = _22e.cloneNode(true);
                            }
                            this.domNode = node;
                        }
                        this.inherited(arguments);
                        if (!this._rendered) {
                            this._fillContent(this.srcNodeRef);
                        }
                        this._rendered = true;
                    },
                    _fillContent: function(_22f) {
                        var dest = this.containerNode;
                        if (_22f && dest) {
                            while (_22f.hasChildNodes()) {
                                dest.appendChild(_22f.firstChild);
                            }
                        }
                    }
                });
                _22a._templateCache = {};
                _22a.getCachedTemplate = function(_230, _231, doc) {
                    var _232 = _22a._templateCache;
                    var key = _230;
                    var _233 = _232[key];
                    if (_233) {
                        try {
                            if (!_233.ownerDocument || _233.ownerDocument == (doc || document)) {
                                return _233;
                            }
                        } catch (e) {}
                        _227.destroy(_233);
                    }
                    _230 = _228.trim(_230);
                    if (_231 || _230.match(/\$\{([^\}]+)\}/g)) {
                        return (_232[key] = _230);
                    } else {
                        var node = _227.toDom(_230, doc);
                        if (node.nodeType != 1) {
                            throw new Error("Invalid template: " + _230);
                        }
                        return (_232[key] = node);
                    }
                }
                ;
                if (has("ie")) {
                    on(window, "unload", function() {
                        var _234 = _22a._templateCache;
                        for (var key in _234) {
                            var _235 = _234[key];
                            if (typeof _235 == "object") {
                                _227.destroy(_235);
                            }
                            delete _234[key];
                        }
                    });
                }
                return _22a;
            });
        },
        "dojo/cache": function() {
            define(["./_base/kernel", "./text"], function(dojo) {
                return dojo.cache;
            });
        },
        "dojo/text": function() {
            define(["./_base/kernel", "require", "./has", "./request"], function(dojo, _236, has, _237) {
                var _238;
                if (1) {
                    _238 = function(url, sync, load) {
                        _237(url, {
                            sync: !!sync,
                            headers: {
                                "X-Requested-With": null
                            }
                        }).then(load);
                    }
                    ;
                } else {
                    if (_236.getText) {
                        _238 = _236.getText;
                    } else {
                        console.error("dojo/text plugin failed to load because loader does not support getText");
                    }
                }
                var _239 = {}
                  , _23a = function(text) {
                    if (text) {
                        text = text.replace(/^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im, "");
                        var _23b = text.match(/<body[^>]*>\s*([\s\S]+)\s*<\/body>/im);
                        if (_23b) {
                            text = _23b[1];
                        }
                    } else {
                        text = "";
                    }
                    return text;
                }
                  , _23c = {}
                  , _23d = {};
                dojo.cache = function(_23e, url, _23f) {
                    var key;
                    if (typeof _23e == "string") {
                        if (/\//.test(_23e)) {
                            key = _23e;
                            _23f = url;
                        } else {
                            key = _236.toUrl(_23e.replace(/\./g, "/") + (url ? ("/" + url) : ""));
                        }
                    } else {
                        key = _23e + "";
                        _23f = url;
                    }
                    var val = (_23f != undefined && typeof _23f != "string") ? _23f.value : _23f
                      , _240 = _23f && _23f.sanitize;
                    if (typeof val == "string") {
                        _239[key] = val;
                        return _240 ? _23a(val) : val;
                    } else {
                        if (val === null) {
                            delete _239[key];
                            return null;
                        } else {
                            if (!(key in _239)) {
                                _238(key, true, function(text) {
                                    _239[key] = text;
                                });
                            }
                            return _240 ? _23a(_239[key]) : _239[key];
                        }
                    }
                }
                ;
                return {
                    dynamic: true,
                    normalize: function(id, _241) {
                        var _242 = id.split("!")
                          , url = _242[0];
                        return (/^\./.test(url) ? _241(url) : url) + (_242[1] ? "!" + _242[1] : "");
                    },
                    load: function(id, _243, load) {
                        var _244 = id.split("!")
                          , _245 = _244.length > 1
                          , _246 = _244[0]
                          , url = _243.toUrl(_244[0])
                          , _247 = "url:" + url
                          , text = _23c
                          , _248 = function(text) {
                            load(_245 ? _23a(text) : text);
                        };
                        if (_246 in _239) {
                            text = _239[_246];
                        } else {
                            if (_243.cache && _247 in _243.cache) {
                                text = _243.cache[_247];
                            } else {
                                if (url in _239) {
                                    text = _239[url];
                                }
                            }
                        }
                        if (text === _23c) {
                            if (_23d[url]) {
                                _23d[url].push(_248);
                            } else {
                                var _249 = _23d[url] = [_248];
                                _238(url, !_243.async, function(text) {
                                    _239[_246] = _239[url] = text;
                                    for (var i = 0; i < _249.length; ) {
                                        _249[i++](text);
                                    }
                                    delete _23d[url];
                                });
                            }
                        } else {
                            _248(text);
                        }
                    }
                };
            });
        },
        "dojo/request": function() {
            define(["./request/default!"], function(_24a) {
                return _24a;
            });
        },
        "dojo/request/default": function() {
            define(["exports", "require", "../has"], function(_24b, _24c, has) {
                var _24d = has("config-requestProvider"), _24e;
                if (1 || has("host-webworker")) {
                    _24e = "./xhr";
                } else {
                    if (0) {
                        _24e = "./node";
                    }
                }
                if (!_24d) {
                    _24d = _24e;
                }
                _24b.getPlatformDefaultId = function() {
                    return _24e;
                }
                ;
                _24b.load = function(id, _24f, _250, _251) {
                    _24c([id == "platform" ? _24e : _24d], function(_252) {
                        _250(_252);
                    });
                }
                ;
            });
        },
        "dojo/string": function() {
            define(["./_base/kernel", "./_base/lang"], function(_253, lang) {
                var _254 = /[&<>'"\/]/g;
                var _255 = {
                    "&": "&amp;",
                    "<": "&lt;",
                    ">": "&gt;",
                    "\"": "&quot;",
                    "'": "&#x27;",
                    "/": "&#x2F;"
                };
                var _256 = {};
                lang.setObject("dojo.string", _256);
                _256.escape = function(str) {
                    if (!str) {
                        return "";
                    }
                    return str.replace(_254, function(c) {
                        return _255[c];
                    });
                }
                ;
                _256.rep = function(str, num) {
                    if (num <= 0 || !str) {
                        return "";
                    }
                    var buf = [];
                    for (; ; ) {
                        if (num & 1) {
                            buf.push(str);
                        }
                        if (!(num >>= 1)) {
                            break;
                        }
                        str += str;
                    }
                    return buf.join("");
                }
                ;
                _256.pad = function(text, size, ch, end) {
                    if (!ch) {
                        ch = "0";
                    }
                    var out = String(text)
                      , pad = _256.rep(ch, Math.ceil((size - out.length) / ch.length));
                    return end ? out + pad : pad + out;
                }
                ;
                _256.substitute = function(_257, map, _258, _259) {
                    _259 = _259 || _253.global;
                    _258 = _258 ? lang.hitch(_259, _258) : function(v) {
                        return v;
                    }
                    ;
                    return _257.replace(/\$\{([^\s\:\}]*)(?:\:([^\s\:\}]+))?\}/g, function(_25a, key, _25b) {
                        if (key == "") {
                            return "$";
                        }
                        var _25c = lang.getObject(key, false, map);
                        if (_25b) {
                            _25c = lang.getObject(_25b, false, _259).call(_259, _25c, key);
                        }
                        var _25d = _258(_25c, key);
                        if (typeof _25d === "undefined") {
                            throw new Error("string.substitute could not find key \"" + key + "\" in template");
                        }
                        return _25d.toString();
                    });
                }
                ;
                _256.trim = String.prototype.trim ? lang.trim : function(str) {
                    str = str.replace(/^\s+/, "");
                    for (var i = str.length - 1; i >= 0; i--) {
                        if (/\S/.test(str.charAt(i))) {
                            str = str.substring(0, i + 1);
                            break;
                        }
                    }
                    return str;
                }
                ;
                return _256;
            });
        },
        "dijit/_AttachMixin": function() {
            define(["require", "dojo/_base/array", "dojo/_base/connect", "dojo/_base/declare", "dojo/_base/lang", "dojo/mouse", "dojo/on", "dojo/touch", "./_WidgetBase"], function(_25e, _25f, _260, _261, lang, _262, on, _263, _264) {
                var _265 = lang.delegate(_263, {
                    "mouseenter": _262.enter,
                    "mouseleave": _262.leave,
                    "keypress": _260._keypress
                });
                var _266;
                var _267 = _261("dijit._AttachMixin", null, {
                    constructor: function() {
                        this._attachPoints = [];
                        this._attachEvents = [];
                    },
                    buildRendering: function() {
                        this.inherited(arguments);
                        this._attachTemplateNodes(this.domNode);
                        this._beforeFillContent();
                    },
                    _beforeFillContent: function() {},
                    _attachTemplateNodes: function(_268) {
                        var node = _268;
                        while (true) {
                            if (node.nodeType == 1 && (this._processTemplateNode(node, function(n, p) {
                                return n.getAttribute(p);
                            }, this._attach) || this.searchContainerNode) && node.firstChild) {
                                node = node.firstChild;
                            } else {
                                if (node == _268) {
                                    return;
                                }
                                while (!node.nextSibling) {
                                    node = node.parentNode;
                                    if (node == _268) {
                                        return;
                                    }
                                }
                                node = node.nextSibling;
                            }
                        }
                    },
                    _processTemplateNode: function(_269, _26a, _26b) {
                        var ret = true;
                        var _26c = this.attachScope || this
                          , _26d = _26a(_269, "dojoAttachPoint") || _26a(_269, "data-dojo-attach-point");
                        if (_26d) {
                            var _26e, _26f = _26d.split(/\s*,\s*/);
                            while ((_26e = _26f.shift())) {
                                if (lang.isArray(_26c[_26e])) {
                                    _26c[_26e].push(_269);
                                } else {
                                    _26c[_26e] = _269;
                                }
                                ret = (_26e != "containerNode");
                                this._attachPoints.push(_26e);
                            }
                        }
                        var _270 = _26a(_269, "dojoAttachEvent") || _26a(_269, "data-dojo-attach-event");
                        if (_270) {
                            var _271, _272 = _270.split(/\s*,\s*/);
                            var trim = lang.trim;
                            while ((_271 = _272.shift())) {
                                if (_271) {
                                    var _273 = null;
                                    if (_271.indexOf(":") != -1) {
                                        var _274 = _271.split(":");
                                        _271 = trim(_274[0]);
                                        _273 = trim(_274[1]);
                                    } else {
                                        _271 = trim(_271);
                                    }
                                    if (!_273) {
                                        _273 = _271;
                                    }
                                    this._attachEvents.push(_26b(_269, _271, lang.hitch(_26c, _273)));
                                }
                            }
                        }
                        return ret;
                    },
                    _attach: function(node, type, func) {
                        type = type.replace(/^on/, "").toLowerCase();
                        if (type == "dijitclick") {
                            type = _266 || (_266 = _25e("./a11yclick"));
                        } else {
                            type = _265[type] || type;
                        }
                        return on(node, type, func);
                    },
                    _detachTemplateNodes: function() {
                        var _275 = this.attachScope || this;
                        _25f.forEach(this._attachPoints, function(_276) {
                            delete _275[_276];
                        });
                        this._attachPoints = [];
                        _25f.forEach(this._attachEvents, function(_277) {
                            _277.remove();
                        });
                        this._attachEvents = [];
                    },
                    destroyRendering: function() {
                        this._detachTemplateNodes();
                        this.inherited(arguments);
                    }
                });
                lang.extend(_264, {
                    dojoAttachEvent: "",
                    dojoAttachPoint: ""
                });
                return _267;
            });
        },
        "dijit/_CssStateMixin": function() {
            define(["dojo/_base/array", "dojo/_base/declare", "dojo/dom", "dojo/dom-class", "dojo/has", "dojo/_base/lang", "dojo/on", "dojo/domReady", "dojo/touch", "dojo/_base/window", "./a11yclick", "./registry"], function(_278, _279, dom, _27a, has, lang, on, _27b, _27c, win, _27d, _27e) {
                var _27f = _279("dijit._CssStateMixin", [], {
                    hovering: false,
                    active: false,
                    _applyAttributes: function() {
                        this.inherited(arguments);
                        _278.forEach(["disabled", "readOnly", "checked", "selected", "focused", "state", "hovering", "active", "_opened"], function(attr) {
                            this.watch(attr, lang.hitch(this, "_setStateClass"));
                        }, this);
                        for (var ap in this.cssStateNodes || {}) {
                            this._trackMouseState(this[ap], this.cssStateNodes[ap]);
                        }
                        this._trackMouseState(this.domNode, this.baseClass);
                        this._setStateClass();
                    },
                    _cssMouseEvent: function(_280) {
                        if (!this.disabled) {
                            switch (_280.type) {
                            case "mouseover":
                            case "MSPointerOver":
                            case "pointerover":
                                this._set("hovering", true);
                                this._set("active", this._mouseDown);
                                break;
                            case "mouseout":
                            case "MSPointerOut":
                            case "pointerout":
                                this._set("hovering", false);
                                this._set("active", false);
                                break;
                            case "mousedown":
                            case "touchstart":
                            case "MSPointerDown":
                            case "pointerdown":
                            case "keydown":
                                this._set("active", true);
                                break;
                            case "mouseup":
                            case "dojotouchend":
                            case "MSPointerUp":
                            case "pointerup":
                            case "keyup":
                                this._set("active", false);
                                break;
                            }
                        }
                    },
                    _setStateClass: function() {
                        var _281 = this.baseClass.split(" ");
                        function _282(_283) {
                            _281 = _281.concat(_278.map(_281, function(c) {
                                return c + _283;
                            }), "dijit" + _283);
                        }
                        ;if (!this.isLeftToRight()) {
                            _282("Rtl");
                        }
                        var _284 = this.checked == "mixed" ? "Mixed" : (this.checked ? "Checked" : "");
                        if (this.checked) {
                            _282(_284);
                        }
                        if (this.state) {
                            _282(this.state);
                        }
                        if (this.selected) {
                            _282("Selected");
                        }
                        if (this._opened) {
                            _282("Opened");
                        }
                        if (this.disabled) {
                            _282("Disabled");
                        } else {
                            if (this.readOnly) {
                                _282("ReadOnly");
                            } else {
                                if (this.active) {
                                    _282("Active");
                                } else {
                                    if (this.hovering) {
                                        _282("Hover");
                                    }
                                }
                            }
                        }
                        if (this.focused) {
                            _282("Focused");
                        }
                        var tn = this.stateNode || this.domNode
                          , _285 = {};
                        _278.forEach(tn.className.split(" "), function(c) {
                            _285[c] = true;
                        });
                        if ("_stateClasses"in this) {
                            _278.forEach(this._stateClasses, function(c) {
                                delete _285[c];
                            });
                        }
                        _278.forEach(_281, function(c) {
                            _285[c] = true;
                        });
                        var _286 = [];
                        for (var c in _285) {
                            _286.push(c);
                        }
                        tn.className = _286.join(" ");
                        this._stateClasses = _281;
                    },
                    _subnodeCssMouseEvent: function(node, _287, evt) {
                        if (this.disabled || this.readOnly) {
                            return;
                        }
                        function _288(_289) {
                            _27a.toggle(node, _287 + "Hover", _289);
                        }
                        ;function _28a(_28b) {
                            _27a.toggle(node, _287 + "Active", _28b);
                        }
                        ;function _28c(_28d) {
                            _27a.toggle(node, _287 + "Focused", _28d);
                        }
                        ;switch (evt.type) {
                        case "mouseover":
                        case "MSPointerOver":
                        case "pointerover":
                            _288(true);
                            break;
                        case "mouseout":
                        case "MSPointerOut":
                        case "pointerout":
                            _288(false);
                            _28a(false);
                            break;
                        case "mousedown":
                        case "touchstart":
                        case "MSPointerDown":
                        case "pointerdown":
                        case "keydown":
                            _28a(true);
                            break;
                        case "mouseup":
                        case "MSPointerUp":
                        case "pointerup":
                        case "dojotouchend":
                        case "keyup":
                            _28a(false);
                            break;
                        case "focus":
                        case "focusin":
                            _28c(true);
                            break;
                        case "blur":
                        case "focusout":
                            _28c(false);
                            break;
                        }
                    },
                    _trackMouseState: function(node, _28e) {
                        node._cssState = _28e;
                    }
                });
                _27b(function() {
                    function _28f(evt, _290, _291) {
                        if (_291 && dom.isDescendant(_291, _290)) {
                            return;
                        }
                        for (var node = _290; node && node != _291; node = node.parentNode) {
                            if (node._cssState) {
                                var _292 = _27e.getEnclosingWidget(node);
                                if (_292) {
                                    if (node == _292.domNode) {
                                        _292._cssMouseEvent(evt);
                                    } else {
                                        _292._subnodeCssMouseEvent(node, node._cssState, evt);
                                    }
                                }
                            }
                        }
                    }
                    ;var body = win.body(), _293;
                    on(body, _27c.over, function(evt) {
                        _28f(evt, evt.target, evt.relatedTarget);
                    });
                    on(body, _27c.out, function(evt) {
                        _28f(evt, evt.target, evt.relatedTarget);
                    });
                    on(body, _27d.press, function(evt) {
                        _293 = evt.target;
                        _28f(evt, _293);
                    });
                    on(body, _27d.release, function(evt) {
                        _28f(evt, _293);
                        _293 = null;
                    });
                    on(body, "focusin, focusout", function(evt) {
                        var node = evt.target;
                        if (node._cssState && !node.getAttribute("widgetId")) {
                            var _294 = _27e.getEnclosingWidget(node);
                            if (_294) {
                                _294._subnodeCssMouseEvent(node, node._cssState, evt);
                            }
                        }
                    });
                });
                return _27f;
            });
        },
        "dijit/form/_FormMixin": function() {
            define(["dojo/_base/array", "dojo/_base/declare", "dojo/_base/kernel", "dojo/_base/lang", "dojo/on", "dojo/window"], function(_295, _296, _297, lang, on, _298) {
                return _296("dijit.form._FormMixin", null, {
                    state: "",
                    _getDescendantFormWidgets: function(_299) {
                        var res = [];
                        _295.forEach(_299 || this.getChildren(), function(_29a) {
                            if ("value"in _29a) {
                                res.push(_29a);
                            } else {
                                res = res.concat(this._getDescendantFormWidgets(_29a.getChildren()));
                            }
                        }, this);
                        return res;
                    },
                    reset: function() {
                        _295.forEach(this._getDescendantFormWidgets(), function(_29b) {
                            if (_29b.reset) {
                                _29b.reset();
                            }
                        });
                    },
                    validate: function() {
                        var _29c = false;
                        return _295.every(_295.map(this._getDescendantFormWidgets(), function(_29d) {
                            _29d._hasBeenBlurred = true;
                            var _29e = _29d.disabled || !_29d.validate || _29d.validate();
                            if (!_29e && !_29c) {
                                _298.scrollIntoView(_29d.containerNode || _29d.domNode);
                                _29d.focus();
                                _29c = true;
                            }
                            return _29e;
                        }), function(item) {
                            return item;
                        });
                    },
                    setValues: function(val) {
                        _297.deprecated(this.declaredClass + "::setValues() is deprecated. Use set('value', val) instead.", "", "2.0");
                        return this.set("value", val);
                    },
                    _setValueAttr: function(obj) {
                        var map = {};
                        _295.forEach(this._getDescendantFormWidgets(), function(_29f) {
                            if (!_29f.name) {
                                return;
                            }
                            var _2a0 = map[_29f.name] || (map[_29f.name] = []);
                            _2a0.push(_29f);
                        });
                        for (var name in map) {
                            if (!map.hasOwnProperty(name)) {
                                continue;
                            }
                            var _2a1 = map[name]
                              , _2a2 = lang.getObject(name, false, obj);
                            if (_2a2 === undefined) {
                                continue;
                            }
                            _2a2 = [].concat(_2a2);
                            if (typeof _2a1[0].checked == "boolean") {
                                _295.forEach(_2a1, function(w) {
                                    w.set("value", _295.indexOf(_2a2, w._get("value")) != -1);
                                });
                            } else {
                                if (_2a1[0].multiple) {
                                    _2a1[0].set("value", _2a2);
                                } else {
                                    _295.forEach(_2a1, function(w, i) {
                                        w.set("value", _2a2[i]);
                                    });
                                }
                            }
                        }
                    },
                    getValues: function() {
                        _297.deprecated(this.declaredClass + "::getValues() is deprecated. Use get('value') instead.", "", "2.0");
                        return this.get("value");
                    },
                    _getValueAttr: function() {
                        var obj = {};
                        _295.forEach(this._getDescendantFormWidgets(), function(_2a3) {
                            var name = _2a3.name;
                            if (!name || _2a3.disabled) {
                                return;
                            }
                            var _2a4 = _2a3.get("value");
                            if (typeof _2a3.checked == "boolean") {
                                if (/Radio/.test(_2a3.declaredClass)) {
                                    if (_2a4 !== false) {
                                        lang.setObject(name, _2a4, obj);
                                    } else {
                                        _2a4 = lang.getObject(name, false, obj);
                                        if (_2a4 === undefined) {
                                            lang.setObject(name, null, obj);
                                        }
                                    }
                                } else {
                                    var ary = lang.getObject(name, false, obj);
                                    if (!ary) {
                                        ary = [];
                                        lang.setObject(name, ary, obj);
                                    }
                                    if (_2a4 !== false) {
                                        ary.push(_2a4);
                                    }
                                }
                            } else {
                                var prev = lang.getObject(name, false, obj);
                                if (typeof prev != "undefined") {
                                    if (lang.isArray(prev)) {
                                        prev.push(_2a4);
                                    } else {
                                        lang.setObject(name, [prev, _2a4], obj);
                                    }
                                } else {
                                    lang.setObject(name, _2a4, obj);
                                }
                            }
                        });
                        return obj;
                    },
                    isValid: function() {
                        return this.state == "";
                    },
                    onValidStateChange: function() {},
                    _getState: function() {
                        var _2a5 = _295.map(this._descendants, function(w) {
                            return w.get("state") || "";
                        });
                        return _295.indexOf(_2a5, "Error") >= 0 ? "Error" : _295.indexOf(_2a5, "Incomplete") >= 0 ? "Incomplete" : "";
                    },
                    disconnectChildren: function() {},
                    connectChildren: function(_2a6) {
                        this._descendants = this._getDescendantFormWidgets();
                        _295.forEach(this._descendants, function(_2a7) {
                            if (!_2a7._started) {
                                _2a7.startup();
                            }
                        });
                        if (!_2a6) {
                            this._onChildChange();
                        }
                    },
                    _onChildChange: function(attr) {
                        if (!attr || attr == "state" || attr == "disabled") {
                            this._set("state", this._getState());
                        }
                        if (!attr || attr == "value" || attr == "disabled" || attr == "checked") {
                            if (this._onChangeDelayTimer) {
                                this._onChangeDelayTimer.remove();
                            }
                            this._onChangeDelayTimer = this.defer(function() {
                                delete this._onChangeDelayTimer;
                                this._set("value", this.get("value"));
                            }, 10);
                        }
                    },
                    startup: function() {
                        this.inherited(arguments);
                        this._descendants = this._getDescendantFormWidgets();
                        this.value = this.get("value");
                        this.state = this._getState();
                        var self = this;
                        this.own(on(this.containerNode, "attrmodified-state, attrmodified-disabled, attrmodified-value, attrmodified-checked", function(evt) {
                            if (evt.target == self.domNode) {
                                return;
                            }
                            self._onChildChange(evt.type.replace("attrmodified-", ""));
                        }));
                        this.watch("state", function(attr, _2a8, _2a9) {
                            this.onValidStateChange(_2a9 == "");
                        });
                    },
                    destroy: function() {
                        this.inherited(arguments);
                    }
                });
            });
        },
        "dijit/_DialogMixin": function() {
            define(["dojo/_base/declare", "./a11y"], function(_2aa, a11y) {
                return _2aa("dijit._DialogMixin", null, {
                    actionBarTemplate: "",
                    execute: function() {},
                    onCancel: function() {},
                    onExecute: function() {},
                    _onSubmit: function() {
                        this.onExecute();
                        this.execute(this.get("value"));
                    },
                    _getFocusItems: function() {
                        var _2ab = a11y._getTabNavigable(this.domNode);
                        this._firstFocusItem = _2ab.lowest || _2ab.first || this.closeButtonNode || this.domNode;
                        this._lastFocusItem = _2ab.last || _2ab.highest || this._firstFocusItem;
                    }
                });
            });
        },
        "dijit/DialogUnderlay": function() {
            define(["dojo/_base/declare", "dojo/_base/lang", "dojo/aspect", "dojo/dom-attr", "dojo/dom-style", "dojo/on", "dojo/window", "./_Widget", "./_TemplatedMixin", "./BackgroundIframe", "./Viewport", "./main"], function(_2ac, lang, _2ad, _2ae, _2af, on, _2b0, _2b1, _2b2, _2b3, _2b4, _2b5) {
                var _2b6 = _2ac("dijit.DialogUnderlay", [_2b1, _2b2], {
                    templateString: "<div class='dijitDialogUnderlayWrapper'><div class='dijitDialogUnderlay' tabIndex='-1' data-dojo-attach-point='node'></div></div>",
                    dialogId: "",
                    "class": "",
                    _modalConnects: [],
                    _setDialogIdAttr: function(id) {
                        _2ae.set(this.node, "id", id + "_underlay");
                        this._set("dialogId", id);
                    },
                    _setClassAttr: function(_2b7) {
                        this.node.className = "dijitDialogUnderlay " + _2b7;
                        this._set("class", _2b7);
                    },
                    postCreate: function() {
                        this.ownerDocumentBody.appendChild(this.domNode);
                        this.own(on(this.domNode, "keydown", lang.hitch(this, "_onKeyDown")));
                        this.inherited(arguments);
                    },
                    layout: function() {
                        var is = this.node.style
                          , os = this.domNode.style;
                        os.display = "none";
                        var _2b8 = _2b0.getBox(this.ownerDocument);
                        os.top = _2b8.t + "px";
                        os.left = _2b8.l + "px";
                        is.width = _2b8.w + "px";
                        is.height = _2b8.h + "px";
                        os.display = "block";
                    },
                    show: function() {
                        this.domNode.style.display = "block";
                        this.open = true;
                        this.layout();
                        this.bgIframe = new _2b3(this.domNode);
                        var win = _2b0.get(this.ownerDocument);
                        this._modalConnects = [_2b4.on("resize", lang.hitch(this, "layout")), on(win, "scroll", lang.hitch(this, "layout"))];
                    },
                    hide: function() {
                        this.bgIframe.destroy();
                        delete this.bgIframe;
                        this.domNode.style.display = "none";
                        while (this._modalConnects.length) {
                            (this._modalConnects.pop()).remove();
                        }
                        this.open = false;
                    },
                    destroy: function() {
                        while (this._modalConnects.length) {
                            (this._modalConnects.pop()).remove();
                        }
                        this.inherited(arguments);
                    },
                    _onKeyDown: function() {}
                });
                _2b6.show = function(_2b9, _2ba) {
                    var _2bb = _2b6._singleton;
                    if (!_2bb || _2bb._destroyed) {
                        _2bb = _2b5._underlay = _2b6._singleton = new _2b6(_2b9);
                    } else {
                        if (_2b9) {
                            _2bb.set(_2b9);
                        }
                    }
                    _2af.set(_2bb.domNode, "zIndex", _2ba);
                    if (!_2bb.open) {
                        _2bb.show();
                    }
                }
                ;
                _2b6.hide = function() {
                    var _2bc = _2b6._singleton;
                    if (_2bc && !_2bc._destroyed) {
                        _2bc.hide();
                    }
                }
                ;
                return _2b6;
            });
        },
        "dijit/BackgroundIframe": function() {
            define(["require", "./main", "dojo/_base/config", "dojo/dom-construct", "dojo/dom-style", "dojo/_base/lang", "dojo/on", "dojo/sniff"], function(_2bd, _2be, _2bf, _2c0, _2c1, lang, on, has) {
                has.add("config-bgIframe", (has("ie") || has("trident")) && !/IEMobile\/10\.0/.test(navigator.userAgent));
                var _2c2 = new function() {
                    var _2c3 = [];
                    this.pop = function() {
                        var _2c4;
                        if (_2c3.length) {
                            _2c4 = _2c3.pop();
                            _2c4.style.display = "";
                        } else {
                            if (has("ie") < 9) {
                                var burl = _2bf["dojoBlankHtmlUrl"] || _2bd.toUrl("dojo/resources/blank.html") || "javascript:\"\"";
                                var html = "<iframe src='" + burl + "' role='presentation'" + " style='position: absolute; left: 0px; top: 0px;" + "z-index: -1; filter:Alpha(Opacity=\"0\");'>";
                                _2c4 = document.createElement(html);
                            } else {
                                _2c4 = _2c0.create("iframe");
                                _2c4.src = "javascript:\"\"";
                                _2c4.className = "dijitBackgroundIframe";
                                _2c4.setAttribute("role", "presentation");
                                _2c1.set(_2c4, "opacity", 0.1);
                            }
                            _2c4.tabIndex = -1;
                        }
                        return _2c4;
                    }
                    ;
                    this.push = function(_2c5) {
                        _2c5.style.display = "none";
                        _2c3.push(_2c5);
                    }
                    ;
                }
                ();
                _2be.BackgroundIframe = function(node) {
                    if (!node.id) {
                        throw new Error("no id");
                    }
                    if (has("config-bgIframe")) {
                        var _2c6 = (this.iframe = _2c2.pop());
                        node.appendChild(_2c6);
                        if (has("ie") < 7 || has("quirks")) {
                            this.resize(node);
                            this._conn = on(node, "resize", lang.hitch(this, "resize", node));
                        } else {
                            _2c1.set(_2c6, {
                                width: "100%",
                                height: "100%"
                            });
                        }
                    }
                }
                ;
                lang.extend(_2be.BackgroundIframe, {
                    resize: function(node) {
                        if (this.iframe) {
                            _2c1.set(this.iframe, {
                                width: node.offsetWidth + "px",
                                height: node.offsetHeight + "px"
                            });
                        }
                    },
                    destroy: function() {
                        if (this._conn) {
                            this._conn.remove();
                            this._conn = null;
                        }
                        if (this.iframe) {
                            this.iframe.parentNode.removeChild(this.iframe);
                            _2c2.push(this.iframe);
                            delete this.iframe;
                        }
                    }
                });
                return _2be.BackgroundIframe;
            });
        },
        "dijit/Viewport": function() {
            define(["dojo/Evented", "dojo/on", "dojo/domReady", "dojo/sniff", "dojo/window"], function(_2c7, on, _2c8, has, _2c9) {
                var _2ca = new _2c7();
                var _2cb;
                _2c8(function() {
                    var _2cc = _2c9.getBox();
                    _2ca._rlh = on(window, "resize", function() {
                        var _2cd = _2c9.getBox();
                        if (_2cc.h == _2cd.h && _2cc.w == _2cd.w) {
                            return;
                        }
                        _2cc = _2cd;
                        _2ca.emit("resize");
                    });
                    if (has("ie") == 8) {
                        var _2ce = screen.deviceXDPI;
                        setInterval(function() {
                            if (screen.deviceXDPI != _2ce) {
                                _2ce = screen.deviceXDPI;
                                _2ca.emit("resize");
                            }
                        }, 500);
                    }
                    if (has("ios")) {
                        on(document, "focusin", function(evt) {
                            _2cb = evt.target;
                        });
                        on(document, "focusout", function(evt) {
                            _2cb = null;
                        });
                    }
                });
                _2ca.getEffectiveBox = function(doc) {
                    var box = _2c9.getBox(doc);
                    var tag = _2cb && _2cb.tagName && _2cb.tagName.toLowerCase();
                    if (has("ios") && _2cb && !_2cb.readOnly && (tag == "textarea" || (tag == "input" && /^(color|email|number|password|search|tel|text|url)$/.test(_2cb.type)))) {
                        box.h *= (orientation == 0 || orientation == 180 ? 0.66 : 0.4);
                        var rect = _2cb.getBoundingClientRect();
                        box.h = Math.max(box.h, rect.top + rect.height);
                    }
                    return box;
                }
                ;
                return _2ca;
            });
        },
        "dijit/layout/ContentPane": function() {
            define(["dojo/_base/kernel", "dojo/_base/lang", "../_Widget", "../_Container", "./_ContentPaneResizeMixin", "dojo/string", "dojo/html", "dojo/_base/array", "dojo/_base/declare", "dojo/_base/Deferred", "dojo/dom", "dojo/dom-attr", "dojo/dom-construct", "dojo/_base/xhr", "dojo/i18n", "dojo/when", "dojo/i18n!../nls/loading"], function(_2cf, lang, _2d0, _2d1, _2d2, _2d3, html, _2d4, _2d5, _2d6, dom, _2d7, _2d8, xhr, i18n, when) {
                return _2d5("dijit.layout.ContentPane", [_2d0, _2d1, _2d2], {
                    href: "",
                    content: "",
                    extractContent: false,
                    parseOnLoad: true,
                    parserScope: _2cf._scopeName,
                    preventCache: false,
                    preload: false,
                    refreshOnShow: false,
                    loadingMessage: "<span class='dijitContentPaneLoading'><span class='dijitInline dijitIconLoading'></span>${loadingState}</span>",
                    errorMessage: "<span class='dijitContentPaneError'><span class='dijitInline dijitIconError'></span>${errorState}</span>",
                    isLoaded: false,
                    baseClass: "dijitContentPane",
                    ioArgs: {},
                    onLoadDeferred: null,
                    _setTitleAttr: null,
                    stopParser: true,
                    template: false,
                    markupFactory: function(_2d9, node, ctor) {
                        var self = new ctor(_2d9,node);
                        return !self.href && self._contentSetter && self._contentSetter.parseDeferred && !self._contentSetter.parseDeferred.isFulfilled() ? self._contentSetter.parseDeferred.then(function() {
                            return self;
                        }) : self;
                    },
                    create: function(_2da, _2db) {
                        if ((!_2da || !_2da.template) && _2db && !("href"in _2da) && !("content"in _2da)) {
                            _2db = dom.byId(_2db);
                            var df = _2db.ownerDocument.createDocumentFragment();
                            while (_2db.firstChild) {
                                df.appendChild(_2db.firstChild);
                            }
                            _2da = lang.delegate(_2da, {
                                content: df
                            });
                        }
                        this.inherited(arguments, [_2da, _2db]);
                    },
                    postMixInProperties: function() {
                        this.inherited(arguments);
                        var _2dc = i18n.getLocalization("dijit", "loading", this.lang);
                        this.loadingMessage = _2d3.substitute(this.loadingMessage, _2dc);
                        this.errorMessage = _2d3.substitute(this.errorMessage, _2dc);
                    },
                    buildRendering: function() {
                        this.inherited(arguments);
                        if (!this.containerNode) {
                            this.containerNode = this.domNode;
                        }
                        this.domNode.removeAttribute("title");
                    },
                    startup: function() {
                        this.inherited(arguments);
                        if (this._contentSetter) {
                            _2d4.forEach(this._contentSetter.parseResults, function(obj) {
                                if (!obj._started && !obj._destroyed && lang.isFunction(obj.startup)) {
                                    obj.startup();
                                    obj._started = true;
                                }
                            }, this);
                        }
                    },
                    _startChildren: function() {
                        _2d4.forEach(this.getChildren(), function(obj) {
                            if (!obj._started && !obj._destroyed && lang.isFunction(obj.startup)) {
                                obj.startup();
                                obj._started = true;
                            }
                        });
                        if (this._contentSetter) {
                            _2d4.forEach(this._contentSetter.parseResults, function(obj) {
                                if (!obj._started && !obj._destroyed && lang.isFunction(obj.startup)) {
                                    obj.startup();
                                    obj._started = true;
                                }
                            }, this);
                        }
                    },
                    setHref: function(href) {
                        _2cf.deprecated("dijit.layout.ContentPane.setHref() is deprecated. Use set('href', ...) instead.", "", "2.0");
                        return this.set("href", href);
                    },
                    _setHrefAttr: function(href) {
                        this.cancel();
                        this.onLoadDeferred = new _2d6(lang.hitch(this, "cancel"));
                        this.onLoadDeferred.then(lang.hitch(this, "onLoad"));
                        this._set("href", href);
                        if (this.preload || (this._created && this._isShown())) {
                            this._load();
                        } else {
                            this._hrefChanged = true;
                        }
                        return this.onLoadDeferred;
                    },
                    setContent: function(data) {
                        _2cf.deprecated("dijit.layout.ContentPane.setContent() is deprecated.  Use set('content', ...) instead.", "", "2.0");
                        this.set("content", data);
                    },
                    _setContentAttr: function(data) {
                        this._set("href", "");
                        this.cancel();
                        this.onLoadDeferred = new _2d6(lang.hitch(this, "cancel"));
                        if (this._created) {
                            this.onLoadDeferred.then(lang.hitch(this, "onLoad"));
                        }
                        this._setContent(data || "");
                        this._isDownloaded = false;
                        return this.onLoadDeferred;
                    },
                    _getContentAttr: function() {
                        return this.containerNode.innerHTML;
                    },
                    cancel: function() {
                        if (this._xhrDfd && (this._xhrDfd.fired == -1)) {
                            this._xhrDfd.cancel();
                        }
                        delete this._xhrDfd;
                        this.onLoadDeferred = null;
                    },
                    destroy: function() {
                        this.cancel();
                        this.inherited(arguments);
                    },
                    destroyRecursive: function(_2dd) {
                        if (this._beingDestroyed) {
                            return;
                        }
                        this.inherited(arguments);
                    },
                    _onShow: function() {
                        this.inherited(arguments);
                        if (this.href) {
                            if (!this._xhrDfd && (!this.isLoaded || this._hrefChanged || this.refreshOnShow)) {
                                return this.refresh();
                            }
                        }
                    },
                    refresh: function() {
                        this.cancel();
                        this.onLoadDeferred = new _2d6(lang.hitch(this, "cancel"));
                        this.onLoadDeferred.then(lang.hitch(this, "onLoad"));
                        this._load();
                        return this.onLoadDeferred;
                    },
                    _load: function() {
                        this._setContent(this.onDownloadStart(), true);
                        var self = this;
                        var _2de = {
                            preventCache: (this.preventCache || this.refreshOnShow),
                            url: this.href,
                            handleAs: "text"
                        };
                        if (lang.isObject(this.ioArgs)) {
                            lang.mixin(_2de, this.ioArgs);
                        }
                        var hand = (this._xhrDfd = (this.ioMethod || xhr.get)(_2de)), _2df;
                        hand.then(function(html) {
                            _2df = html;
                            try {
                                self._isDownloaded = true;
                                return self._setContent(html, false);
                            } catch (err) {
                                self._onError("Content", err);
                            }
                        }, function(err) {
                            if (!hand.canceled) {
                                self._onError("Download", err);
                            }
                            delete self._xhrDfd;
                            return err;
                        }).then(function() {
                            self.onDownloadEnd();
                            delete self._xhrDfd;
                            return _2df;
                        });
                        delete this._hrefChanged;
                    },
                    _onLoadHandler: function(data) {
                        this._set("isLoaded", true);
                        try {
                            this.onLoadDeferred.resolve(data);
                        } catch (e) {
                            console.error("Error " + (this.widgetId || this.id) + " running custom onLoad code: " + e.message);
                        }
                    },
                    _onUnloadHandler: function() {
                        this._set("isLoaded", false);
                        try {
                            this.onUnload();
                        } catch (e) {
                            console.error("Error " + this.widgetId + " running custom onUnload code: " + e.message);
                        }
                    },
                    destroyDescendants: function(_2e0) {
                        if (this.isLoaded) {
                            this._onUnloadHandler();
                        }
                        var _2e1 = this._contentSetter;
                        _2d4.forEach(this.getChildren(), function(_2e2) {
                            if (_2e2.destroyRecursive) {
                                _2e2.destroyRecursive(_2e0);
                            } else {
                                if (_2e2.destroy) {
                                    _2e2.destroy(_2e0);
                                }
                            }
                            _2e2._destroyed = true;
                        });
                        if (_2e1) {
                            _2d4.forEach(_2e1.parseResults, function(_2e3) {
                                if (!_2e3._destroyed) {
                                    if (_2e3.destroyRecursive) {
                                        _2e3.destroyRecursive(_2e0);
                                    } else {
                                        if (_2e3.destroy) {
                                            _2e3.destroy(_2e0);
                                        }
                                    }
                                    _2e3._destroyed = true;
                                }
                            });
                            delete _2e1.parseResults;
                        }
                        if (!_2e0) {
                            _2d8.empty(this.containerNode);
                        }
                        delete this._singleChild;
                    },
                    _setContent: function(cont, _2e4) {
                        cont = this.preprocessContent(cont);
                        this.destroyDescendants();
                        var _2e5 = this._contentSetter;
                        if (!(_2e5 && _2e5 instanceof html._ContentSetter)) {
                            _2e5 = this._contentSetter = new html._ContentSetter({
                                node: this.containerNode,
                                _onError: lang.hitch(this, this._onError),
                                onContentError: lang.hitch(this, function(e) {
                                    var _2e6 = this.onContentError(e);
                                    try {
                                        this.containerNode.innerHTML = _2e6;
                                    } catch (e) {
                                        console.error("Fatal " + this.id + " could not change content due to " + e.message, e);
                                    }
                                })
                            });
                        }
                        var _2e7 = lang.mixin({
                            cleanContent: this.cleanContent,
                            extractContent: this.extractContent,
                            parseContent: !cont.domNode && this.parseOnLoad,
                            parserScope: this.parserScope,
                            startup: false,
                            dir: this.dir,
                            lang: this.lang,
                            textDir: this.textDir
                        }, this._contentSetterParams || {});
                        var p = _2e5.set((lang.isObject(cont) && cont.domNode) ? cont.domNode : cont, _2e7);
                        var self = this;
                        return when(p && p.then ? p : _2e5.parseDeferred, function() {
                            delete self._contentSetterParams;
                            if (!_2e4) {
                                if (self._started) {
                                    self._startChildren();
                                    self._scheduleLayout();
                                }
                                self._onLoadHandler(cont);
                            }
                        });
                    },
                    preprocessContent: function(_2e8) {
                        return _2e8;
                    },
                    _onError: function(type, err, _2e9) {
                        this.onLoadDeferred.reject(err);
                        var _2ea = this["on" + type + "Error"].call(this, err);
                        if (_2e9) {
                            console.error(_2e9, err);
                        } else {
                            if (_2ea) {
                                this._setContent(_2ea, true);
                            }
                        }
                    },
                    onLoad: function() {},
                    onUnload: function() {},
                    onDownloadStart: function() {
                        return this.loadingMessage;
                    },
                    onContentError: function() {},
                    onDownloadError: function() {
                        return this.errorMessage;
                    },
                    onDownloadEnd: function() {}
                });
            });
        },
        "dijit/_Container": function() {
            define(["dojo/_base/array", "dojo/_base/declare", "dojo/dom-construct", "dojo/_base/kernel"], function(_2eb, _2ec, _2ed, _2ee) {
                return _2ec("dijit._Container", null, {
                    buildRendering: function() {
                        this.inherited(arguments);
                        if (!this.containerNode) {
                            this.containerNode = this.domNode;
                        }
                    },
                    addChild: function(_2ef, _2f0) {
                        var _2f1 = this.containerNode;
                        if (_2f0 > 0) {
                            _2f1 = _2f1.firstChild;
                            while (_2f0 > 0) {
                                if (_2f1.nodeType == 1) {
                                    _2f0--;
                                }
                                _2f1 = _2f1.nextSibling;
                            }
                            if (_2f1) {
                                _2f0 = "before";
                            } else {
                                _2f1 = this.containerNode;
                                _2f0 = "last";
                            }
                        }
                        _2ed.place(_2ef.domNode, _2f1, _2f0);
                        if (this._started && !_2ef._started) {
                            _2ef.startup();
                        }
                    },
                    removeChild: function(_2f2) {
                        if (typeof _2f2 == "number") {
                            _2f2 = this.getChildren()[_2f2];
                        }
                        if (_2f2) {
                            var node = _2f2.domNode;
                            if (node && node.parentNode) {
                                node.parentNode.removeChild(node);
                            }
                        }
                    },
                    hasChildren: function() {
                        return this.getChildren().length > 0;
                    },
                    _getSiblingOfChild: function(_2f3, dir) {
                        var _2f4 = this.getChildren()
                          , idx = _2eb.indexOf(_2f4, _2f3);
                        return _2f4[idx + dir];
                    },
                    getIndexOfChild: function(_2f5) {
                        return _2eb.indexOf(this.getChildren(), _2f5);
                    }
                });
            });
        },
        "dijit/layout/_ContentPaneResizeMixin": function() {
            define(["dojo/_base/array", "dojo/_base/declare", "dojo/dom-class", "dojo/dom-geometry", "dojo/dom-style", "dojo/_base/lang", "dojo/query", "../registry", "../Viewport", "./utils"], function(_2f6, _2f7, _2f8, _2f9, _2fa, lang, _2fb, _2fc, _2fd, _2fe) {
                return _2f7("dijit.layout._ContentPaneResizeMixin", null, {
                    doLayout: true,
                    isLayoutContainer: true,
                    startup: function() {
                        if (this._started) {
                            return;
                        }
                        var _2ff = this.getParent();
                        this._childOfLayoutWidget = _2ff && _2ff.isLayoutContainer;
                        this._needLayout = !this._childOfLayoutWidget;
                        this.inherited(arguments);
                        if (this._isShown()) {
                            this._onShow();
                        }
                        if (!this._childOfLayoutWidget) {
                            this.own(_2fd.on("resize", lang.hitch(this, "resize")));
                        }
                    },
                    _checkIfSingleChild: function() {
                        if (!this.doLayout) {
                            return;
                        }
                        var _300 = []
                          , _301 = false;
                        _2fb("> *", this.containerNode).some(function(node) {
                            var _302 = _2fc.byNode(node);
                            if (_302 && _302.resize) {
                                _300.push(_302);
                            } else {
                                if (!/script|link|style/i.test(node.nodeName) && node.offsetHeight) {
                                    _301 = true;
                                }
                            }
                        });
                        this._singleChild = _300.length == 1 && !_301 ? _300[0] : null;
                        _2f8.toggle(this.containerNode, this.baseClass + "SingleChild", !!this._singleChild);
                    },
                    resize: function(_303, _304) {
                        this._resizeCalled = true;
                        this._scheduleLayout(_303, _304);
                    },
                    _scheduleLayout: function(_305, _306) {
                        if (this._isShown()) {
                            this._layout(_305, _306);
                        } else {
                            this._needLayout = true;
                            this._changeSize = _305;
                            this._resultSize = _306;
                        }
                    },
                    _layout: function(_307, _308) {
                        delete this._needLayout;
                        if (!this._wasShown && this.open !== false) {
                            this._onShow();
                        }
                        if (_307) {
                            _2f9.setMarginBox(this.domNode, _307);
                        }
                        var cn = this.containerNode;
                        if (cn === this.domNode) {
                            var mb = _308 || {};
                            lang.mixin(mb, _307 || {});
                            if (!("h"in mb) || !("w"in mb)) {
                                mb = lang.mixin(_2f9.getMarginBox(cn), mb);
                            }
                            this._contentBox = _2fe.marginBox2contentBox(cn, mb);
                        } else {
                            this._contentBox = _2f9.getContentBox(cn);
                        }
                        this._layoutChildren();
                    },
                    _layoutChildren: function() {
                        this._checkIfSingleChild();
                        if (this._singleChild && this._singleChild.resize) {
                            var cb = this._contentBox || _2f9.getContentBox(this.containerNode);
                            this._singleChild.resize({
                                w: cb.w,
                                h: cb.h
                            });
                        } else {
                            var _309 = this.getChildren(), _30a, i = 0;
                            while (_30a = _309[i++]) {
                                if (_30a.resize) {
                                    _30a.resize();
                                }
                            }
                        }
                    },
                    _isShown: function() {
                        if (this._childOfLayoutWidget) {
                            if (this._resizeCalled && "open"in this) {
                                return this.open;
                            }
                            return this._resizeCalled;
                        } else {
                            if ("open"in this) {
                                return this.open;
                            } else {
                                var node = this.domNode
                                  , _30b = this.domNode.parentNode;
                                return (node.style.display != "none") && (node.style.visibility != "hidden") && !_2f8.contains(node, "dijitHidden") && _30b && _30b.style && (_30b.style.display != "none");
                            }
                        }
                    },
                    _onShow: function() {
                        this._wasShown = true;
                        if (this._needLayout) {
                            this._layout(this._changeSize, this._resultSize);
                        }
                        this.inherited(arguments);
                    }
                });
            });
        },
        "dijit/layout/utils": function() {
            define(["dojo/_base/array", "dojo/dom-class", "dojo/dom-geometry", "dojo/dom-style", "dojo/_base/lang"], function(_30c, _30d, _30e, _30f, lang) {
                function _310(word) {
                    return word.substring(0, 1).toUpperCase() + word.substring(1);
                }
                ;function size(_311, dim) {
                    var _312 = _311.resize ? _311.resize(dim) : _30e.setMarginBox(_311.domNode, dim);
                    if (_312) {
                        lang.mixin(_311, _312);
                    } else {
                        lang.mixin(_311, _30e.getMarginBox(_311.domNode));
                        lang.mixin(_311, dim);
                    }
                }
                ;var _313 = {
                    marginBox2contentBox: function(node, mb) {
                        var cs = _30f.getComputedStyle(node);
                        var me = _30e.getMarginExtents(node, cs);
                        var pb = _30e.getPadBorderExtents(node, cs);
                        return {
                            l: _30f.toPixelValue(node, cs.paddingLeft),
                            t: _30f.toPixelValue(node, cs.paddingTop),
                            w: mb.w - (me.w + pb.w),
                            h: mb.h - (me.h + pb.h)
                        };
                    },
                    layoutChildren: function(_314, dim, _315, _316, _317) {
                        dim = lang.mixin({}, dim);
                        _30d.add(_314, "dijitLayoutContainer");
                        _315 = _30c.filter(_315, function(item) {
                            return item.region != "center" && item.layoutAlign != "client";
                        }).concat(_30c.filter(_315, function(item) {
                            return item.region == "center" || item.layoutAlign == "client";
                        }));
                        _30c.forEach(_315, function(_318) {
                            var elm = _318.domNode
                              , pos = (_318.region || _318.layoutAlign);
                            if (!pos) {
                                throw new Error("No region setting for " + _318.id);
                            }
                            var _319 = elm.style;
                            _319.left = dim.l + "px";
                            _319.top = dim.t + "px";
                            _319.position = "absolute";
                            _30d.add(elm, "dijitAlign" + _310(pos));
                            var _31a = {};
                            if (_316 && _316 == _318.id) {
                                _31a[_318.region == "top" || _318.region == "bottom" ? "h" : "w"] = _317;
                            }
                            if (pos == "leading") {
                                pos = _318.isLeftToRight() ? "left" : "right";
                            }
                            if (pos == "trailing") {
                                pos = _318.isLeftToRight() ? "right" : "left";
                            }
                            if (pos == "top" || pos == "bottom") {
                                _31a.w = dim.w;
                                size(_318, _31a);
                                dim.h -= _318.h;
                                if (pos == "top") {
                                    dim.t += _318.h;
                                } else {
                                    _319.top = dim.t + dim.h + "px";
                                }
                            } else {
                                if (pos == "left" || pos == "right") {
                                    _31a.h = dim.h;
                                    size(_318, _31a);
                                    dim.w -= _318.w;
                                    if (pos == "left") {
                                        dim.l += _318.w;
                                    } else {
                                        _319.left = dim.l + dim.w + "px";
                                    }
                                } else {
                                    if (pos == "client" || pos == "center") {
                                        size(_318, dim);
                                    }
                                }
                            }
                        });
                    }
                };
                lang.setObject("dijit.layout.utils", _313);
                return _313;
            });
        },
        "dojo/html": function() {
            define(["./_base/kernel", "./_base/lang", "./_base/array", "./_base/declare", "./dom", "./dom-construct", "./parser"], function(_31b, lang, _31c, _31d, dom, _31e, _31f) {
                var _320 = 0;
                var html = {
                    _secureForInnerHtml: function(cont) {
                        return cont.replace(/(?:\s*<!DOCTYPE\s[^>]+>|<title[^>]*>[\s\S]*?<\/title>)/ig, "");
                    },
                    _emptyNode: _31e.empty,
                    _setNodeContent: function(node, cont) {
                        _31e.empty(node);
                        if (cont) {
                            if (typeof cont == "number") {
                                cont = cont.toString();
                            }
                            if (typeof cont == "string") {
                                cont = _31e.toDom(cont, node.ownerDocument);
                            }
                            if (!cont.nodeType && lang.isArrayLike(cont)) {
                                for (var _321 = cont.length, i = 0; i < cont.length; i = _321 == cont.length ? i + 1 : 0) {
                                    _31e.place(cont[i], node, "last");
                                }
                            } else {
                                _31e.place(cont, node, "last");
                            }
                        }
                        return node;
                    },
                    _ContentSetter: _31d("dojo.html._ContentSetter", null, {
                        node: "",
                        content: "",
                        id: "",
                        cleanContent: false,
                        extractContent: false,
                        parseContent: false,
                        parserScope: _31b._scopeName,
                        startup: true,
                        constructor: function(_322, node) {
                            lang.mixin(this, _322 || {});
                            node = this.node = dom.byId(this.node || node);
                            if (!this.id) {
                                this.id = ["Setter", (node) ? node.id || node.tagName : "", _320++].join("_");
                            }
                        },
                        set: function(cont, _323) {
                            if (undefined !== cont) {
                                this.content = cont;
                            }
                            if (typeof cont == "number") {
                                cont = cont.toString();
                            }
                            if (_323) {
                                this._mixin(_323);
                            }
                            this.onBegin();
                            this.setContent();
                            var ret = this.onEnd();
                            if (ret && ret.then) {
                                return ret;
                            } else {
                                return this.node;
                            }
                        },
                        setContent: function() {
                            var node = this.node;
                            if (!node) {
                                throw new Error(this.declaredClass + ": setContent given no node");
                            }
                            try {
                                node = html._setNodeContent(node, this.content);
                            } catch (e) {
                                var _324 = this.onContentError(e);
                                try {
                                    node.innerHTML = _324;
                                } catch (e) {
                                    console.error("Fatal " + this.declaredClass + ".setContent could not change content due to " + e.message, e);
                                }
                            }
                            this.node = node;
                        },
                        empty: function() {
                            if (this.parseDeferred) {
                                if (!this.parseDeferred.isResolved()) {
                                    this.parseDeferred.cancel();
                                }
                                delete this.parseDeferred;
                            }
                            if (this.parseResults && this.parseResults.length) {
                                _31c.forEach(this.parseResults, function(w) {
                                    if (w.destroy) {
                                        w.destroy();
                                    }
                                });
                                delete this.parseResults;
                            }
                            _31e.empty(this.node);
                        },
                        onBegin: function() {
                            var cont = this.content;
                            if (lang.isString(cont)) {
                                if (this.cleanContent) {
                                    cont = html._secureForInnerHtml(cont);
                                }
                                if (this.extractContent) {
                                    var _325 = cont.match(/<body[^>]*>\s*([\s\S]+)\s*<\/body>/im);
                                    if (_325) {
                                        cont = _325[1];
                                    }
                                }
                            }
                            this.empty();
                            this.content = cont;
                            return this.node;
                        },
                        onEnd: function() {
                            if (this.parseContent) {
                                this._parse();
                            }
                            return this.node;
                        },
                        tearDown: function() {
                            delete this.parseResults;
                            delete this.parseDeferred;
                            delete this.node;
                            delete this.content;
                        },
                        onContentError: function(err) {
                            return "Error occurred setting content: " + err;
                        },
                        onExecError: function(err) {
                            return "Error occurred executing scripts: " + err;
                        },
                        _mixin: function(_326) {
                            var _327 = {}, key;
                            for (key in _326) {
                                if (key in _327) {
                                    continue;
                                }
                                this[key] = _326[key];
                            }
                        },
                        _parse: function() {
                            var _328 = this.node;
                            try {
                                var _329 = {};
                                _31c.forEach(["dir", "lang", "textDir"], function(name) {
                                    if (this[name]) {
                                        _329[name] = this[name];
                                    }
                                }, this);
                                var self = this;
                                this.parseDeferred = _31f.parse({
                                    rootNode: _328,
                                    noStart: !this.startup,
                                    inherited: _329,
                                    scope: this.parserScope
                                }).then(function(_32a) {
                                    return self.parseResults = _32a;
                                }, function(e) {
                                    self._onError("Content", e, "Error parsing in _ContentSetter#" + self.id);
                                });
                            } catch (e) {
                                this._onError("Content", e, "Error parsing in _ContentSetter#" + this.id);
                            }
                        },
                        _onError: function(type, err, _32b) {
                            var _32c = this["on" + type + "Error"].call(this, err);
                            if (_32b) {
                                console.error(_32b, err);
                            } else {
                                if (_32c) {
                                    html._setNodeContent(this.node, _32c, true);
                                }
                            }
                        }
                    }),
                    set: function(node, cont, _32d) {
                        if (undefined == cont) {
                            console.warn("dojo.html.set: no cont argument provided, using empty string");
                            cont = "";
                        }
                        if (typeof cont == "number") {
                            cont = cont.toString();
                        }
                        if (!_32d) {
                            return html._setNodeContent(node, cont, true);
                        } else {
                            var op = new html._ContentSetter(lang.mixin(_32d, {
                                content: cont,
                                node: node
                            }));
                            return op.set();
                        }
                    }
                };
                lang.setObject("dojo.html", html);
                return html;
            });
        },
        "dojo/parser": function() {
            define(["require", "./_base/kernel", "./_base/lang", "./_base/array", "./_base/config", "./dom", "./_base/window", "./_base/url", "./aspect", "./promise/all", "./date/stamp", "./Deferred", "./has", "./query", "./on", "./ready"], function(_32e, dojo, _32f, _330, _331, dom, _332, _333, _334, all, _335, _336, has, _337, don, _338) {
                new Date("X");
                function _339(text) {
                    return eval("(" + text + ")");
                }
                ;var _33a = 0;
                _334.after(_32f, "extend", function() {
                    _33a++;
                }, true);
                function _33b(ctor) {
                    var map = ctor._nameCaseMap
                      , _33c = ctor.prototype;
                    if (!map || map._extendCnt < _33a) {
                        map = ctor._nameCaseMap = {};
                        for (var name in _33c) {
                            if (name.charAt(0) === "_") {
                                continue;
                            }
                            map[name.toLowerCase()] = name;
                        }
                        map._extendCnt = _33a;
                    }
                    return map;
                }
                ;function _33d(_33e, _33f) {
                    if (!_33f) {
                        _33f = _32e;
                    }
                    var _340 = _33f._dojoParserCtorMap || (_33f._dojoParserCtorMap = {});
                    var ts = _33e.join();
                    if (!_340[ts]) {
                        var _341 = [];
                        for (var i = 0, l = _33e.length; i < l; i++) {
                            var t = _33e[i];
                            _341[_341.length] = (_340[t] = _340[t] || (_32f.getObject(t) || (~t.indexOf("/") && _33f(t))));
                        }
                        var ctor = _341.shift();
                        _340[ts] = _341.length ? (ctor.createSubclass ? ctor.createSubclass(_341) : ctor.extend.apply(ctor, _341)) : ctor;
                    }
                    return _340[ts];
                }
                ;var _342 = {
                    _clearCache: function() {
                        _33a++;
                        _ctorMap = {};
                    },
                    _functionFromScript: function(_343, _344) {
                        var _345 = ""
                          , _346 = ""
                          , _347 = (_343.getAttribute(_344 + "args") || _343.getAttribute("args"))
                          , _348 = _343.getAttribute("with");
                        var _349 = (_347 || "").split(/\s*,\s*/);
                        if (_348 && _348.length) {
                            _330.forEach(_348.split(/\s*,\s*/), function(part) {
                                _345 += "with(" + part + "){";
                                _346 += "}";
                            });
                        }
                        return new Function(_349,_345 + _343.innerHTML + _346);
                    },
                    instantiate: function(_34a, _34b, _34c) {
                        _34b = _34b || {};
                        _34c = _34c || {};
                        var _34d = (_34c.scope || dojo._scopeName) + "Type"
                          , _34e = "data-" + (_34c.scope || dojo._scopeName) + "-"
                          , _34f = _34e + "type"
                          , _350 = _34e + "mixins";
                        var list = [];
                        _330.forEach(_34a, function(node) {
                            var type = _34d in _34b ? _34b[_34d] : node.getAttribute(_34f) || node.getAttribute(_34d);
                            if (type) {
                                var _351 = node.getAttribute(_350)
                                  , _352 = _351 ? [type].concat(_351.split(/\s*,\s*/)) : [type];
                                list.push({
                                    node: node,
                                    types: _352
                                });
                            }
                        });
                        return this._instantiate(list, _34b, _34c);
                    },
                    _instantiate: function(_353, _354, _355, _356) {
                        var _357 = _330.map(_353, function(obj) {
                            var ctor = obj.ctor || _33d(obj.types, _355.contextRequire);
                            if (!ctor) {
                                throw new Error("Unable to resolve constructor for: '" + obj.types.join() + "'");
                            }
                            return this.construct(ctor, obj.node, _354, _355, obj.scripts, obj.inherited);
                        }, this);
                        function _358(_359) {
                            if (!_354._started && !_355.noStart) {
                                _330.forEach(_359, function(_35a) {
                                    if (typeof _35a.startup === "function" && !_35a._started) {
                                        _35a.startup();
                                    }
                                });
                            }
                            return _359;
                        }
                        ;if (_356) {
                            return all(_357).then(_358);
                        } else {
                            return _358(_357);
                        }
                    },
                    construct: function(ctor, node, _35b, _35c, _35d, _35e) {
                        var _35f = ctor && ctor.prototype;
                        _35c = _35c || {};
                        var _360 = {};
                        if (_35c.defaults) {
                            _32f.mixin(_360, _35c.defaults);
                        }
                        if (_35e) {
                            _32f.mixin(_360, _35e);
                        }
                        var _361;
                        if (has("dom-attributes-explicit")) {
                            _361 = node.attributes;
                        } else {
                            if (has("dom-attributes-specified-flag")) {
                                _361 = _330.filter(node.attributes, function(a) {
                                    return a.specified;
                                });
                            } else {
                                var _362 = /^input$|^img$/i.test(node.nodeName) ? node : node.cloneNode(false)
                                  , _363 = _362.outerHTML.replace(/=[^\s"']+|="[^"]*"|='[^']*'/g, "").replace(/^\s*<[a-zA-Z0-9]*\s*/, "").replace(/\s*>.*$/, "");
                                _361 = _330.map(_363.split(/\s+/), function(name) {
                                    var _364 = name.toLowerCase();
                                    return {
                                        name: name,
                                        value: (node.nodeName == "LI" && name == "value") || _364 == "enctype" ? node.getAttribute(_364) : node.getAttributeNode(_364).value
                                    };
                                });
                            }
                        }
                        var _365 = _35c.scope || dojo._scopeName
                          , _366 = "data-" + _365 + "-"
                          , hash = {};
                        if (_365 !== "dojo") {
                            hash[_366 + "props"] = "data-dojo-props";
                            hash[_366 + "type"] = "data-dojo-type";
                            hash[_366 + "mixins"] = "data-dojo-mixins";
                            hash[_365 + "type"] = "dojotype";
                            hash[_366 + "id"] = "data-dojo-id";
                        }
                        var i = 0, item, _367 = [], _368, _369;
                        while (item = _361[i++]) {
                            var name = item.name
                              , _36a = name.toLowerCase()
                              , _36b = item.value;
                            switch (hash[_36a] || _36a) {
                            case "data-dojo-type":
                            case "dojotype":
                            case "data-dojo-mixins":
                                break;
                            case "data-dojo-props":
                                _369 = _36b;
                                break;
                            case "data-dojo-id":
                            case "jsid":
                                _368 = _36b;
                                break;
                            case "data-dojo-attach-point":
                            case "dojoattachpoint":
                                _360.dojoAttachPoint = _36b;
                                break;
                            case "data-dojo-attach-event":
                            case "dojoattachevent":
                                _360.dojoAttachEvent = _36b;
                                break;
                            case "class":
                                _360["class"] = node.className;
                                break;
                            case "style":
                                _360["style"] = node.style && node.style.cssText;
                                break;
                            default:
                                if (!(name in _35f)) {
                                    var map = _33b(ctor);
                                    name = map[_36a] || name;
                                }
                                if (name in _35f) {
                                    switch (typeof _35f[name]) {
                                    case "string":
                                        _360[name] = _36b;
                                        break;
                                    case "number":
                                        _360[name] = _36b.length ? Number(_36b) : NaN;
                                        break;
                                    case "boolean":
                                        _360[name] = _36b.toLowerCase() != "false";
                                        break;
                                    case "function":
                                        if (_36b === "" || _36b.search(/[^\w\.]+/i) != -1) {
                                            _360[name] = new Function(_36b);
                                        } else {
                                            _360[name] = _32f.getObject(_36b, false) || new Function(_36b);
                                        }
                                        _367.push(name);
                                        break;
                                    default:
                                        var pVal = _35f[name];
                                        _360[name] = (pVal && "length"in pVal) ? (_36b ? _36b.split(/\s*,\s*/) : []) : (pVal instanceof Date) ? (_36b == "" ? new Date("") : _36b == "now" ? new Date() : _335.fromISOString(_36b)) : (pVal instanceof _333) ? (dojo.baseUrl + _36b) : _339(_36b);
                                    }
                                } else {
                                    _360[name] = _36b;
                                }
                            }
                        }
                        for (var j = 0; j < _367.length; j++) {
                            var _36c = _367[j].toLowerCase();
                            node.removeAttribute(_36c);
                            node[_36c] = null;
                        }
                        if (_369) {
                            try {
                                _369 = _339.call(_35c.propsThis, "{" + _369 + "}");
                                _32f.mixin(_360, _369);
                            } catch (e) {
                                throw new Error(e.toString() + " in data-dojo-props='" + _369 + "'");
                            }
                        }
                        _32f.mixin(_360, _35b);
                        if (!_35d) {
                            _35d = (ctor && (ctor._noScript || _35f._noScript) ? [] : _337("> script[type^='dojo/']", node));
                        }
                        var _36d = []
                          , _36e = []
                          , _36f = []
                          , ons = [];
                        if (_35d) {
                            for (i = 0; i < _35d.length; i++) {
                                var _370 = _35d[i];
                                node.removeChild(_370);
                                var _371 = (_370.getAttribute(_366 + "event") || _370.getAttribute("event"))
                                  , prop = _370.getAttribute(_366 + "prop")
                                  , _372 = _370.getAttribute(_366 + "method")
                                  , _373 = _370.getAttribute(_366 + "advice")
                                  , _374 = _370.getAttribute("type")
                                  , nf = this._functionFromScript(_370, _366);
                                if (_371) {
                                    if (_374 == "dojo/connect") {
                                        _36d.push({
                                            method: _371,
                                            func: nf
                                        });
                                    } else {
                                        if (_374 == "dojo/on") {
                                            ons.push({
                                                event: _371,
                                                func: nf
                                            });
                                        } else {
                                            _360[_371] = nf;
                                        }
                                    }
                                } else {
                                    if (_374 == "dojo/aspect") {
                                        _36d.push({
                                            method: _372,
                                            advice: _373,
                                            func: nf
                                        });
                                    } else {
                                        if (_374 == "dojo/watch") {
                                            _36f.push({
                                                prop: prop,
                                                func: nf
                                            });
                                        } else {
                                            _36e.push(nf);
                                        }
                                    }
                                }
                            }
                        }
                        var _375 = ctor.markupFactory || _35f.markupFactory;
                        var _376 = _375 ? _375(_360, node, ctor) : new ctor(_360,node);
                        function _377(_378) {
                            if (_368) {
                                _32f.setObject(_368, _378);
                            }
                            for (i = 0; i < _36d.length; i++) {
                                _334[_36d[i].advice || "after"](_378, _36d[i].method, _32f.hitch(_378, _36d[i].func), true);
                            }
                            for (i = 0; i < _36e.length; i++) {
                                _36e[i].call(_378);
                            }
                            for (i = 0; i < _36f.length; i++) {
                                _378.watch(_36f[i].prop, _36f[i].func);
                            }
                            for (i = 0; i < ons.length; i++) {
                                don(_378, ons[i].event, ons[i].func);
                            }
                            return _378;
                        }
                        ;if (_376.then) {
                            return _376.then(_377);
                        } else {
                            return _377(_376);
                        }
                    },
                    scan: function(root, _379) {
                        var list = []
                          , mids = []
                          , _37a = {};
                        var _37b = (_379.scope || dojo._scopeName) + "Type"
                          , _37c = "data-" + (_379.scope || dojo._scopeName) + "-"
                          , _37d = _37c + "type"
                          , _37e = _37c + "textdir"
                          , _37f = _37c + "mixins";
                        var node = root.firstChild;
                        var _380 = _379.inherited;
                        if (!_380) {
                            function _381(node, attr) {
                                return (node.getAttribute && node.getAttribute(attr)) || (node.parentNode && _381(node.parentNode, attr));
                            }
                            ;_380 = {
                                dir: _381(root, "dir"),
                                lang: _381(root, "lang"),
                                textDir: _381(root, _37e)
                            };
                            for (var key in _380) {
                                if (!_380[key]) {
                                    delete _380[key];
                                }
                            }
                        }
                        var _382 = {
                            inherited: _380
                        };
                        var _383;
                        var _384;
                        function _385(_386) {
                            if (!_386.inherited) {
                                _386.inherited = {};
                                var node = _386.node
                                  , _387 = _385(_386.parent);
                                var _388 = {
                                    dir: node.getAttribute("dir") || _387.dir,
                                    lang: node.getAttribute("lang") || _387.lang,
                                    textDir: node.getAttribute(_37e) || _387.textDir
                                };
                                for (var key in _388) {
                                    if (_388[key]) {
                                        _386.inherited[key] = _388[key];
                                    }
                                }
                            }
                            return _386.inherited;
                        }
                        ;while (true) {
                            if (!node) {
                                if (!_382 || !_382.node) {
                                    break;
                                }
                                node = _382.node.nextSibling;
                                _384 = false;
                                _382 = _382.parent;
                                _383 = _382.scripts;
                                continue;
                            }
                            if (node.nodeType != 1) {
                                node = node.nextSibling;
                                continue;
                            }
                            if (_383 && node.nodeName.toLowerCase() == "script") {
                                type = node.getAttribute("type");
                                if (type && /^dojo\/\w/i.test(type)) {
                                    _383.push(node);
                                }
                                node = node.nextSibling;
                                continue;
                            }
                            if (_384) {
                                node = node.nextSibling;
                                continue;
                            }
                            var type = node.getAttribute(_37d) || node.getAttribute(_37b);
                            var _389 = node.firstChild;
                            if (!type && (!_389 || (_389.nodeType == 3 && !_389.nextSibling))) {
                                node = node.nextSibling;
                                continue;
                            }
                            var _38a;
                            var ctor = null;
                            if (type) {
                                var _38b = node.getAttribute(_37f)
                                  , _38c = _38b ? [type].concat(_38b.split(/\s*,\s*/)) : [type];
                                try {
                                    ctor = _33d(_38c, _379.contextRequire);
                                } catch (e) {}
                                if (!ctor) {
                                    _330.forEach(_38c, function(t) {
                                        if (~t.indexOf("/") && !_37a[t]) {
                                            _37a[t] = true;
                                            mids[mids.length] = t;
                                        }
                                    });
                                }
                                var _38d = ctor && !ctor.prototype._noScript ? [] : null;
                                _38a = {
                                    types: _38c,
                                    ctor: ctor,
                                    parent: _382,
                                    node: node,
                                    scripts: _38d
                                };
                                _38a.inherited = _385(_38a);
                                list.push(_38a);
                            } else {
                                _38a = {
                                    node: node,
                                    scripts: _383,
                                    parent: _382
                                };
                            }
                            _383 = _38d;
                            _384 = node.stopParser || (ctor && ctor.prototype.stopParser && !(_379.template));
                            _382 = _38a;
                            node = _389;
                        }
                        var d = new _336();
                        if (mids.length) {
                            if (has("dojo-debug-messages")) {
                                console.warn("WARNING: Modules being Auto-Required: " + mids.join(", "));
                            }
                            var r = _379.contextRequire || _32e;
                            r(mids, function() {
                                d.resolve(_330.filter(list, function(_38e) {
                                    if (!_38e.ctor) {
                                        try {
                                            _38e.ctor = _33d(_38e.types, _379.contextRequire);
                                        } catch (e) {}
                                    }
                                    var _38f = _38e.parent;
                                    while (_38f && !_38f.types) {
                                        _38f = _38f.parent;
                                    }
                                    var _390 = _38e.ctor && _38e.ctor.prototype;
                                    _38e.instantiateChildren = !(_390 && _390.stopParser && !(_379.template));
                                    _38e.instantiate = !_38f || (_38f.instantiate && _38f.instantiateChildren);
                                    return _38e.instantiate;
                                }));
                            });
                        } else {
                            d.resolve(list);
                        }
                        return d.promise;
                    },
                    _require: function(_391, _392) {
                        var hash = _339("{" + _391.innerHTML + "}")
                          , vars = []
                          , mids = []
                          , d = new _336();
                        var _393 = (_392 && _392.contextRequire) || _32e;
                        for (var name in hash) {
                            vars.push(name);
                            mids.push(hash[name]);
                        }
                        _393(mids, function() {
                            for (var i = 0; i < vars.length; i++) {
                                _32f.setObject(vars[i], arguments[i]);
                            }
                            d.resolve(arguments);
                        });
                        return d.promise;
                    },
                    _scanAmd: function(root, _394) {
                        var _395 = new _336()
                          , _396 = _395.promise;
                        _395.resolve(true);
                        var self = this;
                        _337("script[type='dojo/require']", root).forEach(function(node) {
                            _396 = _396.then(function() {
                                return self._require(node, _394);
                            });
                            node.parentNode.removeChild(node);
                        });
                        return _396;
                    },
                    parse: function(_397, _398) {
                        if (_397 && typeof _397 != "string" && !("nodeType"in _397)) {
                            _398 = _397;
                            _397 = _398.rootNode;
                        }
                        var root = _397 ? dom.byId(_397) : _332.body();
                        _398 = _398 || {};
                        var _399 = _398.template ? {
                            template: true
                        } : {}
                          , _39a = []
                          , self = this;
                        var p = this._scanAmd(root, _398).then(function() {
                            return self.scan(root, _398);
                        }).then(function(_39b) {
                            return self._instantiate(_39b, _399, _398, true);
                        }).then(function(_39c) {
                            return _39a = _39a.concat(_39c);
                        }).otherwise(function(e) {
                            console.error("dojo/parser::parse() error", e);
                            throw e;
                        });
                        _32f.mixin(_39a, p);
                        return _39a;
                    }
                };
                if (1) {
                    dojo.parser = _342;
                }
                if (_331.parseOnLoad) {
                    _338(100, _342, "parse");
                }
                return _342;
            });
        },
        "dojo/_base/url": function() {
            define(["./kernel"], function(dojo) {
                var ore = new RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$")
                  , ire = new RegExp("^((([^\\[:]+):)?([^@]+)@)?(\\[([^\\]]+)\\]|([^\\[:]*))(:([0-9]+))?$")
                  , _39d = function() {
                    var n = null
                      , _39e = arguments
                      , uri = [_39e[0]];
                    for (var i = 1; i < _39e.length; i++) {
                        if (!_39e[i]) {
                            continue;
                        }
                        var _39f = new _39d(_39e[i] + "")
                          , _3a0 = new _39d(uri[0] + "");
                        if (_39f.path == "" && !_39f.scheme && !_39f.authority && !_39f.query) {
                            if (_39f.fragment != n) {
                                _3a0.fragment = _39f.fragment;
                            }
                            _39f = _3a0;
                        } else {
                            if (!_39f.scheme) {
                                _39f.scheme = _3a0.scheme;
                                if (!_39f.authority) {
                                    _39f.authority = _3a0.authority;
                                    if (_39f.path.charAt(0) != "/") {
                                        var path = _3a0.path.substring(0, _3a0.path.lastIndexOf("/") + 1) + _39f.path;
                                        var segs = path.split("/");
                                        for (var j = 0; j < segs.length; j++) {
                                            if (segs[j] == ".") {
                                                if (j == segs.length - 1) {
                                                    segs[j] = "";
                                                } else {
                                                    segs.splice(j, 1);
                                                    j--;
                                                }
                                            } else {
                                                if (j > 0 && !(j == 1 && segs[0] == "") && segs[j] == ".." && segs[j - 1] != "..") {
                                                    if (j == (segs.length - 1)) {
                                                        segs.splice(j, 1);
                                                        segs[j - 1] = "";
                                                    } else {
                                                        segs.splice(j - 1, 2);
                                                        j -= 2;
                                                    }
                                                }
                                            }
                                        }
                                        _39f.path = segs.join("/");
                                    }
                                }
                            }
                        }
                        uri = [];
                        if (_39f.scheme) {
                            uri.push(_39f.scheme, ":");
                        }
                        if (_39f.authority) {
                            uri.push("//", _39f.authority);
                        }
                        uri.push(_39f.path);
                        if (_39f.query) {
                            uri.push("?", _39f.query);
                        }
                        if (_39f.fragment) {
                            uri.push("#", _39f.fragment);
                        }
                    }
                    this.uri = uri.join("");
                    var r = this.uri.match(ore);
                    this.scheme = r[2] || (r[1] ? "" : n);
                    this.authority = r[4] || (r[3] ? "" : n);
                    this.path = r[5];
                    this.query = r[7] || (r[6] ? "" : n);
                    this.fragment = r[9] || (r[8] ? "" : n);
                    if (this.authority != n) {
                        r = this.authority.match(ire);
                        this.user = r[3] || n;
                        this.password = r[4] || n;
                        this.host = r[6] || r[7];
                        this.port = r[9] || n;
                    }
                };
                _39d.prototype.toString = function() {
                    return this.uri;
                }
                ;
                return dojo._Url = _39d;
            });
        },
        "dojo/promise/all": function() {
            define(["../_base/array", "../_base/lang", "../Deferred", "../when"], function(_3a1, lang, _3a2, when) {
                "use strict";
                var some = _3a1.some;
                return function all(_3a3) {
                    var _3a4, _3a1;
                    if (lang.isArray(_3a3)) {
                        _3a1 = _3a3;
                    } else {
                        if (_3a3 && typeof _3a3 === "object") {
                            _3a4 = _3a3;
                        }
                    }
                    var _3a5;
                    var _3a6 = [];
                    if (_3a4) {
                        _3a1 = [];
                        for (var key in _3a4) {
                            if (Object.hasOwnProperty.call(_3a4, key)) {
                                _3a6.push(key);
                                _3a1.push(_3a4[key]);
                            }
                        }
                        _3a5 = {};
                    } else {
                        if (_3a1) {
                            _3a5 = [];
                        }
                    }
                    if (!_3a1 || !_3a1.length) {
                        return new _3a2().resolve(_3a5);
                    }
                    var _3a7 = new _3a2();
                    _3a7.promise.always(function() {
                        _3a5 = _3a6 = null;
                    });
                    var _3a8 = _3a1.length;
                    some(_3a1, function(_3a9, _3aa) {
                        if (!_3a4) {
                            _3a6.push(_3aa);
                        }
                        when(_3a9, function(_3ab) {
                            if (!_3a7.isFulfilled()) {
                                _3a5[_3a6[_3aa]] = _3ab;
                                if (--_3a8 === 0) {
                                    _3a7.resolve(_3a5);
                                }
                            }
                        }, _3a7.reject);
                        return _3a7.isFulfilled();
                    });
                    return _3a7.promise;
                }
                ;
            });
        },
        "dojo/date/stamp": function() {
            define(["../_base/lang", "../_base/array"], function(lang, _3ac) {
                var _3ad = {};
                lang.setObject("dojo.date.stamp", _3ad);
                _3ad.fromISOString = function(_3ae, _3af) {
                    if (!_3ad._isoRegExp) {
                        _3ad._isoRegExp = /^(?:(\d{4})(?:-(\d{2})(?:-(\d{2}))?)?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(.\d+)?)?((?:[+-](\d{2}):(\d{2}))|Z)?)?$/;
                    }
                    var _3b0 = _3ad._isoRegExp.exec(_3ae)
                      , _3b1 = null;
                    if (_3b0) {
                        _3b0.shift();
                        if (_3b0[1]) {
                            _3b0[1]--;
                        }
                        if (_3b0[6]) {
                            _3b0[6] *= 1000;
                        }
                        if (_3af) {
                            _3af = new Date(_3af);
                            _3ac.forEach(_3ac.map(["FullYear", "Month", "Date", "Hours", "Minutes", "Seconds", "Milliseconds"], function(prop) {
                                return _3af["get" + prop]();
                            }), function(_3b2, _3b3) {
                                _3b0[_3b3] = _3b0[_3b3] || _3b2;
                            });
                        }
                        _3b1 = new Date(_3b0[0] || 1970,_3b0[1] || 0,_3b0[2] || 1,_3b0[3] || 0,_3b0[4] || 0,_3b0[5] || 0,_3b0[6] || 0);
                        if (_3b0[0] < 100) {
                            _3b1.setFullYear(_3b0[0] || 1970);
                        }
                        var _3b4 = 0
                          , _3b5 = _3b0[7] && _3b0[7].charAt(0);
                        if (_3b5 != "Z") {
                            _3b4 = ((_3b0[8] || 0) * 60) + (Number(_3b0[9]) || 0);
                            if (_3b5 != "-") {
                                _3b4 *= -1;
                            }
                        }
                        if (_3b5) {
                            _3b4 -= _3b1.getTimezoneOffset();
                        }
                        if (_3b4) {
                            _3b1.setTime(_3b1.getTime() + _3b4 * 60000);
                        }
                    }
                    return _3b1;
                }
                ;
                _3ad.toISOString = function(_3b6, _3b7) {
                    var _3b8 = function(n) {
                        return (n < 10) ? "0" + n : n;
                    };
                    _3b7 = _3b7 || {};
                    var _3b9 = []
                      , _3ba = _3b7.zulu ? "getUTC" : "get"
                      , date = "";
                    if (_3b7.selector != "time") {
                        var year = _3b6[_3ba + "FullYear"]();
                        date = ["0000".substr((year + "").length) + year, _3b8(_3b6[_3ba + "Month"]() + 1), _3b8(_3b6[_3ba + "Date"]())].join("-");
                    }
                    _3b9.push(date);
                    if (_3b7.selector != "date") {
                        var time = [_3b8(_3b6[_3ba + "Hours"]()), _3b8(_3b6[_3ba + "Minutes"]()), _3b8(_3b6[_3ba + "Seconds"]())].join(":");
                        var _3bb = _3b6[_3ba + "Milliseconds"]();
                        if (_3b7.milliseconds) {
                            time += "." + (_3bb < 100 ? "0" : "") + _3b8(_3bb);
                        }
                        if (_3b7.zulu) {
                            time += "Z";
                        } else {
                            if (_3b7.selector != "time") {
                                var _3bc = _3b6.getTimezoneOffset();
                                var _3bd = Math.abs(_3bc);
                                time += (_3bc > 0 ? "-" : "+") + _3b8(Math.floor(_3bd / 60)) + ":" + _3b8(_3bd % 60);
                            }
                        }
                        _3b9.push(time);
                    }
                    return _3b9.join("T");
                }
                ;
                return _3ad;
            });
        },
        "dojox/html/entities": function() {
            define(["dojo/_base/lang"], function(lang) {
                var dhe = lang.getObject("dojox.html.entities", true);
                var _3be = function(str, map) {
                    var _3bf, _3c0;
                    if (map._encCache && map._encCache.regexp && map._encCache.mapper && map.length == map._encCache.length) {
                        _3bf = map._encCache.mapper;
                        _3c0 = map._encCache.regexp;
                    } else {
                        _3bf = {};
                        _3c0 = ["["];
                        var i;
                        for (i = 0; i < map.length; i++) {
                            _3bf[map[i][0]] = "&" + map[i][1] + ";";
                            _3c0.push(map[i][0]);
                        }
                        _3c0.push("]");
                        _3c0 = new RegExp(_3c0.join(""),"g");
                        map._encCache = {
                            mapper: _3bf,
                            regexp: _3c0,
                            length: map.length
                        };
                    }
                    str = str.replace(_3c0, function(c) {
                        return _3bf[c];
                    });
                    return str;
                };
                var _3c1 = function(str, map) {
                    var _3c2, _3c3;
                    if (map._decCache && map._decCache.regexp && map._decCache.mapper && map.length == map._decCache.length) {
                        _3c2 = map._decCache.mapper;
                        _3c3 = map._decCache.regexp;
                    } else {
                        _3c2 = {};
                        _3c3 = ["("];
                        var i;
                        for (i = 0; i < map.length; i++) {
                            var e = "&" + map[i][1] + ";";
                            if (i) {
                                _3c3.push("|");
                            }
                            _3c2[e] = map[i][0];
                            _3c3.push(e);
                        }
                        _3c3.push(")");
                        _3c3 = new RegExp(_3c3.join(""),"g");
                        map._decCache = {
                            mapper: _3c2,
                            regexp: _3c3,
                            length: map.length
                        };
                    }
                    str = str.replace(_3c3, function(c) {
                        return _3c2[c];
                    });
                    return str;
                };
                dhe.html = [["&", "amp"], ["\"", "quot"], ["<", "lt"], [">", "gt"], [" ", "nbsp"]];
                dhe.latin = [["¡", "iexcl"], ["¢", "cent"], ["£", "pound"], ["€", "euro"], ["¤", "curren"], ["¥", "yen"], ["¦", "brvbar"], ["§", "sect"], ["¨", "uml"], ["©", "copy"], ["ª", "ordf"], ["«", "laquo"], ["¬", "not"], ["­", "shy"], ["®", "reg"], ["¯", "macr"], ["°", "deg"], ["±", "plusmn"], ["²", "sup2"], ["³", "sup3"], ["´", "acute"], ["µ", "micro"], ["¶", "para"], ["·", "middot"], ["¸", "cedil"], ["¹", "sup1"], ["º", "ordm"], ["»", "raquo"], ["¼", "frac14"], ["½", "frac12"], ["¾", "frac34"], ["¿", "iquest"], ["À", "Agrave"], ["Á", "Aacute"], ["Â", "Acirc"], ["Ã", "Atilde"], ["Ä", "Auml"], ["Å", "Aring"], ["Æ", "AElig"], ["Ç", "Ccedil"], ["È", "Egrave"], ["É", "Eacute"], ["Ê", "Ecirc"], ["Ë", "Euml"], ["Ì", "Igrave"], ["Í", "Iacute"], ["Î", "Icirc"], ["Ï", "Iuml"], ["Ð", "ETH"], ["Ñ", "Ntilde"], ["Ò", "Ograve"], ["Ó", "Oacute"], ["Ô", "Ocirc"], ["Õ", "Otilde"], ["Ö", "Ouml"], ["×", "times"], ["Ø", "Oslash"], ["Ù", "Ugrave"], ["Ú", "Uacute"], ["Û", "Ucirc"], ["Ü", "Uuml"], ["Ý", "Yacute"], ["Þ", "THORN"], ["ß", "szlig"], ["à", "agrave"], ["á", "aacute"], ["â", "acirc"], ["ã", "atilde"], ["ä", "auml"], ["å", "aring"], ["æ", "aelig"], ["ç", "ccedil"], ["è", "egrave"], ["é", "eacute"], ["ê", "ecirc"], ["ë", "euml"], ["ì", "igrave"], ["í", "iacute"], ["î", "icirc"], ["ï", "iuml"], ["ð", "eth"], ["ñ", "ntilde"], ["ò", "ograve"], ["ó", "oacute"], ["ô", "ocirc"], ["õ", "otilde"], ["ö", "ouml"], ["÷", "divide"], ["ø", "oslash"], ["ù", "ugrave"], ["ú", "uacute"], ["û", "ucirc"], ["ü", "uuml"], ["ý", "yacute"], ["þ", "thorn"], ["ÿ", "yuml"], ["ƒ", "fnof"], ["Α", "Alpha"], ["Β", "Beta"], ["Γ", "Gamma"], ["Δ", "Delta"], ["Ε", "Epsilon"], ["Ζ", "Zeta"], ["Η", "Eta"], ["Θ", "Theta"], ["Ι", "Iota"], ["Κ", "Kappa"], ["Λ", "Lambda"], ["Μ", "Mu"], ["Ν", "Nu"], ["Ξ", "Xi"], ["Ο", "Omicron"], ["Π", "Pi"], ["Ρ", "Rho"], ["Σ", "Sigma"], ["Τ", "Tau"], ["Υ", "Upsilon"], ["Φ", "Phi"], ["Χ", "Chi"], ["Ψ", "Psi"], ["Ω", "Omega"], ["α", "alpha"], ["β", "beta"], ["γ", "gamma"], ["δ", "delta"], ["ε", "epsilon"], ["ζ", "zeta"], ["η", "eta"], ["θ", "theta"], ["ι", "iota"], ["κ", "kappa"], ["λ", "lambda"], ["μ", "mu"], ["ν", "nu"], ["ξ", "xi"], ["ο", "omicron"], ["π", "pi"], ["ρ", "rho"], ["ς", "sigmaf"], ["σ", "sigma"], ["τ", "tau"], ["υ", "upsilon"], ["φ", "phi"], ["χ", "chi"], ["ψ", "psi"], ["ω", "omega"], ["ϑ", "thetasym"], ["ϒ", "upsih"], ["ϖ", "piv"], ["•", "bull"], ["…", "hellip"], ["′", "prime"], ["″", "Prime"], ["‾", "oline"], ["⁄", "frasl"], ["℘", "weierp"], ["ℑ", "image"], ["ℜ", "real"], ["™", "trade"], ["ℵ", "alefsym"], ["←", "larr"], ["↑", "uarr"], ["→", "rarr"], ["↓", "darr"], ["↔", "harr"], ["↵", "crarr"], ["⇐", "lArr"], ["⇑", "uArr"], ["⇒", "rArr"], ["⇓", "dArr"], ["⇔", "hArr"], ["∀", "forall"], ["∂", "part"], ["∃", "exist"], ["∅", "empty"], ["∇", "nabla"], ["∈", "isin"], ["∉", "notin"], ["∋", "ni"], ["∏", "prod"], ["∑", "sum"], ["−", "minus"], ["∗", "lowast"], ["√", "radic"], ["∝", "prop"], ["∞", "infin"], ["∠", "ang"], ["∧", "and"], ["∨", "or"], ["∩", "cap"], ["∪", "cup"], ["∫", "int"], ["∴", "there4"], ["∼", "sim"], ["≅", "cong"], ["≈", "asymp"], ["≠", "ne"], ["≡", "equiv"], ["≤", "le"], ["≥", "ge"], ["⊂", "sub"], ["⊃", "sup"], ["⊄", "nsub"], ["⊆", "sube"], ["⊇", "supe"], ["⊕", "oplus"], ["⊗", "otimes"], ["⊥", "perp"], ["⋅", "sdot"], ["⌈", "lceil"], ["⌉", "rceil"], ["⌊", "lfloor"], ["⌋", "rfloor"], ["〈", "lang"], ["〉", "rang"], ["◊", "loz"], ["♠", "spades"], ["♣", "clubs"], ["♥", "hearts"], ["♦", "diams"], ["Œ", "OElig"], ["œ", "oelig"], ["Š", "Scaron"], ["š", "scaron"], ["Ÿ", "Yuml"], ["ˆ", "circ"], ["˜", "tilde"], [" ", "ensp"], [" ", "emsp"], [" ", "thinsp"], ["‌", "zwnj"], ["‍", "zwj"], ["‎", "lrm"], ["‏", "rlm"], ["–", "ndash"], ["—", "mdash"], ["‘", "lsquo"], ["’", "rsquo"], ["‚", "sbquo"], ["“", "ldquo"], ["”", "rdquo"], ["„", "bdquo"], ["†", "dagger"], ["‡", "Dagger"], ["‰", "permil"], ["‹", "lsaquo"], ["›", "rsaquo"]];
                dhe.encode = function(str, m) {
                    if (str) {
                        if (!m) {
                            str = _3be(str, dhe.html);
                            str = _3be(str, dhe.latin);
                        } else {
                            str = _3be(str, m);
                        }
                    }
                    return str;
                }
                ;
                dhe.decode = function(str, m) {
                    if (str) {
                        if (!m) {
                            str = _3c1(str, dhe.html);
                            str = _3c1(str, dhe.latin);
                        } else {
                            str = _3c1(str, m);
                        }
                    }
                    return str;
                }
                ;
                return dhe;
            });
        },
        "dojo/fx": function() {
            define(["./_base/lang", "./Evented", "./_base/kernel", "./_base/array", "./aspect", "./_base/fx", "./dom", "./dom-style", "./dom-geometry", "./ready", "require"], function(lang, _3c4, dojo, _3c5, _3c6, _3c7, dom, _3c8, geom, _3c9, _3ca) {
                if (!dojo.isAsync) {
                    _3c9(0, function() {
                        var _3cb = ["./fx/Toggler"];
                        _3ca(_3cb);
                    });
                }
                var _3cc = dojo.fx = {};
                var _3cd = {
                    _fire: function(evt, args) {
                        if (this[evt]) {
                            this[evt].apply(this, args || []);
                        }
                        return this;
                    }
                };
                var _3ce = function(_3cf) {
                    this._index = -1;
                    this._animations = _3cf || [];
                    this._current = this._onAnimateCtx = this._onEndCtx = null;
                    this.duration = 0;
                    _3c5.forEach(this._animations, function(a) {
                        if (a) {
                            if (typeof a.duration != "undefined") {
                                this.duration += a.duration;
                            }
                            if (a.delay) {
                                this.duration += a.delay;
                            }
                        }
                    }, this);
                };
                _3ce.prototype = new _3c4();
                lang.extend(_3ce, {
                    _onAnimate: function() {
                        this._fire("onAnimate", arguments);
                    },
                    _onEnd: function() {
                        this._onAnimateCtx.remove();
                        this._onEndCtx.remove();
                        this._onAnimateCtx = this._onEndCtx = null;
                        if (this._index + 1 == this._animations.length) {
                            this._fire("onEnd");
                        } else {
                            this._current = this._animations[++this._index];
                            this._onAnimateCtx = _3c6.after(this._current, "onAnimate", lang.hitch(this, "_onAnimate"), true);
                            this._onEndCtx = _3c6.after(this._current, "onEnd", lang.hitch(this, "_onEnd"), true);
                            this._current.play(0, true);
                        }
                    },
                    play: function(_3d0, _3d1) {
                        if (!this._current) {
                            this._current = this._animations[this._index = 0];
                        }
                        if (!_3d1 && this._current.status() == "playing") {
                            return this;
                        }
                        var _3d2 = _3c6.after(this._current, "beforeBegin", lang.hitch(this, function() {
                            this._fire("beforeBegin");
                        }), true)
                          , _3d3 = _3c6.after(this._current, "onBegin", lang.hitch(this, function(arg) {
                            this._fire("onBegin", arguments);
                        }), true)
                          , _3d4 = _3c6.after(this._current, "onPlay", lang.hitch(this, function(arg) {
                            this._fire("onPlay", arguments);
                            _3d2.remove();
                            _3d3.remove();
                            _3d4.remove();
                        }));
                        if (this._onAnimateCtx) {
                            this._onAnimateCtx.remove();
                        }
                        this._onAnimateCtx = _3c6.after(this._current, "onAnimate", lang.hitch(this, "_onAnimate"), true);
                        if (this._onEndCtx) {
                            this._onEndCtx.remove();
                        }
                        this._onEndCtx = _3c6.after(this._current, "onEnd", lang.hitch(this, "_onEnd"), true);
                        this._current.play.apply(this._current, arguments);
                        return this;
                    },
                    pause: function() {
                        if (this._current) {
                            var e = _3c6.after(this._current, "onPause", lang.hitch(this, function(arg) {
                                this._fire("onPause", arguments);
                                e.remove();
                            }), true);
                            this._current.pause();
                        }
                        return this;
                    },
                    gotoPercent: function(_3d5, _3d6) {
                        this.pause();
                        var _3d7 = this.duration * _3d5;
                        this._current = null;
                        _3c5.some(this._animations, function(a, _3d8) {
                            if (_3d7 <= a.duration) {
                                this._current = a;
                                this._index = _3d8;
                                return true;
                            }
                            _3d7 -= a.duration;
                            return false;
                        }, this);
                        if (this._current) {
                            this._current.gotoPercent(_3d7 / this._current.duration);
                        }
                        if (_3d6) {
                            this.play();
                        }
                        return this;
                    },
                    stop: function(_3d9) {
                        if (this._current) {
                            if (_3d9) {
                                for (; this._index + 1 < this._animations.length; ++this._index) {
                                    this._animations[this._index].stop(true);
                                }
                                this._current = this._animations[this._index];
                            }
                            var e = _3c6.after(this._current, "onStop", lang.hitch(this, function(arg) {
                                this._fire("onStop", arguments);
                                e.remove();
                            }), true);
                            this._current.stop();
                        }
                        return this;
                    },
                    status: function() {
                        return this._current ? this._current.status() : "stopped";
                    },
                    destroy: function() {
                        this.stop();
                        if (this._onAnimateCtx) {
                            this._onAnimateCtx.remove();
                        }
                        if (this._onEndCtx) {
                            this._onEndCtx.remove();
                        }
                    }
                });
                lang.extend(_3ce, _3cd);
                _3cc.chain = function(_3da) {
                    return new _3ce(lang.isArray(_3da) ? _3da : Array.prototype.slice.call(_3da, 0));
                }
                ;
                var _3db = function(_3dc) {
                    this._animations = _3dc || [];
                    this._connects = [];
                    this._finished = 0;
                    this.duration = 0;
                    _3c5.forEach(_3dc, function(a) {
                        var _3dd = a.duration;
                        if (a.delay) {
                            _3dd += a.delay;
                        }
                        if (this.duration < _3dd) {
                            this.duration = _3dd;
                        }
                        this._connects.push(_3c6.after(a, "onEnd", lang.hitch(this, "_onEnd"), true));
                    }, this);
                    this._pseudoAnimation = new _3c7.Animation({
                        curve: [0, 1],
                        duration: this.duration
                    });
                    var self = this;
                    _3c5.forEach(["beforeBegin", "onBegin", "onPlay", "onAnimate", "onPause", "onStop", "onEnd"], function(evt) {
                        self._connects.push(_3c6.after(self._pseudoAnimation, evt, function() {
                            self._fire(evt, arguments);
                        }, true));
                    });
                };
                lang.extend(_3db, {
                    _doAction: function(_3de, args) {
                        _3c5.forEach(this._animations, function(a) {
                            a[_3de].apply(a, args);
                        });
                        return this;
                    },
                    _onEnd: function() {
                        if (++this._finished > this._animations.length) {
                            this._fire("onEnd");
                        }
                    },
                    _call: function(_3df, args) {
                        var t = this._pseudoAnimation;
                        t[_3df].apply(t, args);
                    },
                    play: function(_3e0, _3e1) {
                        this._finished = 0;
                        this._doAction("play", arguments);
                        this._call("play", arguments);
                        return this;
                    },
                    pause: function() {
                        this._doAction("pause", arguments);
                        this._call("pause", arguments);
                        return this;
                    },
                    gotoPercent: function(_3e2, _3e3) {
                        var ms = this.duration * _3e2;
                        _3c5.forEach(this._animations, function(a) {
                            a.gotoPercent(a.duration < ms ? 1 : (ms / a.duration), _3e3);
                        });
                        this._call("gotoPercent", arguments);
                        return this;
                    },
                    stop: function(_3e4) {
                        this._doAction("stop", arguments);
                        this._call("stop", arguments);
                        return this;
                    },
                    status: function() {
                        return this._pseudoAnimation.status();
                    },
                    destroy: function() {
                        this.stop();
                        _3c5.forEach(this._connects, function(_3e5) {
                            _3e5.remove();
                        });
                    }
                });
                lang.extend(_3db, _3cd);
                _3cc.combine = function(_3e6) {
                    return new _3db(lang.isArray(_3e6) ? _3e6 : Array.prototype.slice.call(_3e6, 0));
                }
                ;
                _3cc.wipeIn = function(args) {
                    var node = args.node = dom.byId(args.node), s = node.style, o;
                    var anim = _3c7.animateProperty(lang.mixin({
                        properties: {
                            height: {
                                start: function() {
                                    o = s.overflow;
                                    s.overflow = "hidden";
                                    if (s.visibility == "hidden" || s.display == "none") {
                                        s.height = "1px";
                                        s.display = "";
                                        s.visibility = "";
                                        return 1;
                                    } else {
                                        var _3e7 = _3c8.get(node, "height");
                                        return Math.max(_3e7, 1);
                                    }
                                },
                                end: function() {
                                    return node.scrollHeight;
                                }
                            }
                        }
                    }, args));
                    var fini = function() {
                        s.height = "auto";
                        s.overflow = o;
                    };
                    _3c6.after(anim, "onStop", fini, true);
                    _3c6.after(anim, "onEnd", fini, true);
                    return anim;
                }
                ;
                _3cc.wipeOut = function(args) {
                    var node = args.node = dom.byId(args.node), s = node.style, o;
                    var anim = _3c7.animateProperty(lang.mixin({
                        properties: {
                            height: {
                                end: 1
                            }
                        }
                    }, args));
                    _3c6.after(anim, "beforeBegin", function() {
                        o = s.overflow;
                        s.overflow = "hidden";
                        s.display = "";
                    }, true);
                    var fini = function() {
                        s.overflow = o;
                        s.height = "auto";
                        s.display = "none";
                    };
                    _3c6.after(anim, "onStop", fini, true);
                    _3c6.after(anim, "onEnd", fini, true);
                    return anim;
                }
                ;
                _3cc.slideTo = function(args) {
                    var node = args.node = dom.byId(args.node)
                      , top = null
                      , left = null;
                    var init = (function(n) {
                        return function() {
                            var cs = _3c8.getComputedStyle(n);
                            var pos = cs.position;
                            top = (pos == "absolute" ? n.offsetTop : parseInt(cs.top) || 0);
                            left = (pos == "absolute" ? n.offsetLeft : parseInt(cs.left) || 0);
                            if (pos != "absolute" && pos != "relative") {
                                var ret = geom.position(n, true);
                                top = ret.y;
                                left = ret.x;
                                n.style.position = "absolute";
                                n.style.top = top + "px";
                                n.style.left = left + "px";
                            }
                        }
                        ;
                    }
                    )(node);
                    init();
                    var anim = _3c7.animateProperty(lang.mixin({
                        properties: {
                            top: args.top || 0,
                            left: args.left || 0
                        }
                    }, args));
                    _3c6.after(anim, "beforeBegin", init, true);
                    return anim;
                }
                ;
                return _3cc;
            });
        },
        "dojo/io/iframe": function() {
            define(["../_base/config", "../_base/json", "../_base/kernel", "../_base/lang", "../_base/xhr", "../sniff", "../_base/window", "../dom", "../dom-construct", "../query", "require", "../aspect", "../request/iframe"], function(_3e8, json, _3e9, lang, xhr, has, win, dom, _3ea, _3eb, _3ec, _3ed, _3ee) {
                _3e9.deprecated("dojo/io/iframe", "Use dojo/request/iframe.", "2.0");
                var mid = _3ee._iframeName;
                mid = mid.substring(0, mid.lastIndexOf("_"));
                var _3ef = lang.delegate(_3ee, {
                    create: function() {
                        return _3ef._frame = _3ee.create.apply(_3ee, arguments);
                    },
                    get: null,
                    post: null,
                    send: function(args) {
                        var rDfd;
                        var dfd = xhr._ioSetArgs(args, function(dfd) {
                            rDfd && rDfd.cancel();
                        }, function(dfd) {
                            var _3f0 = null
                              , _3f1 = dfd.ioArgs;
                            try {
                                var _3f2 = _3f1.handleAs;
                                if (_3f2 === "xml" || _3f2 === "html") {
                                    _3f0 = rDfd.response.data;
                                } else {
                                    _3f0 = rDfd.response.text;
                                    if (_3f2 === "json") {
                                        _3f0 = json.fromJson(_3f0);
                                    } else {
                                        if (_3f2 === "javascript") {
                                            _3f0 = _3e9.eval(_3f0);
                                        }
                                    }
                                }
                            } catch (e) {
                                _3f0 = e;
                            }
                            return _3f0;
                        }, function(_3f3, dfd) {
                            dfd.ioArgs._hasError = true;
                            return _3f3;
                        });
                        var _3f4 = dfd.ioArgs;
                        var _3f5 = "GET"
                          , form = dom.byId(args.form);
                        if (args.method && args.method.toUpperCase() === "POST" && form) {
                            _3f5 = "POST";
                        }
                        var _3f6 = {
                            method: _3f5,
                            handleAs: args.handleAs === "json" || args.handleAs === "javascript" ? "text" : args.handleAs,
                            form: args.form,
                            query: form ? null : args.content,
                            data: form ? args.content : null,
                            timeout: args.timeout,
                            ioArgs: _3f4
                        };
                        if (_3f6.method) {
                            _3f6.method = _3f6.method.toUpperCase();
                        }
                        if (_3e8.ioPublish && _3e9.publish && _3f4.args.ioPublish !== false) {
                            var _3f7 = _3ed.after(_3ee, "_notifyStart", function(data) {
                                if (data.options.ioArgs === _3f4) {
                                    _3f7.remove();
                                    xhr._ioNotifyStart(dfd);
                                }
                            }, true);
                        }
                        rDfd = _3ee(_3f4.url, _3f6, true);
                        _3f4._callNext = rDfd._callNext;
                        rDfd.then(function() {
                            dfd.resolve(dfd);
                        }).otherwise(function(_3f8) {
                            dfd.ioArgs.error = _3f8;
                            dfd.reject(_3f8);
                        });
                        return dfd;
                    },
                    _iframeOnload: win.global[mid + "_onload"]
                });
                lang.setObject("dojo.io.iframe", _3ef);
                return _3ef;
            });
        },
        "dojo/request/iframe": function() {
            define(["module", "require", "./watch", "./util", "./handlers", "../_base/lang", "../io-query", "../query", "../has", "../dom", "../dom-construct", "../_base/window", "../NodeList-dom", "../NodeList-manipulate"], function(_3f9, _3fa, _3fb, util, _3fc, lang, _3fd, _3fe, has, dom, _3ff, win) {
                var mid = _3f9.id.replace(/[\/\.\-]/g, "_")
                  , _400 = mid + "_onload";
                if (!win.global[_400]) {
                    win.global[_400] = function() {
                        var dfd = _401._currentDfd;
                        if (!dfd) {
                            _401._fireNextRequest();
                            return;
                        }
                        var _402 = dfd.response
                          , _403 = _402.options
                          , _404 = dom.byId(_403.form) || dfd._tmpForm;
                        if (_404) {
                            var _405 = dfd._contentToClean;
                            for (var i = 0; i < _405.length; i++) {
                                var key = _405[i];
                                for (var j = 0; j < _404.childNodes.length; j++) {
                                    var _406 = _404.childNodes[j];
                                    if (_406.name === key) {
                                        _3ff.destroy(_406);
                                        break;
                                    }
                                }
                            }
                            dfd._originalAction && _404.setAttribute("action", dfd._originalAction);
                            if (dfd._originalMethod) {
                                _404.setAttribute("method", dfd._originalMethod);
                                _404.method = dfd._originalMethod;
                            }
                            if (dfd._originalTarget) {
                                _404.setAttribute("target", dfd._originalTarget);
                                _404.target = dfd._originalTarget;
                            }
                        }
                        if (dfd._tmpForm) {
                            _3ff.destroy(dfd._tmpForm);
                            delete dfd._tmpForm;
                        }
                        dfd._finished = true;
                    }
                    ;
                }
                function _407(name, _408, uri) {
                    if (win.global[name]) {
                        return win.global[name];
                    }
                    if (win.global.frames[name]) {
                        return win.global.frames[name];
                    }
                    if (!uri) {
                        if (has("config-useXDomain") && !has("config-dojoBlankHtmlUrl")) {
                            console.warn("dojo/request/iframe: When using cross-domain Dojo builds," + " please save dojo/resources/blank.html to your domain and set dojoConfig.dojoBlankHtmlUrl" + " to the path on your domain to blank.html");
                        }
                        uri = (has("config-dojoBlankHtmlUrl") || _3fa.toUrl("dojo/resources/blank.html"));
                    }
                    var _409 = _3ff.place("<iframe id=\"" + name + "\" name=\"" + name + "\" src=\"" + uri + "\" onload=\"" + _408 + "\" style=\"position: absolute; left: 1px; top: 1px; height: 1px; width: 1px; visibility: hidden\">", win.body());
                    win.global[name] = _409;
                    return _409;
                }
                ;function _40a(_40b, src, _40c) {
                    var _40d = win.global.frames[_40b.name];
                    if (_40d.contentWindow) {
                        _40d = _40d.contentWindow;
                    }
                    try {
                        if (!_40c) {
                            _40d.location = src;
                        } else {
                            _40d.location.replace(src);
                        }
                    } catch (e) {}
                }
                ;function doc(_40e) {
                    if (_40e.contentDocument) {
                        return _40e.contentDocument;
                    }
                    var name = _40e.name;
                    if (name) {
                        var _40f = win.doc.getElementsByTagName("iframe");
                        if (_40e.document && _40f[name].contentWindow && _40f[name].contentWindow.document) {
                            return _40f[name].contentWindow.document;
                        } else {
                            if (win.doc.frames[name] && win.doc.frames[name].document) {
                                return win.doc.frames[name].document;
                            }
                        }
                    }
                    return null;
                }
                ;function _410() {
                    return _3ff.create("form", {
                        name: mid + "_form",
                        style: {
                            position: "absolute",
                            top: "-1000px",
                            left: "-1000px"
                        }
                    }, win.body());
                }
                ;function _411() {
                    var dfd;
                    try {
                        if (_401._currentDfd || !_401._dfdQueue.length) {
                            return;
                        }
                        do {
                            dfd = _401._currentDfd = _401._dfdQueue.shift();
                        } while (dfd && (dfd.canceled || (dfd.isCanceled && dfd.isCanceled())) && _401._dfdQueue.length);if (!dfd || dfd.canceled || (dfd.isCanceled && dfd.isCanceled())) {
                            _401._currentDfd = null;
                            return;
                        }
                        var _412 = dfd.response, _413 = _412.options, c2c = dfd._contentToClean = [], _414 = dom.byId(_413.form), _415 = util.notify, data = _413.data || null, _416;
                        if (!dfd._legacy && _413.method === "POST" && !_414) {
                            _414 = dfd._tmpForm = _410();
                        } else {
                            if (_413.method === "GET" && _414 && _412.url.indexOf("?") > -1) {
                                _416 = _412.url.slice(_412.url.indexOf("?") + 1);
                                data = lang.mixin(_3fd.queryToObject(_416), data);
                            }
                        }
                        if (_414) {
                            if (!dfd._legacy) {
                                var _417 = _414;
                                do {
                                    _417 = _417.parentNode;
                                } while (_417 && _417 !== win.doc.documentElement);if (!_417) {
                                    _414.style.position = "absolute";
                                    _414.style.left = "-1000px";
                                    _414.style.top = "-1000px";
                                    win.body().appendChild(_414);
                                }
                                if (!_414.name) {
                                    _414.name = mid + "_form";
                                }
                            }
                            if (data) {
                                var _418 = function(name, _419) {
                                    _3ff.create("input", {
                                        type: "hidden",
                                        name: name,
                                        value: _419
                                    }, _414);
                                    c2c.push(name);
                                };
                                for (var x in data) {
                                    var val = data[x];
                                    if (lang.isArray(val) && val.length > 1) {
                                        for (var i = 0; i < val.length; i++) {
                                            _418(x, val[i]);
                                        }
                                    } else {
                                        var n = _3fe("input[name='" + x + "']", _414);
                                        if (n.indexOf() == -1) {
                                            _418(x, val);
                                        } else {
                                            n.val(val);
                                        }
                                    }
                                }
                            }
                            var _41a = _414.getAttributeNode("action")
                              , _41b = _414.getAttributeNode("method")
                              , _41c = _414.getAttributeNode("target");
                            if (_412.url) {
                                dfd._originalAction = _41a ? _41a.value : null;
                                if (_41a) {
                                    _41a.value = _412.url;
                                } else {
                                    _414.setAttribute("action", _412.url);
                                }
                            }
                            if (!dfd._legacy) {
                                dfd._originalMethod = _41b ? _41b.value : null;
                                if (_41b) {
                                    _41b.value = _413.method;
                                } else {
                                    _414.setAttribute("method", _413.method);
                                }
                            } else {
                                if (!_41b || !_41b.value) {
                                    if (_41b) {
                                        _41b.value = _413.method;
                                    } else {
                                        _414.setAttribute("method", _413.method);
                                    }
                                }
                            }
                            dfd._originalTarget = _41c ? _41c.value : null;
                            if (_41c) {
                                _41c.value = _401._iframeName;
                            } else {
                                _414.setAttribute("target", _401._iframeName);
                            }
                            _414.target = _401._iframeName;
                            _415 && _415.emit("send", _412, dfd.promise.cancel);
                            _401._notifyStart(_412);
                            _414.submit();
                        } else {
                            var _41d = "";
                            if (_412.options.data) {
                                _41d = _412.options.data;
                                if (typeof _41d !== "string") {
                                    _41d = _3fd.objectToQuery(_41d);
                                }
                            }
                            var _41e = _412.url + (_412.url.indexOf("?") > -1 ? "&" : "?") + _41d;
                            _415 && _415.emit("send", _412, dfd.promise.cancel);
                            _401._notifyStart(_412);
                            _401.setSrc(_401._frame, _41e, true);
                        }
                    } catch (e) {
                        dfd.reject(e);
                    }
                }
                ;function _41f(_420) {
                    return !this.isFulfilled();
                }
                ;function _421(_422) {
                    return !!this._finished;
                }
                ;function _423(_424, _425) {
                    if (!_425) {
                        try {
                            var _426 = _424.options
                              , doc = _401.doc(_401._frame)
                              , _427 = _426.handleAs;
                            if (_427 !== "html") {
                                if (_427 === "xml") {
                                    if (doc.documentElement.tagName.toLowerCase() === "html") {
                                        _3fe("a", doc.documentElement).orphan();
                                        var _428 = doc.documentElement.innerText || doc.documentElement.textContent;
                                        _428 = _428.replace(/>\s+</g, "><");
                                        _424.text = lang.trim(_428);
                                    } else {
                                        _424.data = doc;
                                    }
                                } else {
                                    _424.text = doc.getElementsByTagName("textarea")[0].value;
                                }
                                _3fc(_424);
                            } else {
                                _424.data = doc;
                            }
                        } catch (e) {
                            _425 = e;
                        }
                    }
                    if (_425) {
                        this.reject(_425);
                    } else {
                        if (this._finished) {
                            this.resolve(_424);
                        } else {
                            this.reject(new Error("Invalid dojo/request/iframe request state"));
                        }
                    }
                }
                ;function last(_429) {
                    this._callNext();
                }
                ;var _42a = {
                    method: "POST"
                };
                function _401(url, _42b, _42c) {
                    var _42d = util.parseArgs(url, util.deepCreate(_42a, _42b), true);
                    url = _42d.url;
                    _42b = _42d.options;
                    if (_42b.method !== "GET" && _42b.method !== "POST") {
                        throw new Error(_42b.method + " not supported by dojo/request/iframe");
                    }
                    if (!_401._frame) {
                        _401._frame = _401.create(_401._iframeName, _400 + "();");
                    }
                    var dfd = util.deferred(_42d, null, _41f, _421, _423, last);
                    dfd._callNext = function() {
                        if (!this._calledNext) {
                            this._calledNext = true;
                            _401._currentDfd = null;
                            _401._fireNextRequest();
                        }
                    }
                    ;
                    dfd._legacy = _42c;
                    _401._dfdQueue.push(dfd);
                    _401._fireNextRequest();
                    _3fb(dfd);
                    return _42c ? dfd : dfd.promise;
                }
                ;_401.create = _407;
                _401.doc = doc;
                _401.setSrc = _40a;
                _401._iframeName = mid + "_IoIframe";
                _401._notifyStart = function() {}
                ;
                _401._dfdQueue = [];
                _401._currentDfd = null;
                _401._fireNextRequest = _411;
                util.addCommonMethods(_401, ["GET", "POST"]);
                return _401;
            });
        },
        "dojo/NodeList-manipulate": function() {
            define(["./query", "./_base/lang", "./_base/array", "./dom-construct", "./dom-attr", "./NodeList-dom"], function(_42e, lang, _42f, _430, attr) {
                var _431 = _42e.NodeList;
                function _432(node) {
                    while (node.childNodes[0] && node.childNodes[0].nodeType == 1) {
                        node = node.childNodes[0];
                    }
                    return node;
                }
                ;function _433(html, _434) {
                    if (typeof html == "string") {
                        html = _430.toDom(html, (_434 && _434.ownerDocument));
                        if (html.nodeType == 11) {
                            html = html.childNodes[0];
                        }
                    } else {
                        if (html.nodeType == 1 && html.parentNode) {
                            html = html.cloneNode(false);
                        }
                    }
                    return html;
                }
                ;lang.extend(_431, {
                    _placeMultiple: function(_435, _436) {
                        var nl2 = typeof _435 == "string" || _435.nodeType ? _42e(_435) : _435;
                        var _437 = [];
                        for (var i = 0; i < nl2.length; i++) {
                            var _438 = nl2[i];
                            var _439 = this.length;
                            for (var j = _439 - 1, item; item = this[j]; j--) {
                                if (i > 0) {
                                    item = this._cloneNode(item);
                                    _437.unshift(item);
                                }
                                if (j == _439 - 1) {
                                    _430.place(item, _438, _436);
                                } else {
                                    _438.parentNode.insertBefore(item, _438);
                                }
                                _438 = item;
                            }
                        }
                        if (_437.length) {
                            _437.unshift(0);
                            _437.unshift(this.length - 1);
                            Array.prototype.splice.apply(this, _437);
                        }
                        return this;
                    },
                    innerHTML: function(_43a) {
                        if (arguments.length) {
                            return this.addContent(_43a, "only");
                        } else {
                            return this[0].innerHTML;
                        }
                    },
                    text: function(_43b) {
                        if (arguments.length) {
                            for (var i = 0, node; node = this[i]; i++) {
                                if (node.nodeType == 1) {
                                    attr.set(node, "textContent", _43b);
                                }
                            }
                            return this;
                        } else {
                            var _43c = "";
                            for (i = 0; node = this[i]; i++) {
                                _43c += attr.get(node, "textContent");
                            }
                            return _43c;
                        }
                    },
                    val: function(_43d) {
                        if (arguments.length) {
                            var _43e = lang.isArray(_43d);
                            for (var _43f = 0, node; node = this[_43f]; _43f++) {
                                var name = node.nodeName.toUpperCase();
                                var type = node.type;
                                var _440 = _43e ? _43d[_43f] : _43d;
                                if (name == "SELECT") {
                                    var opts = node.options;
                                    for (var i = 0; i < opts.length; i++) {
                                        var opt = opts[i];
                                        if (node.multiple) {
                                            opt.selected = (_42f.indexOf(_43d, opt.value) != -1);
                                        } else {
                                            opt.selected = (opt.value == _440);
                                        }
                                    }
                                } else {
                                    if (type == "checkbox" || type == "radio") {
                                        node.checked = (node.value == _440);
                                    } else {
                                        node.value = _440;
                                    }
                                }
                            }
                            return this;
                        } else {
                            node = this[0];
                            if (!node || node.nodeType != 1) {
                                return undefined;
                            }
                            _43d = node.value || "";
                            if (node.nodeName.toUpperCase() == "SELECT" && node.multiple) {
                                _43d = [];
                                opts = node.options;
                                for (i = 0; i < opts.length; i++) {
                                    opt = opts[i];
                                    if (opt.selected) {
                                        _43d.push(opt.value);
                                    }
                                }
                                if (!_43d.length) {
                                    _43d = null;
                                }
                            }
                            return _43d;
                        }
                    },
                    append: function(_441) {
                        return this.addContent(_441, "last");
                    },
                    appendTo: function(_442) {
                        return this._placeMultiple(_442, "last");
                    },
                    prepend: function(_443) {
                        return this.addContent(_443, "first");
                    },
                    prependTo: function(_444) {
                        return this._placeMultiple(_444, "first");
                    },
                    after: function(_445) {
                        return this.addContent(_445, "after");
                    },
                    insertAfter: function(_446) {
                        return this._placeMultiple(_446, "after");
                    },
                    before: function(_447) {
                        return this.addContent(_447, "before");
                    },
                    insertBefore: function(_448) {
                        return this._placeMultiple(_448, "before");
                    },
                    remove: _431.prototype.orphan,
                    wrap: function(html) {
                        if (this[0]) {
                            html = _433(html, this[0]);
                            for (var i = 0, node; node = this[i]; i++) {
                                var _449 = this._cloneNode(html);
                                if (node.parentNode) {
                                    node.parentNode.replaceChild(_449, node);
                                }
                                var _44a = _432(_449);
                                _44a.appendChild(node);
                            }
                        }
                        return this;
                    },
                    wrapAll: function(html) {
                        if (this[0]) {
                            html = _433(html, this[0]);
                            this[0].parentNode.replaceChild(html, this[0]);
                            var _44b = _432(html);
                            for (var i = 0, node; node = this[i]; i++) {
                                _44b.appendChild(node);
                            }
                        }
                        return this;
                    },
                    wrapInner: function(html) {
                        if (this[0]) {
                            html = _433(html, this[0]);
                            for (var i = 0; i < this.length; i++) {
                                var _44c = this._cloneNode(html);
                                this._wrap(lang._toArray(this[i].childNodes), null, this._NodeListCtor).wrapAll(_44c);
                            }
                        }
                        return this;
                    },
                    replaceWith: function(_44d) {
                        _44d = this._normalize(_44d, this[0]);
                        for (var i = 0, node; node = this[i]; i++) {
                            this._place(_44d, node, "before", i > 0);
                            node.parentNode.removeChild(node);
                        }
                        return this;
                    },
                    replaceAll: function(_44e) {
                        var nl = _42e(_44e);
                        var _44f = this._normalize(this, this[0]);
                        for (var i = 0, node; node = nl[i]; i++) {
                            this._place(_44f, node, "before", i > 0);
                            node.parentNode.removeChild(node);
                        }
                        return this;
                    },
                    clone: function() {
                        var ary = [];
                        for (var i = 0; i < this.length; i++) {
                            ary.push(this._cloneNode(this[i]));
                        }
                        return this._wrap(ary, this, this._NodeListCtor);
                    }
                });
                if (!_431.prototype.html) {
                    _431.prototype.html = _431.prototype.innerHTML;
                }
                return _431;
            });
        },
        "dijit/Tooltip": function() {
            define(["dojo/_base/array", "dojo/_base/declare", "dojo/_base/fx", "dojo/dom", "dojo/dom-class", "dojo/dom-geometry", "dojo/dom-style", "dojo/_base/lang", "dojo/mouse", "dojo/on", "dojo/sniff", "./_base/manager", "./place", "./_Widget", "./_TemplatedMixin", "./BackgroundIframe", "dojo/text!./templates/Tooltip.html", "./main"], function(_450, _451, fx, dom, _452, _453, _454, lang, _455, on, has, _456, _457, _458, _459, _45a, _45b, _45c) {
                var _45d = _451("dijit._MasterTooltip", [_458, _459], {
                    duration: _456.defaultDuration,
                    templateString: _45b,
                    postCreate: function() {
                        this.ownerDocumentBody.appendChild(this.domNode);
                        this.bgIframe = new _45a(this.domNode);
                        this.fadeIn = fx.fadeIn({
                            node: this.domNode,
                            duration: this.duration,
                            onEnd: lang.hitch(this, "_onShow")
                        });
                        this.fadeOut = fx.fadeOut({
                            node: this.domNode,
                            duration: this.duration,
                            onEnd: lang.hitch(this, "_onHide")
                        });
                    },
                    show: function(_45e, _45f, _460, rtl, _461, _462, _463) {
                        if (this.aroundNode && this.aroundNode === _45f && this.containerNode.innerHTML == _45e) {
                            return;
                        }
                        if (this.fadeOut.status() == "playing") {
                            this._onDeck = arguments;
                            return;
                        }
                        this.containerNode.innerHTML = _45e;
                        if (_461) {
                            this.set("textDir", _461);
                        }
                        this.containerNode.align = rtl ? "right" : "left";
                        var pos = _457.around(this.domNode, _45f, _460 && _460.length ? _460 : _464.defaultPosition, !rtl, lang.hitch(this, "orient"));
                        var _465 = pos.aroundNodePos;
                        if (pos.corner.charAt(0) == "M" && pos.aroundCorner.charAt(0) == "M") {
                            this.connectorNode.style.top = _465.y + ((_465.h - this.connectorNode.offsetHeight) >> 1) - pos.y + "px";
                            this.connectorNode.style.left = "";
                        } else {
                            if (pos.corner.charAt(1) == "M" && pos.aroundCorner.charAt(1) == "M") {
                                this.connectorNode.style.left = _465.x + ((_465.w - this.connectorNode.offsetWidth) >> 1) - pos.x + "px";
                            } else {
                                this.connectorNode.style.left = "";
                                this.connectorNode.style.top = "";
                            }
                        }
                        _454.set(this.domNode, "opacity", 0);
                        this.fadeIn.play();
                        this.isShowingNow = true;
                        this.aroundNode = _45f;
                        this.onMouseEnter = _462 || noop;
                        this.onMouseLeave = _463 || noop;
                    },
                    orient: function(node, _466, _467, _468, _469) {
                        this.connectorNode.style.top = "";
                        var _46a = _468.h
                          , _46b = _468.w;
                        node.className = "dijitTooltip " + {
                            "MR-ML": "dijitTooltipRight",
                            "ML-MR": "dijitTooltipLeft",
                            "TM-BM": "dijitTooltipAbove",
                            "BM-TM": "dijitTooltipBelow",
                            "BL-TL": "dijitTooltipBelow dijitTooltipABLeft",
                            "TL-BL": "dijitTooltipAbove dijitTooltipABLeft",
                            "BR-TR": "dijitTooltipBelow dijitTooltipABRight",
                            "TR-BR": "dijitTooltipAbove dijitTooltipABRight",
                            "BR-BL": "dijitTooltipRight",
                            "BL-BR": "dijitTooltipLeft"
                        }[_466 + "-" + _467];
                        this.domNode.style.width = "auto";
                        var size = _453.position(this.domNode);
                        if (has("ie") || has("trident")) {
                            size.w += 2;
                        }
                        var _46c = Math.min((Math.max(_46b, 1)), size.w);
                        _453.setMarginBox(this.domNode, {
                            w: _46c
                        });
                        if (_467.charAt(0) == "B" && _466.charAt(0) == "B") {
                            var bb = _453.position(node);
                            var _46d = this.connectorNode.offsetHeight;
                            if (bb.h > _46a) {
                                var _46e = _46a - ((_469.h + _46d) >> 1);
                                this.connectorNode.style.top = _46e + "px";
                                this.connectorNode.style.bottom = "";
                            } else {
                                this.connectorNode.style.bottom = Math.min(Math.max(_469.h / 2 - _46d / 2, 0), bb.h - _46d) + "px";
                                this.connectorNode.style.top = "";
                            }
                        } else {
                            this.connectorNode.style.top = "";
                            this.connectorNode.style.bottom = "";
                        }
                        return Math.max(0, size.w - _46b);
                    },
                    _onShow: function() {
                        if (has("ie")) {
                            this.domNode.style.filter = "";
                        }
                    },
                    hide: function(_46f) {
                        if (this._onDeck && this._onDeck[1] == _46f) {
                            this._onDeck = null;
                        } else {
                            if (this.aroundNode === _46f) {
                                this.fadeIn.stop();
                                this.isShowingNow = false;
                                this.aroundNode = null;
                                this.fadeOut.play();
                            } else {}
                        }
                        this.onMouseEnter = this.onMouseLeave = noop;
                    },
                    _onHide: function() {
                        this.domNode.style.cssText = "";
                        this.containerNode.innerHTML = "";
                        if (this._onDeck) {
                            this.show.apply(this, this._onDeck);
                            this._onDeck = null;
                        }
                    }
                });
                if (has("dojo-bidi")) {
                    _45d.extend({
                        _setAutoTextDir: function(node) {
                            this.applyTextDir(node);
                            _450.forEach(node.children, function(_470) {
                                this._setAutoTextDir(_470);
                            }, this);
                        },
                        _setTextDirAttr: function(_471) {
                            this._set("textDir", _471);
                            if (_471 == "auto") {
                                this._setAutoTextDir(this.containerNode);
                            } else {
                                this.containerNode.dir = this.textDir;
                            }
                        }
                    });
                }
                _45c.showTooltip = function(_472, _473, _474, rtl, _475, _476, _477) {
                    if (_474) {
                        _474 = _450.map(_474, function(val) {
                            return {
                                after: "after-centered",
                                before: "before-centered"
                            }[val] || val;
                        });
                    }
                    if (!_464._masterTT) {
                        _45c._masterTT = _464._masterTT = new _45d();
                    }
                    return _464._masterTT.show(_472, _473, _474, rtl, _475, _476, _477);
                }
                ;
                _45c.hideTooltip = function(_478) {
                    return _464._masterTT && _464._masterTT.hide(_478);
                }
                ;
                var _479 = "DORMANT"
                  , _47a = "SHOW TIMER"
                  , _47b = "SHOWING"
                  , _47c = "HIDE TIMER";
                function noop() {}
                ;var _464 = _451("dijit.Tooltip", _458, {
                    label: "",
                    showDelay: 400,
                    hideDelay: 400,
                    connectId: [],
                    position: [],
                    selector: "",
                    _setConnectIdAttr: function(_47d) {
                        _450.forEach(this._connections || [], function(_47e) {
                            _450.forEach(_47e, function(_47f) {
                                _47f.remove();
                            });
                        }, this);
                        this._connectIds = _450.filter(lang.isArrayLike(_47d) ? _47d : (_47d ? [_47d] : []), function(id) {
                            return dom.byId(id, this.ownerDocument);
                        }, this);
                        this._connections = _450.map(this._connectIds, function(id) {
                            var node = dom.byId(id, this.ownerDocument)
                              , _480 = this.selector
                              , _481 = _480 ? function(_482) {
                                return on.selector(_480, _482);
                            }
                            : function(_483) {
                                return _483;
                            }
                              , self = this;
                            return [on(node, _481(_455.enter), function() {
                                self._onHover(this);
                            }), on(node, _481("focusin"), function() {
                                self._onHover(this);
                            }), on(node, _481(_455.leave), lang.hitch(self, "_onUnHover")), on(node, _481("focusout"), lang.hitch(self, "set", "state", _479))];
                        }, this);
                        this._set("connectId", _47d);
                    },
                    addTarget: function(node) {
                        var id = node.id || node;
                        if (_450.indexOf(this._connectIds, id) == -1) {
                            this.set("connectId", this._connectIds.concat(id));
                        }
                    },
                    removeTarget: function(node) {
                        var id = node.id || node
                          , idx = _450.indexOf(this._connectIds, id);
                        if (idx >= 0) {
                            this._connectIds.splice(idx, 1);
                            this.set("connectId", this._connectIds);
                        }
                    },
                    buildRendering: function() {
                        this.inherited(arguments);
                        _452.add(this.domNode, "dijitTooltipData");
                    },
                    startup: function() {
                        this.inherited(arguments);
                        var ids = this.connectId;
                        _450.forEach(lang.isArrayLike(ids) ? ids : [ids], this.addTarget, this);
                    },
                    getContent: function(node) {
                        return this.label || this.domNode.innerHTML;
                    },
                    state: _479,
                    _setStateAttr: function(val) {
                        if (this.state == val || (val == _47a && this.state == _47b) || (val == _47c && this.state == _479)) {
                            return;
                        }
                        if (this._hideTimer) {
                            this._hideTimer.remove();
                            delete this._hideTimer;
                        }
                        if (this._showTimer) {
                            this._showTimer.remove();
                            delete this._showTimer;
                        }
                        switch (val) {
                        case _479:
                            if (this._connectNode) {
                                _464.hide(this._connectNode);
                                delete this._connectNode;
                                this.onHide();
                            }
                            break;
                        case _47a:
                            if (this.state != _47b) {
                                this._showTimer = this.defer(function() {
                                    this.set("state", _47b);
                                }, this.showDelay);
                            }
                            break;
                        case _47b:
                            var _484 = this.getContent(this._connectNode);
                            if (!_484) {
                                this.set("state", _479);
                                return;
                            }
                            _464.show(_484, this._connectNode, this.position, !this.isLeftToRight(), this.textDir, lang.hitch(this, "set", "state", _47b), lang.hitch(this, "set", "state", _47c));
                            this.onShow(this._connectNode, this.position);
                            break;
                        case _47c:
                            this._hideTimer = this.defer(function() {
                                this.set("state", _479);
                            }, this.hideDelay);
                            break;
                        }
                        this._set("state", val);
                    },
                    _onHover: function(_485) {
                        if (this._connectNode && _485 != this._connectNode) {
                            this.set("state", _479);
                        }
                        this._connectNode = _485;
                        this.set("state", _47a);
                    },
                    _onUnHover: function(_486) {
                        this.set("state", _47c);
                    },
                    open: function(_487) {
                        this.set("state", _479);
                        this._connectNode = _487;
                        this.set("state", _47b);
                    },
                    close: function() {
                        this.set("state", _479);
                    },
                    onShow: function() {},
                    onHide: function() {},
                    destroy: function() {
                        this.set("state", _479);
                        _450.forEach(this._connections || [], function(_488) {
                            _450.forEach(_488, function(_489) {
                                _489.remove();
                            });
                        }, this);
                        this.inherited(arguments);
                    }
                });
                _464._MasterTooltip = _45d;
                _464.show = _45c.showTooltip;
                _464.hide = _45c.hideTooltip;
                _464.defaultPosition = ["after-centered", "before-centered"];
                return _464;
            });
        },
        "dijit/place": function() {
            define(["dojo/_base/array", "dojo/dom-geometry", "dojo/dom-style", "dojo/_base/kernel", "dojo/_base/window", "./Viewport", "./main"], function(_48a, _48b, _48c, _48d, win, _48e, _48f) {
                function _490(node, _491, _492, _493) {
                    var view = _48e.getEffectiveBox(node.ownerDocument);
                    if (!node.parentNode || String(node.parentNode.tagName).toLowerCase() != "body") {
                        win.body(node.ownerDocument).appendChild(node);
                    }
                    var best = null;
                    _48a.some(_491, function(_494) {
                        var _495 = _494.corner;
                        var pos = _494.pos;
                        var _496 = 0;
                        var _497 = {
                            w: {
                                "L": view.l + view.w - pos.x,
                                "R": pos.x - view.l,
                                "M": view.w
                            }[_495.charAt(1)],
                            h: {
                                "T": view.t + view.h - pos.y,
                                "B": pos.y - view.t,
                                "M": view.h
                            }[_495.charAt(0)]
                        };
                        var s = node.style;
                        s.left = s.right = "auto";
                        if (_492) {
                            var res = _492(node, _494.aroundCorner, _495, _497, _493);
                            _496 = typeof res == "undefined" ? 0 : res;
                        }
                        var _498 = node.style;
                        var _499 = _498.display;
                        var _49a = _498.visibility;
                        if (_498.display == "none") {
                            _498.visibility = "hidden";
                            _498.display = "";
                        }
                        var bb = _48b.position(node);
                        _498.display = _499;
                        _498.visibility = _49a;
                        var _49b = {
                            "L": pos.x,
                            "R": pos.x - bb.w,
                            "M": Math.max(view.l, Math.min(view.l + view.w, pos.x + (bb.w >> 1)) - bb.w)
                        }[_495.charAt(1)]
                          , _49c = {
                            "T": pos.y,
                            "B": pos.y - bb.h,
                            "M": Math.max(view.t, Math.min(view.t + view.h, pos.y + (bb.h >> 1)) - bb.h)
                        }[_495.charAt(0)]
                          , _49d = Math.max(view.l, _49b)
                          , _49e = Math.max(view.t, _49c)
                          , endX = Math.min(view.l + view.w, _49b + bb.w)
                          , endY = Math.min(view.t + view.h, _49c + bb.h)
                          , _49f = endX - _49d
                          , _4a0 = endY - _49e;
                        _496 += (bb.w - _49f) + (bb.h - _4a0);
                        if (best == null || _496 < best.overflow) {
                            best = {
                                corner: _495,
                                aroundCorner: _494.aroundCorner,
                                x: _49d,
                                y: _49e,
                                w: _49f,
                                h: _4a0,
                                overflow: _496,
                                spaceAvailable: _497
                            };
                        }
                        return !_496;
                    });
                    if (best.overflow && _492) {
                        _492(node, best.aroundCorner, best.corner, best.spaceAvailable, _493);
                    }
                    var top = best.y
                      , side = best.x
                      , body = win.body(node.ownerDocument);
                    if (/relative|absolute/.test(_48c.get(body, "position"))) {
                        top -= _48c.get(body, "marginTop");
                        side -= _48c.get(body, "marginLeft");
                    }
                    var s = node.style;
                    s.top = top + "px";
                    s.left = side + "px";
                    s.right = "auto";
                    return best;
                }
                ;var _4a1 = {
                    "TL": "BR",
                    "TR": "BL",
                    "BL": "TR",
                    "BR": "TL"
                };
                var _4a2 = {
                    at: function(node, pos, _4a3, _4a4, _4a5) {
                        var _4a6 = _48a.map(_4a3, function(_4a7) {
                            var c = {
                                corner: _4a7,
                                aroundCorner: _4a1[_4a7],
                                pos: {
                                    x: pos.x,
                                    y: pos.y
                                }
                            };
                            if (_4a4) {
                                c.pos.x += _4a7.charAt(1) == "L" ? _4a4.x : -_4a4.x;
                                c.pos.y += _4a7.charAt(0) == "T" ? _4a4.y : -_4a4.y;
                            }
                            return c;
                        });
                        return _490(node, _4a6, _4a5);
                    },
                    around: function(node, _4a8, _4a9, _4aa, _4ab) {
                        var _4ac;
                        if (typeof _4a8 == "string" || "offsetWidth"in _4a8 || "ownerSVGElement"in _4a8) {
                            _4ac = _48b.position(_4a8, true);
                            if (/^(above|below)/.test(_4a9[0])) {
                                var _4ad = _48b.getBorderExtents(_4a8)
                                  , _4ae = _4a8.firstChild ? _48b.getBorderExtents(_4a8.firstChild) : {
                                    t: 0,
                                    l: 0,
                                    b: 0,
                                    r: 0
                                }
                                  , _4af = _48b.getBorderExtents(node)
                                  , _4b0 = node.firstChild ? _48b.getBorderExtents(node.firstChild) : {
                                    t: 0,
                                    l: 0,
                                    b: 0,
                                    r: 0
                                };
                                _4ac.y += Math.min(_4ad.t + _4ae.t, _4af.t + _4b0.t);
                                _4ac.h -= Math.min(_4ad.t + _4ae.t, _4af.t + _4b0.t) + Math.min(_4ad.b + _4ae.b, _4af.b + _4b0.b);
                            }
                        } else {
                            _4ac = _4a8;
                        }
                        if (_4a8.parentNode) {
                            var _4b1 = _48c.getComputedStyle(_4a8).position == "absolute";
                            var _4b2 = _4a8.parentNode;
                            while (_4b2 && _4b2.nodeType == 1 && _4b2.nodeName != "BODY") {
                                var _4b3 = _48b.position(_4b2, true)
                                  , pcs = _48c.getComputedStyle(_4b2);
                                if (/relative|absolute/.test(pcs.position)) {
                                    _4b1 = false;
                                }
                                if (!_4b1 && /hidden|auto|scroll/.test(pcs.overflow)) {
                                    var _4b4 = Math.min(_4ac.y + _4ac.h, _4b3.y + _4b3.h);
                                    var _4b5 = Math.min(_4ac.x + _4ac.w, _4b3.x + _4b3.w);
                                    _4ac.x = Math.max(_4ac.x, _4b3.x);
                                    _4ac.y = Math.max(_4ac.y, _4b3.y);
                                    _4ac.h = _4b4 - _4ac.y;
                                    _4ac.w = _4b5 - _4ac.x;
                                }
                                if (pcs.position == "absolute") {
                                    _4b1 = true;
                                }
                                _4b2 = _4b2.parentNode;
                            }
                        }
                        var x = _4ac.x
                          , y = _4ac.y
                          , _4b6 = "w"in _4ac ? _4ac.w : (_4ac.w = _4ac.width)
                          , _4b7 = "h"in _4ac ? _4ac.h : (_48d.deprecated("place.around: dijit/place.__Rectangle: { x:" + x + ", y:" + y + ", height:" + _4ac.height + ", width:" + _4b6 + " } has been deprecated.  Please use { x:" + x + ", y:" + y + ", h:" + _4ac.height + ", w:" + _4b6 + " }", "", "2.0"),
                        _4ac.h = _4ac.height);
                        var _4b8 = [];
                        function push(_4b9, _4ba) {
                            _4b8.push({
                                aroundCorner: _4b9,
                                corner: _4ba,
                                pos: {
                                    x: {
                                        "L": x,
                                        "R": x + _4b6,
                                        "M": x + (_4b6 >> 1)
                                    }[_4b9.charAt(1)],
                                    y: {
                                        "T": y,
                                        "B": y + _4b7,
                                        "M": y + (_4b7 >> 1)
                                    }[_4b9.charAt(0)]
                                }
                            });
                        }
                        ;_48a.forEach(_4a9, function(pos) {
                            var ltr = _4aa;
                            switch (pos) {
                            case "above-centered":
                                push("TM", "BM");
                                break;
                            case "below-centered":
                                push("BM", "TM");
                                break;
                            case "after-centered":
                                ltr = !ltr;
                            case "before-centered":
                                push(ltr ? "ML" : "MR", ltr ? "MR" : "ML");
                                break;
                            case "after":
                                ltr = !ltr;
                            case "before":
                                push(ltr ? "TL" : "TR", ltr ? "TR" : "TL");
                                push(ltr ? "BL" : "BR", ltr ? "BR" : "BL");
                                break;
                            case "below-alt":
                                ltr = !ltr;
                            case "below":
                                push(ltr ? "BL" : "BR", ltr ? "TL" : "TR");
                                push(ltr ? "BR" : "BL", ltr ? "TR" : "TL");
                                break;
                            case "above-alt":
                                ltr = !ltr;
                            case "above":
                                push(ltr ? "TL" : "TR", ltr ? "BL" : "BR");
                                push(ltr ? "TR" : "TL", ltr ? "BR" : "BL");
                                break;
                            default:
                                push(pos.aroundCorner, pos.corner);
                            }
                        });
                        var _4bb = _490(node, _4b8, _4ab, {
                            w: _4b6,
                            h: _4b7
                        });
                        _4bb.aroundNodePos = _4ac;
                        return _4bb;
                    }
                };
                return _48f.place = _4a2;
            });
        },
        "dojox/uuid/generateRandomUuid": function() {
            define(["./_base"], function() {
                dojox.uuid.generateRandomUuid = function() {
                    var _4bc = 16;
                    function _4bd() {
                        var _4be = Math.floor((Math.random() % 1) * Math.pow(2, 32));
                        var _4bf = _4be.toString(_4bc);
                        while (_4bf.length < 8) {
                            _4bf = "0" + _4bf;
                        }
                        return _4bf;
                    }
                    ;var _4c0 = "-";
                    var _4c1 = "4";
                    var _4c2 = "8";
                    var a = _4bd();
                    var b = _4bd();
                    b = b.substring(0, 4) + _4c0 + _4c1 + b.substring(5, 8);
                    var c = _4bd();
                    c = _4c2 + c.substring(1, 4) + _4c0 + c.substring(4, 8);
                    var d = _4bd();
                    var _4c3 = a + _4c0 + b + _4c0 + c + d;
                    _4c3 = _4c3.toLowerCase();
                    return _4c3;
                }
                ;
                return dojox.uuid.generateRandomUuid;
            });
        },
        "dojox/uuid/_base": function() {
            define(["dojo/_base/kernel", "dojo/_base/lang"], function(dojo) {
                dojo.getObject("uuid", true, dojox);
                dojox.uuid.NIL_UUID = "00000000-0000-0000-0000-000000000000";
                dojox.uuid.version = {
                    UNKNOWN: 0,
                    TIME_BASED: 1,
                    DCE_SECURITY: 2,
                    NAME_BASED_MD5: 3,
                    RANDOM: 4,
                    NAME_BASED_SHA1: 5
                };
                dojox.uuid.variant = {
                    NCS: "0",
                    DCE: "10",
                    MICROSOFT: "110",
                    UNKNOWN: "111"
                };
                dojox.uuid.assert = function(_4c4, _4c5) {
                    if (!_4c4) {
                        if (!_4c5) {
                            _4c5 = "An assert statement failed.\n" + "The method dojox.uuid.assert() was called with a 'false' value.\n";
                        }
                        throw new Error(_4c5);
                    }
                }
                ;
                dojox.uuid.generateNilUuid = function() {
                    return dojox.uuid.NIL_UUID;
                }
                ;
                dojox.uuid.isValid = function(_4c6) {
                    _4c6 = _4c6.toString();
                    var _4c7 = (dojo.isString(_4c6) && (_4c6.length == 36) && (_4c6 == _4c6.toLowerCase()));
                    if (_4c7) {
                        var _4c8 = _4c6.split("-");
                        _4c7 = ((_4c8.length == 5) && (_4c8[0].length == 8) && (_4c8[1].length == 4) && (_4c8[2].length == 4) && (_4c8[3].length == 4) && (_4c8[4].length == 12));
                        var _4c9 = 16;
                        for (var i in _4c8) {
                            var part = _4c8[i];
                            var _4ca = parseInt(part, _4c9);
                            _4c7 = _4c7 && isFinite(_4ca);
                        }
                    }
                    return _4c7;
                }
                ;
                dojox.uuid.getVariant = function(_4cb) {
                    if (!dojox.uuid._ourVariantLookupTable) {
                        var _4cc = dojox.uuid.variant;
                        var _4cd = [];
                        _4cd[0] = _4cc.NCS;
                        _4cd[1] = _4cc.NCS;
                        _4cd[2] = _4cc.NCS;
                        _4cd[3] = _4cc.NCS;
                        _4cd[4] = _4cc.NCS;
                        _4cd[5] = _4cc.NCS;
                        _4cd[6] = _4cc.NCS;
                        _4cd[7] = _4cc.NCS;
                        _4cd[8] = _4cc.DCE;
                        _4cd[9] = _4cc.DCE;
                        _4cd[10] = _4cc.DCE;
                        _4cd[11] = _4cc.DCE;
                        _4cd[12] = _4cc.MICROSOFT;
                        _4cd[13] = _4cc.MICROSOFT;
                        _4cd[14] = _4cc.UNKNOWN;
                        _4cd[15] = _4cc.UNKNOWN;
                        dojox.uuid._ourVariantLookupTable = _4cd;
                    }
                    _4cb = _4cb.toString();
                    var _4ce = _4cb.charAt(19);
                    var _4cf = 16;
                    var _4d0 = parseInt(_4ce, _4cf);
                    dojox.uuid.assert((_4d0 >= 0) && (_4d0 <= 16));
                    return dojox.uuid._ourVariantLookupTable[_4d0];
                }
                ;
                dojox.uuid.getVersion = function(_4d1) {
                    var _4d2 = "dojox.uuid.getVersion() was not passed a DCE Variant UUID.";
                    dojox.uuid.assert(dojox.uuid.getVariant(_4d1) == dojox.uuid.variant.DCE, _4d2);
                    _4d1 = _4d1.toString();
                    var _4d3 = _4d1.charAt(14);
                    var _4d4 = 16;
                    var _4d5 = parseInt(_4d3, _4d4);
                    return _4d5;
                }
                ;
                dojox.uuid.getNode = function(_4d6) {
                    var _4d7 = "dojox.uuid.getNode() was not passed a TIME_BASED UUID.";
                    dojox.uuid.assert(dojox.uuid.getVersion(_4d6) == dojox.uuid.version.TIME_BASED, _4d7);
                    _4d6 = _4d6.toString();
                    var _4d8 = _4d6.split("-");
                    var _4d9 = _4d8[4];
                    return _4d9;
                }
                ;
                dojox.uuid.getTimestamp = function(_4da, _4db) {
                    var _4dc = "dojox.uuid.getTimestamp() was not passed a TIME_BASED UUID.";
                    dojox.uuid.assert(dojox.uuid.getVersion(_4da) == dojox.uuid.version.TIME_BASED, _4dc);
                    _4da = _4da.toString();
                    if (!_4db) {
                        _4db = null;
                    }
                    switch (_4db) {
                    case "string":
                    case String:
                        return dojox.uuid.getTimestamp(_4da, Date).toUTCString();
                        break;
                    case "hex":
                        var _4dd = _4da.split("-");
                        var _4de = _4dd[0];
                        var _4df = _4dd[1];
                        var _4e0 = _4dd[2];
                        _4e0 = _4e0.slice(1);
                        var _4e1 = _4e0 + _4df + _4de;
                        dojox.uuid.assert(_4e1.length == 15);
                        return _4e1;
                        break;
                    case null:
                    case "date":
                    case Date:
                        var _4e2 = 3394248;
                        var _4e3 = 16;
                        var _4e4 = _4da.split("-");
                        var _4e5 = parseInt(_4e4[0], _4e3);
                        var _4e6 = parseInt(_4e4[1], _4e3);
                        var _4e7 = parseInt(_4e4[2], _4e3);
                        var _4e8 = _4e7 & 4095;
                        _4e8 <<= 16;
                        _4e8 += _4e6;
                        _4e8 *= 4294967296;
                        _4e8 += _4e5;
                        var _4e9 = _4e8 / 10000;
                        var _4ea = 60 * 60;
                        var _4eb = _4e2;
                        var _4ec = _4eb * _4ea;
                        var _4ed = _4ec * 1000;
                        var _4ee = _4e9 - _4ed;
                        var _4ef = new Date(_4ee);
                        return _4ef;
                        break;
                    default:
                        dojox.uuid.assert(false, "dojox.uuid.getTimestamp was not passed a valid returnType: " + _4db);
                        break;
                    }
                }
                ;
                return dojox.uuid;
            });
        },
        "dojo/back": function() {
            define(["./_base/config", "./_base/lang", "./sniff", "./dom", "./dom-construct", "./_base/window", "require"], function(_4f0, lang, has, dom, _4f1, _4f2, _4f3) {
                var back = {};
                1 && lang.setObject("dojo.back", back);
                var _4f4 = back.getHash = function() {
                    var h = window.location.hash;
                    if (h.charAt(0) == "#") {
                        h = h.substring(1);
                    }
                    return has("mozilla") ? h : decodeURIComponent(h);
                }
                  , _4f5 = back.setHash = function(h) {
                    if (!h) {
                        h = "";
                    }
                    window.location.hash = encodeURIComponent(h);
                    _4f6 = history.length;
                }
                ;
                var _4f7 = (typeof (window) !== "undefined") ? window.location.href : "";
                var _4f8 = (typeof (window) !== "undefined") ? _4f4() : "";
                var _4f9 = null;
                var _4fa = null;
                var _4fb = null;
                var _4fc = null;
                var _4fd = [];
                var _4fe = [];
                var _4ff = false;
                var _500 = false;
                var _4f6;
                function _501() {
                    var _502 = _4fe.pop();
                    if (!_502) {
                        return;
                    }
                    var last = _4fe[_4fe.length - 1];
                    if (!last && _4fe.length == 0) {
                        last = _4f9;
                    }
                    if (last) {
                        if (last.kwArgs["back"]) {
                            last.kwArgs["back"]();
                        } else {
                            if (last.kwArgs["backButton"]) {
                                last.kwArgs["backButton"]();
                            } else {
                                if (last.kwArgs["handle"]) {
                                    last.kwArgs.handle("back");
                                }
                            }
                        }
                    }
                    _4fd.push(_502);
                }
                ;back.goBack = _501;
                function _503() {
                    var last = _4fd.pop();
                    if (!last) {
                        return;
                    }
                    if (last.kwArgs["forward"]) {
                        last.kwArgs.forward();
                    } else {
                        if (last.kwArgs["forwardButton"]) {
                            last.kwArgs.forwardButton();
                        } else {
                            if (last.kwArgs["handle"]) {
                                last.kwArgs.handle("forward");
                            }
                        }
                    }
                    _4fe.push(last);
                }
                ;back.goForward = _503;
                function _504(url, args, hash) {
                    return {
                        "url": url,
                        "kwArgs": args,
                        "urlHash": hash
                    };
                }
                ;function _505(url) {
                    var _506 = url.split("?");
                    if (_506.length < 2) {
                        return null;
                    } else {
                        return _506[1];
                    }
                }
                ;function _507() {
                    var url = (_4f0["dojoIframeHistoryUrl"] || _4f3.toUrl("./resources/iframe_history.html")) + "?" + (new Date()).getTime();
                    _4ff = true;
                    if (_4fc) {
                        has("webkit") ? _4fc.location = url : window.frames[_4fc.name].location = url;
                    } else {}
                    return url;
                }
                ;function _508() {
                    if (!_500) {
                        var hsl = _4fe.length;
                        var hash = _4f4();
                        if ((hash === _4f8 || window.location.href == _4f7) && (hsl == 1)) {
                            _501();
                            return;
                        }
                        if (_4fd.length > 0) {
                            if (_4fd[_4fd.length - 1].urlHash === hash) {
                                _503();
                                return;
                            }
                        }
                        if ((hsl >= 2) && (_4fe[hsl - 2])) {
                            if (_4fe[hsl - 2].urlHash === hash) {
                                _501();
                            }
                        }
                    }
                }
                ;back.init = function() {
                    if (dom.byId("dj_history")) {
                        return;
                    }
                    var src = _4f0["dojoIframeHistoryUrl"] || _4f3.toUrl("./resources/iframe_history.html");
                    if (_4f0.afterOnLoad) {
                        console.error("dojo/back::init() must be called before the DOM has loaded. " + "Include dojo/back in a build layer.");
                    } else {
                        document.write("<iframe style=\"border:0;width:1px;height:1px;position:absolute;visibility:hidden;bottom:0;right:0;\" name=\"dj_history\" id=\"dj_history\" src=\"" + src + "\"></iframe>");
                    }
                }
                ;
                back.setInitialState = function(args) {
                    _4f9 = _504(_4f7, args, _4f8);
                }
                ;
                back.addToHistory = function(args) {
                    _4fd = [];
                    var hash = null;
                    var url = null;
                    if (!_4fc) {
                        if (_4f0["useXDomain"] && !_4f0["dojoIframeHistoryUrl"]) {
                            console.warn("dojo/back: When using cross-domain Dojo builds," + " please save iframe_history.html to your domain and set djConfig.dojoIframeHistoryUrl" + " to the path on your domain to iframe_history.html");
                        }
                        _4fc = window.frames["dj_history"];
                    }
                    if (!_4fb) {
                        _4fb = _4f1.create("a", {
                            style: {
                                display: "none"
                            }
                        }, _4f2.body());
                    }
                    if (args["changeUrl"]) {
                        hash = "" + ((args["changeUrl"] !== true) ? args["changeUrl"] : (new Date()).getTime());
                        if (_4fe.length == 0 && _4f9.urlHash == hash) {
                            _4f9 = _504(url, args, hash);
                            return;
                        } else {
                            if (_4fe.length > 0 && _4fe[_4fe.length - 1].urlHash == hash) {
                                _4fe[_4fe.length - 1] = _504(url, args, hash);
                                return;
                            }
                        }
                        _500 = true;
                        setTimeout(function() {
                            _4f5(hash);
                            _500 = false;
                        }, 1);
                        _4fb.href = hash;
                        if (has("ie")) {
                            url = _507();
                            var _509 = args["back"] || args["backButton"] || args["handle"];
                            var tcb = function(_50a) {
                                if (_4f4() != "") {
                                    setTimeout(function() {
                                        _4f5(hash);
                                    }, 1);
                                }
                                _509.apply(this, [_50a]);
                            };
                            if (args["back"]) {
                                args.back = tcb;
                            } else {
                                if (args["backButton"]) {
                                    args.backButton = tcb;
                                } else {
                                    if (args["handle"]) {
                                        args.handle = tcb;
                                    }
                                }
                            }
                            var _50b = args["forward"] || args["forwardButton"] || args["handle"];
                            var tfw = function(_50c) {
                                if (_4f4() != "") {
                                    _4f5(hash);
                                }
                                if (_50b) {
                                    _50b.apply(this, [_50c]);
                                }
                            };
                            if (args["forward"]) {
                                args.forward = tfw;
                            } else {
                                if (args["forwardButton"]) {
                                    args.forwardButton = tfw;
                                } else {
                                    if (args["handle"]) {
                                        args.handle = tfw;
                                    }
                                }
                            }
                        } else {
                            if (!has("ie")) {
                                if (!_4fa) {
                                    _4fa = setInterval(_508, 200);
                                }
                            }
                        }
                    } else {
                        url = _507();
                    }
                    _4fe.push(_504(url, args, hash));
                }
                ;
                back._iframeLoaded = function(evt, _50d) {
                    var _50e = _505(_50d.href);
                    if (_50e == null) {
                        if (_4fe.length == 1) {
                            _501();
                        }
                        return;
                    }
                    if (_4ff) {
                        _4ff = false;
                        return;
                    }
                    if (_4fe.length >= 2 && _50e == _505(_4fe[_4fe.length - 2].url)) {
                        _501();
                    } else {
                        if (_4fd.length > 0 && _50e == _505(_4fd[_4fd.length - 1].url)) {
                            _503();
                        }
                    }
                }
                ;
                return back;
            });
        },
        "dojo/hash": function() {
            define(["./_base/kernel", "require", "./_base/config", "./aspect", "./_base/lang", "./topic", "./domReady", "./sniff"], function(dojo, _50f, _510, _511, lang, _512, _513, has) {
                dojo.hash = function(hash, _514) {
                    if (!arguments.length) {
                        return _515();
                    }
                    if (hash.charAt(0) == "#") {
                        hash = hash.substring(1);
                    }
                    if (_514) {
                        _516(hash);
                    } else {
                        location.hash = "#" + hash;
                    }
                    return hash;
                }
                ;
                var _517, _518, _519, _51a = _510.hashPollFrequency || 100;
                function _51b(str, _51c) {
                    var i = str.indexOf(_51c);
                    return (i >= 0) ? str.substring(i + 1) : "";
                }
                ;function _515() {
                    return _51b(location.href, "#");
                }
                ;function _51d() {
                    _512.publish("/dojo/hashchange", _515());
                }
                ;function _51e() {
                    if (_515() === _517) {
                        return;
                    }
                    _517 = _515();
                    _51d();
                }
                ;function _516(hash) {
                    if (_518) {
                        if (_518.isTransitioning()) {
                            setTimeout(lang.hitch(null, _516, hash), _51a);
                            return;
                        }
                        var href = _518.iframe.location.href;
                        var _51f = href.indexOf("?");
                        _518.iframe.location.replace(href.substring(0, _51f) + "?" + hash);
                        return;
                    }
                    var href = location.href.replace(/#.*/, "");
                    location.replace(href + "#" + hash);
                    !_519 && _51e();
                }
                ;function _520() {
                    var ifr = document.createElement("iframe")
                      , _521 = "dojo-hash-iframe"
                      , _522 = _510.dojoBlankHtmlUrl || _50f.toUrl("./resources/blank.html");
                    if (_510.useXDomain && !_510.dojoBlankHtmlUrl) {
                        console.warn("dojo/hash: When using cross-domain Dojo builds," + " please save dojo/resources/blank.html to your domain and set djConfig.dojoBlankHtmlUrl" + " to the path on your domain to blank.html");
                    }
                    ifr.id = _521;
                    ifr.src = _522 + "?" + _515();
                    ifr.style.display = "none";
                    document.body.appendChild(ifr);
                    this.iframe = dojo.global[_521];
                    var _523, _524, _525, _526, _527, _528 = this.iframe.location;
                    function _529() {
                        _517 = _515();
                        _523 = _527 ? _517 : _51b(_528.href, "?");
                        _524 = false;
                        _525 = null;
                    }
                    ;this.isTransitioning = function() {
                        return _524;
                    }
                    ;
                    this.pollLocation = function() {
                        if (!_527) {
                            try {
                                var _52a = _51b(_528.href, "?");
                                if (document.title != _526) {
                                    _526 = this.iframe.document.title = document.title;
                                }
                            } catch (e) {
                                _527 = true;
                                console.error("dojo/hash: Error adding history entry. Server unreachable.");
                            }
                        }
                        var hash = _515();
                        if (_524 && _517 === hash) {
                            if (_527 || _52a === _525) {
                                _529();
                                _51d();
                            } else {
                                setTimeout(lang.hitch(this, this.pollLocation), 0);
                                return;
                            }
                        } else {
                            if (_517 === hash && (_527 || _523 === _52a)) {} else {
                                if (_517 !== hash) {
                                    _517 = hash;
                                    _524 = true;
                                    _525 = hash;
                                    ifr.src = _522 + "?" + _525;
                                    _527 = false;
                                    setTimeout(lang.hitch(this, this.pollLocation), 0);
                                    return;
                                } else {
                                    if (!_527) {
                                        location.href = "#" + _528.search.substring(1);
                                        _529();
                                        _51d();
                                    }
                                }
                            }
                        }
                        setTimeout(lang.hitch(this, this.pollLocation), _51a);
                    }
                    ;
                    _529();
                    setTimeout(lang.hitch(this, this.pollLocation), _51a);
                }
                ;_513(function() {
                    if ("onhashchange"in dojo.global && (!has("ie") || (has("ie") >= 8 && document.compatMode != "BackCompat"))) {
                        _519 = _511.after(dojo.global, "onhashchange", _51d, true);
                    } else {
                        if (document.addEventListener) {
                            _517 = _515();
                            setInterval(_51e, _51a);
                        } else {
                            if (document.attachEvent) {
                                _518 = new _520();
                            }
                        }
                    }
                });
                return dojo.hash;
            });
        },
        "dojox/dtl/filter/strings": function() {
            define(["dojo/_base/lang", "dojo/_base/array", "dojox/string/tokenize", "dojox/string/sprintf", "../filter/htmlstrings", "../_base"], function(lang, _52b, _52c, _52d, _52e, dd) {
                var _52f = lang.getObject("filter.strings", true, dd);
                lang.mixin(_52f, {
                    _urlquote: function(url, safe) {
                        if (!safe) {
                            safe = "/";
                        }
                        return _52c(url, /([^\w-_.])/g, function(_530) {
                            if (safe.indexOf(_530) == -1) {
                                if (_530 == " ") {
                                    return "+";
                                } else {
                                    var hex = _530.charCodeAt(0).toString(16).toUpperCase();
                                    while (hex.length < 2) {
                                        hex = "0" + hex;
                                    }
                                    return "%" + hex;
                                }
                            }
                            return _530;
                        }).join("");
                    },
                    addslashes: function(_531) {
                        return _531.replace(/\\/g, "\\\\").replace(/"/g, "\\\"").replace(/'/g, "\\'");
                    },
                    capfirst: function(_532) {
                        _532 = "" + _532;
                        return _532.charAt(0).toUpperCase() + _532.substring(1);
                    },
                    center: function(_533, arg) {
                        arg = arg || _533.length;
                        _533 = _533 + "";
                        var diff = arg - _533.length;
                        if (diff % 2) {
                            _533 = _533 + " ";
                            diff -= 1;
                        }
                        for (var i = 0; i < diff; i += 2) {
                            _533 = " " + _533 + " ";
                        }
                        return _533;
                    },
                    cut: function(_534, arg) {
                        arg = arg + "" || "";
                        _534 = _534 + "";
                        return _534.replace(new RegExp(arg,"g"), "");
                    },
                    _fix_ampersands: /&(?!(\w+|#\d+);)/g,
                    fix_ampersands: function(_535) {
                        return _535.replace(_52f._fix_ampersands, "&amp;");
                    },
                    floatformat: function(_536, arg) {
                        arg = parseInt(arg || -1, 10);
                        _536 = parseFloat(_536);
                        var m = _536 - _536.toFixed(0);
                        if (!m && arg < 0) {
                            return _536.toFixed();
                        }
                        _536 = _536.toFixed(Math.abs(arg));
                        return (arg < 0) ? parseFloat(_536) + "" : _536;
                    },
                    iriencode: function(_537) {
                        return _52f._urlquote(_537, "/#%[]=:;$&()+,!");
                    },
                    linenumbers: function(_538) {
                        var df = dojox.dtl.filter;
                        var _539 = _538.split("\n");
                        var _53a = [];
                        var _53b = (_539.length + "").length;
                        for (var i = 0, line; i < _539.length; i++) {
                            line = _539[i];
                            _53a.push(df.strings.ljust(i + 1, _53b) + ". " + dojox.dtl._base.escape(line));
                        }
                        return _53a.join("\n");
                    },
                    ljust: function(_53c, arg) {
                        _53c = _53c + "";
                        arg = parseInt(arg, 10);
                        while (_53c.length < arg) {
                            _53c = _53c + " ";
                        }
                        return _53c;
                    },
                    lower: function(_53d) {
                        return (_53d + "").toLowerCase();
                    },
                    make_list: function(_53e) {
                        var _53f = [];
                        if (typeof _53e == "number") {
                            _53e = _53e + "";
                        }
                        if (_53e.charAt) {
                            for (var i = 0; i < _53e.length; i++) {
                                _53f.push(_53e.charAt(i));
                            }
                            return _53f;
                        }
                        if (typeof _53e == "object") {
                            for (var key in _53e) {
                                _53f.push(_53e[key]);
                            }
                            return _53f;
                        }
                        return [];
                    },
                    rjust: function(_540, arg) {
                        _540 = _540 + "";
                        arg = parseInt(arg, 10);
                        while (_540.length < arg) {
                            _540 = " " + _540;
                        }
                        return _540;
                    },
                    slugify: function(_541) {
                        _541 = _541.replace(/[^\w\s-]/g, "").toLowerCase();
                        return _541.replace(/[\-\s]+/g, "-");
                    },
                    _strings: {},
                    stringformat: function(_542, arg) {
                        arg = "" + arg;
                        var strs = _52f._strings;
                        if (!strs[arg]) {
                            strs[arg] = new _52d.Formatter("%" + arg);
                        }
                        return strs[arg].format(_542);
                    },
                    title: function(_543) {
                        var last, _544 = "";
                        for (var i = 0, _545; i < _543.length; i++) {
                            _545 = _543.charAt(i);
                            if (last == " " || last == "\n" || last == "\t" || !last) {
                                _544 += _545.toUpperCase();
                            } else {
                                _544 += _545.toLowerCase();
                            }
                            last = _545;
                        }
                        return _544;
                    },
                    _truncatewords: /[ \n\r\t]/,
                    truncatewords: function(_546, arg) {
                        arg = parseInt(arg, 10);
                        if (!arg) {
                            return _546;
                        }
                        for (var i = 0, j = _546.length, _547 = 0, _548, last; i < _546.length; i++) {
                            _548 = _546.charAt(i);
                            if (_52f._truncatewords.test(last)) {
                                if (!_52f._truncatewords.test(_548)) {
                                    ++_547;
                                    if (_547 == arg) {
                                        return _546.substring(0, j + 1) + " ...";
                                    }
                                }
                            } else {
                                if (!_52f._truncatewords.test(_548)) {
                                    j = i;
                                }
                            }
                            last = _548;
                        }
                        return _546;
                    },
                    _truncate_words: /(&.*?;|<.*?>|(\w[\w\-]*))/g,
                    _truncate_tag: /<(\/)?([^ ]+?)(?: (\/)| .*?)?>/,
                    _truncate_singlets: {
                        br: true,
                        col: true,
                        link: true,
                        base: true,
                        img: true,
                        param: true,
                        area: true,
                        hr: true,
                        input: true
                    },
                    truncatewords_html: function(_549, arg) {
                        arg = parseInt(arg, 10);
                        if (arg <= 0) {
                            return "";
                        }
                        var _54a = 0;
                        var open = [];
                        var _54b = _52c(_549, _52f._truncate_words, function(all, word) {
                            if (word) {
                                ++_54a;
                                if (_54a < arg) {
                                    return word;
                                } else {
                                    if (_54a == arg) {
                                        return word + " ...";
                                    }
                                }
                            }
                            var tag = all.match(_52f._truncate_tag);
                            if (!tag || _54a >= arg) {
                                return;
                            }
                            var _54c = tag[1];
                            var _54d = tag[2].toLowerCase();
                            var _54e = tag[3];
                            if (_54c || _52f._truncate_singlets[_54d]) {} else {
                                if (_54c) {
                                    var i = _52b.indexOf(open, _54d);
                                    if (i != -1) {
                                        open = open.slice(i + 1);
                                    }
                                } else {
                                    open.unshift(_54d);
                                }
                            }
                            return all;
                        }).join("");
                        _54b = _54b.replace(/\s+$/g, "");
                        for (var i = 0, tag; tag = open[i]; i++) {
                            _54b += "</" + tag + ">";
                        }
                        return _54b;
                    },
                    upper: function(_54f) {
                        return _54f.toUpperCase();
                    },
                    urlencode: function(_550) {
                        return _52f._urlquote(_550);
                    },
                    _urlize: /^((?:[(>]|&lt;)*)(.*?)((?:[.,)>\n]|&gt;)*)$/,
                    _urlize2: /^\S+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9._-]+$/,
                    urlize: function(_551) {
                        return _52f.urlizetrunc(_551);
                    },
                    urlizetrunc: function(_552, arg) {
                        arg = parseInt(arg);
                        return _52c(_552, /(\S+)/g, function(word) {
                            var _553 = _52f._urlize.exec(word);
                            if (!_553) {
                                return word;
                            }
                            var lead = _553[1];
                            var _554 = _553[2];
                            var _555 = _553[3];
                            var _556 = _554.indexOf("www.") == 0;
                            var _557 = _554.indexOf("@") != -1;
                            var _558 = _554.indexOf(":") != -1;
                            var _559 = _554.indexOf("http://") == 0;
                            var _55a = _554.indexOf("https://") == 0;
                            var _55b = /[a-zA-Z0-9]/.test(_554.charAt(0));
                            var _55c = _554.substring(_554.length - 4);
                            var _55d = _554;
                            if (arg > 3) {
                                _55d = _55d.substring(0, arg - 3) + "...";
                            }
                            if (_556 || (!_557 && !_559 && _554.length && _55b && (_55c == ".org" || _55c == ".net" || _55c == ".com"))) {
                                return "<a href=\"http://" + _554 + "\" rel=\"nofollow\">" + _55d + "</a>";
                            } else {
                                if (_559 || _55a) {
                                    return "<a href=\"" + _554 + "\" rel=\"nofollow\">" + _55d + "</a>";
                                } else {
                                    if (_557 && !_556 && !_558 && _52f._urlize2.test(_554)) {
                                        return "<a href=\"mailto:" + _554 + "\">" + _554 + "</a>";
                                    }
                                }
                            }
                            return word;
                        }).join("");
                    },
                    wordcount: function(_55e) {
                        _55e = lang.trim(_55e);
                        if (!_55e) {
                            return 0;
                        }
                        return _55e.split(/\s+/g).length;
                    },
                    wordwrap: function(_55f, arg) {
                        arg = parseInt(arg);
                        var _560 = [];
                        var _561 = _55f.split(/\s+/g);
                        if (_561.length) {
                            var word = _561.shift();
                            _560.push(word);
                            var pos = word.length - word.lastIndexOf("\n") - 1;
                            for (var i = 0; i < _561.length; i++) {
                                word = _561[i];
                                if (word.indexOf("\n") != -1) {
                                    var _562 = word.split(/\n/g);
                                } else {
                                    var _562 = [word];
                                }
                                pos += _562[0].length + 1;
                                if (arg && pos > arg) {
                                    _560.push("\n");
                                    pos = _562[_562.length - 1].length;
                                } else {
                                    _560.push(" ");
                                    if (_562.length > 1) {
                                        pos = _562[_562.length - 1].length;
                                    }
                                }
                                _560.push(word);
                            }
                        }
                        return _560.join("");
                    }
                });
                return _52f;
            });
        },
        "dojox/string/tokenize": function() {
            define(["dojo/_base/lang", "dojo/_base/sniff"], function(lang, has) {
                var _563 = lang.getObject("dojox.string", true).tokenize;
                _563 = function(str, re, _564, _565) {
                    var _566 = [];
                    var _567, _568, _569 = 0;
                    while (_567 = re.exec(str)) {
                        _568 = str.slice(_569, re.lastIndex - _567[0].length);
                        if (_568.length) {
                            _566.push(_568);
                        }
                        if (_564) {
                            if (has("opera")) {
                                var copy = _567.slice(0);
                                while (copy.length < _567.length) {
                                    copy.push(null);
                                }
                                _567 = copy;
                            }
                            var _56a = _564.apply(_565, _567.slice(1).concat(_566.length));
                            if (typeof _56a != "undefined") {
                                _566.push(_56a);
                            }
                        }
                        _569 = re.lastIndex;
                    }
                    _568 = str.slice(_569);
                    if (_568.length) {
                        _566.push(_568);
                    }
                    return _566;
                }
                ;
                return _563;
            });
        },
        "dojox/string/sprintf": function() {
            define(["dojo/_base/kernel", "dojo/_base/lang", "dojo/_base/sniff", "./tokenize"], function(dojo, lang, has, _56b) {
                var _56c = lang.getObject("string", true, dojox);
                _56c.sprintf = function(_56d, _56e) {
                    for (var args = [], i = 1; i < arguments.length; i++) {
                        args.push(arguments[i]);
                    }
                    var _56f = new _56c.sprintf.Formatter(_56d);
                    return _56f.format.apply(_56f, args);
                }
                ;
                _56c.sprintf.Formatter = function(_570) {
                    var _571 = [];
                    this._mapped = false;
                    this._format = _570;
                    this._tokens = _56b(_570, this._re, this._parseDelim, this);
                }
                ;
                lang.extend(_56c.sprintf.Formatter, {
                    _re: /\%(?:\(([\w_]+)\)|([1-9]\d*)\$)?([0 +\-\#]*)(\*|\d+)?(\.)?(\*|\d+)?[hlL]?([\%scdeEfFgGiouxX])/g,
                    _parseDelim: function(_572, _573, _574, _575, _576, _577, _578) {
                        if (_572) {
                            this._mapped = true;
                        }
                        return {
                            mapping: _572,
                            intmapping: _573,
                            flags: _574,
                            _minWidth: _575,
                            period: _576,
                            _precision: _577,
                            specifier: _578
                        };
                    },
                    _specifiers: {
                        b: {
                            base: 2,
                            isInt: true
                        },
                        o: {
                            base: 8,
                            isInt: true
                        },
                        x: {
                            base: 16,
                            isInt: true
                        },
                        X: {
                            extend: ["x"],
                            toUpper: true
                        },
                        d: {
                            base: 10,
                            isInt: true
                        },
                        i: {
                            extend: ["d"]
                        },
                        u: {
                            extend: ["d"],
                            isUnsigned: true
                        },
                        c: {
                            setArg: function(_579) {
                                if (!isNaN(_579.arg)) {
                                    var num = parseInt(_579.arg);
                                    if (num < 0 || num > 127) {
                                        throw new Error("invalid character code passed to %c in sprintf");
                                    }
                                    _579.arg = isNaN(num) ? "" + num : String.fromCharCode(num);
                                }
                            }
                        },
                        s: {
                            setMaxWidth: function(_57a) {
                                _57a.maxWidth = (_57a.period == ".") ? _57a.precision : -1;
                            }
                        },
                        e: {
                            isDouble: true,
                            doubleNotation: "e"
                        },
                        E: {
                            extend: ["e"],
                            toUpper: true
                        },
                        f: {
                            isDouble: true,
                            doubleNotation: "f"
                        },
                        F: {
                            extend: ["f"]
                        },
                        g: {
                            isDouble: true,
                            doubleNotation: "g"
                        },
                        G: {
                            extend: ["g"],
                            toUpper: true
                        }
                    },
                    format: function(_57b) {
                        if (this._mapped && typeof _57b != "object") {
                            throw new Error("format requires a mapping");
                        }
                        var str = "";
                        var _57c = 0;
                        for (var i = 0, _57d; i < this._tokens.length; i++) {
                            _57d = this._tokens[i];
                            if (typeof _57d == "string") {
                                str += _57d;
                            } else {
                                if (this._mapped) {
                                    if (typeof _57b[_57d.mapping] == "undefined") {
                                        throw new Error("missing key " + _57d.mapping);
                                    }
                                    _57d.arg = _57b[_57d.mapping];
                                } else {
                                    if (_57d.intmapping) {
                                        var _57c = parseInt(_57d.intmapping) - 1;
                                    }
                                    if (_57c >= arguments.length) {
                                        throw new Error("got " + arguments.length + " printf arguments, insufficient for '" + this._format + "'");
                                    }
                                    _57d.arg = arguments[_57c++];
                                }
                                if (!_57d.compiled) {
                                    _57d.compiled = true;
                                    _57d.sign = "";
                                    _57d.zeroPad = false;
                                    _57d.rightJustify = false;
                                    _57d.alternative = false;
                                    var _57e = {};
                                    for (var fi = _57d.flags.length; fi--; ) {
                                        var flag = _57d.flags.charAt(fi);
                                        _57e[flag] = true;
                                        switch (flag) {
                                        case " ":
                                            _57d.sign = " ";
                                            break;
                                        case "+":
                                            _57d.sign = "+";
                                            break;
                                        case "0":
                                            _57d.zeroPad = (_57e["-"]) ? false : true;
                                            break;
                                        case "-":
                                            _57d.rightJustify = true;
                                            _57d.zeroPad = false;
                                            break;
                                        case "#":
                                            _57d.alternative = true;
                                            break;
                                        default:
                                            throw Error("bad formatting flag '" + _57d.flags.charAt(fi) + "'");
                                        }
                                    }
                                    _57d.minWidth = (_57d._minWidth) ? parseInt(_57d._minWidth) : 0;
                                    _57d.maxWidth = -1;
                                    _57d.toUpper = false;
                                    _57d.isUnsigned = false;
                                    _57d.isInt = false;
                                    _57d.isDouble = false;
                                    _57d.precision = 1;
                                    if (_57d.period == ".") {
                                        if (_57d._precision) {
                                            _57d.precision = parseInt(_57d._precision);
                                        } else {
                                            _57d.precision = 0;
                                        }
                                    }
                                    var _57f = this._specifiers[_57d.specifier];
                                    if (typeof _57f == "undefined") {
                                        throw new Error("unexpected specifier '" + _57d.specifier + "'");
                                    }
                                    if (_57f.extend) {
                                        lang.mixin(_57f, this._specifiers[_57f.extend]);
                                        delete _57f.extend;
                                    }
                                    lang.mixin(_57d, _57f);
                                }
                                if (typeof _57d.setArg == "function") {
                                    _57d.setArg(_57d);
                                }
                                if (typeof _57d.setMaxWidth == "function") {
                                    _57d.setMaxWidth(_57d);
                                }
                                if (_57d._minWidth == "*") {
                                    if (this._mapped) {
                                        throw new Error("* width not supported in mapped formats");
                                    }
                                    _57d.minWidth = parseInt(arguments[_57c++]);
                                    if (isNaN(_57d.minWidth)) {
                                        throw new Error("the argument for * width at position " + _57c + " is not a number in " + this._format);
                                    }
                                    if (_57d.minWidth < 0) {
                                        _57d.rightJustify = true;
                                        _57d.minWidth = -_57d.minWidth;
                                    }
                                }
                                if (_57d._precision == "*" && _57d.period == ".") {
                                    if (this._mapped) {
                                        throw new Error("* precision not supported in mapped formats");
                                    }
                                    _57d.precision = parseInt(arguments[_57c++]);
                                    if (isNaN(_57d.precision)) {
                                        throw Error("the argument for * precision at position " + _57c + " is not a number in " + this._format);
                                    }
                                    if (_57d.precision < 0) {
                                        _57d.precision = 1;
                                        _57d.period = "";
                                    }
                                }
                                if (_57d.isInt) {
                                    if (_57d.period == ".") {
                                        _57d.zeroPad = false;
                                    }
                                    this.formatInt(_57d);
                                } else {
                                    if (_57d.isDouble) {
                                        if (_57d.period != ".") {
                                            _57d.precision = 6;
                                        }
                                        this.formatDouble(_57d);
                                    }
                                }
                                this.fitField(_57d);
                                str += "" + _57d.arg;
                            }
                        }
                        return str;
                    },
                    _zeros10: "0000000000",
                    _spaces10: "          ",
                    formatInt: function(_580) {
                        var i = parseInt(_580.arg);
                        if (!isFinite(i)) {
                            if (typeof _580.arg != "number") {
                                throw new Error("format argument '" + _580.arg + "' not an integer; parseInt returned " + i);
                            }
                            i = 0;
                        }
                        if (i < 0 && (_580.isUnsigned || _580.base != 10)) {
                            i = 4294967295 + i + 1;
                        }
                        if (i < 0) {
                            _580.arg = (-i).toString(_580.base);
                            this.zeroPad(_580);
                            _580.arg = "-" + _580.arg;
                        } else {
                            _580.arg = i.toString(_580.base);
                            if (!i && !_580.precision) {
                                _580.arg = "";
                            } else {
                                this.zeroPad(_580);
                            }
                            if (_580.sign) {
                                _580.arg = _580.sign + _580.arg;
                            }
                        }
                        if (_580.base == 16) {
                            if (_580.alternative) {
                                _580.arg = "0x" + _580.arg;
                            }
                            _580.arg = _580.toUpper ? _580.arg.toUpperCase() : _580.arg.toLowerCase();
                        }
                        if (_580.base == 8) {
                            if (_580.alternative && _580.arg.charAt(0) != "0") {
                                _580.arg = "0" + _580.arg;
                            }
                        }
                    },
                    formatDouble: function(_581) {
                        var f = parseFloat(_581.arg);
                        if (!isFinite(f)) {
                            if (typeof _581.arg != "number") {
                                throw new Error("format argument '" + _581.arg + "' not a float; parseFloat returned " + f);
                            }
                            f = 0;
                        }
                        switch (_581.doubleNotation) {
                        case "e":
                            _581.arg = f.toExponential(_581.precision);
                            break;
                        case "f":
                            _581.arg = f.toFixed(_581.precision);
                            break;
                        case "g":
                            if (Math.abs(f) < 0.0001) {
                                _581.arg = f.toExponential(_581.precision > 0 ? _581.precision - 1 : _581.precision);
                            } else {
                                _581.arg = f.toPrecision(_581.precision);
                            }
                            if (!_581.alternative) {
                                _581.arg = _581.arg.replace(/(\..*[^0])0*/, "$1");
                                _581.arg = _581.arg.replace(/\.0*e/, "e").replace(/\.0$/, "");
                            }
                            break;
                        default:
                            throw new Error("unexpected double notation '" + _581.doubleNotation + "'");
                        }
                        _581.arg = _581.arg.replace(/e\+(\d)$/, "e+0$1").replace(/e\-(\d)$/, "e-0$1");
                        if (has("opera")) {
                            _581.arg = _581.arg.replace(/^\./, "0.");
                        }
                        if (_581.alternative) {
                            _581.arg = _581.arg.replace(/^(\d+)$/, "$1.");
                            _581.arg = _581.arg.replace(/^(\d+)e/, "$1.e");
                        }
                        if (f >= 0 && _581.sign) {
                            _581.arg = _581.sign + _581.arg;
                        }
                        _581.arg = _581.toUpper ? _581.arg.toUpperCase() : _581.arg.toLowerCase();
                    },
                    zeroPad: function(_582, _583) {
                        _583 = (arguments.length == 2) ? _583 : _582.precision;
                        if (typeof _582.arg != "string") {
                            _582.arg = "" + _582.arg;
                        }
                        var _584 = _583 - 10;
                        while (_582.arg.length < _584) {
                            _582.arg = (_582.rightJustify) ? _582.arg + this._zeros10 : this._zeros10 + _582.arg;
                        }
                        var pad = _583 - _582.arg.length;
                        _582.arg = (_582.rightJustify) ? _582.arg + this._zeros10.substring(0, pad) : this._zeros10.substring(0, pad) + _582.arg;
                    },
                    fitField: function(_585) {
                        if (_585.maxWidth >= 0 && _585.arg.length > _585.maxWidth) {
                            return _585.arg.substring(0, _585.maxWidth);
                        }
                        if (_585.zeroPad) {
                            this.zeroPad(_585, _585.minWidth);
                            return;
                        }
                        this.spacePad(_585);
                    },
                    spacePad: function(_586, _587) {
                        _587 = (arguments.length == 2) ? _587 : _586.minWidth;
                        if (typeof _586.arg != "string") {
                            _586.arg = "" + _586.arg;
                        }
                        var _588 = _587 - 10;
                        while (_586.arg.length < _588) {
                            _586.arg = (_586.rightJustify) ? _586.arg + this._spaces10 : this._spaces10 + _586.arg;
                        }
                        var pad = _587 - _586.arg.length;
                        _586.arg = (_586.rightJustify) ? _586.arg + this._spaces10.substring(0, pad) : this._spaces10.substring(0, pad) + _586.arg;
                    }
                });
                return _56c.sprintf;
            });
        },
        "dojox/dtl/filter/htmlstrings": function() {
            define(["dojo/_base/lang", "../_base"], function(lang, dd) {
                var _589 = lang.getObject("filter.htmlstrings", true, dd);
                lang.mixin(_589, {
                    _linebreaksrn: /(\r\n|\n\r)/g,
                    _linebreaksn: /\n{2,}/g,
                    _linebreakss: /(^\s+|\s+$)/g,
                    _linebreaksbr: /\n/g,
                    _removetagsfind: /[a-z0-9]+/g,
                    _striptags: /<[^>]*?>/g,
                    linebreaks: function(_58a) {
                        var _58b = [];
                        var dh = _589;
                        _58a = _58a.replace(dh._linebreaksrn, "\n");
                        var _58c = _58a.split(dh._linebreaksn);
                        for (var i = 0; i < _58c.length; i++) {
                            var part = _58c[i].replace(dh._linebreakss, "").replace(dh._linebreaksbr, "<br />");
                            _58b.push("<p>" + part + "</p>");
                        }
                        return _58b.join("\n\n");
                    },
                    linebreaksbr: function(_58d) {
                        var dh = _589;
                        return _58d.replace(dh._linebreaksrn, "\n").replace(dh._linebreaksbr, "<br />");
                    },
                    removetags: function(_58e, arg) {
                        var dh = _589;
                        var tags = [];
                        var _58f;
                        while (_58f = dh._removetagsfind.exec(arg)) {
                            tags.push(_58f[0]);
                        }
                        tags = "(" + tags.join("|") + ")";
                        return _58e.replace(new RegExp("</?s*" + tags + "s*[^>]*>","gi"), "");
                    },
                    striptags: function(_590) {
                        return _590.replace(dojox.dtl.filter.htmlstrings._striptags, "");
                    }
                });
                return _589;
            });
        },
        "dojox/dtl/_base": function() {
            define(["dojo/_base/kernel", "dojo/_base/lang", "dojox/string/tokenize", "dojo/_base/json", "dojo/dom", "dojo/_base/xhr", "dojox/string/Builder", "dojo/_base/Deferred"], function(_591, lang, _592, json, dom, xhr, _593, _594) {
                _591.experimental("dojox.dtl");
                var dd = lang.getObject("dojox.dtl", true);
                dd._base = {};
                dd.TOKEN_BLOCK = -1;
                dd.TOKEN_VAR = -2;
                dd.TOKEN_COMMENT = -3;
                dd.TOKEN_TEXT = 3;
                dd._Context = lang.extend(function(dict) {
                    if (dict) {
                        lang._mixin(this, dict);
                        if (dict.get) {
                            this._getter = dict.get;
                            delete this.get;
                        }
                    }
                }, {
                    push: function() {
                        var last = this;
                        var _595 = lang.delegate(this);
                        _595.pop = function() {
                            return last;
                        }
                        ;
                        return _595;
                    },
                    pop: function() {
                        throw new Error("pop() called on empty Context");
                    },
                    get: function(key, _596) {
                        var n = this._normalize;
                        if (this._getter) {
                            var got = this._getter(key);
                            if (got !== undefined) {
                                return n(got);
                            }
                        }
                        if (this[key] !== undefined) {
                            return n(this[key]);
                        }
                        return _596;
                    },
                    _normalize: function(_597) {
                        if (_597 instanceof Date) {
                            _597.year = _597.getFullYear();
                            _597.month = _597.getMonth() + 1;
                            _597.day = _597.getDate();
                            _597.date = _597.year + "-" + ("0" + _597.month).slice(-2) + "-" + ("0" + _597.day).slice(-2);
                            _597.hour = _597.getHours();
                            _597.minute = _597.getMinutes();
                            _597.second = _597.getSeconds();
                            _597.microsecond = _597.getMilliseconds();
                        }
                        return _597;
                    },
                    update: function(dict) {
                        var _598 = this.push();
                        if (dict) {
                            lang._mixin(this, dict);
                        }
                        return _598;
                    }
                });
                var _599 = /("(?:[^"\\]*(?:\\.[^"\\]*)*)"|'(?:[^'\\]*(?:\\.[^'\\]*)*)'|[^\s]+)/g;
                var _59a = /\s+/g;
                var _59b = function(_59c, _59d) {
                    _59c = _59c || _59a;
                    if (!(_59c instanceof RegExp)) {
                        _59c = new RegExp(_59c,"g");
                    }
                    if (!_59c.global) {
                        throw new Error("You must use a globally flagged RegExp with split " + _59c);
                    }
                    _59c.exec("");
                    var part, _59e = [], _59f = 0, i = 0;
                    while ((part = _59c.exec(this))) {
                        _59e.push(this.slice(_59f, _59c.lastIndex - part[0].length));
                        _59f = _59c.lastIndex;
                        if (_59d && (++i > _59d - 1)) {
                            break;
                        }
                    }
                    _59e.push(this.slice(_59f));
                    return _59e;
                };
                dd.Token = function(_5a0, _5a1) {
                    this.token_type = _5a0;
                    this.contents = new String(lang.trim(_5a1));
                    this.contents.split = _59b;
                    this.split = function() {
                        return String.prototype.split.apply(this.contents, arguments);
                    }
                    ;
                }
                ;
                dd.Token.prototype.split_contents = function(_5a2) {
                    var bit, bits = [], i = 0;
                    _5a2 = _5a2 || 999;
                    while (i++ < _5a2 && (bit = _599.exec(this.contents))) {
                        bit = bit[0];
                        if (bit.charAt(0) == "\"" && bit.slice(-1) == "\"") {
                            bits.push("\"" + bit.slice(1, -1).replace("\\\"", "\"").replace("\\\\", "\\") + "\"");
                        } else {
                            if (bit.charAt(0) == "'" && bit.slice(-1) == "'") {
                                bits.push("'" + bit.slice(1, -1).replace("\\'", "'").replace("\\\\", "\\") + "'");
                            } else {
                                bits.push(bit);
                            }
                        }
                    }
                    return bits;
                }
                ;
                var ddt = dd.text = {
                    _get: function(_5a3, name, _5a4) {
                        var _5a5 = dd.register.get(_5a3, name.toLowerCase(), _5a4);
                        if (!_5a5) {
                            if (!_5a4) {
                                throw new Error("No tag found for " + name);
                            }
                            return null;
                        }
                        var fn = _5a5[1];
                        var deps = _5a5[2];
                        var _5a6;
                        if (fn.indexOf(":") != -1) {
                            _5a6 = fn.split(":");
                            fn = _5a6.pop();
                        }
                        var mod = deps;
                        if (/\./.test(deps)) {
                            deps = deps.replace(/\./g, "/");
                        }
                        require([deps], function() {});
                        var _5a7 = lang.getObject(mod);
                        return _5a7[fn || name] || _5a7[name + "_"] || _5a7[fn + "_"];
                    },
                    getTag: function(name, _5a8) {
                        return ddt._get("tag", name, _5a8);
                    },
                    getFilter: function(name, _5a9) {
                        return ddt._get("filter", name, _5a9);
                    },
                    getTemplate: function(file) {
                        return new dd.Template(ddt.getTemplateString(file));
                    },
                    getTemplateString: function(file) {
                        return xhr._getText(file.toString()) || "";
                    },
                    _resolveLazy: function(_5aa, sync, json) {
                        if (sync) {
                            if (json) {
                                return json.fromJson(xhr._getText(_5aa)) || {};
                            } else {
                                return dd.text.getTemplateString(_5aa);
                            }
                        } else {
                            return xhr.get({
                                handleAs: json ? "json" : "text",
                                url: _5aa
                            });
                        }
                    },
                    _resolveTemplateArg: function(arg, sync) {
                        if (ddt._isTemplate(arg)) {
                            if (!sync) {
                                var d = new _594();
                                d.callback(arg);
                                return d;
                            }
                            return arg;
                        }
                        return ddt._resolveLazy(arg, sync);
                    },
                    _isTemplate: function(arg) {
                        return (arg === undefined) || (typeof arg == "string" && (arg.match(/^\s*[<{]/) || arg.indexOf(" ") != -1));
                    },
                    _resolveContextArg: function(arg, sync) {
                        if (arg.constructor == Object) {
                            if (!sync) {
                                var d = new _594;
                                d.callback(arg);
                                return d;
                            }
                            return arg;
                        }
                        return ddt._resolveLazy(arg, sync, true);
                    },
                    _re: /(?:\{\{\s*(.+?)\s*\}\}|\{%\s*(load\s*)?(.+?)\s*%\})/g,
                    tokenize: function(str) {
                        return _592(str, ddt._re, ddt._parseDelims);
                    },
                    _parseDelims: function(varr, load, tag) {
                        if (varr) {
                            return [dd.TOKEN_VAR, varr];
                        } else {
                            if (load) {
                                var _5ab = lang.trim(tag).split(/\s+/g);
                                for (var i = 0, part; part = _5ab[i]; i++) {
                                    if (/\./.test(part)) {
                                        part = part.replace(/\./g, "/");
                                    }
                                    require([part]);
                                }
                            } else {
                                return [dd.TOKEN_BLOCK, tag];
                            }
                        }
                    }
                };
                dd.Template = lang.extend(function(_5ac, _5ad) {
                    var str = _5ad ? _5ac : ddt._resolveTemplateArg(_5ac, true) || "";
                    var _5ae = ddt.tokenize(str);
                    var _5af = new dd._Parser(_5ae);
                    this.nodelist = _5af.parse();
                }, {
                    update: function(node, _5b0) {
                        return ddt._resolveContextArg(_5b0).addCallback(this, function(_5b1) {
                            var _5b2 = this.render(new dd._Context(_5b1));
                            if (node.forEach) {
                                node.forEach(function(item) {
                                    item.innerHTML = _5b2;
                                });
                            } else {
                                dom.byId(node).innerHTML = _5b2;
                            }
                            return this;
                        });
                    },
                    render: function(_5b3, _5b4) {
                        _5b4 = _5b4 || this.getBuffer();
                        _5b3 = _5b3 || new dd._Context({});
                        return this.nodelist.render(_5b3, _5b4) + "";
                    },
                    getBuffer: function() {
                        return new _593();
                    }
                });
                var qfRe = /\{\{\s*(.+?)\s*\}\}/g;
                dd.quickFilter = function(str) {
                    if (!str) {
                        return new dd._NodeList();
                    }
                    if (str.indexOf("{%") == -1) {
                        return new dd._QuickNodeList(_592(str, qfRe, function(_5b5) {
                            return new dd._Filter(_5b5);
                        }));
                    }
                }
                ;
                dd._QuickNodeList = lang.extend(function(_5b6) {
                    this.contents = _5b6;
                }, {
                    render: function(_5b7, _5b8) {
                        for (var i = 0, l = this.contents.length; i < l; i++) {
                            if (this.contents[i].resolve) {
                                _5b8 = _5b8.concat(this.contents[i].resolve(_5b7));
                            } else {
                                _5b8 = _5b8.concat(this.contents[i]);
                            }
                        }
                        return _5b8;
                    },
                    dummyRender: function(_5b9) {
                        return this.render(_5b9, dd.Template.prototype.getBuffer()).toString();
                    },
                    clone: function(_5ba) {
                        return this;
                    }
                });
                dd._Filter = lang.extend(function(_5bb) {
                    if (!_5bb) {
                        throw new Error("Filter must be called with variable name");
                    }
                    this.contents = _5bb;
                    var _5bc = this._cache[_5bb];
                    if (_5bc) {
                        this.key = _5bc[0];
                        this.filters = _5bc[1];
                    } else {
                        this.filters = [];
                        _592(_5bb, this._re, this._tokenize, this);
                        this._cache[_5bb] = [this.key, this.filters];
                    }
                }, {
                    _cache: {},
                    _re: /(?:^_\("([^\\"]*(?:\\.[^\\"])*)"\)|^"([^\\"]*(?:\\.[^\\"]*)*)"|^([a-zA-Z0-9_.]+)|\|(\w+)(?::(?:_\("([^\\"]*(?:\\.[^\\"])*)"\)|"([^\\"]*(?:\\.[^\\"]*)*)"|([a-zA-Z0-9_.]+)|'([^\\']*(?:\\.[^\\']*)*)'))?|^'([^\\']*(?:\\.[^\\']*)*)')/g,
                    _values: {
                        0: "\"",
                        1: "\"",
                        2: "",
                        8: "\""
                    },
                    _args: {
                        4: "\"",
                        5: "\"",
                        6: "",
                        7: "'"
                    },
                    _tokenize: function() {
                        var pos, arg;
                        for (var i = 0, has = []; i < arguments.length; i++) {
                            has[i] = (arguments[i] !== undefined && typeof arguments[i] == "string" && arguments[i]);
                        }
                        if (!this.key) {
                            for (pos in this._values) {
                                if (has[pos]) {
                                    this.key = this._values[pos] + arguments[pos] + this._values[pos];
                                    break;
                                }
                            }
                        } else {
                            for (pos in this._args) {
                                if (has[pos]) {
                                    var _5bd = arguments[pos];
                                    if (this._args[pos] == "'") {
                                        _5bd = _5bd.replace(/\\'/g, "'");
                                    } else {
                                        if (this._args[pos] == "\"") {
                                            _5bd = _5bd.replace(/\\"/g, "\"");
                                        }
                                    }
                                    arg = [!this._args[pos], _5bd];
                                    break;
                                }
                            }
                            var fn = ddt.getFilter(arguments[3]);
                            if (!lang.isFunction(fn)) {
                                throw new Error(arguments[3] + " is not registered as a filter");
                            }
                            this.filters.push([fn, arg]);
                        }
                    },
                    getExpression: function() {
                        return this.contents;
                    },
                    resolve: function(_5be) {
                        if (this.key === undefined) {
                            return "";
                        }
                        var str = this.resolvePath(this.key, _5be);
                        for (var i = 0, _5bf; _5bf = this.filters[i]; i++) {
                            if (_5bf[1]) {
                                if (_5bf[1][0]) {
                                    str = _5bf[0](str, this.resolvePath(_5bf[1][1], _5be));
                                } else {
                                    str = _5bf[0](str, _5bf[1][1]);
                                }
                            } else {
                                str = _5bf[0](str);
                            }
                        }
                        return str;
                    },
                    resolvePath: function(path, _5c0) {
                        var _5c1, _5c2;
                        var _5c3 = path.charAt(0);
                        var last = path.slice(-1);
                        if (!isNaN(parseInt(_5c3))) {
                            _5c1 = (path.indexOf(".") == -1) ? parseInt(path) : parseFloat(path);
                        } else {
                            if (_5c3 == "\"" && _5c3 == last) {
                                _5c1 = path.slice(1, -1);
                            } else {
                                if (path == "true") {
                                    return true;
                                }
                                if (path == "false") {
                                    return false;
                                }
                                if (path == "null" || path == "None") {
                                    return null;
                                }
                                _5c2 = path.split(".");
                                _5c1 = _5c0.get(_5c2[0]);
                                if (lang.isFunction(_5c1)) {
                                    var self = _5c0.getThis && _5c0.getThis();
                                    if (_5c1.alters_data) {
                                        _5c1 = "";
                                    } else {
                                        if (self) {
                                            _5c1 = _5c1.call(self);
                                        } else {
                                            _5c1 = "";
                                        }
                                    }
                                }
                                for (var i = 1; i < _5c2.length; i++) {
                                    var part = _5c2[i];
                                    if (_5c1) {
                                        var base = _5c1;
                                        if (lang.isObject(_5c1) && part == "items" && _5c1[part] === undefined) {
                                            var _5c4 = [];
                                            for (var key in _5c1) {
                                                _5c4.push([key, _5c1[key]]);
                                            }
                                            _5c1 = _5c4;
                                            continue;
                                        }
                                        if (_5c1.get && lang.isFunction(_5c1.get) && _5c1.get.safe) {
                                            _5c1 = _5c1.get(part);
                                        } else {
                                            if (_5c1[part] === undefined) {
                                                _5c1 = _5c1[part];
                                                break;
                                            } else {
                                                _5c1 = _5c1[part];
                                            }
                                        }
                                        if (lang.isFunction(_5c1)) {
                                            if (_5c1.alters_data) {
                                                _5c1 = "";
                                            } else {
                                                _5c1 = _5c1.call(base);
                                            }
                                        } else {
                                            if (_5c1 instanceof Date) {
                                                _5c1 = dd._Context.prototype._normalize(_5c1);
                                            }
                                        }
                                    } else {
                                        return "";
                                    }
                                }
                            }
                        }
                        return _5c1;
                    }
                });
                dd._TextNode = dd._Node = lang.extend(function(obj) {
                    this.contents = obj;
                }, {
                    set: function(data) {
                        this.contents = data;
                        return this;
                    },
                    render: function(_5c5, _5c6) {
                        return _5c6.concat(this.contents);
                    },
                    isEmpty: function() {
                        return !lang.trim(this.contents);
                    },
                    clone: function() {
                        return this;
                    }
                });
                dd._NodeList = lang.extend(function(_5c7) {
                    this.contents = _5c7 || [];
                    this.last = "";
                }, {
                    push: function(node) {
                        this.contents.push(node);
                        return this;
                    },
                    concat: function(_5c8) {
                        this.contents = this.contents.concat(_5c8);
                        return this;
                    },
                    render: function(_5c9, _5ca) {
                        for (var i = 0; i < this.contents.length; i++) {
                            _5ca = this.contents[i].render(_5c9, _5ca);
                            if (!_5ca) {
                                throw new Error("Template must return buffer");
                            }
                        }
                        return _5ca;
                    },
                    dummyRender: function(_5cb) {
                        return this.render(_5cb, dd.Template.prototype.getBuffer()).toString();
                    },
                    unrender: function() {
                        return arguments[1];
                    },
                    clone: function() {
                        return this;
                    },
                    rtrim: function() {
                        while (1) {
                            i = this.contents.length - 1;
                            if (this.contents[i]instanceof dd._TextNode && this.contents[i].isEmpty()) {
                                this.contents.pop();
                            } else {
                                break;
                            }
                        }
                        return this;
                    }
                });
                dd._VarNode = lang.extend(function(str) {
                    this.contents = new dd._Filter(str);
                }, {
                    render: function(_5cc, _5cd) {
                        var str = this.contents.resolve(_5cc);
                        if (str === undefined || str === null) {
                            str = "";
                        }
                        if (!str.safe) {
                            str = dd._base.escape("" + str);
                        }
                        return _5cd.concat(str);
                    }
                });
                dd._noOpNode = new function() {
                    this.render = this.unrender = function() {
                        return arguments[1];
                    }
                    ;
                    this.clone = function() {
                        return this;
                    }
                    ;
                }
                ;
                dd._Parser = lang.extend(function(_5ce) {
                    this.contents = _5ce;
                }, {
                    i: 0,
                    parse: function(_5cf) {
                        var _5d0 = {}, _5d1;
                        _5cf = _5cf || [];
                        for (var i = 0; i < _5cf.length; i++) {
                            _5d0[_5cf[i]] = true;
                        }
                        var _5d2 = new dd._NodeList();
                        while (this.i < this.contents.length) {
                            _5d1 = this.contents[this.i++];
                            if (typeof _5d1 == "string") {
                                _5d2.push(new dd._TextNode(_5d1));
                            } else {
                                var type = _5d1[0];
                                var text = _5d1[1];
                                if (type == dd.TOKEN_VAR) {
                                    _5d2.push(new dd._VarNode(text));
                                } else {
                                    if (type == dd.TOKEN_BLOCK) {
                                        if (_5d0[text]) {
                                            --this.i;
                                            return _5d2;
                                        }
                                        var cmd = text.split(/\s+/g);
                                        if (cmd.length) {
                                            cmd = cmd[0];
                                            var fn = ddt.getTag(cmd);
                                            if (fn) {
                                                _5d2.push(fn(this, new dd.Token(type,text)));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (_5cf.length) {
                            throw new Error("Could not find closing tag(s): " + _5cf.toString());
                        }
                        this.contents.length = 0;
                        return _5d2;
                    },
                    next_token: function() {
                        var _5d3 = this.contents[this.i++];
                        return new dd.Token(_5d3[0],_5d3[1]);
                    },
                    delete_first_token: function() {
                        this.i++;
                    },
                    skip_past: function(_5d4) {
                        while (this.i < this.contents.length) {
                            var _5d5 = this.contents[this.i++];
                            if (_5d5[0] == dd.TOKEN_BLOCK && _5d5[1] == _5d4) {
                                return;
                            }
                        }
                        throw new Error("Unclosed tag found when looking for " + _5d4);
                    },
                    create_variable_node: function(expr) {
                        return new dd._VarNode(expr);
                    },
                    create_text_node: function(expr) {
                        return new dd._TextNode(expr || "");
                    },
                    getTemplate: function(file) {
                        return new dd.Template(file);
                    }
                });
                dd.register = {
                    _registry: {
                        attributes: [],
                        tags: [],
                        filters: []
                    },
                    get: function(_5d6, name) {
                        var _5d7 = dd.register._registry[_5d6 + "s"];
                        for (var i = 0, _5d8; _5d8 = _5d7[i]; i++) {
                            if (typeof _5d8[0] == "string") {
                                if (_5d8[0] == name) {
                                    return _5d8;
                                }
                            } else {
                                if (name.match(_5d8[0])) {
                                    return _5d8;
                                }
                            }
                        }
                    },
                    getAttributeTags: function() {
                        var tags = [];
                        var _5d9 = dd.register._registry.attributes;
                        for (var i = 0, _5da; _5da = _5d9[i]; i++) {
                            if (_5da.length == 3) {
                                tags.push(_5da);
                            } else {
                                var fn = lang.getObject(_5da[1]);
                                if (fn && lang.isFunction(fn)) {
                                    _5da.push(fn);
                                    tags.push(_5da);
                                }
                            }
                        }
                        return tags;
                    },
                    _any: function(type, base, _5db) {
                        for (var path in _5db) {
                            for (var i = 0, fn; fn = _5db[path][i]; i++) {
                                var key = fn;
                                if (lang.isArray(fn)) {
                                    key = fn[0];
                                    fn = fn[1];
                                }
                                if (typeof key == "string") {
                                    if (key.substr(0, 5) == "attr:") {
                                        var attr = fn;
                                        if (attr.substr(0, 5) == "attr:") {
                                            attr = attr.slice(5);
                                        }
                                        dd.register._registry.attributes.push([attr.toLowerCase(), base + "." + path + "." + attr]);
                                    }
                                    key = key.toLowerCase();
                                }
                                dd.register._registry[type].push([key, fn, base + "." + path]);
                            }
                        }
                    },
                    tags: function(base, _5dc) {
                        dd.register._any("tags", base, _5dc);
                    },
                    filters: function(base, _5dd) {
                        dd.register._any("filters", base, _5dd);
                    }
                };
                var _5de = /&/g;
                var _5df = /</g;
                var _5e0 = />/g;
                var _5e1 = /'/g;
                var _5e2 = /"/g;
                dd._base.escape = function(_5e3) {
                    return dd.mark_safe(_5e3.replace(_5de, "&amp;").replace(_5df, "&lt;").replace(_5e0, "&gt;").replace(_5e2, "&quot;").replace(_5e1, "&#39;"));
                }
                ;
                dd._base.safe = function(_5e4) {
                    if (typeof _5e4 == "string") {
                        _5e4 = new String(_5e4);
                    }
                    if (typeof _5e4 == "object") {
                        _5e4.safe = true;
                    }
                    return _5e4;
                }
                ;
                dd.mark_safe = dd._base.safe;
                dd.register.tags("dojox.dtl.tag", {
                    "date": ["now"],
                    "logic": ["if", "for", "ifequal", "ifnotequal"],
                    "loader": ["extends", "block", "include", "load", "ssi"],
                    "misc": ["comment", "debug", "filter", "firstof", "spaceless", "templatetag", "widthratio", "with"],
                    "loop": ["cycle", "ifchanged", "regroup"]
                });
                dd.register.filters("dojox.dtl.filter", {
                    "dates": ["date", "time", "timesince", "timeuntil"],
                    "htmlstrings": ["linebreaks", "linebreaksbr", "removetags", "striptags"],
                    "integers": ["add", "get_digit"],
                    "lists": ["dictsort", "dictsortreversed", "first", "join", "length", "length_is", "random", "slice", "unordered_list"],
                    "logic": ["default", "default_if_none", "divisibleby", "yesno"],
                    "misc": ["filesizeformat", "pluralize", "phone2numeric", "pprint"],
                    "strings": ["addslashes", "capfirst", "center", "cut", "fix_ampersands", "floatformat", "iriencode", "linenumbers", "ljust", "lower", "make_list", "rjust", "slugify", "stringformat", "title", "truncatewords", "truncatewords_html", "upper", "urlencode", "urlize", "urlizetrunc", "wordcount", "wordwrap"]
                });
                dd.register.filters("dojox.dtl", {
                    "_base": ["escape", "safe"]
                });
                return dd;
            });
        },
        "dojox/string/Builder": function() {
            define(["dojo/_base/lang"], function(lang) {
                var _5e5 = lang.getObject("string", true, dojox).Builder = function(str) {
                    var b = "";
                    this.length = 0;
                    this.append = function(s) {
                        if (arguments.length > 1) {
                            var tmp = ""
                              , l = arguments.length;
                            switch (l) {
                            case 9:
                                tmp = "" + arguments[8] + tmp;
                            case 8:
                                tmp = "" + arguments[7] + tmp;
                            case 7:
                                tmp = "" + arguments[6] + tmp;
                            case 6:
                                tmp = "" + arguments[5] + tmp;
                            case 5:
                                tmp = "" + arguments[4] + tmp;
                            case 4:
                                tmp = "" + arguments[3] + tmp;
                            case 3:
                                tmp = "" + arguments[2] + tmp;
                            case 2:
                                b += "" + arguments[0] + arguments[1] + tmp;
                                break;
                            default:
                                var i = 0;
                                while (i < arguments.length) {
                                    tmp += arguments[i++];
                                }
                                b += tmp;
                            }
                        } else {
                            b += s;
                        }
                        this.length = b.length;
                        return this;
                    }
                    ;
                    this.concat = function(s) {
                        return this.append.apply(this, arguments);
                    }
                    ;
                    this.appendArray = function(_5e6) {
                        return this.append.apply(this, _5e6);
                    }
                    ;
                    this.clear = function() {
                        b = "";
                        this.length = 0;
                        return this;
                    }
                    ;
                    this.replace = function(_5e7, _5e8) {
                        b = b.replace(_5e7, _5e8);
                        this.length = b.length;
                        return this;
                    }
                    ;
                    this.remove = function(_5e9, len) {
                        if (len === undefined) {
                            len = b.length;
                        }
                        if (len == 0) {
                            return this;
                        }
                        b = b.substr(0, _5e9) + b.substr(_5e9 + len);
                        this.length = b.length;
                        return this;
                    }
                    ;
                    this.insert = function(_5ea, str) {
                        if (_5ea == 0) {
                            b = str + b;
                        } else {
                            b = b.slice(0, _5ea) + str + b.slice(_5ea);
                        }
                        this.length = b.length;
                        return this;
                    }
                    ;
                    this.toString = function() {
                        return b;
                    }
                    ;
                    if (str) {
                        this.append(str);
                    }
                }
                ;
                return _5e5;
            });
        },
        "dijit/form/FilteringSelect": function() {
            define(["dojo/_base/declare", "dojo/_base/lang", "dojo/when", "./MappedTextBox", "./ComboBoxMixin"], function(_5eb, lang, when, _5ec, _5ed) {
                return _5eb("dijit.form.FilteringSelect", [_5ec, _5ed], {
                    required: true,
                    _lastDisplayedValue: "",
                    _isValidSubset: function() {
                        return this._opened;
                    },
                    isValid: function() {
                        return !!this.item || (!this.required && this.get("displayedValue") == "");
                    },
                    _refreshState: function() {
                        if (!this.searchTimer) {
                            this.inherited(arguments);
                        }
                    },
                    _callbackSetLabel: function(_5ee, _5ef, _5f0, _5f1) {
                        if ((_5ef && _5ef[this.searchAttr] !== this._lastQuery) || (!_5ef && _5ee.length && this.store.getIdentity(_5ee[0]) != this._lastQuery)) {
                            return;
                        }
                        if (!_5ee.length) {
                            this.set("value", "", _5f1 || (_5f1 === undefined && !this.focused), this.textbox.value, null);
                        } else {
                            this.set("item", _5ee[0], _5f1);
                        }
                    },
                    _openResultList: function(_5f2, _5f3, _5f4) {
                        if (_5f3[this.searchAttr] !== this._lastQuery) {
                            return;
                        }
                        this.inherited(arguments);
                        if (this.item === undefined) {
                            this.validate(true);
                        }
                    },
                    _getValueAttr: function() {
                        return this.valueNode.value;
                    },
                    _getValueField: function() {
                        return "value";
                    },
                    _setValueAttr: function(_5f5, _5f6, _5f7, item) {
                        if (!this._onChangeActive) {
                            _5f6 = null;
                        }
                        if (item === undefined) {
                            if (_5f5 === null || _5f5 === "") {
                                _5f5 = "";
                                if (!lang.isString(_5f7)) {
                                    this._setDisplayedValueAttr(_5f7 || "", _5f6);
                                    return;
                                }
                            }
                            var self = this;
                            this._lastQuery = _5f5;
                            when(this.store.get(_5f5), function(item) {
                                self._callbackSetLabel(item ? [item] : [], undefined, undefined, _5f6);
                            });
                        } else {
                            this.valueNode.value = _5f5;
                            this.inherited(arguments, [_5f5, _5f6, _5f7, item]);
                        }
                    },
                    _setItemAttr: function(item, _5f8, _5f9) {
                        this.inherited(arguments);
                        this._lastDisplayedValue = this.textbox.value;
                    },
                    _getDisplayQueryString: function(text) {
                        return text.replace(/([\\\*\?])/g, "\\$1");
                    },
                    _setDisplayedValueAttr: function(_5fa, _5fb) {
                        if (_5fa == null) {
                            _5fa = "";
                        }
                        if (!this._created) {
                            if (!("displayedValue"in this.params)) {
                                return;
                            }
                            _5fb = false;
                        }
                        if (this.store) {
                            this.closeDropDown();
                            var _5fc = lang.clone(this.query);
                            var qs = this._getDisplayQueryString(_5fa), q;
                            if (this.store._oldAPI) {
                                q = qs;
                            } else {
                                q = this._patternToRegExp(qs);
                                q.toString = function() {
                                    return qs;
                                }
                                ;
                            }
                            this._lastQuery = _5fc[this.searchAttr] = q;
                            this.textbox.value = _5fa;
                            this._lastDisplayedValue = _5fa;
                            this._set("displayedValue", _5fa);
                            var _5fd = this;
                            var _5fe = {
                                queryOptions: {
                                    ignoreCase: this.ignoreCase,
                                    deep: true
                                }
                            };
                            lang.mixin(_5fe, this.fetchProperties);
                            this._fetchHandle = this.store.query(_5fc, _5fe);
                            when(this._fetchHandle, function(_5ff) {
                                _5fd._fetchHandle = null;
                                _5fd._callbackSetLabel(_5ff || [], _5fc, _5fe, _5fb);
                            }, function(err) {
                                _5fd._fetchHandle = null;
                                if (!_5fd._cancelingQuery) {
                                    console.error("dijit.form.FilteringSelect: " + err.toString());
                                }
                            });
                        }
                    },
                    undo: function() {
                        this.set("displayedValue", this._lastDisplayedValue);
                    }
                });
            });
        },
        "dijit/form/MappedTextBox": function() {
            define(["dojo/_base/declare", "dojo/sniff", "dojo/dom-construct", "./ValidationTextBox"], function(_600, has, _601, _602) {
                return _600("dijit.form.MappedTextBox", _602, {
                    postMixInProperties: function() {
                        this.inherited(arguments);
                        this.nameAttrSetting = "";
                    },
                    _setNameAttr: "valueNode",
                    serialize: function(val) {
                        return val.toString ? val.toString() : "";
                    },
                    toString: function() {
                        var val = this.filter(this.get("value"));
                        return val != null ? (typeof val == "string" ? val : this.serialize(val, this.constraints)) : "";
                    },
                    validate: function() {
                        this.valueNode.value = this.toString();
                        return this.inherited(arguments);
                    },
                    buildRendering: function() {
                        this.inherited(arguments);
                        this.valueNode = _601.place("<input type='hidden'" + ((this.name && !has("msapp")) ? " name=\"" + this.name.replace(/"/g, "&quot;") + "\"" : "") + "/>", this.textbox, "after");
                    },
                    reset: function() {
                        this.valueNode.value = "";
                        this.inherited(arguments);
                    }
                });
            });
        },
        "dijit/form/ValidationTextBox": function() {
            define(["dojo/_base/declare", "dojo/_base/kernel", "dojo/_base/lang", "dojo/i18n", "./TextBox", "../Tooltip", "dojo/text!./templates/ValidationTextBox.html", "dojo/i18n!./nls/validate"], function(_603, _604, lang, i18n, _605, _606, _607) {
                var _608 = _603("dijit.form.ValidationTextBox", _605, {
                    templateString: _607,
                    required: false,
                    promptMessage: "",
                    invalidMessage: "$_unset_$",
                    missingMessage: "$_unset_$",
                    message: "",
                    constraints: {},
                    pattern: ".*",
                    regExp: "",
                    regExpGen: function() {},
                    state: "",
                    tooltipPosition: [],
                    _deprecateRegExp: function(attr, _609) {
                        if (_609 != _608.prototype[attr]) {
                            _604.deprecated("ValidationTextBox id=" + this.id + ", set('" + attr + "', ...) is deprecated.  Use set('pattern', ...) instead.", "", "2.0");
                            this.set("pattern", _609);
                        }
                    },
                    _setRegExpGenAttr: function(_60a) {
                        this._deprecateRegExp("regExpGen", _60a);
                        this._set("regExpGen", this._computeRegexp);
                    },
                    _setRegExpAttr: function(_60b) {
                        this._deprecateRegExp("regExp", _60b);
                    },
                    _setValueAttr: function() {
                        this.inherited(arguments);
                        this._refreshState();
                    },
                    validator: function(_60c, _60d) {
                        return (new RegExp("^(?:" + this._computeRegexp(_60d) + ")" + (this.required ? "" : "?") + "$")).test(_60c) && (!this.required || !this._isEmpty(_60c)) && (this._isEmpty(_60c) || this.parse(_60c, _60d) !== undefined);
                    },
                    _isValidSubset: function() {
                        return this.textbox.value.search(this._partialre) == 0;
                    },
                    isValid: function() {
                        return this.validator(this.textbox.value, this.get("constraints"));
                    },
                    _isEmpty: function(_60e) {
                        return (this.trim ? /^\s*$/ : /^$/).test(_60e);
                    },
                    getErrorMessage: function() {
                        var _60f = this.invalidMessage == "$_unset_$" ? this.messages.invalidMessage : !this.invalidMessage ? this.promptMessage : this.invalidMessage;
                        var _610 = this.missingMessage == "$_unset_$" ? this.messages.missingMessage : !this.missingMessage ? _60f : this.missingMessage;
                        return (this.required && this._isEmpty(this.textbox.value)) ? _610 : _60f;
                    },
                    getPromptMessage: function() {
                        return this.promptMessage;
                    },
                    _maskValidSubsetError: true,
                    validate: function(_611) {
                        var _612 = "";
                        var _613 = this.disabled || this.isValid(_611);
                        if (_613) {
                            this._maskValidSubsetError = true;
                        }
                        var _614 = this._isEmpty(this.textbox.value);
                        var _615 = !_613 && _611 && this._isValidSubset();
                        this._set("state", _613 ? "" : (((((!this._hasBeenBlurred || _611) && _614) || _615) && (this._maskValidSubsetError || (_615 && !this._hasBeenBlurred && _611))) ? "Incomplete" : "Error"));
                        this.focusNode.setAttribute("aria-invalid", this.state == "Error" ? "true" : "false");
                        if (this.state == "Error") {
                            this._maskValidSubsetError = _611 && _615;
                            _612 = this.getErrorMessage(_611);
                        } else {
                            if (this.state == "Incomplete") {
                                _612 = this.getPromptMessage(_611);
                                this._maskValidSubsetError = !this._hasBeenBlurred || _611;
                            } else {
                                if (_614) {
                                    _612 = this.getPromptMessage(_611);
                                }
                            }
                        }
                        this.set("message", _612);
                        return _613;
                    },
                    displayMessage: function(_616) {
                        if (_616 && this.focused) {
                            _606.show(_616, this.domNode, this.tooltipPosition, !this.isLeftToRight());
                        } else {
                            _606.hide(this.domNode);
                        }
                    },
                    _refreshState: function() {
                        if (this._created) {
                            this.validate(this.focused);
                        }
                        this.inherited(arguments);
                    },
                    constructor: function(_617) {
                        this.constraints = lang.clone(this.constraints);
                        this.baseClass += " dijitValidationTextBox";
                    },
                    startup: function() {
                        this.inherited(arguments);
                        this._refreshState();
                    },
                    _setConstraintsAttr: function(_618) {
                        if (!_618.locale && this.lang) {
                            _618.locale = this.lang;
                        }
                        this._set("constraints", _618);
                        this._refreshState();
                    },
                    _setPatternAttr: function(_619) {
                        this._set("pattern", _619);
                        this._refreshState();
                    },
                    _computeRegexp: function(_61a) {
                        var p = this.pattern;
                        if (typeof p == "function") {
                            p = p.call(this, _61a);
                        }
                        if (p != this._lastRegExp) {
                            var _61b = "";
                            this._lastRegExp = p;
                            if (p != ".*") {
                                p.replace(/\\.|\[\]|\[.*?[^\\]{1}\]|\{.*?\}|\(\?[=:!]|./g, function(re) {
                                    switch (re.charAt(0)) {
                                    case "{":
                                    case "+":
                                    case "?":
                                    case "*":
                                    case "^":
                                    case "$":
                                    case "|":
                                    case "(":
                                        _61b += re;
                                        break;
                                    case ")":
                                        _61b += "|$)";
                                        break;
                                    default:
                                        _61b += "(?:" + re + "|$)";
                                        break;
                                    }
                                });
                            }
                            try {
                                "".search(_61b);
                            } catch (e) {
                                _61b = this.pattern;
                                console.warn("RegExp error in " + this.declaredClass + ": " + this.pattern);
                            }
                            this._partialre = "^(?:" + _61b + ")$";
                        }
                        return p;
                    },
                    postMixInProperties: function() {
                        this.inherited(arguments);
                        this.messages = i18n.getLocalization("dijit.form", "validate", this.lang);
                        this._setConstraintsAttr(this.constraints);
                    },
                    _setDisabledAttr: function(_61c) {
                        this.inherited(arguments);
                        this._refreshState();
                    },
                    _setRequiredAttr: function(_61d) {
                        this._set("required", _61d);
                        this.focusNode.setAttribute("aria-required", _61d);
                        this._refreshState();
                    },
                    _setMessageAttr: function(_61e) {
                        this._set("message", _61e);
                        this.displayMessage(_61e);
                    },
                    reset: function() {
                        this._maskValidSubsetError = true;
                        this.inherited(arguments);
                    },
                    _onBlur: function() {
                        this.displayMessage("");
                        this.inherited(arguments);
                    },
                    destroy: function() {
                        _606.hide(this.domNode);
                        this.inherited(arguments);
                    }
                });
                return _608;
            });
        },
        "dijit/form/TextBox": function() {
            define(["dojo/_base/declare", "dojo/dom-construct", "dojo/dom-style", "dojo/_base/kernel", "dojo/_base/lang", "dojo/on", "dojo/sniff", "./_FormValueWidget", "./_TextBoxMixin", "dojo/text!./templates/TextBox.html", "../main"], function(_61f, _620, _621, _622, lang, on, has, _623, _624, _625, _626) {
                var _627 = _61f("dijit.form.TextBox" + (has("dojo-bidi") ? "_NoBidi" : ""), [_623, _624], {
                    templateString: _625,
                    _singleNodeTemplate: "<input class=\"dijit dijitReset dijitLeft dijitInputField\" data-dojo-attach-point=\"textbox,focusNode\" autocomplete=\"off\" type=\"${type}\" ${!nameAttrSetting} />",
                    _buttonInputDisabled: has("ie") ? "disabled" : "",
                    baseClass: "dijitTextBox",
                    postMixInProperties: function() {
                        var type = this.type.toLowerCase();
                        if (this.templateString && this.templateString.toLowerCase() == "input" || ((type == "hidden" || type == "file") && this.templateString == this.constructor.prototype.templateString)) {
                            this.templateString = this._singleNodeTemplate;
                        }
                        this.inherited(arguments);
                    },
                    postCreate: function() {
                        this.inherited(arguments);
                        if (has("ie") < 9) {
                            this.defer(function() {
                                try {
                                    var s = _621.getComputedStyle(this.domNode);
                                    if (s) {
                                        var ff = s.fontFamily;
                                        if (ff) {
                                            var _628 = this.domNode.getElementsByTagName("INPUT");
                                            if (_628) {
                                                for (var i = 0; i < _628.length; i++) {
                                                    _628[i].style.fontFamily = ff;
                                                }
                                            }
                                        }
                                    }
                                } catch (e) {}
                            });
                        }
                    },
                    _setPlaceHolderAttr: function(v) {
                        this._set("placeHolder", v);
                        if (!this._phspan) {
                            this._attachPoints.push("_phspan");
                            this._phspan = _620.create("span", {
                                className: "dijitPlaceHolder dijitInputField"
                            }, this.textbox, "after");
                            this.own(on(this._phspan, "mousedown", function(evt) {
                                evt.preventDefault();
                            }), on(this._phspan, "touchend, pointerup, MSPointerUp", lang.hitch(this, function() {
                                this.focus();
                            })));
                        }
                        this._phspan.innerHTML = "";
                        this._phspan.appendChild(this._phspan.ownerDocument.createTextNode(v));
                        this._updatePlaceHolder();
                    },
                    _onInput: function(evt) {
                        this.inherited(arguments);
                        this._updatePlaceHolder();
                    },
                    _updatePlaceHolder: function() {
                        if (this._phspan) {
                            this._phspan.style.display = (this.placeHolder && !this.textbox.value) ? "" : "none";
                        }
                    },
                    _setValueAttr: function(_629, _62a, _62b) {
                        this.inherited(arguments);
                        this._updatePlaceHolder();
                    },
                    getDisplayedValue: function() {
                        _622.deprecated(this.declaredClass + "::getDisplayedValue() is deprecated. Use get('displayedValue') instead.", "", "2.0");
                        return this.get("displayedValue");
                    },
                    setDisplayedValue: function(_62c) {
                        _622.deprecated(this.declaredClass + "::setDisplayedValue() is deprecated. Use set('displayedValue', ...) instead.", "", "2.0");
                        this.set("displayedValue", _62c);
                    },
                    _onBlur: function(e) {
                        if (this.disabled) {
                            return;
                        }
                        this.inherited(arguments);
                        this._updatePlaceHolder();
                        if (has("mozilla")) {
                            if (this.selectOnClick) {
                                this.textbox.selectionStart = this.textbox.selectionEnd = undefined;
                            }
                        }
                    },
                    _onFocus: function(by) {
                        if (this.disabled || this.readOnly) {
                            return;
                        }
                        this.inherited(arguments);
                        this._updatePlaceHolder();
                    }
                });
                if (has("ie") < 9) {
                    _627.prototype._isTextSelected = function() {
                        var _62d = this.ownerDocument.selection.createRange();
                        var _62e = _62d.parentElement();
                        return _62e == this.textbox && _62d.text.length > 0;
                    }
                    ;
                    _626._setSelectionRange = _624._setSelectionRange = function(_62f, _630, stop) {
                        if (_62f.createTextRange) {
                            var r = _62f.createTextRange();
                            r.collapse(true);
                            r.moveStart("character", -99999);
                            r.moveStart("character", _630);
                            r.moveEnd("character", stop - _630);
                            r.select();
                        }
                    }
                    ;
                }
                if (has("dojo-bidi")) {
                    _627 = _61f("dijit.form.TextBox", _627, {
                        _setPlaceHolderAttr: function(v) {
                            this.inherited(arguments);
                            this.applyTextDir(this._phspan);
                        }
                    });
                }
                return _627;
            });
        },
        "dijit/form/_FormValueWidget": function() {
            define(["dojo/_base/declare", "dojo/sniff", "./_FormWidget", "./_FormValueMixin"], function(_631, has, _632, _633) {
                return _631("dijit.form._FormValueWidget", [_632, _633], {
                    _layoutHackIE7: function() {
                        if (has("ie") == 7) {
                            var _634 = this.domNode;
                            var _635 = _634.parentNode;
                            var _636 = _634.firstChild || _634;
                            var _637 = _636.style.filter;
                            var _638 = this;
                            while (_635 && _635.clientHeight == 0) {
                                (function ping() {
                                    var _639 = _638.connect(_635, "onscroll", function() {
                                        _638.disconnect(_639);
                                        _636.style.filter = (new Date()).getMilliseconds();
                                        _638.defer(function() {
                                            _636.style.filter = _637;
                                        });
                                    });
                                }
                                )();
                                _635 = _635.parentNode;
                            }
                        }
                    }
                });
            });
        },
        "dijit/form/_FormWidget": function() {
            define(["dojo/_base/declare", "dojo/sniff", "dojo/_base/kernel", "dojo/ready", "../_Widget", "../_CssStateMixin", "../_TemplatedMixin", "./_FormWidgetMixin"], function(_63a, has, _63b, _63c, _63d, _63e, _63f, _640) {
                if (has("dijit-legacy-requires")) {
                    _63c(0, function() {
                        var _641 = ["dijit/form/_FormValueWidget"];
                        require(_641);
                    });
                }
                return _63a("dijit.form._FormWidget", [_63d, _63f, _63e, _640], {
                    setDisabled: function(_642) {
                        _63b.deprecated("setDisabled(" + _642 + ") is deprecated. Use set('disabled'," + _642 + ") instead.", "", "2.0");
                        this.set("disabled", _642);
                    },
                    setValue: function(_643) {
                        _63b.deprecated("dijit.form._FormWidget:setValue(" + _643 + ") is deprecated.  Use set('value'," + _643 + ") instead.", "", "2.0");
                        this.set("value", _643);
                    },
                    getValue: function() {
                        _63b.deprecated(this.declaredClass + "::getValue() is deprecated. Use get('value') instead.", "", "2.0");
                        return this.get("value");
                    },
                    postMixInProperties: function() {
                        this.nameAttrSetting = (this.name && !has("msapp")) ? ("name=\"" + this.name.replace(/"/g, "&quot;") + "\"") : "";
                        this.inherited(arguments);
                    }
                });
            });
        },
        "dijit/form/_FormWidgetMixin": function() {
            define(["dojo/_base/array", "dojo/_base/declare", "dojo/dom-attr", "dojo/dom-style", "dojo/_base/lang", "dojo/mouse", "dojo/on", "dojo/sniff", "dojo/window", "../a11y"], function(_644, _645, _646, _647, lang, _648, on, has, _649, a11y) {
                return _645("dijit.form._FormWidgetMixin", null, {
                    name: "",
                    alt: "",
                    value: "",
                    type: "text",
                    "aria-label": "focusNode",
                    tabIndex: "0",
                    _setTabIndexAttr: "focusNode",
                    disabled: false,
                    intermediateChanges: false,
                    scrollOnFocus: true,
                    _setIdAttr: "focusNode",
                    _setDisabledAttr: function(_64a) {
                        this._set("disabled", _64a);
                        if (/^(button|input|select|textarea|optgroup|option|fieldset)$/i.test(this.focusNode.tagName)) {
                            _646.set(this.focusNode, "disabled", _64a);
                            if (has("trident") && "readOnly"in this) {
                                _646.set(this.focusNode, "readonly", _64a || this.readOnly);
                            }
                        } else {
                            this.focusNode.setAttribute("aria-disabled", _64a ? "true" : "false");
                        }
                        if (this.valueNode) {
                            _646.set(this.valueNode, "disabled", _64a);
                        }
                        if (_64a) {
                            this._set("hovering", false);
                            this._set("active", false);
                            var _64b = "tabIndex"in this.attributeMap ? this.attributeMap.tabIndex : ("_setTabIndexAttr"in this) ? this._setTabIndexAttr : "focusNode";
                            _644.forEach(lang.isArray(_64b) ? _64b : [_64b], function(_64c) {
                                var node = this[_64c];
                                if (has("webkit") || a11y.hasDefaultTabStop(node)) {
                                    node.setAttribute("tabIndex", "-1");
                                } else {
                                    node.removeAttribute("tabIndex");
                                }
                            }, this);
                        } else {
                            if (this.tabIndex != "") {
                                this.set("tabIndex", this.tabIndex);
                            }
                        }
                    },
                    _onFocus: function(by) {
                        if (by == "mouse" && this.isFocusable()) {
                            var _64d = this.own(on(this.focusNode, "focus", function() {
                                _64e.remove();
                                _64d.remove();
                            }))[0];
                            var _64f = has("pointer-events") ? "pointerup" : has("MSPointer") ? "MSPointerUp" : has("touch-events") ? "touchend, mouseup" : "mouseup";
                            var _64e = this.own(on(this.ownerDocumentBody, _64f, lang.hitch(this, function(evt) {
                                _64e.remove();
                                _64d.remove();
                                if (this.focused) {
                                    if (evt.type == "touchend") {
                                        this.defer("focus");
                                    } else {
                                        this.focus();
                                    }
                                }
                            })))[0];
                        }
                        if (this.scrollOnFocus) {
                            this.defer(function() {
                                _649.scrollIntoView(this.domNode);
                            });
                        }
                        this.inherited(arguments);
                    },
                    isFocusable: function() {
                        return !this.disabled && this.focusNode && (_647.get(this.domNode, "display") != "none");
                    },
                    focus: function() {
                        if (!this.disabled && this.focusNode.focus) {
                            try {
                                this.focusNode.focus();
                            } catch (e) {}
                        }
                    },
                    compare: function(val1, val2) {
                        if (typeof val1 == "number" && typeof val2 == "number") {
                            return (isNaN(val1) && isNaN(val2)) ? 0 : val1 - val2;
                        } else {
                            if (val1 > val2) {
                                return 1;
                            } else {
                                if (val1 < val2) {
                                    return -1;
                                } else {
                                    return 0;
                                }
                            }
                        }
                    },
                    onChange: function() {},
                    _onChangeActive: false,
                    _handleOnChange: function(_650, _651) {
                        if (this._lastValueReported == undefined && (_651 === null || !this._onChangeActive)) {
                            this._resetValue = this._lastValueReported = _650;
                        }
                        this._pendingOnChange = this._pendingOnChange || (typeof _650 != typeof this._lastValueReported) || (this.compare(_650, this._lastValueReported) != 0);
                        if ((this.intermediateChanges || _651 || _651 === undefined) && this._pendingOnChange) {
                            this._lastValueReported = _650;
                            this._pendingOnChange = false;
                            if (this._onChangeActive) {
                                if (this._onChangeHandle) {
                                    this._onChangeHandle.remove();
                                }
                                this._onChangeHandle = this.defer(function() {
                                    this._onChangeHandle = null;
                                    this.onChange(_650);
                                });
                            }
                        }
                    },
                    create: function() {
                        this.inherited(arguments);
                        this._onChangeActive = true;
                    },
                    destroy: function() {
                        if (this._onChangeHandle) {
                            this._onChangeHandle.remove();
                            this.onChange(this._lastValueReported);
                        }
                        this.inherited(arguments);
                    }
                });
            });
        },
        "dijit/form/_FormValueMixin": function() {
            define(["dojo/_base/declare", "dojo/dom-attr", "dojo/keys", "dojo/_base/lang", "dojo/on", "dojo/sniff", "./_FormWidgetMixin"], function(_652, _653, keys, lang, on, has, _654) {
                return _652("dijit.form._FormValueMixin", _654, {
                    readOnly: false,
                    _setReadOnlyAttr: function(_655) {
                        if (has("trident") && "disabled"in this) {
                            _653.set(this.focusNode, "readOnly", _655 || this.disabled);
                        } else {
                            _653.set(this.focusNode, "readOnly", _655);
                        }
                        this._set("readOnly", _655);
                    },
                    postCreate: function() {
                        this.inherited(arguments);
                        if (this._resetValue === undefined) {
                            this._lastValueReported = this._resetValue = this.value;
                        }
                    },
                    _setValueAttr: function(_656, _657) {
                        this._handleOnChange(_656, _657);
                    },
                    _handleOnChange: function(_658, _659) {
                        this._set("value", _658);
                        this.inherited(arguments);
                    },
                    undo: function() {
                        this._setValueAttr(this._lastValueReported, false);
                    },
                    reset: function() {
                        this._hasBeenBlurred = false;
                        this._setValueAttr(this._resetValue, true);
                    }
                });
            });
        },
        "dijit/form/_TextBoxMixin": function() {
            define(["dojo/_base/array", "dojo/_base/declare", "dojo/dom", "dojo/sniff", "dojo/keys", "dojo/_base/lang", "dojo/on", "../main"], function(_65a, _65b, dom, has, keys, lang, on, _65c) {
                var _65d = _65b("dijit.form._TextBoxMixin" + (has("dojo-bidi") ? "_NoBidi" : ""), null, {
                    trim: false,
                    uppercase: false,
                    lowercase: false,
                    propercase: false,
                    maxLength: "",
                    selectOnClick: false,
                    placeHolder: "",
                    _getValueAttr: function() {
                        return this.parse(this.get("displayedValue"), this.constraints);
                    },
                    _setValueAttr: function(_65e, _65f, _660) {
                        var _661;
                        if (_65e !== undefined) {
                            _661 = this.filter(_65e);
                            if (typeof _660 != "string") {
                                if (_661 !== null && ((typeof _661 != "number") || !isNaN(_661))) {
                                    _660 = this.filter(this.format(_661, this.constraints));
                                } else {
                                    _660 = "";
                                }
                                if (this.compare(_661, this.filter(this.parse(_660, this.constraints))) != 0) {
                                    _660 = null;
                                }
                            }
                        }
                        if (_660 != null && ((typeof _660) != "number" || !isNaN(_660)) && this.textbox.value != _660) {
                            this.textbox.value = _660;
                            this._set("displayedValue", this.get("displayedValue"));
                        }
                        this.inherited(arguments, [_661, _65f]);
                    },
                    displayedValue: "",
                    _getDisplayedValueAttr: function() {
                        return this.filter(this.textbox.value);
                    },
                    _setDisplayedValueAttr: function(_662) {
                        if (_662 == null) {
                            _662 = "";
                        } else {
                            if (typeof _662 != "string") {
                                _662 = String(_662);
                            }
                        }
                        this.textbox.value = _662;
                        this._setValueAttr(this.get("value"), undefined);
                        this._set("displayedValue", this.get("displayedValue"));
                    },
                    format: function(_663) {
                        return _663 == null ? "" : (_663.toString ? _663.toString() : _663);
                    },
                    parse: function(_664) {
                        return _664;
                    },
                    _refreshState: function() {},
                    onInput: function() {},
                    _onInput: function(evt) {
                        this._lastInputEventValue = this.textbox.value;
                        this._processInput(this._lastInputProducingEvent || evt);
                        delete this._lastInputProducingEvent;
                        if (this.intermediateChanges) {
                            this._handleOnChange(this.get("value"), false);
                        }
                    },
                    _processInput: function() {
                        this._refreshState();
                        this._set("displayedValue", this.get("displayedValue"));
                    },
                    postCreate: function() {
                        this.textbox.setAttribute("value", this.textbox.value);
                        this.inherited(arguments);
                        function _665(e) {
                            var _666;
                            if (e.type == "keydown" && e.keyCode != 229) {
                                _666 = e.keyCode;
                                switch (_666) {
                                case keys.SHIFT:
                                case keys.ALT:
                                case keys.CTRL:
                                case keys.META:
                                case keys.CAPS_LOCK:
                                case keys.NUM_LOCK:
                                case keys.SCROLL_LOCK:
                                    return;
                                }
                                if (!e.ctrlKey && !e.metaKey && !e.altKey) {
                                    switch (_666) {
                                    case keys.NUMPAD_0:
                                    case keys.NUMPAD_1:
                                    case keys.NUMPAD_2:
                                    case keys.NUMPAD_3:
                                    case keys.NUMPAD_4:
                                    case keys.NUMPAD_5:
                                    case keys.NUMPAD_6:
                                    case keys.NUMPAD_7:
                                    case keys.NUMPAD_8:
                                    case keys.NUMPAD_9:
                                    case keys.NUMPAD_MULTIPLY:
                                    case keys.NUMPAD_PLUS:
                                    case keys.NUMPAD_ENTER:
                                    case keys.NUMPAD_MINUS:
                                    case keys.NUMPAD_PERIOD:
                                    case keys.NUMPAD_DIVIDE:
                                        return;
                                    }
                                    if ((_666 >= 65 && _666 <= 90) || (_666 >= 48 && _666 <= 57) || _666 == keys.SPACE) {
                                        return;
                                    }
                                    var _667 = false;
                                    for (var i in keys) {
                                        if (keys[i] === e.keyCode) {
                                            _667 = true;
                                            break;
                                        }
                                    }
                                    if (!_667) {
                                        return;
                                    }
                                }
                            }
                            _666 = e.charCode >= 32 ? String.fromCharCode(e.charCode) : e.charCode;
                            if (!_666) {
                                _666 = (e.keyCode >= 65 && e.keyCode <= 90) || (e.keyCode >= 48 && e.keyCode <= 57) || e.keyCode == keys.SPACE ? String.fromCharCode(e.keyCode) : e.keyCode;
                            }
                            if (!_666) {
                                _666 = 229;
                            }
                            if (e.type == "keypress") {
                                if (typeof _666 != "string") {
                                    return;
                                }
                                if ((_666 >= "a" && _666 <= "z") || (_666 >= "A" && _666 <= "Z") || (_666 >= "0" && _666 <= "9") || (_666 === " ")) {
                                    if (e.ctrlKey || e.metaKey || e.altKey) {
                                        return;
                                    }
                                }
                            }
                            var faux = {
                                faux: true
                            }, attr;
                            for (attr in e) {
                                if (!/^(layer[XY]|returnValue|keyLocation)$/.test(attr)) {
                                    var v = e[attr];
                                    if (typeof v != "function" && typeof v != "undefined") {
                                        faux[attr] = v;
                                    }
                                }
                            }
                            lang.mixin(faux, {
                                charOrCode: _666,
                                _wasConsumed: false,
                                preventDefault: function() {
                                    faux._wasConsumed = true;
                                    e.preventDefault();
                                },
                                stopPropagation: function() {
                                    e.stopPropagation();
                                }
                            });
                            this._lastInputProducingEvent = faux;
                            if (this.onInput(faux) === false) {
                                faux.preventDefault();
                                faux.stopPropagation();
                            }
                            if (faux._wasConsumed) {
                                return;
                            }
                            if (has("ie") <= 9) {
                                switch (e.keyCode) {
                                case keys.TAB:
                                case keys.ESCAPE:
                                case keys.DOWN_ARROW:
                                case keys.UP_ARROW:
                                case keys.LEFT_ARROW:
                                case keys.RIGHT_ARROW:
                                    break;
                                default:
                                    if (e.keyCode == keys.ENTER && this.textbox.tagName.toLowerCase() != "textarea") {
                                        break;
                                    }
                                    this.defer(function() {
                                        if (this.textbox.value !== this._lastInputEventValue) {
                                            on.emit(this.textbox, "input", {
                                                bubbles: true
                                            });
                                        }
                                    });
                                }
                            }
                        }
                        ;this.own(on(this.textbox, "keydown, keypress, paste, cut, compositionend", lang.hitch(this, _665)), on(this.textbox, "input", lang.hitch(this, "_onInput")), on(this.domNode, "keypress", function(e) {
                            e.stopPropagation();
                        }));
                    },
                    _blankValue: "",
                    filter: function(val) {
                        if (val === null) {
                            return this._blankValue;
                        }
                        if (typeof val != "string") {
                            return val;
                        }
                        if (this.trim) {
                            val = lang.trim(val);
                        }
                        if (this.uppercase) {
                            val = val.toUpperCase();
                        }
                        if (this.lowercase) {
                            val = val.toLowerCase();
                        }
                        if (this.propercase) {
                            val = val.replace(/[^\s]+/g, function(word) {
                                return word.substring(0, 1).toUpperCase() + word.substring(1);
                            });
                        }
                        return val;
                    },
                    _setBlurValue: function() {
                        this._setValueAttr(this.get("value"), true);
                    },
                    _onBlur: function(e) {
                        if (this.disabled) {
                            return;
                        }
                        this._setBlurValue();
                        this.inherited(arguments);
                    },
                    _isTextSelected: function() {
                        return this.textbox.selectionStart != this.textbox.selectionEnd;
                    },
                    _onFocus: function(by) {
                        if (this.disabled || this.readOnly) {
                            return;
                        }
                        if (this.selectOnClick && by == "mouse") {
                            this._selectOnClickHandle = on.once(this.domNode, "mouseup, touchend", lang.hitch(this, function(evt) {
                                if (!this._isTextSelected()) {
                                    _65d.selectInputText(this.textbox);
                                }
                            }));
                            this.own(this._selectOnClickHandle);
                            this.defer(function() {
                                if (this._selectOnClickHandle) {
                                    this._selectOnClickHandle.remove();
                                    this._selectOnClickHandle = null;
                                }
                            }, 500);
                        }
                        this.inherited(arguments);
                        this._refreshState();
                    },
                    reset: function() {
                        this.textbox.value = "";
                        this.inherited(arguments);
                    }
                });
                if (has("dojo-bidi")) {
                    _65d = _65b("dijit.form._TextBoxMixin", _65d, {
                        _setValueAttr: function() {
                            this.inherited(arguments);
                            this.applyTextDir(this.focusNode);
                        },
                        _setDisplayedValueAttr: function() {
                            this.inherited(arguments);
                            this.applyTextDir(this.focusNode);
                        },
                        _onInput: function() {
                            this.applyTextDir(this.focusNode);
                            this.inherited(arguments);
                        }
                    });
                }
                _65d._setSelectionRange = _65c._setSelectionRange = function(_668, _669, stop) {
                    if (_668.setSelectionRange) {
                        _668.setSelectionRange(_669, stop);
                    }
                }
                ;
                _65d.selectInputText = _65c.selectInputText = function(_66a, _66b, stop) {
                    _66a = dom.byId(_66a);
                    if (isNaN(_66b)) {
                        _66b = 0;
                    }
                    if (isNaN(stop)) {
                        stop = _66a.value ? _66a.value.length : 0;
                    }
                    try {
                        _66a.focus();
                        _65d._setSelectionRange(_66a, _66b, stop);
                    } catch (e) {}
                }
                ;
                return _65d;
            });
        },
        "dijit/form/ComboBoxMixin": function() {
            define(["dojo/_base/declare", "dojo/Deferred", "dojo/_base/kernel", "dojo/_base/lang", "dojo/store/util/QueryResults", "./_AutoCompleterMixin", "./_ComboBoxMenu", "../_HasDropDown", "dojo/text!./templates/DropDownBox.html"], function(_66c, _66d, _66e, lang, _66f, _670, _671, _672, _673) {
                return _66c("dijit.form.ComboBoxMixin", [_672, _670], {
                    dropDownClass: _671,
                    hasDownArrow: true,
                    templateString: _673,
                    baseClass: "dijitTextBox dijitComboBox",
                    cssStateNodes: {
                        "_buttonNode": "dijitDownArrowButton"
                    },
                    _setHasDownArrowAttr: function(val) {
                        this._set("hasDownArrow", val);
                        this._buttonNode.style.display = val ? "" : "none";
                    },
                    _showResultList: function() {
                        this.displayMessage("");
                        this.inherited(arguments);
                    },
                    _setStoreAttr: function(_674) {
                        if (!_674.get) {
                            lang.mixin(_674, {
                                _oldAPI: true,
                                get: function(id) {
                                    var _675 = new _66d();
                                    this.fetchItemByIdentity({
                                        identity: id,
                                        onItem: function(_676) {
                                            _675.resolve(_676);
                                        },
                                        onError: function(_677) {
                                            _675.reject(_677);
                                        }
                                    });
                                    return _675.promise;
                                },
                                query: function(_678, _679) {
                                    var _67a = new _66d(function() {
                                        _67b.abort && _67b.abort();
                                    }
                                    );
                                    _67a.total = new _66d();
                                    var _67b = this.fetch(lang.mixin({
                                        query: _678,
                                        onBegin: function(_67c) {
                                            _67a.total.resolve(_67c);
                                        },
                                        onComplete: function(_67d) {
                                            _67a.resolve(_67d);
                                        },
                                        onError: function(_67e) {
                                            _67a.reject(_67e);
                                        }
                                    }, _679));
                                    return _66f(_67a);
                                }
                            });
                        }
                        this._set("store", _674);
                    },
                    postMixInProperties: function() {
                        var _67f = this.params.store || this.store;
                        if (_67f) {
                            this._setStoreAttr(_67f);
                        }
                        this.inherited(arguments);
                        if (!this.params.store && this.store && !this.store._oldAPI) {
                            var _680 = this.declaredClass;
                            lang.mixin(this.store, {
                                getValue: function(item, attr) {
                                    _66e.deprecated(_680 + ".store.getValue(item, attr) is deprecated for builtin store.  Use item.attr directly", "", "2.0");
                                    return item[attr];
                                },
                                getLabel: function(item) {
                                    _66e.deprecated(_680 + ".store.getLabel(item) is deprecated for builtin store.  Use item.label directly", "", "2.0");
                                    return item.name;
                                },
                                fetch: function(args) {
                                    _66e.deprecated(_680 + ".store.fetch() is deprecated for builtin store.", "Use store.query()", "2.0");
                                    var shim = ["dojo/data/ObjectStore"];
                                    require(shim, lang.hitch(this, function(_681) {
                                        new _681({
                                            objectStore: this
                                        }).fetch(args);
                                    }));
                                }
                            });
                        }
                    },
                    buildRendering: function() {
                        this.inherited(arguments);
                        this.focusNode.setAttribute("aria-autocomplete", this.autoComplete ? "both" : "list");
                    }
                });
            });
        },
        "dojo/store/util/QueryResults": function() {
            define(["../../_base/array", "../../_base/lang", "../../when"], function(_682, lang, when) {
                var _683 = function(_684) {
                    if (!_684) {
                        return _684;
                    }
                    var _685 = !!_684.then;
                    if (_685) {
                        _684 = lang.delegate(_684);
                    }
                    function _686(_687) {
                        _684[_687] = function() {
                            var args = arguments;
                            var _688 = when(_684, function(_689) {
                                Array.prototype.unshift.call(args, _689);
                                return _683(_682[_687].apply(_682, args));
                            });
                            if (_687 !== "forEach" || _685) {
                                return _688;
                            }
                        }
                        ;
                    }
                    ;_686("forEach");
                    _686("filter");
                    _686("map");
                    if (_684.total == null) {
                        _684.total = when(_684, function(_68a) {
                            return _68a.length;
                        });
                    }
                    return _684;
                };
                lang.setObject("dojo.store.util.QueryResults", _683);
                return _683;
            });
        },
        "dijit/form/_AutoCompleterMixin": function() {
            define(["dojo/aspect", "dojo/_base/declare", "dojo/dom-attr", "dojo/keys", "dojo/_base/lang", "dojo/query", "dojo/regexp", "dojo/sniff", "./DataList", "./_TextBoxMixin", "./_SearchMixin"], function(_68b, _68c, _68d, keys, lang, _68e, _68f, has, _690, _691, _692) {
                var _693 = _68c("dijit.form._AutoCompleterMixin", _692, {
                    item: null,
                    autoComplete: true,
                    highlightMatch: "first",
                    labelAttr: "",
                    labelType: "text",
                    maxHeight: -1,
                    _stopClickEvents: false,
                    _getCaretPos: function(_694) {
                        var pos = 0;
                        if (typeof (_694.selectionStart) == "number") {
                            pos = _694.selectionStart;
                        } else {
                            if (has("ie")) {
                                var tr = _694.ownerDocument.selection.createRange().duplicate();
                                var ntr = _694.createTextRange();
                                tr.move("character", 0);
                                ntr.move("character", 0);
                                try {
                                    ntr.setEndPoint("EndToEnd", tr);
                                    pos = String(ntr.text).replace(/\r/g, "").length;
                                } catch (e) {}
                            }
                        }
                        return pos;
                    },
                    _setCaretPos: function(_695, _696) {
                        _696 = parseInt(_696);
                        _691.selectInputText(_695, _696, _696);
                    },
                    _setDisabledAttr: function(_697) {
                        this.inherited(arguments);
                        this.domNode.setAttribute("aria-disabled", _697 ? "true" : "false");
                    },
                    _onKey: function(evt) {
                        if (evt.charCode >= 32) {
                            return;
                        }
                        var key = evt.charCode || evt.keyCode;
                        if (key == keys.ALT || key == keys.CTRL || key == keys.META || key == keys.SHIFT) {
                            return;
                        }
                        var pw = this.dropDown;
                        var _698 = null;
                        this._abortQuery();
                        this.inherited(arguments);
                        if (evt.altKey || evt.ctrlKey || evt.metaKey) {
                            return;
                        }
                        if (this._opened) {
                            _698 = pw.getHighlightedOption();
                        }
                        switch (key) {
                        case keys.PAGE_DOWN:
                        case keys.DOWN_ARROW:
                        case keys.PAGE_UP:
                        case keys.UP_ARROW:
                            if (this._opened) {
                                this._announceOption(_698);
                            }
                            evt.stopPropagation();
                            evt.preventDefault();
                            break;
                        case keys.ENTER:
                            if (_698) {
                                if (_698 == pw.nextButton) {
                                    this._nextSearch(1);
                                    evt.stopPropagation();
                                    evt.preventDefault();
                                    break;
                                } else {
                                    if (_698 == pw.previousButton) {
                                        this._nextSearch(-1);
                                        evt.stopPropagation();
                                        evt.preventDefault();
                                        break;
                                    }
                                }
                                evt.stopPropagation();
                                evt.preventDefault();
                            } else {
                                this._setBlurValue();
                                this._setCaretPos(this.focusNode, this.focusNode.value.length);
                            }
                        case keys.TAB:
                            var _699 = this.get("displayedValue");
                            if (pw && (_699 == pw._messages["previousMessage"] || _699 == pw._messages["nextMessage"])) {
                                break;
                            }
                            if (_698) {
                                this._selectOption(_698);
                            }
                        case keys.ESCAPE:
                            if (this._opened) {
                                this._lastQuery = null;
                                this.closeDropDown();
                            }
                            break;
                        }
                    },
                    _autoCompleteText: function(text) {
                        var fn = this.focusNode;
                        _691.selectInputText(fn, fn.value.length);
                        var _69a = this.ignoreCase ? "toLowerCase" : "substr";
                        if (text[_69a](0).indexOf(this.focusNode.value[_69a](0)) == 0) {
                            var cpos = this.autoComplete ? this._getCaretPos(fn) : fn.value.length;
                            if ((cpos + 1) > fn.value.length) {
                                fn.value = text;
                                _691.selectInputText(fn, cpos);
                            }
                        } else {
                            fn.value = text;
                            _691.selectInputText(fn);
                        }
                    },
                    _openResultList: function(_69b, _69c, _69d) {
                        var _69e = this.dropDown.getHighlightedOption();
                        this.dropDown.clearResultList();
                        if (!_69b.length && _69d.start == 0) {
                            this.closeDropDown();
                            return;
                        }
                        this._nextSearch = this.dropDown.onPage = lang.hitch(this, function(_69f) {
                            _69b.nextPage(_69f !== -1);
                            this.focus();
                        });
                        this.dropDown.createOptions(_69b, _69d, lang.hitch(this, "_getMenuLabelFromItem"));
                        this._showResultList();
                        if ("direction"in _69d) {
                            if (_69d.direction) {
                                this.dropDown.highlightFirstOption();
                            } else {
                                if (!_69d.direction) {
                                    this.dropDown.highlightLastOption();
                                }
                            }
                            if (_69e) {
                                this._announceOption(this.dropDown.getHighlightedOption());
                            }
                        } else {
                            if (this.autoComplete && !this._prev_key_backspace && !/^[*]+$/.test(_69c[this.searchAttr].toString())) {
                                this._announceOption(this.dropDown.containerNode.firstChild.nextSibling);
                            }
                        }
                    },
                    _showResultList: function() {
                        this.closeDropDown(true);
                        this.openDropDown();
                        this.domNode.setAttribute("aria-expanded", "true");
                    },
                    loadDropDown: function() {
                        this._startSearchAll();
                    },
                    isLoaded: function() {
                        return false;
                    },
                    closeDropDown: function() {
                        this._abortQuery();
                        if (this._opened) {
                            this.inherited(arguments);
                            this.domNode.setAttribute("aria-expanded", "false");
                        }
                    },
                    _setBlurValue: function() {
                        var _6a0 = this.get("displayedValue");
                        var pw = this.dropDown;
                        if (pw && (_6a0 == pw._messages["previousMessage"] || _6a0 == pw._messages["nextMessage"])) {
                            this._setValueAttr(this._lastValueReported, true);
                        } else {
                            if (typeof this.item == "undefined") {
                                this.item = null;
                                this.set("displayedValue", _6a0);
                            } else {
                                if (this.value != this._lastValueReported) {
                                    this._handleOnChange(this.value, true);
                                }
                                this._refreshState();
                            }
                        }
                        this.focusNode.removeAttribute("aria-activedescendant");
                    },
                    _setItemAttr: function(item, _6a1, _6a2) {
                        var _6a3 = "";
                        if (item) {
                            if (!_6a2) {
                                _6a2 = this.store._oldAPI ? this.store.getValue(item, this.searchAttr) : item[this.searchAttr];
                            }
                            _6a3 = this._getValueField() != this.searchAttr ? this.store.getIdentity(item) : _6a2;
                        }
                        this.set("value", _6a3, _6a1, _6a2, item);
                    },
                    _announceOption: function(node) {
                        if (!node) {
                            return;
                        }
                        var _6a4;
                        if (node == this.dropDown.nextButton || node == this.dropDown.previousButton) {
                            _6a4 = node.innerHTML;
                            this.item = undefined;
                            this.value = "";
                        } else {
                            var item = this.dropDown.items[node.getAttribute("item")];
                            _6a4 = (this.store._oldAPI ? this.store.getValue(item, this.searchAttr) : item[this.searchAttr]).toString();
                            this.set("item", item, false, _6a4);
                        }
                        this.focusNode.value = this.focusNode.value.substring(0, this._lastInput.length);
                        this.focusNode.setAttribute("aria-activedescendant", _68d.get(node, "id"));
                        this._autoCompleteText(_6a4);
                    },
                    _selectOption: function(_6a5) {
                        this.closeDropDown();
                        if (_6a5) {
                            this._announceOption(_6a5);
                        }
                        this._setCaretPos(this.focusNode, this.focusNode.value.length);
                        this._handleOnChange(this.value, true);
                        this.focusNode.removeAttribute("aria-activedescendant");
                    },
                    _startSearchAll: function() {
                        this._startSearch("");
                    },
                    _startSearchFromInput: function() {
                        this.item = undefined;
                        this.inherited(arguments);
                    },
                    _startSearch: function(key) {
                        if (!this.dropDown) {
                            var _6a6 = this.id + "_popup"
                              , _6a7 = lang.isString(this.dropDownClass) ? lang.getObject(this.dropDownClass, false) : this.dropDownClass;
                            this.dropDown = new _6a7({
                                onChange: lang.hitch(this, this._selectOption),
                                id: _6a6,
                                dir: this.dir,
                                textDir: this.textDir
                            });
                        }
                        this._lastInput = key;
                        this.inherited(arguments);
                    },
                    _getValueField: function() {
                        return this.searchAttr;
                    },
                    postMixInProperties: function() {
                        this.inherited(arguments);
                        if (!this.store && this.srcNodeRef) {
                            var _6a8 = this.srcNodeRef;
                            this.store = new _690({},_6a8);
                            if (!("value"in this.params)) {
                                var item = (this.item = this.store.fetchSelectedItem());
                                if (item) {
                                    var _6a9 = this._getValueField();
                                    this.value = this.store._oldAPI ? this.store.getValue(item, _6a9) : item[_6a9];
                                }
                            }
                        }
                    },
                    postCreate: function() {
                        var _6aa = _68e("label[for=\"" + this.id + "\"]");
                        if (_6aa.length) {
                            if (!_6aa[0].id) {
                                _6aa[0].id = this.id + "_label";
                            }
                            this.domNode.setAttribute("aria-labelledby", _6aa[0].id);
                        }
                        this.inherited(arguments);
                        _68b.after(this, "onSearch", lang.hitch(this, "_openResultList"), true);
                    },
                    _getMenuLabelFromItem: function(item) {
                        var _6ab = this.labelFunc(item, this.store)
                          , _6ac = this.labelType;
                        if (this.highlightMatch != "none" && this.labelType == "text" && this._lastInput) {
                            _6ab = this.doHighlight(_6ab, this._lastInput);
                            _6ac = "html";
                        }
                        return {
                            html: _6ac == "html",
                            label: _6ab
                        };
                    },
                    doHighlight: function(_6ad, find) {
                        var _6ae = (this.ignoreCase ? "i" : "") + (this.highlightMatch == "all" ? "g" : "")
                          , i = this.queryExpr.indexOf("${0}");
                        find = _68f.escapeString(find);
                        return this._escapeHtml(_6ad.replace(new RegExp((i == 0 ? "^" : "") + "(" + find + ")" + (i == (this.queryExpr.length - 4) ? "$" : ""),_6ae), "￿$1￿")).replace(/\uFFFF([^\uFFFF]+)\uFFFF/g, "<span class=\"dijitComboBoxHighlightMatch\">$1</span>");
                    },
                    _escapeHtml: function(str) {
                        str = String(str).replace(/&/gm, "&amp;").replace(/</gm, "&lt;").replace(/>/gm, "&gt;").replace(/"/gm, "&quot;");
                        return str;
                    },
                    reset: function() {
                        this.item = null;
                        this.inherited(arguments);
                    },
                    labelFunc: function(item, _6af) {
                        return (_6af._oldAPI ? _6af.getValue(item, this.labelAttr || this.searchAttr) : item[this.labelAttr || this.searchAttr]).toString();
                    },
                    _setValueAttr: function(_6b0, _6b1, _6b2, item) {
                        this._set("item", item || null);
                        if (_6b0 == null) {
                            _6b0 = "";
                        }
                        this.inherited(arguments);
                    }
                });
                if (has("dojo-bidi")) {
                    _693.extend({
                        _setTextDirAttr: function(_6b3) {
                            this.inherited(arguments);
                            if (this.dropDown) {
                                this.dropDown._set("textDir", _6b3);
                            }
                        }
                    });
                }
                return _693;
            });
        },
        "dojo/regexp": function() {
            define(["./_base/kernel", "./_base/lang"], function(dojo, lang) {
                var _6b4 = {};
                lang.setObject("dojo.regexp", _6b4);
                _6b4.escapeString = function(str, _6b5) {
                    return str.replace(/([\.$?*|{}\(\)\[\]\\\/\+\-^])/g, function(ch) {
                        if (_6b5 && _6b5.indexOf(ch) != -1) {
                            return ch;
                        }
                        return "\\" + ch;
                    });
                }
                ;
                _6b4.buildGroupRE = function(arr, re, _6b6) {
                    if (!(arr instanceof Array)) {
                        return re(arr);
                    }
                    var b = [];
                    for (var i = 0; i < arr.length; i++) {
                        b.push(re(arr[i]));
                    }
                    return _6b4.group(b.join("|"), _6b6);
                }
                ;
                _6b4.group = function(_6b7, _6b8) {
                    return "(" + (_6b8 ? "?:" : "") + _6b7 + ")";
                }
                ;
                return _6b4;
            });
        },
        "dijit/form/DataList": function() {
            define(["dojo/_base/declare", "dojo/dom", "dojo/_base/lang", "dojo/query", "dojo/store/Memory", "../registry"], function(_6b9, dom, lang, _6ba, _6bb, _6bc) {
                function _6bd(_6be) {
                    return {
                        id: _6be.value,
                        value: _6be.value,
                        name: lang.trim(_6be.innerText || _6be.textContent || "")
                    };
                }
                ;return _6b9("dijit.form.DataList", _6bb, {
                    constructor: function(_6bf, _6c0) {
                        this.domNode = dom.byId(_6c0);
                        lang.mixin(this, _6bf);
                        if (this.id) {
                            _6bc.add(this);
                        }
                        this.domNode.style.display = "none";
                        this.inherited(arguments, [{
                            data: _6ba("option", this.domNode).map(_6bd)
                        }]);
                    },
                    destroy: function() {
                        _6bc.remove(this.id);
                    },
                    fetchSelectedItem: function() {
                        var _6c1 = _6ba("> option[selected]", this.domNode)[0] || _6ba("> option", this.domNode)[0];
                        return _6c1 && _6bd(_6c1);
                    }
                });
            });
        },
        "dojo/store/Memory": function() {
            define(["../_base/declare", "./util/QueryResults", "./util/SimpleQueryEngine"], function(_6c2, _6c3, _6c4) {
                var base = null;
                return _6c2("dojo.store.Memory", base, {
                    constructor: function(_6c5) {
                        for (var i in _6c5) {
                            this[i] = _6c5[i];
                        }
                        this.setData(this.data || []);
                    },
                    data: null,
                    idProperty: "id",
                    index: null,
                    queryEngine: _6c4,
                    get: function(id) {
                        return this.data[this.index[id]];
                    },
                    getIdentity: function(_6c6) {
                        return _6c6[this.idProperty];
                    },
                    put: function(_6c7, _6c8) {
                        var data = this.data
                          , _6c9 = this.index
                          , _6ca = this.idProperty;
                        var id = _6c7[_6ca] = (_6c8 && "id"in _6c8) ? _6c8.id : _6ca in _6c7 ? _6c7[_6ca] : Math.random();
                        if (id in _6c9) {
                            if (_6c8 && _6c8.overwrite === false) {
                                throw new Error("Object already exists");
                            }
                            data[_6c9[id]] = _6c7;
                        } else {
                            _6c9[id] = data.push(_6c7) - 1;
                        }
                        return id;
                    },
                    add: function(_6cb, _6cc) {
                        (_6cc = _6cc || {}).overwrite = false;
                        return this.put(_6cb, _6cc);
                    },
                    remove: function(id) {
                        var _6cd = this.index;
                        var data = this.data;
                        if (id in _6cd) {
                            data.splice(_6cd[id], 1);
                            this.setData(data);
                            return true;
                        }
                    },
                    query: function(_6ce, _6cf) {
                        return _6c3(this.queryEngine(_6ce, _6cf)(this.data));
                    },
                    setData: function(data) {
                        if (data.items) {
                            this.idProperty = data.identifier || this.idProperty;
                            data = this.data = data.items;
                        } else {
                            this.data = data;
                        }
                        this.index = {};
                        for (var i = 0, l = data.length; i < l; i++) {
                            this.index[data[i][this.idProperty]] = i;
                        }
                    }
                });
            });
        },
        "dojo/store/util/SimpleQueryEngine": function() {
            define(["../../_base/array"], function(_6d0) {
                return function(_6d1, _6d2) {
                    switch (typeof _6d1) {
                    default:
                        throw new Error("Can not query with a " + typeof _6d1);
                    case "object":
                    case "undefined":
                        var _6d3 = _6d1;
                        _6d1 = function(_6d4) {
                            for (var key in _6d3) {
                                var _6d5 = _6d3[key];
                                if (_6d5 && _6d5.test) {
                                    if (!_6d5.test(_6d4[key], _6d4)) {
                                        return false;
                                    }
                                } else {
                                    if (_6d5 != _6d4[key]) {
                                        return false;
                                    }
                                }
                            }
                            return true;
                        }
                        ;
                        break;
                    case "string":
                        if (!this[_6d1]) {
                            throw new Error("No filter function " + _6d1 + " was found in store");
                        }
                        _6d1 = this[_6d1];
                    case "function":
                    }
                    function _6d6(_6d7) {
                        var _6d8 = _6d0.filter(_6d7, _6d1);
                        var _6d9 = _6d2 && _6d2.sort;
                        if (_6d9) {
                            _6d8.sort(typeof _6d9 == "function" ? _6d9 : function(a, b) {
                                for (var sort, i = 0; sort = _6d9[i]; i++) {
                                    var _6da = a[sort.attribute];
                                    var _6db = b[sort.attribute];
                                    _6da = _6da != null ? _6da.valueOf() : _6da;
                                    _6db = _6db != null ? _6db.valueOf() : _6db;
                                    if (_6da != _6db) {
                                        return !!sort.descending == (_6da == null || _6da > _6db) ? -1 : 1;
                                    }
                                }
                                return 0;
                            }
                            );
                        }
                        if (_6d2 && (_6d2.start || _6d2.count)) {
                            var _6dc = _6d8.length;
                            _6d8 = _6d8.slice(_6d2.start || 0, (_6d2.start || 0) + (_6d2.count || Infinity));
                            _6d8.total = _6dc;
                        }
                        return _6d8;
                    }
                    ;_6d6.matches = _6d1;
                    return _6d6;
                }
                ;
            });
        },
        "dijit/form/_SearchMixin": function() {
            define(["dojo/_base/declare", "dojo/keys", "dojo/_base/lang", "dojo/query", "dojo/string", "dojo/when", "../registry"], function(_6dd, keys, lang, _6de, _6df, when, _6e0) {
                return _6dd("dijit.form._SearchMixin", null, {
                    pageSize: Infinity,
                    store: null,
                    fetchProperties: {},
                    query: {},
                    list: "",
                    _setListAttr: function(list) {
                        this._set("list", list);
                    },
                    searchDelay: 200,
                    searchAttr: "name",
                    queryExpr: "${0}*",
                    ignoreCase: true,
                    _patternToRegExp: function(_6e1) {
                        return new RegExp("^" + _6e1.replace(/(\\.)|(\*)|(\?)|\W/g, function(str, _6e2, star, _6e3) {
                            return star ? ".*" : _6e3 ? "." : _6e2 ? _6e2 : "\\" + str;
                        }) + "$",this.ignoreCase ? "mi" : "m");
                    },
                    _abortQuery: function() {
                        if (this.searchTimer) {
                            this.searchTimer = this.searchTimer.remove();
                        }
                        if (this._queryDeferHandle) {
                            this._queryDeferHandle = this._queryDeferHandle.remove();
                        }
                        if (this._fetchHandle) {
                            if (this._fetchHandle.abort) {
                                this._cancelingQuery = true;
                                this._fetchHandle.abort();
                                this._cancelingQuery = false;
                            }
                            if (this._fetchHandle.cancel) {
                                this._cancelingQuery = true;
                                this._fetchHandle.cancel();
                                this._cancelingQuery = false;
                            }
                            this._fetchHandle = null;
                        }
                    },
                    _processInput: function(evt) {
                        if (this.disabled || this.readOnly) {
                            return;
                        }
                        var key = evt.charOrCode;
                        this._prev_key_backspace = false;
                        if (key == keys.DELETE || key == keys.BACKSPACE) {
                            this._prev_key_backspace = true;
                            this._maskValidSubsetError = true;
                        }
                        if (!this.store) {
                            this.onSearch();
                        } else {
                            this.searchTimer = this.defer("_startSearchFromInput", 1);
                        }
                    },
                    onSearch: function() {},
                    _startSearchFromInput: function() {
                        this._startSearch(this.focusNode.value);
                    },
                    _startSearch: function(text) {
                        this._abortQuery();
                        var _6e4 = this, _6de = lang.clone(this.query), _6e5 = {
                            start: 0,
                            count: this.pageSize,
                            queryOptions: {
                                ignoreCase: this.ignoreCase,
                                deep: true
                            }
                        }, qs = _6df.substitute(this.queryExpr, [text.replace(/([\\\*\?])/g, "\\$1")]), q, _6e6 = function() {
                            var _6e7 = _6e4._fetchHandle = _6e4.store.query(_6de, _6e5);
                            if (_6e4.disabled || _6e4.readOnly || (q !== _6e4._lastQuery)) {
                                return;
                            }
                            when(_6e7, function(res) {
                                _6e4._fetchHandle = null;
                                if (!_6e4.disabled && !_6e4.readOnly && (q === _6e4._lastQuery)) {
                                    when(_6e7.total, function(_6e8) {
                                        res.total = _6e8;
                                        var _6e9 = _6e4.pageSize;
                                        if (isNaN(_6e9) || _6e9 > res.total) {
                                            _6e9 = res.total;
                                        }
                                        res.nextPage = function(_6ea) {
                                            _6e5.direction = _6ea = _6ea !== false;
                                            _6e5.count = _6e9;
                                            if (_6ea) {
                                                _6e5.start += res.length;
                                                if (_6e5.start >= res.total) {
                                                    _6e5.count = 0;
                                                }
                                            } else {
                                                _6e5.start -= _6e9;
                                                if (_6e5.start < 0) {
                                                    _6e5.count = Math.max(_6e9 + _6e5.start, 0);
                                                    _6e5.start = 0;
                                                }
                                            }
                                            if (_6e5.count <= 0) {
                                                res.length = 0;
                                                _6e4.onSearch(res, _6de, _6e5);
                                            } else {
                                                _6e6();
                                            }
                                        }
                                        ;
                                        _6e4.onSearch(res, _6de, _6e5);
                                    });
                                }
                            }, function(err) {
                                _6e4._fetchHandle = null;
                                if (!_6e4._cancelingQuery) {
                                    console.error(_6e4.declaredClass + " " + err.toString());
                                }
                            });
                        };
                        lang.mixin(_6e5, this.fetchProperties);
                        if (this.store._oldAPI) {
                            q = qs;
                        } else {
                            q = this._patternToRegExp(qs);
                            q.toString = function() {
                                return qs;
                            }
                            ;
                        }
                        this._lastQuery = _6de[this.searchAttr] = q;
                        this._queryDeferHandle = this.defer(_6e6, this.searchDelay);
                    },
                    constructor: function() {
                        this.query = {};
                        this.fetchProperties = {};
                    },
                    postMixInProperties: function() {
                        if (!this.store) {
                            var list = this.list;
                            if (list) {
                                this.store = _6e0.byId(list);
                            }
                        }
                        this.inherited(arguments);
                    }
                });
            });
        },
        "dijit/form/_ComboBoxMenu": function() {
            define(["dojo/_base/declare", "dojo/dom-class", "dojo/dom-style", "dojo/keys", "../_WidgetBase", "../_TemplatedMixin", "./_ComboBoxMenuMixin", "./_ListMouseMixin"], function(_6eb, _6ec, _6ed, keys, _6ee, _6ef, _6f0, _6f1) {
                return _6eb("dijit.form._ComboBoxMenu", [_6ee, _6ef, _6f1, _6f0], {
                    templateString: "<div class='dijitReset dijitMenu' data-dojo-attach-point='containerNode' style='overflow: auto; overflow-x: hidden;' role='listbox'>" + "<div class='dijitMenuItem dijitMenuPreviousButton' data-dojo-attach-point='previousButton' role='option'></div>" + "<div class='dijitMenuItem dijitMenuNextButton' data-dojo-attach-point='nextButton' role='option'></div>" + "</div>",
                    baseClass: "dijitComboBoxMenu",
                    postCreate: function() {
                        this.inherited(arguments);
                        if (!this.isLeftToRight()) {
                            _6ec.add(this.previousButton, "dijitMenuItemRtl");
                            _6ec.add(this.nextButton, "dijitMenuItemRtl");
                        }
                        this.containerNode.setAttribute("role", "listbox");
                    },
                    _createMenuItem: function() {
                        var item = this.ownerDocument.createElement("div");
                        item.className = "dijitReset dijitMenuItem" + (this.isLeftToRight() ? "" : " dijitMenuItemRtl");
                        item.setAttribute("role", "option");
                        return item;
                    },
                    onHover: function(node) {
                        _6ec.add(node, "dijitMenuItemHover");
                    },
                    onUnhover: function(node) {
                        _6ec.remove(node, "dijitMenuItemHover");
                    },
                    onSelect: function(node) {
                        _6ec.add(node, "dijitMenuItemSelected");
                    },
                    onDeselect: function(node) {
                        _6ec.remove(node, "dijitMenuItemSelected");
                    },
                    _page: function(up) {
                        var _6f2 = 0;
                        var _6f3 = this.domNode.scrollTop;
                        var _6f4 = _6ed.get(this.domNode, "height");
                        if (!this.getHighlightedOption()) {
                            this.selectNextNode();
                        }
                        while (_6f2 < _6f4) {
                            var _6f5 = this.getHighlightedOption();
                            if (up) {
                                if (!_6f5.previousSibling || _6f5.previousSibling.style.display == "none") {
                                    break;
                                }
                                this.selectPreviousNode();
                            } else {
                                if (!_6f5.nextSibling || _6f5.nextSibling.style.display == "none") {
                                    break;
                                }
                                this.selectNextNode();
                            }
                            var _6f6 = this.domNode.scrollTop;
                            _6f2 += (_6f6 - _6f3) * (up ? -1 : 1);
                            _6f3 = _6f6;
                        }
                    },
                    handleKey: function(evt) {
                        switch (evt.keyCode) {
                        case keys.DOWN_ARROW:
                            this.selectNextNode();
                            return false;
                        case keys.PAGE_DOWN:
                            this._page(false);
                            return false;
                        case keys.UP_ARROW:
                            this.selectPreviousNode();
                            return false;
                        case keys.PAGE_UP:
                            this._page(true);
                            return false;
                        default:
                            return true;
                        }
                    }
                });
            });
        },
        "dijit/form/_ComboBoxMenuMixin": function() {
            define(["dojo/_base/array", "dojo/_base/declare", "dojo/dom-attr", "dojo/has", "dojo/i18n", "dojo/i18n!./nls/ComboBox"], function(_6f7, _6f8, _6f9, has, i18n) {
                var _6fa = _6f8("dijit.form._ComboBoxMenuMixin" + (has("dojo-bidi") ? "_NoBidi" : ""), null, {
                    _messages: null,
                    postMixInProperties: function() {
                        this.inherited(arguments);
                        this._messages = i18n.getLocalization("dijit.form", "ComboBox", this.lang);
                    },
                    buildRendering: function() {
                        this.inherited(arguments);
                        this.previousButton.innerHTML = this._messages["previousMessage"];
                        this.nextButton.innerHTML = this._messages["nextMessage"];
                    },
                    _setValueAttr: function(_6fb) {
                        this._set("value", _6fb);
                        this.onChange(_6fb);
                    },
                    onClick: function(node) {
                        if (node == this.previousButton) {
                            this._setSelectedAttr(null);
                            this.onPage(-1);
                        } else {
                            if (node == this.nextButton) {
                                this._setSelectedAttr(null);
                                this.onPage(1);
                            } else {
                                this.onChange(node);
                            }
                        }
                    },
                    onChange: function() {},
                    onPage: function() {},
                    onClose: function() {
                        this._setSelectedAttr(null);
                    },
                    _createOption: function(item, _6fc) {
                        var _6fd = this._createMenuItem();
                        var _6fe = _6fc(item);
                        if (_6fe.html) {
                            _6fd.innerHTML = _6fe.label;
                        } else {
                            _6fd.appendChild(_6fd.ownerDocument.createTextNode(_6fe.label));
                        }
                        if (_6fd.innerHTML == "") {
                            _6fd.innerHTML = "&#160;";
                        }
                        return _6fd;
                    },
                    createOptions: function(_6ff, _700, _701) {
                        this.items = _6ff;
                        this.previousButton.style.display = (_700.start == 0) ? "none" : "";
                        _6f9.set(this.previousButton, "id", this.id + "_prev");
                        _6f7.forEach(_6ff, function(item, i) {
                            var _702 = this._createOption(item, _701);
                            _702.setAttribute("item", i);
                            _6f9.set(_702, "id", this.id + i);
                            this.nextButton.parentNode.insertBefore(_702, this.nextButton);
                        }, this);
                        var _703 = false;
                        if (_6ff.total && !_6ff.total.then && _6ff.total != -1) {
                            if ((_700.start + _700.count) < _6ff.total) {
                                _703 = true;
                            } else {
                                if ((_700.start + _700.count) > _6ff.total && _700.count == _6ff.length) {
                                    _703 = true;
                                }
                            }
                        } else {
                            if (_700.count == _6ff.length) {
                                _703 = true;
                            }
                        }
                        this.nextButton.style.display = _703 ? "" : "none";
                        _6f9.set(this.nextButton, "id", this.id + "_next");
                    },
                    clearResultList: function() {
                        var _704 = this.containerNode;
                        while (_704.childNodes.length > 2) {
                            _704.removeChild(_704.childNodes[_704.childNodes.length - 2]);
                        }
                        this._setSelectedAttr(null);
                    },
                    highlightFirstOption: function() {
                        this.selectFirstNode();
                    },
                    highlightLastOption: function() {
                        this.selectLastNode();
                    },
                    selectFirstNode: function() {
                        this.inherited(arguments);
                        if (this.getHighlightedOption() == this.previousButton) {
                            this.selectNextNode();
                        }
                    },
                    selectLastNode: function() {
                        this.inherited(arguments);
                        if (this.getHighlightedOption() == this.nextButton) {
                            this.selectPreviousNode();
                        }
                    },
                    getHighlightedOption: function() {
                        return this.selected;
                    }
                });
                if (has("dojo-bidi")) {
                    _6fa = _6f8("dijit.form._ComboBoxMenuMixin", _6fa, {
                        _createOption: function() {
                            var _705 = this.inherited(arguments);
                            this.applyTextDir(_705);
                            return _705;
                        }
                    });
                }
                return _6fa;
            });
        },
        "dijit/form/_ListMouseMixin": function() {
            define(["dojo/_base/declare", "dojo/on", "dojo/touch", "./_ListBase"], function(_706, on, _707, _708) {
                return _706("dijit.form._ListMouseMixin", _708, {
                    postCreate: function() {
                        this.inherited(arguments);
                        this.domNode.dojoClick = true;
                        this._listConnect("click", "_onClick");
                        this._listConnect("mousedown", "_onMouseDown");
                        this._listConnect("mouseup", "_onMouseUp");
                        this._listConnect("mouseover", "_onMouseOver");
                        this._listConnect("mouseout", "_onMouseOut");
                    },
                    _onClick: function(evt, _709) {
                        this._setSelectedAttr(_709, false);
                        if (this._deferredClick) {
                            this._deferredClick.remove();
                        }
                        this._deferredClick = this.defer(function() {
                            this._deferredClick = null;
                            this.onClick(_709);
                        });
                    },
                    _onMouseDown: function(evt, _70a) {
                        if (this._hoveredNode) {
                            this.onUnhover(this._hoveredNode);
                            this._hoveredNode = null;
                        }
                        this._isDragging = true;
                        this._setSelectedAttr(_70a, false);
                    },
                    _onMouseUp: function(evt, _70b) {
                        this._isDragging = false;
                        var _70c = this.selected;
                        var _70d = this._hoveredNode;
                        if (_70c && _70b == _70c) {
                            this.defer(function() {
                                this._onClick(evt, _70c);
                            });
                        } else {
                            if (_70d) {
                                this.defer(function() {
                                    this._onClick(evt, _70d);
                                });
                            }
                        }
                    },
                    _onMouseOut: function(evt, _70e) {
                        if (this._hoveredNode) {
                            this.onUnhover(this._hoveredNode);
                            this._hoveredNode = null;
                        }
                        if (this._isDragging) {
                            this._cancelDrag = (new Date()).getTime() + 1000;
                        }
                    },
                    _onMouseOver: function(evt, _70f) {
                        if (this._cancelDrag) {
                            var time = (new Date()).getTime();
                            if (time > this._cancelDrag) {
                                this._isDragging = false;
                            }
                            this._cancelDrag = null;
                        }
                        this._hoveredNode = _70f;
                        this.onHover(_70f);
                        if (this._isDragging) {
                            this._setSelectedAttr(_70f, false);
                        }
                    }
                });
            });
        },
        "dijit/form/_ListBase": function() {
            define(["dojo/_base/declare", "dojo/on", "dojo/window"], function(_710, on, _711) {
                return _710("dijit.form._ListBase", null, {
                    selected: null,
                    _listConnect: function(_712, _713) {
                        var self = this;
                        return self.own(on(self.containerNode, on.selector(function(_714, _715, _716) {
                            return _714.parentNode == _716;
                        }, _712), function(evt) {
                            self[_713](evt, this);
                        }));
                    },
                    selectFirstNode: function() {
                        var _717 = this.containerNode.firstChild;
                        while (_717 && _717.style.display == "none") {
                            _717 = _717.nextSibling;
                        }
                        this._setSelectedAttr(_717, true);
                    },
                    selectLastNode: function() {
                        var last = this.containerNode.lastChild;
                        while (last && last.style.display == "none") {
                            last = last.previousSibling;
                        }
                        this._setSelectedAttr(last, true);
                    },
                    selectNextNode: function() {
                        var _718 = this.selected;
                        if (!_718) {
                            this.selectFirstNode();
                        } else {
                            var next = _718.nextSibling;
                            while (next && next.style.display == "none") {
                                next = next.nextSibling;
                            }
                            if (!next) {
                                this.selectFirstNode();
                            } else {
                                this._setSelectedAttr(next, true);
                            }
                        }
                    },
                    selectPreviousNode: function() {
                        var _719 = this.selected;
                        if (!_719) {
                            this.selectLastNode();
                        } else {
                            var prev = _719.previousSibling;
                            while (prev && prev.style.display == "none") {
                                prev = prev.previousSibling;
                            }
                            if (!prev) {
                                this.selectLastNode();
                            } else {
                                this._setSelectedAttr(prev, true);
                            }
                        }
                    },
                    _setSelectedAttr: function(node, _71a) {
                        if (this.selected != node) {
                            var _71b = this.selected;
                            if (_71b) {
                                this.onDeselect(_71b);
                            }
                            if (node) {
                                if (_71a) {
                                    _711.scrollIntoView(node);
                                }
                                this.onSelect(node);
                            }
                            this._set("selected", node);
                        } else {
                            if (node) {
                                this.onSelect(node);
                            }
                        }
                    }
                });
            });
        },
        "dijit/_HasDropDown": function() {
            define(["dojo/_base/declare", "dojo/_base/Deferred", "dojo/dom", "dojo/dom-attr", "dojo/dom-class", "dojo/dom-geometry", "dojo/dom-style", "dojo/has", "dojo/keys", "dojo/_base/lang", "dojo/on", "dojo/touch", "./registry", "./focus", "./popup", "./_FocusMixin"], function(_71c, _71d, dom, _71e, _71f, _720, _721, has, keys, lang, on, _722, _723, _724, _725, _726) {
                return _71c("dijit._HasDropDown", _726, {
                    _buttonNode: null,
                    _arrowWrapperNode: null,
                    _popupStateNode: null,
                    _aroundNode: null,
                    dropDown: null,
                    autoWidth: true,
                    forceWidth: false,
                    maxHeight: -1,
                    dropDownPosition: ["below", "above"],
                    _stopClickEvents: true,
                    _onDropDownMouseDown: function(e) {
                        if (this.disabled || this.readOnly) {
                            return;
                        }
                        if (e.type != "MSPointerDown") {
                            e.preventDefault();
                        }
                        this.own(on.once(this.ownerDocument, _722.release, lang.hitch(this, "_onDropDownMouseUp")));
                        this.toggleDropDown();
                    },
                    _onDropDownMouseUp: function(e) {
                        var _727 = this.dropDown
                          , _728 = false;
                        if (e && this._opened) {
                            var c = _720.position(this._buttonNode, true);
                            if (!(e.pageX >= c.x && e.pageX <= c.x + c.w) || !(e.pageY >= c.y && e.pageY <= c.y + c.h)) {
                                var t = e.target;
                                while (t && !_728) {
                                    if (_71f.contains(t, "dijitPopup")) {
                                        _728 = true;
                                    } else {
                                        t = t.parentNode;
                                    }
                                }
                                if (_728) {
                                    t = e.target;
                                    if (_727.onItemClick) {
                                        var _729;
                                        while (t && !(_729 = _723.byNode(t))) {
                                            t = t.parentNode;
                                        }
                                        if (_729 && _729.onClick && _729.getParent) {
                                            _729.getParent().onItemClick(_729, e);
                                        }
                                    }
                                    return;
                                }
                            }
                        }
                        if (this._opened) {
                            if (_727.focus && (_727.autoFocus !== false || (e.type == "mouseup" && !this.hovering))) {
                                this._focusDropDownTimer = this.defer(function() {
                                    _727.focus();
                                    delete this._focusDropDownTimer;
                                });
                            }
                        } else {
                            if (this.focus) {
                                this.defer("focus");
                            }
                        }
                    },
                    _onDropDownClick: function(e) {
                        if (this._stopClickEvents) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                    },
                    buildRendering: function() {
                        this.inherited(arguments);
                        this._buttonNode = this._buttonNode || this.focusNode || this.domNode;
                        this._popupStateNode = this._popupStateNode || this.focusNode || this._buttonNode;
                        var _72a = {
                            "after": this.isLeftToRight() ? "Right" : "Left",
                            "before": this.isLeftToRight() ? "Left" : "Right",
                            "above": "Up",
                            "below": "Down",
                            "left": "Left",
                            "right": "Right"
                        }[this.dropDownPosition[0]] || this.dropDownPosition[0] || "Down";
                        _71f.add(this._arrowWrapperNode || this._buttonNode, "dijit" + _72a + "ArrowButton");
                    },
                    postCreate: function() {
                        this.inherited(arguments);
                        var _72b = this.focusNode || this.domNode;
                        this.own(on(this._buttonNode, _722.press, lang.hitch(this, "_onDropDownMouseDown")), on(this._buttonNode, "click", lang.hitch(this, "_onDropDownClick")), on(_72b, "keydown", lang.hitch(this, "_onKey")), on(_72b, "keyup", lang.hitch(this, "_onKeyUp")));
                    },
                    destroy: function() {
                        if (this._opened) {
                            this.closeDropDown(true);
                        }
                        if (this.dropDown) {
                            if (!this.dropDown._destroyed) {
                                this.dropDown.destroyRecursive();
                            }
                            delete this.dropDown;
                        }
                        this.inherited(arguments);
                    },
                    _onKey: function(e) {
                        if (this.disabled || this.readOnly) {
                            return;
                        }
                        var d = this.dropDown
                          , _72c = e.target;
                        if (d && this._opened && d.handleKey) {
                            if (d.handleKey(e) === false) {
                                e.stopPropagation();
                                e.preventDefault();
                                return;
                            }
                        }
                        if (d && this._opened && e.keyCode == keys.ESCAPE) {
                            this.closeDropDown();
                            e.stopPropagation();
                            e.preventDefault();
                        } else {
                            if (!this._opened && (e.keyCode == keys.DOWN_ARROW || ((e.keyCode == keys.ENTER || (e.keyCode == keys.SPACE && (!this._searchTimer || (e.ctrlKey || e.altKey || e.metaKey)))) && ((_72c.tagName || "").toLowerCase() !== "input" || (_72c.type && _72c.type.toLowerCase() !== "text"))))) {
                                this._toggleOnKeyUp = true;
                                e.stopPropagation();
                                e.preventDefault();
                            }
                        }
                    },
                    _onKeyUp: function() {
                        if (this._toggleOnKeyUp) {
                            delete this._toggleOnKeyUp;
                            this.toggleDropDown();
                            var d = this.dropDown;
                            if (d && d.focus) {
                                this.defer(lang.hitch(d, "focus"), 1);
                            }
                        }
                    },
                    _onBlur: function() {
                        this.closeDropDown(false);
                        this.inherited(arguments);
                    },
                    isLoaded: function() {
                        return true;
                    },
                    loadDropDown: function(_72d) {
                        _72d();
                    },
                    loadAndOpenDropDown: function() {
                        var d = new _71d()
                          , _72e = lang.hitch(this, function() {
                            this.openDropDown();
                            d.resolve(this.dropDown);
                        });
                        if (!this.isLoaded()) {
                            this.loadDropDown(_72e);
                        } else {
                            _72e();
                        }
                        return d;
                    },
                    toggleDropDown: function() {
                        if (this.disabled || this.readOnly) {
                            return;
                        }
                        if (!this._opened) {
                            this.loadAndOpenDropDown();
                        } else {
                            this.closeDropDown(true);
                        }
                    },
                    openDropDown: function() {
                        var _72f = this.dropDown
                          , _730 = _72f.domNode
                          , _731 = this._aroundNode || this.domNode
                          , self = this;
                        var _732 = _725.open({
                            parent: this,
                            popup: _72f,
                            around: _731,
                            orient: this.dropDownPosition,
                            maxHeight: this.maxHeight,
                            onExecute: function() {
                                self.closeDropDown(true);
                            },
                            onCancel: function() {
                                self.closeDropDown(true);
                            },
                            onClose: function() {
                                _71e.set(self._popupStateNode, "popupActive", false);
                                _71f.remove(self._popupStateNode, "dijitHasDropDownOpen");
                                self._set("_opened", false);
                            }
                        });
                        if (this.forceWidth || (this.autoWidth && _731.offsetWidth > _72f._popupWrapper.offsetWidth)) {
                            var _733 = _731.offsetWidth - _72f._popupWrapper.offsetWidth;
                            var _734 = {
                                w: _72f.domNode.offsetWidth + _733
                            };
                            this._origStyle = _730.style.cssText;
                            if (lang.isFunction(_72f.resize)) {
                                _72f.resize(_734);
                            } else {
                                _720.setMarginBox(_730, _734);
                            }
                            if (_732.corner[1] == "R") {
                                _72f._popupWrapper.style.left = (_72f._popupWrapper.style.left.replace("px", "") - _733) + "px";
                            }
                        }
                        _71e.set(this._popupStateNode, "popupActive", "true");
                        _71f.add(this._popupStateNode, "dijitHasDropDownOpen");
                        this._set("_opened", true);
                        this._popupStateNode.setAttribute("aria-expanded", "true");
                        this._popupStateNode.setAttribute("aria-owns", _72f.id);
                        if (_730.getAttribute("role") !== "presentation" && !_730.getAttribute("aria-labelledby")) {
                            _730.setAttribute("aria-labelledby", this.id);
                        }
                        return _732;
                    },
                    closeDropDown: function(_735) {
                        if (this._focusDropDownTimer) {
                            this._focusDropDownTimer.remove();
                            delete this._focusDropDownTimer;
                        }
                        if (this._opened) {
                            this._popupStateNode.setAttribute("aria-expanded", "false");
                            if (_735 && this.focus) {
                                this.focus();
                            }
                            _725.close(this.dropDown);
                            this._opened = false;
                        }
                        if (this._origStyle) {
                            this.dropDown.domNode.style.cssText = this._origStyle;
                            delete this._origStyle;
                        }
                    }
                });
            });
        },
        "dijit/popup": function() {
            define(["dojo/_base/array", "dojo/aspect", "dojo/_base/declare", "dojo/dom", "dojo/dom-attr", "dojo/dom-construct", "dojo/dom-geometry", "dojo/dom-style", "dojo/has", "dojo/keys", "dojo/_base/lang", "dojo/on", "./place", "./BackgroundIframe", "./Viewport", "./main", "dojo/touch"], function(_736, _737, _738, dom, _739, _73a, _73b, _73c, has, keys, lang, on, _73d, _73e, _73f, _740) {
                function _741() {
                    if (this._popupWrapper) {
                        _73a.destroy(this._popupWrapper);
                        delete this._popupWrapper;
                    }
                }
                ;var _742 = _738(null, {
                    _stack: [],
                    _beginZIndex: 1000,
                    _idGen: 1,
                    _repositionAll: function() {
                        if (this._firstAroundNode) {
                            var _743 = this._firstAroundPosition
                              , _744 = _73b.position(this._firstAroundNode, true)
                              , dx = _744.x - _743.x
                              , dy = _744.y - _743.y;
                            if (dx || dy) {
                                this._firstAroundPosition = _744;
                                for (var i = 0; i < this._stack.length; i++) {
                                    var _745 = this._stack[i].wrapper.style;
                                    _745.top = (parseFloat(_745.top) + dy) + "px";
                                    if (_745.right == "auto") {
                                        _745.left = (parseFloat(_745.left) + dx) + "px";
                                    } else {
                                        _745.right = (parseFloat(_745.right) - dx) + "px";
                                    }
                                }
                            }
                            this._aroundMoveListener = setTimeout(lang.hitch(this, "_repositionAll"), dx || dy ? 10 : 50);
                        }
                    },
                    _createWrapper: function(_746) {
                        var _747 = _746._popupWrapper
                          , node = _746.domNode;
                        if (!_747) {
                            _747 = _73a.create("div", {
                                "class": "dijitPopup",
                                style: {
                                    display: "none"
                                },
                                role: "region",
                                "aria-label": _746["aria-label"] || _746.label || _746.name || _746.id
                            }, _746.ownerDocumentBody);
                            _747.appendChild(node);
                            var s = node.style;
                            s.display = "";
                            s.visibility = "";
                            s.position = "";
                            s.top = "0px";
                            _746._popupWrapper = _747;
                            _737.after(_746, "destroy", _741, true);
                            if ("ontouchend"in document) {
                                on(_747, "touchend", function(evt) {
                                    if (!/^(input|button|textarea)$/i.test(evt.target.tagName)) {
                                        evt.preventDefault();
                                    }
                                });
                            }
                            _747.dojoClick = true;
                        }
                        return _747;
                    },
                    moveOffScreen: function(_748) {
                        var _749 = this._createWrapper(_748);
                        var ltr = _73b.isBodyLtr(_748.ownerDocument)
                          , _74a = {
                            visibility: "hidden",
                            top: "-9999px",
                            display: ""
                        };
                        _74a[ltr ? "left" : "right"] = "-9999px";
                        _74a[ltr ? "right" : "left"] = "auto";
                        _73c.set(_749, _74a);
                        return _749;
                    },
                    hide: function(_74b) {
                        var _74c = this._createWrapper(_74b);
                        _73c.set(_74c, {
                            display: "none",
                            height: "auto",
                            overflowY: "visible",
                            border: ""
                        });
                        var node = _74b.domNode;
                        if ("_originalStyle"in node) {
                            node.style.cssText = node._originalStyle;
                        }
                    },
                    getTopPopup: function() {
                        var _74d = this._stack;
                        for (var pi = _74d.length - 1; pi > 0 && _74d[pi].parent === _74d[pi - 1].widget; pi--) {}
                        return _74d[pi];
                    },
                    open: function(args) {
                        var _74e = this._stack
                          , _74f = args.popup
                          , node = _74f.domNode
                          , _750 = args.orient || ["below", "below-alt", "above", "above-alt"]
                          , ltr = args.parent ? args.parent.isLeftToRight() : _73b.isBodyLtr(_74f.ownerDocument)
                          , _751 = args.around
                          , id = (args.around && args.around.id) ? (args.around.id + "_dropdown") : ("popup_" + this._idGen++);
                        while (_74e.length && (!args.parent || !dom.isDescendant(args.parent.domNode, _74e[_74e.length - 1].widget.domNode))) {
                            this.close(_74e[_74e.length - 1].widget);
                        }
                        var _752 = this.moveOffScreen(_74f);
                        if (_74f.startup && !_74f._started) {
                            _74f.startup();
                        }
                        var _753, _754 = _73b.position(node);
                        if ("maxHeight"in args && args.maxHeight != -1) {
                            _753 = args.maxHeight || Infinity;
                        } else {
                            var _755 = _73f.getEffectiveBox(this.ownerDocument)
                              , _756 = _751 ? _73b.position(_751, false) : {
                                y: args.y - (args.padding || 0),
                                h: (args.padding || 0) * 2
                            };
                            _753 = Math.floor(Math.max(_756.y, _755.h - (_756.y + _756.h)));
                        }
                        if (_754.h > _753) {
                            var cs = _73c.getComputedStyle(node)
                              , _757 = cs.borderLeftWidth + " " + cs.borderLeftStyle + " " + cs.borderLeftColor;
                            _73c.set(_752, {
                                overflowY: "scroll",
                                height: _753 + "px",
                                border: _757
                            });
                            node._originalStyle = node.style.cssText;
                            node.style.border = "none";
                        }
                        _739.set(_752, {
                            id: id,
                            style: {
                                zIndex: this._beginZIndex + _74e.length
                            },
                            "class": "dijitPopup " + (_74f.baseClass || _74f["class"] || "").split(" ")[0] + "Popup",
                            dijitPopupParent: args.parent ? args.parent.id : ""
                        });
                        if (_74e.length == 0 && _751) {
                            this._firstAroundNode = _751;
                            this._firstAroundPosition = _73b.position(_751, true);
                            this._aroundMoveListener = setTimeout(lang.hitch(this, "_repositionAll"), 50);
                        }
                        if (has("config-bgIframe") && !_74f.bgIframe) {
                            _74f.bgIframe = new _73e(_752);
                        }
                        var _758 = _74f.orient ? lang.hitch(_74f, "orient") : null
                          , best = _751 ? _73d.around(_752, _751, _750, ltr, _758) : _73d.at(_752, args, _750 == "R" ? ["TR", "BR", "TL", "BL"] : ["TL", "BL", "TR", "BR"], args.padding, _758);
                        _752.style.visibility = "visible";
                        node.style.visibility = "visible";
                        var _759 = [];
                        _759.push(on(_752, "keydown", lang.hitch(this, function(evt) {
                            if (evt.keyCode == keys.ESCAPE && args.onCancel) {
                                evt.stopPropagation();
                                evt.preventDefault();
                                args.onCancel();
                            } else {
                                if (evt.keyCode == keys.TAB) {
                                    evt.stopPropagation();
                                    evt.preventDefault();
                                    var _75a = this.getTopPopup();
                                    if (_75a && _75a.onCancel) {
                                        _75a.onCancel();
                                    }
                                }
                            }
                        })));
                        if (_74f.onCancel && args.onCancel) {
                            _759.push(_74f.on("cancel", args.onCancel));
                        }
                        _759.push(_74f.on(_74f.onExecute ? "execute" : "change", lang.hitch(this, function() {
                            var _75b = this.getTopPopup();
                            if (_75b && _75b.onExecute) {
                                _75b.onExecute();
                            }
                        })));
                        _74e.push({
                            widget: _74f,
                            wrapper: _752,
                            parent: args.parent,
                            onExecute: args.onExecute,
                            onCancel: args.onCancel,
                            onClose: args.onClose,
                            handlers: _759
                        });
                        if (_74f.onOpen) {
                            _74f.onOpen(best);
                        }
                        return best;
                    },
                    close: function(_75c) {
                        var _75d = this._stack;
                        while ((_75c && _736.some(_75d, function(elem) {
                            return elem.widget == _75c;
                        })) || (!_75c && _75d.length)) {
                            var top = _75d.pop()
                              , _75e = top.widget
                              , _75f = top.onClose;
                            if (_75e.bgIframe) {
                                _75e.bgIframe.destroy();
                                delete _75e.bgIframe;
                            }
                            if (_75e.onClose) {
                                _75e.onClose();
                            }
                            var h;
                            while (h = top.handlers.pop()) {
                                h.remove();
                            }
                            if (_75e && _75e.domNode) {
                                this.hide(_75e);
                            }
                            if (_75f) {
                                _75f();
                            }
                        }
                        if (_75d.length == 0 && this._aroundMoveListener) {
                            clearTimeout(this._aroundMoveListener);
                            this._firstAroundNode = this._firstAroundPosition = this._aroundMoveListener = null;
                        }
                    }
                });
                return (_740.popup = new _742());
            });
        },
        "dijit/Editor": function() {
            define(["require", "dojo/_base/array", "dojo/_base/declare", "dojo/Deferred", "dojo/i18n", "dojo/dom-attr", "dojo/dom-class", "dojo/dom-geometry", "dojo/dom-style", "dojo/keys", "dojo/_base/lang", "dojo/sniff", "dojo/string", "dojo/topic", "./_Container", "./Toolbar", "./ToolbarSeparator", "./layout/_LayoutWidget", "./form/ToggleButton", "./_editor/_Plugin", "./_editor/plugins/EnterKeyHandling", "./_editor/html", "./_editor/range", "./_editor/RichText", "./main", "dojo/i18n!./_editor/nls/commands"], function(_760, _761, _762, _763, i18n, _764, _765, _766, _767, keys, lang, has, _768, _769, _76a, _76b, _76c, _76d, _76e, _76f, _770, html, _771, _772, _773) {
                var _774 = _762("dijit.Editor", _772, {
                    plugins: null,
                    extraPlugins: null,
                    constructor: function() {
                        if (!lang.isArray(this.plugins)) {
                            this.plugins = ["undo", "redo", "|", "cut", "copy", "paste", "|", "bold", "italic", "underline", "strikethrough", "|", "insertOrderedList", "insertUnorderedList", "indent", "outdent", "|", "justifyLeft", "justifyRight", "justifyCenter", "justifyFull", _770];
                        }
                        this._plugins = [];
                        this._editInterval = this.editActionInterval * 1000;
                        if (has("ie") || has("trident") || has("edge")) {
                            this.events.push("onBeforeDeactivate");
                            this.events.push("onBeforeActivate");
                        }
                    },
                    postMixInProperties: function() {
                        this.setValueDeferred = new _763();
                        this.inherited(arguments);
                    },
                    postCreate: function() {
                        this.inherited(arguments);
                        this._steps = this._steps.slice(0);
                        this._undoedSteps = this._undoedSteps.slice(0);
                        if (lang.isArray(this.extraPlugins)) {
                            this.plugins = this.plugins.concat(this.extraPlugins);
                        }
                        this.commands = i18n.getLocalization("dijit._editor", "commands", this.lang);
                        if (has("webkit")) {
                            _767.set(this.domNode, "KhtmlUserSelect", "none");
                        }
                    },
                    startup: function() {
                        this.inherited(arguments);
                        if (!this.toolbar) {
                            this.toolbar = new _76b({
                                ownerDocument: this.ownerDocument,
                                dir: this.dir,
                                lang: this.lang,
                                "aria-label": this.id
                            });
                            this.header.appendChild(this.toolbar.domNode);
                        }
                        _761.forEach(this.plugins, this.addPlugin, this);
                        this.setValueDeferred.resolve(true);
                        _765.add(this.iframe.parentNode, "dijitEditorIFrameContainer");
                        _765.add(this.iframe, "dijitEditorIFrame");
                        _764.set(this.iframe, "allowTransparency", true);
                        this.toolbar.startup();
                        this.onNormalizedDisplayChanged();
                    },
                    destroy: function() {
                        _761.forEach(this._plugins, function(p) {
                            if (p && p.destroy) {
                                p.destroy();
                            }
                        });
                        this._plugins = [];
                        this.toolbar.destroyRecursive();
                        delete this.toolbar;
                        this.inherited(arguments);
                    },
                    addPlugin: function(_775, _776) {
                        var args = lang.isString(_775) ? {
                            name: _775
                        } : lang.isFunction(_775) ? {
                            ctor: _775
                        } : _775;
                        if (!args.setEditor) {
                            var o = {
                                "args": args,
                                "plugin": null,
                                "editor": this
                            };
                            if (args.name) {
                                if (_76f.registry[args.name]) {
                                    o.plugin = _76f.registry[args.name](args);
                                } else {
                                    _769.publish(_773._scopeName + ".Editor.getPlugin", o);
                                }
                            }
                            if (!o.plugin) {
                                try {
                                    var pc = args.ctor || lang.getObject(args.name) || _760(args.name);
                                    if (pc) {
                                        o.plugin = new pc(args);
                                    }
                                } catch (e) {
                                    throw new Error(this.id + ": cannot find plugin [" + args.name + "]");
                                }
                            }
                            if (!o.plugin) {
                                throw new Error(this.id + ": cannot find plugin [" + args.name + "]");
                            }
                            _775 = o.plugin;
                        }
                        if (arguments.length > 1) {
                            this._plugins[_776] = _775;
                        } else {
                            this._plugins.push(_775);
                        }
                        _775.setEditor(this);
                        if (lang.isFunction(_775.setToolbar)) {
                            _775.setToolbar(this.toolbar);
                        }
                    },
                    resize: function(size) {
                        if (size) {
                            _76d.prototype.resize.apply(this, arguments);
                        }
                    },
                    layout: function() {
                        var _777 = (this._contentBox.h - (this.getHeaderHeight() + this.getFooterHeight() + _766.getPadBorderExtents(this.iframe.parentNode).h + _766.getMarginExtents(this.iframe.parentNode).h));
                        this.editingArea.style.height = _777 + "px";
                        if (this.iframe) {
                            this.iframe.style.height = "100%";
                        }
                        this._layoutMode = true;
                    },
                    _onIEMouseDown: function(e) {
                        var _778;
                        var b = this.document.body;
                        var _779 = b.clientWidth;
                        var _77a = b.clientHeight;
                        var _77b = b.clientLeft;
                        var _77c = b.offsetWidth;
                        var _77d = b.offsetHeight;
                        var _77e = b.offsetLeft;
                        if (/^rtl$/i.test(b.dir || "")) {
                            if (_779 < _77c && e.x > _779 && e.x < _77c) {
                                _778 = true;
                            }
                        } else {
                            if (e.x < _77b && e.x > _77e) {
                                _778 = true;
                            }
                        }
                        if (!_778) {
                            if (_77a < _77d && e.y > _77a && e.y < _77d) {
                                _778 = true;
                            }
                        }
                        if (!_778) {
                            delete this._cursorToStart;
                            delete this._savedSelection;
                            if (e.target.tagName == "BODY") {
                                this.defer("placeCursorAtEnd");
                            }
                            this.inherited(arguments);
                        }
                    },
                    onBeforeActivate: function() {
                        this._restoreSelection();
                    },
                    onBeforeDeactivate: function(e) {
                        if (this.customUndo) {
                            this.endEditing(true);
                        }
                        if (e.target.tagName != "BODY") {
                            this._saveSelection();
                        }
                    },
                    customUndo: true,
                    editActionInterval: 3,
                    beginEditing: function(cmd) {
                        if (!this._inEditing) {
                            this._inEditing = true;
                            this._beginEditing(cmd);
                        }
                        if (this.editActionInterval > 0) {
                            if (this._editTimer) {
                                this._editTimer.remove();
                            }
                            this._editTimer = this.defer("endEditing", this._editInterval);
                        }
                    },
                    _steps: [],
                    _undoedSteps: [],
                    execCommand: function(cmd) {
                        if (this.customUndo && (cmd == "undo" || cmd == "redo")) {
                            return this[cmd]();
                        } else {
                            if (this.customUndo) {
                                this.endEditing();
                                this._beginEditing();
                            }
                            var r = this.inherited(arguments);
                            if (this.customUndo) {
                                this._endEditing();
                            }
                            return r;
                        }
                    },
                    _pasteImpl: function() {
                        return this._clipboardCommand("paste");
                    },
                    _cutImpl: function() {
                        return this._clipboardCommand("cut");
                    },
                    _copyImpl: function() {
                        return this._clipboardCommand("copy");
                    },
                    _clipboardCommand: function(cmd) {
                        var r;
                        try {
                            r = this.document.execCommand(cmd, false, null);
                            if (has("webkit") && !r) {
                                throw {};
                            }
                        } catch (e) {
                            var sub = _768.substitute
                              , _77f = {
                                cut: "X",
                                copy: "C",
                                paste: "V"
                            };
                            alert(sub(this.commands.systemShortcut, [this.commands[cmd], sub(this.commands[has("mac") ? "appleKey" : "ctrlKey"], [_77f[cmd]])]));
                            r = false;
                        }
                        return r;
                    },
                    queryCommandEnabled: function(cmd) {
                        if (this.customUndo && (cmd == "undo" || cmd == "redo")) {
                            return cmd == "undo" ? (this._steps.length > 1) : (this._undoedSteps.length > 0);
                        } else {
                            return this.inherited(arguments);
                        }
                    },
                    _moveToBookmark: function(b) {
                        var _780 = b.mark;
                        var mark = b.mark;
                        var col = b.isCollapsed;
                        var r, _781, _782, sel;
                        if (mark) {
                            if (has("ie") < 9 || (has("ie") === 9 && has("quirks"))) {
                                if (lang.isArray(mark)) {
                                    _780 = [];
                                    _761.forEach(mark, function(n) {
                                        _780.push(_771.getNode(n, this.editNode));
                                    }, this);
                                    this.selection.moveToBookmark({
                                        mark: _780,
                                        isCollapsed: col
                                    });
                                } else {
                                    if (mark.startContainer && mark.endContainer) {
                                        sel = _771.getSelection(this.window);
                                        if (sel && sel.removeAllRanges) {
                                            sel.removeAllRanges();
                                            r = _771.create(this.window);
                                            _781 = _771.getNode(mark.startContainer, this.editNode);
                                            _782 = _771.getNode(mark.endContainer, this.editNode);
                                            if (_781 && _782) {
                                                r.setStart(_781, mark.startOffset);
                                                r.setEnd(_782, mark.endOffset);
                                                sel.addRange(r);
                                            }
                                        }
                                    }
                                }
                            } else {
                                sel = _771.getSelection(this.window);
                                if (sel && sel.removeAllRanges) {
                                    sel.removeAllRanges();
                                    r = _771.create(this.window);
                                    _781 = _771.getNode(mark.startContainer, this.editNode);
                                    _782 = _771.getNode(mark.endContainer, this.editNode);
                                    if (_781 && _782) {
                                        r.setStart(_781, mark.startOffset);
                                        r.setEnd(_782, mark.endOffset);
                                        sel.addRange(r);
                                    }
                                }
                            }
                        }
                    },
                    _changeToStep: function(from, to) {
                        this.setValue(to.text);
                        var b = to.bookmark;
                        if (!b) {
                            return;
                        }
                        this._moveToBookmark(b);
                    },
                    undo: function() {
                        var ret = false;
                        if (!this._undoRedoActive) {
                            this._undoRedoActive = true;
                            this.endEditing(true);
                            var s = this._steps.pop();
                            if (s && this._steps.length > 0) {
                                this.focus();
                                this._changeToStep(s, this._steps[this._steps.length - 1]);
                                this._undoedSteps.push(s);
                                this.onDisplayChanged();
                                delete this._undoRedoActive;
                                ret = true;
                            }
                            delete this._undoRedoActive;
                        }
                        return ret;
                    },
                    redo: function() {
                        var ret = false;
                        if (!this._undoRedoActive) {
                            this._undoRedoActive = true;
                            this.endEditing(true);
                            var s = this._undoedSteps.pop();
                            if (s && this._steps.length > 0) {
                                this.focus();
                                this._changeToStep(this._steps[this._steps.length - 1], s);
                                this._steps.push(s);
                                this.onDisplayChanged();
                                ret = true;
                            }
                            delete this._undoRedoActive;
                        }
                        return ret;
                    },
                    endEditing: function(_783) {
                        if (this._editTimer) {
                            this._editTimer = this._editTimer.remove();
                        }
                        if (this._inEditing) {
                            this._endEditing(_783);
                            this._inEditing = false;
                        }
                    },
                    _getBookmark: function() {
                        var b = this.selection.getBookmark();
                        var tmp = [];
                        if (b && b.mark) {
                            var mark = b.mark;
                            if (has("ie") < 9 || (has("ie") === 9 && has("quirks"))) {
                                var sel = _771.getSelection(this.window);
                                if (!lang.isArray(mark)) {
                                    if (sel) {
                                        var _784;
                                        if (sel.rangeCount) {
                                            _784 = sel.getRangeAt(0);
                                        }
                                        if (_784) {
                                            b.mark = _784.cloneRange();
                                        } else {
                                            b.mark = this.selection.getBookmark();
                                        }
                                    }
                                } else {
                                    _761.forEach(b.mark, function(n) {
                                        tmp.push(_771.getIndex(n, this.editNode).o);
                                    }, this);
                                    b.mark = tmp;
                                }
                            }
                            try {
                                if (b.mark && b.mark.startContainer) {
                                    tmp = _771.getIndex(b.mark.startContainer, this.editNode).o;
                                    b.mark = {
                                        startContainer: tmp,
                                        startOffset: b.mark.startOffset,
                                        endContainer: b.mark.endContainer === b.mark.startContainer ? tmp : _771.getIndex(b.mark.endContainer, this.editNode).o,
                                        endOffset: b.mark.endOffset
                                    };
                                }
                            } catch (e) {
                                b.mark = null;
                            }
                        }
                        return b;
                    },
                    _beginEditing: function() {
                        if (this._steps.length === 0) {
                            this._steps.push({
                                "text": html.getChildrenHtml(this.editNode),
                                "bookmark": this._getBookmark()
                            });
                        }
                    },
                    _endEditing: function() {
                        var v = html.getChildrenHtml(this.editNode);
                        this._undoedSteps = [];
                        this._steps.push({
                            text: v,
                            bookmark: this._getBookmark()
                        });
                    },
                    onKeyDown: function(e) {
                        if (!has("ie") && !this.iframe && e.keyCode == keys.TAB && !this.tabIndent) {
                            this._saveSelection();
                        }
                        if (!this.customUndo) {
                            this.inherited(arguments);
                            return;
                        }
                        var k = e.keyCode;
                        if (e.ctrlKey && !e.shiftKey && !e.altKey) {
                            if (k == 90 || k == 122) {
                                e.stopPropagation();
                                e.preventDefault();
                                this.undo();
                                return;
                            } else {
                                if (k == 89 || k == 121) {
                                    e.stopPropagation();
                                    e.preventDefault();
                                    this.redo();
                                    return;
                                }
                            }
                        }
                        this.inherited(arguments);
                        switch (k) {
                        case keys.ENTER:
                        case keys.BACKSPACE:
                        case keys.DELETE:
                            this.beginEditing();
                            break;
                        case 88:
                        case 86:
                            if (e.ctrlKey && !e.altKey && !e.metaKey) {
                                this.endEditing();
                                if (e.keyCode == 88) {
                                    this.beginEditing("cut");
                                } else {
                                    this.beginEditing("paste");
                                }
                                this.defer("endEditing", 1);
                                break;
                            }
                        default:
                            if (!e.ctrlKey && !e.altKey && !e.metaKey && (e.keyCode < keys.F1 || e.keyCode > keys.F15)) {
                                this.beginEditing();
                                break;
                            }
                        case keys.ALT:
                            this.endEditing();
                            break;
                        case keys.UP_ARROW:
                        case keys.DOWN_ARROW:
                        case keys.LEFT_ARROW:
                        case keys.RIGHT_ARROW:
                        case keys.HOME:
                        case keys.END:
                        case keys.PAGE_UP:
                        case keys.PAGE_DOWN:
                            this.endEditing(true);
                            break;
                        case keys.CTRL:
                        case keys.SHIFT:
                        case keys.TAB:
                            break;
                        }
                    },
                    _onBlur: function() {
                        this.inherited(arguments);
                        this.endEditing(true);
                    },
                    _saveSelection: function() {
                        try {
                            this._savedSelection = this._getBookmark();
                        } catch (e) {}
                    },
                    _restoreSelection: function() {
                        if (this._savedSelection) {
                            delete this._cursorToStart;
                            if (this.selection.isCollapsed()) {
                                this._moveToBookmark(this._savedSelection);
                            }
                            delete this._savedSelection;
                        }
                    },
                    onClick: function() {
                        this.endEditing(true);
                        this.inherited(arguments);
                    },
                    replaceValue: function(html) {
                        if (!this.customUndo) {
                            this.inherited(arguments);
                        } else {
                            if (this.isClosed) {
                                this.setValue(html);
                            } else {
                                this.beginEditing();
                                if (!html) {
                                    html = "&#160;";
                                }
                                this.setValue(html);
                                this.endEditing();
                            }
                        }
                    },
                    _setDisabledAttr: function(_785) {
                        this.setValueDeferred.then(lang.hitch(this, function() {
                            if ((!this.disabled && _785) || (!this._buttonEnabledPlugins && _785)) {
                                _761.forEach(this._plugins, function(p) {
                                    p.set("disabled", true);
                                });
                            } else {
                                if (this.disabled && !_785) {
                                    _761.forEach(this._plugins, function(p) {
                                        p.set("disabled", false);
                                    });
                                }
                            }
                        }));
                        this.inherited(arguments);
                    },
                    _setStateClass: function() {
                        try {
                            this.inherited(arguments);
                            if (this.document && this.document.body) {
                                _767.set(this.document.body, "color", _767.get(this.iframe, "color"));
                                _767.set(this.document.body, "background-color", _767.get(this.iframe, "background-color"));
                            }
                        } catch (e) {}
                    }
                });
                function _786(args) {
                    return new _76f({
                        command: args.name
                    });
                }
                ;function _787(args) {
                    return new _76f({
                        buttonClass: _76e,
                        command: args.name
                    });
                }
                ;lang.mixin(_76f.registry, {
                    "undo": _786,
                    "redo": _786,
                    "cut": _786,
                    "copy": _786,
                    "paste": _786,
                    "insertOrderedList": _786,
                    "insertUnorderedList": _786,
                    "indent": _786,
                    "outdent": _786,
                    "justifyCenter": _786,
                    "justifyFull": _786,
                    "justifyLeft": _786,
                    "justifyRight": _786,
                    "delete": _786,
                    "selectAll": _786,
                    "removeFormat": _786,
                    "unlink": _786,
                    "insertHorizontalRule": _786,
                    "bold": _787,
                    "italic": _787,
                    "underline": _787,
                    "strikethrough": _787,
                    "subscript": _787,
                    "superscript": _787,
                    "|": function() {
                        return new _76f({
                            setEditor: function(_788) {
                                this.editor = _788;
                                this.button = new _76c({
                                    ownerDocument: _788.ownerDocument
                                });
                            }
                        });
                    }
                });
                return _774;
            });
        },
        "dijit/Toolbar": function() {
            define(["require", "dojo/_base/declare", "dojo/has", "dojo/keys", "dojo/ready", "./_Widget", "./_KeyNavContainer", "./_TemplatedMixin"], function(_789, _78a, has, keys, _78b, _78c, _78d, _78e) {
                if (has("dijit-legacy-requires")) {
                    _78b(0, function() {
                        var _78f = ["dijit/ToolbarSeparator"];
                        _789(_78f);
                    });
                }
                return _78a("dijit.Toolbar", [_78c, _78e, _78d], {
                    templateString: "<div class=\"dijit\" role=\"toolbar\" tabIndex=\"${tabIndex}\" data-dojo-attach-point=\"containerNode\">" + "</div>",
                    baseClass: "dijitToolbar",
                    _onLeftArrow: function() {
                        this.focusPrev();
                    },
                    _onRightArrow: function() {
                        this.focusNext();
                    }
                });
            });
        },
        "dijit/_KeyNavContainer": function() {
            define(["dojo/_base/array", "dojo/_base/declare", "dojo/dom-attr", "dojo/_base/kernel", "dojo/keys", "dojo/_base/lang", "./registry", "./_Container", "./_FocusMixin", "./_KeyNavMixin"], function(_790, _791, _792, _793, keys, lang, _794, _795, _796, _797) {
                return _791("dijit._KeyNavContainer", [_796, _797, _795], {
                    connectKeyNavHandlers: function(_798, _799) {
                        var _79a = (this._keyNavCodes = {});
                        var prev = lang.hitch(this, "focusPrev");
                        var next = lang.hitch(this, "focusNext");
                        _790.forEach(_798, function(code) {
                            _79a[code] = prev;
                        });
                        _790.forEach(_799, function(code) {
                            _79a[code] = next;
                        });
                        _79a[keys.HOME] = lang.hitch(this, "focusFirstChild");
                        _79a[keys.END] = lang.hitch(this, "focusLastChild");
                    },
                    startupKeyNavChildren: function() {
                        _793.deprecated("startupKeyNavChildren() call no longer needed", "", "2.0");
                    },
                    startup: function() {
                        this.inherited(arguments);
                        _790.forEach(this.getChildren(), lang.hitch(this, "_startupChild"));
                    },
                    addChild: function(_79b, _79c) {
                        this.inherited(arguments);
                        this._startupChild(_79b);
                    },
                    _startupChild: function(_79d) {
                        _79d.set("tabIndex", "-1");
                    },
                    _getFirst: function() {
                        var _79e = this.getChildren();
                        return _79e.length ? _79e[0] : null;
                    },
                    _getLast: function() {
                        var _79f = this.getChildren();
                        return _79f.length ? _79f[_79f.length - 1] : null;
                    },
                    focusNext: function() {
                        this.focusChild(this._getNextFocusableChild(this.focusedChild, 1));
                    },
                    focusPrev: function() {
                        this.focusChild(this._getNextFocusableChild(this.focusedChild, -1), true);
                    },
                    childSelector: function(node) {
                        var node = _794.byNode(node);
                        return node && node.getParent() == this;
                    }
                });
            });
        },
        "dijit/_KeyNavMixin": function() {
            define(["dojo/_base/array", "dojo/_base/declare", "dojo/dom-attr", "dojo/keys", "dojo/_base/lang", "dojo/on", "dijit/registry", "dijit/_FocusMixin"], function(_7a0, _7a1, _7a2, keys, lang, on, _7a3, _7a4) {
                return _7a1("dijit._KeyNavMixin", _7a4, {
                    tabIndex: "0",
                    childSelector: null,
                    postCreate: function() {
                        this.inherited(arguments);
                        _7a2.set(this.domNode, "tabIndex", this.tabIndex);
                        if (!this._keyNavCodes) {
                            var _7a5 = this._keyNavCodes = {};
                            _7a5[keys.HOME] = lang.hitch(this, "focusFirstChild");
                            _7a5[keys.END] = lang.hitch(this, "focusLastChild");
                            _7a5[this.isLeftToRight() ? keys.LEFT_ARROW : keys.RIGHT_ARROW] = lang.hitch(this, "_onLeftArrow");
                            _7a5[this.isLeftToRight() ? keys.RIGHT_ARROW : keys.LEFT_ARROW] = lang.hitch(this, "_onRightArrow");
                            _7a5[keys.UP_ARROW] = lang.hitch(this, "_onUpArrow");
                            _7a5[keys.DOWN_ARROW] = lang.hitch(this, "_onDownArrow");
                        }
                        var self = this
                          , _7a6 = typeof this.childSelector == "string" ? this.childSelector : lang.hitch(this, "childSelector");
                        this.own(on(this.domNode, "keypress", lang.hitch(this, "_onContainerKeypress")), on(this.domNode, "keydown", lang.hitch(this, "_onContainerKeydown")), on(this.domNode, "focus", lang.hitch(this, "_onContainerFocus")), on(this.containerNode, on.selector(_7a6, "focusin"), function(evt) {
                            self._onChildFocus(_7a3.getEnclosingWidget(this), evt);
                        }));
                    },
                    _onLeftArrow: function() {},
                    _onRightArrow: function() {},
                    _onUpArrow: function() {},
                    _onDownArrow: function() {},
                    focus: function() {
                        this.focusFirstChild();
                    },
                    _getFirstFocusableChild: function() {
                        return this._getNextFocusableChild(null, 1);
                    },
                    _getLastFocusableChild: function() {
                        return this._getNextFocusableChild(null, -1);
                    },
                    focusFirstChild: function() {
                        this.focusChild(this._getFirstFocusableChild());
                    },
                    focusLastChild: function() {
                        this.focusChild(this._getLastFocusableChild());
                    },
                    focusChild: function(_7a7, last) {
                        if (!_7a7) {
                            return;
                        }
                        if (this.focusedChild && _7a7 !== this.focusedChild) {
                            this._onChildBlur(this.focusedChild);
                        }
                        _7a7.set("tabIndex", this.tabIndex);
                        _7a7.focus(last ? "end" : "start");
                    },
                    _onContainerFocus: function(evt) {
                        if (evt.target !== this.domNode || this.focusedChild) {
                            return;
                        }
                        this.focus();
                    },
                    _onFocus: function() {
                        _7a2.set(this.domNode, "tabIndex", "-1");
                        this.inherited(arguments);
                    },
                    _onBlur: function(evt) {
                        _7a2.set(this.domNode, "tabIndex", this.tabIndex);
                        if (this.focusedChild) {
                            this.focusedChild.set("tabIndex", "-1");
                            this.lastFocusedChild = this.focusedChild;
                            this._set("focusedChild", null);
                        }
                        this.inherited(arguments);
                    },
                    _onChildFocus: function(_7a8) {
                        if (_7a8 && _7a8 != this.focusedChild) {
                            if (this.focusedChild && !this.focusedChild._destroyed) {
                                this.focusedChild.set("tabIndex", "-1");
                            }
                            _7a8.set("tabIndex", this.tabIndex);
                            this.lastFocused = _7a8;
                            this._set("focusedChild", _7a8);
                        }
                    },
                    _searchString: "",
                    multiCharSearchDuration: 1000,
                    onKeyboardSearch: function(item, evt, _7a9, _7aa) {
                        if (item) {
                            this.focusChild(item);
                        }
                    },
                    _keyboardSearchCompare: function(item, _7ab) {
                        var _7ac = item.domNode
                          , text = item.label || (_7ac.focusNode ? _7ac.focusNode.label : "") || _7ac.innerText || _7ac.textContent || ""
                          , _7ad = text.replace(/^\s+/, "").substr(0, _7ab.length).toLowerCase();
                        return (!!_7ab.length && _7ad == _7ab) ? -1 : 0;
                    },
                    _onContainerKeydown: function(evt) {
                        var func = this._keyNavCodes[evt.keyCode];
                        if (func) {
                            func(evt, this.focusedChild);
                            evt.stopPropagation();
                            evt.preventDefault();
                            this._searchString = "";
                        } else {
                            if (evt.keyCode == keys.SPACE && this._searchTimer && !(evt.ctrlKey || evt.altKey || evt.metaKey)) {
                                evt.stopImmediatePropagation();
                                evt.preventDefault();
                                this._keyboardSearch(evt, " ");
                            }
                        }
                    },
                    _onContainerKeypress: function(evt) {
                        if (evt.charCode <= keys.SPACE || evt.ctrlKey || evt.altKey || evt.metaKey) {
                            return;
                        }
                        evt.preventDefault();
                        evt.stopPropagation();
                        this._keyboardSearch(evt, String.fromCharCode(evt.charCode).toLowerCase());
                    },
                    _keyboardSearch: function(evt, _7ae) {
                        var _7af = null, _7b0, _7b1 = 0, _7b2 = lang.hitch(this, function() {
                            if (this._searchTimer) {
                                this._searchTimer.remove();
                            }
                            this._searchString += _7ae;
                            var _7b3 = /^(.)\1*$/.test(this._searchString);
                            var _7b4 = _7b3 ? 1 : this._searchString.length;
                            _7b0 = this._searchString.substr(0, _7b4);
                            this._searchTimer = this.defer(function() {
                                this._searchTimer = null;
                                this._searchString = "";
                            }, this.multiCharSearchDuration);
                            var _7b5 = this.focusedChild || null;
                            if (_7b4 == 1 || !_7b5) {
                                _7b5 = this._getNextFocusableChild(_7b5, 1);
                                if (!_7b5) {
                                    return;
                                }
                            }
                            var stop = _7b5;
                            do {
                                var rc = this._keyboardSearchCompare(_7b5, _7b0);
                                if (!!rc && _7b1++ == 0) {
                                    _7af = _7b5;
                                }
                                if (rc == -1) {
                                    _7b1 = -1;
                                    break;
                                }
                                _7b5 = this._getNextFocusableChild(_7b5, 1);
                            } while (_7b5 && _7b5 != stop);
                        });
                        _7b2();
                        this.onKeyboardSearch(_7af, evt, _7b0, _7b1);
                    },
                    _onChildBlur: function() {},
                    _getNextFocusableChild: function(_7b6, dir) {
                        var _7b7 = _7b6;
                        do {
                            if (!_7b6) {
                                _7b6 = this[dir > 0 ? "_getFirst" : "_getLast"]();
                                if (!_7b6) {
                                    break;
                                }
                            } else {
                                _7b6 = this._getNext(_7b6, dir);
                            }
                            if (_7b6 != null && _7b6 != _7b7 && _7b6.isFocusable()) {
                                return _7b6;
                            }
                        } while (_7b6 != _7b7);return null;
                    },
                    _getFirst: function() {
                        return null;
                    },
                    _getLast: function() {
                        return null;
                    },
                    _getNext: function(_7b8, dir) {
                        if (_7b8) {
                            _7b8 = _7b8.domNode;
                            while (_7b8) {
                                _7b8 = _7b8[dir < 0 ? "previousSibling" : "nextSibling"];
                                if (_7b8 && "getAttribute"in _7b8) {
                                    var w = _7a3.byNode(_7b8);
                                    if (w) {
                                        return w;
                                    }
                                }
                            }
                        }
                        return null;
                    }
                });
            });
        },
        "dijit/ToolbarSeparator": function() {
            define(["dojo/_base/declare", "dojo/dom", "./_Widget", "./_TemplatedMixin"], function(_7b9, dom, _7ba, _7bb) {
                return _7b9("dijit.ToolbarSeparator", [_7ba, _7bb], {
                    templateString: "<div class=\"dijitToolbarSeparator dijitInline\" role=\"presentation\"></div>",
                    buildRendering: function() {
                        this.inherited(arguments);
                        dom.setSelectable(this.domNode, false);
                    },
                    isFocusable: function() {
                        return false;
                    }
                });
            });
        },
        "dijit/layout/_LayoutWidget": function() {
            define(["dojo/_base/lang", "../_Widget", "../_Container", "../_Contained", "../Viewport", "dojo/_base/declare", "dojo/dom-class", "dojo/dom-geometry", "dojo/dom-style"], function(lang, _7bc, _7bd, _7be, _7bf, _7c0, _7c1, _7c2, _7c3) {
                return _7c0("dijit.layout._LayoutWidget", [_7bc, _7bd, _7be], {
                    baseClass: "dijitLayoutContainer",
                    isLayoutContainer: true,
                    _setTitleAttr: null,
                    buildRendering: function() {
                        this.inherited(arguments);
                        _7c1.add(this.domNode, "dijitContainer");
                    },
                    startup: function() {
                        if (this._started) {
                            return;
                        }
                        this.inherited(arguments);
                        var _7c4 = this.getParent && this.getParent();
                        if (!(_7c4 && _7c4.isLayoutContainer)) {
                            this.resize();
                            this.own(_7bf.on("resize", lang.hitch(this, "resize")));
                        }
                    },
                    resize: function(_7c5, _7c6) {
                        var node = this.domNode;
                        if (_7c5) {
                            _7c2.setMarginBox(node, _7c5);
                        }
                        var mb = _7c6 || {};
                        lang.mixin(mb, _7c5 || {});
                        if (!("h"in mb) || !("w"in mb)) {
                            mb = lang.mixin(_7c2.getMarginBox(node), mb);
                        }
                        var cs = _7c3.getComputedStyle(node);
                        var me = _7c2.getMarginExtents(node, cs);
                        var be = _7c2.getBorderExtents(node, cs);
                        var bb = (this._borderBox = {
                            w: mb.w - (me.w + be.w),
                            h: mb.h - (me.h + be.h)
                        });
                        var pe = _7c2.getPadExtents(node, cs);
                        this._contentBox = {
                            l: _7c3.toPixelValue(node, cs.paddingLeft),
                            t: _7c3.toPixelValue(node, cs.paddingTop),
                            w: bb.w - pe.w,
                            h: bb.h - pe.h
                        };
                        this.layout();
                    },
                    layout: function() {},
                    _setupChild: function(_7c7) {
                        var cls = this.baseClass + "-child " + (_7c7.baseClass ? this.baseClass + "-" + _7c7.baseClass : "");
                        _7c1.add(_7c7.domNode, cls);
                    },
                    addChild: function(_7c8, _7c9) {
                        this.inherited(arguments);
                        if (this._started) {
                            this._setupChild(_7c8);
                        }
                    },
                    removeChild: function(_7ca) {
                        var cls = this.baseClass + "-child" + (_7ca.baseClass ? " " + this.baseClass + "-" + _7ca.baseClass : "");
                        _7c1.remove(_7ca.domNode, cls);
                        this.inherited(arguments);
                    }
                });
            });
        },
        "dijit/_Contained": function() {
            define(["dojo/_base/declare", "./registry"], function(_7cb, _7cc) {
                return _7cb("dijit._Contained", null, {
                    _getSibling: function(_7cd) {
                        var p = this.getParent();
                        return (p && p._getSiblingOfChild && p._getSiblingOfChild(this, _7cd == "previous" ? -1 : 1)) || null;
                    },
                    getPreviousSibling: function() {
                        return this._getSibling("previous");
                    },
                    getNextSibling: function() {
                        return this._getSibling("next");
                    },
                    getIndexInParent: function() {
                        var p = this.getParent();
                        if (!p || !p.getIndexOfChild) {
                            return -1;
                        }
                        return p.getIndexOfChild(this);
                    }
                });
            });
        },
        "dijit/form/ToggleButton": function() {
            define(["dojo/_base/declare", "dojo/_base/kernel", "./Button", "./_ToggleButtonMixin"], function(_7ce, _7cf, _7d0, _7d1) {
                return _7ce("dijit.form.ToggleButton", [_7d0, _7d1], {
                    baseClass: "dijitToggleButton",
                    setChecked: function(_7d2) {
                        _7cf.deprecated("setChecked(" + _7d2 + ") is deprecated. Use set('checked'," + _7d2 + ") instead.", "", "2.0");
                        this.set("checked", _7d2);
                    }
                });
            });
        },
        "dijit/form/Button": function() {
            define(["require", "dojo/_base/declare", "dojo/dom-class", "dojo/has", "dojo/_base/kernel", "dojo/_base/lang", "dojo/ready", "./_FormWidget", "./_ButtonMixin", "dojo/text!./templates/Button.html", "../a11yclick"], function(_7d3, _7d4, _7d5, has, _7d6, lang, _7d7, _7d8, _7d9, _7da) {
                if (has("dijit-legacy-requires")) {
                    _7d7(0, function() {
                        var _7db = ["dijit/form/DropDownButton", "dijit/form/ComboButton", "dijit/form/ToggleButton"];
                        _7d3(_7db);
                    });
                }
                var _7dc = _7d4("dijit.form.Button" + (has("dojo-bidi") ? "_NoBidi" : ""), [_7d8, _7d9], {
                    showLabel: true,
                    iconClass: "dijitNoIcon",
                    _setIconClassAttr: {
                        node: "iconNode",
                        type: "class"
                    },
                    baseClass: "dijitButton",
                    templateString: _7da,
                    _setValueAttr: "valueNode",
                    _setNameAttr: function(name) {
                        if (this.valueNode) {
                            this.valueNode.setAttribute("name", name);
                        }
                    },
                    postCreate: function() {
                        this.inherited(arguments);
                        this._setLabelFromContainer();
                    },
                    _setLabelFromContainer: function() {
                        if (this.containerNode && !this.label) {
                            this.label = lang.trim(this.containerNode.innerHTML);
                            this.onLabelSet();
                        }
                    },
                    _setShowLabelAttr: function(val) {
                        if (this.containerNode) {
                            _7d5.toggle(this.containerNode, "dijitDisplayNone", !val);
                        }
                        this._set("showLabel", val);
                    },
                    setLabel: function(_7dd) {
                        _7d6.deprecated("dijit.form.Button.setLabel() is deprecated.  Use set('label', ...) instead.", "", "2.0");
                        this.set("label", _7dd);
                    },
                    onLabelSet: function() {
                        this.inherited(arguments);
                        if (!this.showLabel && !("title"in this.params)) {
                            this.titleNode.title = lang.trim(this.containerNode.innerText || this.containerNode.textContent || "");
                        }
                    }
                });
                if (has("dojo-bidi")) {
                    _7dc = _7d4("dijit.form.Button", _7dc, {
                        onLabelSet: function() {
                            this.inherited(arguments);
                            if (this.titleNode.title) {
                                this.applyTextDir(this.titleNode, this.titleNode.title);
                            }
                        },
                        _setTextDirAttr: function(_7de) {
                            if (this._created && this.textDir != _7de) {
                                this._set("textDir", _7de);
                                this._setLabelAttr(this.label);
                            }
                        }
                    });
                }
                return _7dc;
            });
        },
        "dijit/form/_ButtonMixin": function() {
            define(["dojo/_base/declare", "dojo/dom", "dojo/has", "../registry"], function(_7df, dom, has, _7e0) {
                var _7e1 = _7df("dijit.form._ButtonMixin" + (has("dojo-bidi") ? "_NoBidi" : ""), null, {
                    label: "",
                    type: "button",
                    __onClick: function(e) {
                        e.stopPropagation();
                        e.preventDefault();
                        if (!this.disabled) {
                            this.valueNode.click(e);
                        }
                        return false;
                    },
                    _onClick: function(e) {
                        if (this.disabled) {
                            e.stopPropagation();
                            e.preventDefault();
                            return false;
                        }
                        if (this.onClick(e) === false) {
                            e.preventDefault();
                        }
                        var _7e2 = e.defaultPrevented;
                        if (!_7e2 && this.type == "submit" && !(this.valueNode || this.focusNode).form) {
                            for (var node = this.domNode; node.parentNode; node = node.parentNode) {
                                var _7e3 = _7e0.byNode(node);
                                if (_7e3 && typeof _7e3._onSubmit == "function") {
                                    _7e3._onSubmit(e);
                                    e.preventDefault();
                                    _7e2 = true;
                                    break;
                                }
                            }
                        }
                        return !_7e2;
                    },
                    postCreate: function() {
                        this.inherited(arguments);
                        dom.setSelectable(this.focusNode, false);
                    },
                    onClick: function() {
                        return true;
                    },
                    _setLabelAttr: function(_7e4) {
                        this._set("label", _7e4);
                        var _7e5 = this.containerNode || this.focusNode;
                        _7e5.innerHTML = _7e4;
                        this.onLabelSet();
                    },
                    onLabelSet: function() {}
                });
                if (has("dojo-bidi")) {
                    _7e1 = _7df("dijit.form._ButtonMixin", _7e1, {
                        onLabelSet: function() {
                            this.inherited(arguments);
                            var _7e6 = this.containerNode || this.focusNode;
                            this.applyTextDir(_7e6);
                        }
                    });
                }
                return _7e1;
            });
        },
        "dijit/form/_ToggleButtonMixin": function() {
            define(["dojo/_base/declare", "dojo/dom-attr"], function(_7e7, _7e8) {
                return _7e7("dijit.form._ToggleButtonMixin", null, {
                    checked: false,
                    _aria_attr: "aria-pressed",
                    _onClick: function(evt) {
                        var _7e9 = this.checked;
                        this._set("checked", !_7e9);
                        var ret = this.inherited(arguments);
                        this.set("checked", ret ? this.checked : _7e9);
                        return ret;
                    },
                    _setCheckedAttr: function(_7ea, _7eb) {
                        this._set("checked", _7ea);
                        var node = this.focusNode || this.domNode;
                        if (this._created) {
                            if (_7e8.get(node, "checked") != !!_7ea) {
                                _7e8.set(node, "checked", !!_7ea);
                            }
                        }
                        node.setAttribute(this._aria_attr, String(_7ea));
                        this._handleOnChange(_7ea, _7eb);
                    },
                    postCreate: function() {
                        this.inherited(arguments);
                        var node = this.focusNode || this.domNode;
                        if (this.checked) {
                            node.setAttribute("checked", "checked");
                        }
                        if (this._resetValue === undefined) {
                            this._lastValueReported = this._resetValue = this.checked;
                        }
                    },
                    reset: function() {
                        this._hasBeenBlurred = false;
                        this.set("checked", this.params.checked || false);
                    }
                });
            });
        },
        "dijit/_editor/_Plugin": function() {
            define(["dojo/_base/connect", "dojo/_base/declare", "dojo/_base/lang", "../Destroyable", "../form/Button"], function(_7ec, _7ed, lang, _7ee, _7ef) {
                var _7f0 = _7ed("dijit._editor._Plugin", _7ee, {
                    constructor: function(args) {
                        this.params = args || {};
                        lang.mixin(this, this.params);
                        this._attrPairNames = {};
                    },
                    editor: null,
                    iconClassPrefix: "dijitEditorIcon",
                    button: null,
                    command: "",
                    useDefaultCommand: true,
                    buttonClass: _7ef,
                    disabled: false,
                    getLabel: function(key) {
                        return this.editor.commands[key];
                    },
                    _initButton: function() {
                        if (this.command.length) {
                            var _7f1 = this.getLabel(this.command)
                              , _7f2 = this.editor
                              , _7f3 = this.iconClassPrefix + " " + this.iconClassPrefix + this.command.charAt(0).toUpperCase() + this.command.substr(1);
                            if (!this.button) {
                                var _7f4 = lang.mixin({
                                    label: _7f1,
                                    ownerDocument: _7f2.ownerDocument,
                                    dir: _7f2.dir,
                                    lang: _7f2.lang,
                                    showLabel: false,
                                    iconClass: _7f3,
                                    dropDown: this.dropDown,
                                    tabIndex: "-1"
                                }, this.params || {});
                                delete _7f4.name;
                                this.button = new this.buttonClass(_7f4);
                            }
                        }
                        if (this.get("disabled") && this.button) {
                            this.button.set("disabled", this.get("disabled"));
                        }
                    },
                    destroy: function() {
                        if (this.dropDown) {
                            this.dropDown.destroyRecursive();
                        }
                        this.inherited(arguments);
                    },
                    connect: function(o, f, tf) {
                        this.own(_7ec.connect(o, f, this, tf));
                    },
                    updateState: function() {
                        var e = this.editor, c = this.command, _7f5, _7f6;
                        if (!e || !e.isLoaded || !c.length) {
                            return;
                        }
                        var _7f7 = this.get("disabled");
                        if (this.button) {
                            try {
                                var _7f8 = e._implCommand(c);
                                _7f6 = !_7f7 && (this[_7f8] ? this[_7f8](c) : e.queryCommandEnabled(c));
                                if (this.enabled !== _7f6) {
                                    this.enabled = _7f6;
                                    this.button.set("disabled", !_7f6);
                                }
                                if (_7f6) {
                                    if (typeof this.button.checked == "boolean") {
                                        _7f5 = e.queryCommandState(c);
                                        if (this.checked !== _7f5) {
                                            this.checked = _7f5;
                                            this.button.set("checked", e.queryCommandState(c));
                                        }
                                    }
                                }
                            } catch (e) {}
                        }
                    },
                    setEditor: function(_7f9) {
                        this.editor = _7f9;
                        this._initButton();
                        if (this.button && this.useDefaultCommand) {
                            if (this.editor.queryCommandAvailable(this.command)) {
                                this.own(this.button.on("click", lang.hitch(this.editor, "execCommand", this.command, this.commandArg)));
                            } else {
                                this.button.domNode.style.display = "none";
                            }
                        }
                        this.own(this.editor.on("NormalizedDisplayChanged", lang.hitch(this, "updateState")));
                    },
                    setToolbar: function(_7fa) {
                        if (this.button) {
                            _7fa.addChild(this.button);
                        }
                    },
                    set: function(name, _7fb) {
                        if (typeof name === "object") {
                            for (var x in name) {
                                this.set(x, name[x]);
                            }
                            return this;
                        }
                        var _7fc = this._getAttrNames(name);
                        if (this[_7fc.s]) {
                            var _7fd = this[_7fc.s].apply(this, Array.prototype.slice.call(arguments, 1));
                        } else {
                            this._set(name, _7fb);
                        }
                        return _7fd || this;
                    },
                    get: function(name) {
                        var _7fe = this._getAttrNames(name);
                        return this[_7fe.g] ? this[_7fe.g]() : this[name];
                    },
                    _setDisabledAttr: function(_7ff) {
                        this._set("disabled", _7ff);
                        this.updateState();
                    },
                    _getAttrNames: function(name) {
                        var apn = this._attrPairNames;
                        if (apn[name]) {
                            return apn[name];
                        }
                        var uc = name.charAt(0).toUpperCase() + name.substr(1);
                        return (apn[name] = {
                            s: "_set" + uc + "Attr",
                            g: "_get" + uc + "Attr"
                        });
                    },
                    _set: function(name, _800) {
                        this[name] = _800;
                    }
                });
                _7f0.registry = {};
                return _7f0;
            });
        },
        "dijit/_editor/plugins/EnterKeyHandling": function() {
            define(["dojo/_base/declare", "dojo/dom-construct", "dojo/keys", "dojo/_base/lang", "dojo/on", "dojo/sniff", "dojo/_base/window", "dojo/window", "../_Plugin", "../RichText", "../range"], function(_801, _802, keys, lang, on, has, win, _803, _804, _805, _806) {
                return _801("dijit._editor.plugins.EnterKeyHandling", _804, {
                    blockNodeForEnter: "BR",
                    constructor: function(args) {
                        if (args) {
                            if ("blockNodeForEnter"in args) {
                                args.blockNodeForEnter = args.blockNodeForEnter.toUpperCase();
                            }
                            lang.mixin(this, args);
                        }
                    },
                    setEditor: function(_807) {
                        if (this.editor === _807) {
                            return;
                        }
                        this.editor = _807;
                        if (this.blockNodeForEnter == "BR") {
                            this.editor.customUndo = true;
                            _807.onLoadDeferred.then(lang.hitch(this, function(d) {
                                this.own(on(_807.document, "keydown", lang.hitch(this, function(e) {
                                    if (e.keyCode == keys.ENTER) {
                                        var ne = lang.mixin({}, e);
                                        ne.shiftKey = true;
                                        if (!this.handleEnterKey(ne)) {
                                            e.stopPropagation();
                                            e.preventDefault();
                                        }
                                    }
                                })));
                                if (has("ie") >= 9 && has("ie") <= 10) {
                                    this.own(on(_807.document, "paste", lang.hitch(this, function(e) {
                                        setTimeout(lang.hitch(this, function() {
                                            var r = this.editor.document.selection.createRange();
                                            r.move("character", -1);
                                            r.select();
                                            r.move("character", 1);
                                            r.select();
                                        }), 0);
                                    })));
                                }
                                return d;
                            }));
                        } else {
                            if (this.blockNodeForEnter) {
                                var h = lang.hitch(this, "handleEnterKey");
                                _807.addKeyHandler(13, 0, 0, h);
                                _807.addKeyHandler(13, 0, 1, h);
                                this.own(this.editor.on("KeyPressed", lang.hitch(this, "onKeyPressed")));
                            }
                        }
                    },
                    onKeyPressed: function() {
                        if (this._checkListLater) {
                            if (this.editor.selection.isCollapsed()) {
                                var _808 = this.editor.selection.getAncestorElement("LI");
                                if (!_808) {
                                    _805.prototype.execCommand.call(this.editor, "formatblock", this.blockNodeForEnter);
                                    var _809 = this.editor.selection.getAncestorElement(this.blockNodeForEnter);
                                    if (_809) {
                                        _809.innerHTML = this.bogusHtmlContent;
                                        if (has("ie") <= 9) {
                                            var r = this.editor.document.selection.createRange();
                                            r.move("character", -1);
                                            r.select();
                                        }
                                    } else {
                                        console.error("onKeyPressed: Cannot find the new block node");
                                    }
                                } else {
                                    if (has("mozilla")) {
                                        if (_808.parentNode.parentNode.nodeName == "LI") {
                                            _808 = _808.parentNode.parentNode;
                                        }
                                    }
                                    var fc = _808.firstChild;
                                    if (fc && fc.nodeType == 1 && (fc.nodeName == "UL" || fc.nodeName == "OL")) {
                                        _808.insertBefore(fc.ownerDocument.createTextNode(" "), fc);
                                        var _80a = _806.create(this.editor.window);
                                        _80a.setStart(_808.firstChild, 0);
                                        var _80b = _806.getSelection(this.editor.window, true);
                                        _80b.removeAllRanges();
                                        _80b.addRange(_80a);
                                    }
                                }
                            }
                            this._checkListLater = false;
                        }
                        if (this._pressedEnterInBlock) {
                            if (this._pressedEnterInBlock.previousSibling) {
                                this.removeTrailingBr(this._pressedEnterInBlock.previousSibling);
                            }
                            delete this._pressedEnterInBlock;
                        }
                    },
                    bogusHtmlContent: "&#160;",
                    blockNodes: /^(?:P|H1|H2|H3|H4|H5|H6|LI)$/,
                    handleEnterKey: function(e) {
                        var _80c, _80d, _80e, _80f, _810, _811, doc = this.editor.document, br, rs, txt;
                        if (e.shiftKey) {
                            var _812 = this.editor.selection.getParentElement();
                            var _813 = _806.getAncestor(_812, this.blockNodes);
                            if (_813) {
                                if (_813.tagName == "LI") {
                                    return true;
                                }
                                _80c = _806.getSelection(this.editor.window);
                                _80d = _80c.getRangeAt(0);
                                if (!_80d.collapsed) {
                                    _80d.deleteContents();
                                    _80c = _806.getSelection(this.editor.window);
                                    _80d = _80c.getRangeAt(0);
                                }
                                if (_806.atBeginningOfContainer(_813, _80d.startContainer, _80d.startOffset)) {
                                    br = doc.createElement("br");
                                    _80e = _806.create(this.editor.window);
                                    _813.insertBefore(br, _813.firstChild);
                                    _80e.setStartAfter(br);
                                    _80c.removeAllRanges();
                                    _80c.addRange(_80e);
                                } else {
                                    if (_806.atEndOfContainer(_813, _80d.startContainer, _80d.startOffset)) {
                                        _80e = _806.create(this.editor.window);
                                        br = doc.createElement("br");
                                        _813.appendChild(br);
                                        _813.appendChild(doc.createTextNode(" "));
                                        _80e.setStart(_813.lastChild, 0);
                                        _80c.removeAllRanges();
                                        _80c.addRange(_80e);
                                    } else {
                                        rs = _80d.startContainer;
                                        if (rs && rs.nodeType == 3) {
                                            txt = rs.nodeValue;
                                            _80f = doc.createTextNode(txt.substring(0, _80d.startOffset));
                                            _810 = doc.createTextNode(txt.substring(_80d.startOffset));
                                            _811 = doc.createElement("br");
                                            if (_810.nodeValue == "" && has("webkit")) {
                                                _810 = doc.createTextNode(" ");
                                            }
                                            _802.place(_80f, rs, "after");
                                            _802.place(_811, _80f, "after");
                                            _802.place(_810, _811, "after");
                                            _802.destroy(rs);
                                            _80e = _806.create(this.editor.window);
                                            _80e.setStart(_810, 0);
                                            _80c.removeAllRanges();
                                            _80c.addRange(_80e);
                                            return false;
                                        }
                                        return true;
                                    }
                                }
                            } else {
                                _80c = _806.getSelection(this.editor.window);
                                if (_80c.rangeCount) {
                                    _80d = _80c.getRangeAt(0);
                                    if (_80d && _80d.startContainer) {
                                        if (!_80d.collapsed) {
                                            _80d.deleteContents();
                                            _80c = _806.getSelection(this.editor.window);
                                            _80d = _80c.getRangeAt(0);
                                        }
                                        rs = _80d.startContainer;
                                        if (rs && rs.nodeType == 3) {
                                            var _814 = _80d.startOffset;
                                            if (rs.length < _814) {
                                                ret = this._adjustNodeAndOffset(rs, _814);
                                                rs = ret.node;
                                                _814 = ret.offset;
                                            }
                                            txt = rs.nodeValue;
                                            _80f = doc.createTextNode(txt.substring(0, _814));
                                            _810 = doc.createTextNode(txt.substring(_814));
                                            _811 = doc.createElement("br");
                                            if (!_810.length) {
                                                _810 = doc.createTextNode(" ");
                                            }
                                            if (_80f.length) {
                                                _802.place(_80f, rs, "after");
                                            } else {
                                                _80f = rs;
                                            }
                                            _802.place(_811, _80f, "after");
                                            _802.place(_810, _811, "after");
                                            _802.destroy(rs);
                                            _80e = _806.create(this.editor.window);
                                            _80e.setStart(_810, 0);
                                            _80e.setEnd(_810, _810.length);
                                            _80c.removeAllRanges();
                                            _80c.addRange(_80e);
                                            this.editor.selection.collapse(true);
                                        } else {
                                            var _815;
                                            if (_80d.startOffset >= 0) {
                                                _815 = rs.childNodes[_80d.startOffset];
                                            }
                                            var _811 = doc.createElement("br");
                                            var _810 = doc.createTextNode(" ");
                                            if (!_815) {
                                                rs.appendChild(_811);
                                                rs.appendChild(_810);
                                            } else {
                                                _802.place(_811, _815, "before");
                                                _802.place(_810, _811, "after");
                                            }
                                            _80e = _806.create(this.editor.window);
                                            _80e.setStart(_810, 0);
                                            _80e.setEnd(_810, _810.length);
                                            _80c.removeAllRanges();
                                            _80c.addRange(_80e);
                                            this.editor.selection.collapse(true);
                                        }
                                    }
                                } else {
                                    _805.prototype.execCommand.call(this.editor, "inserthtml", "<br>");
                                }
                            }
                            return false;
                        }
                        var _816 = true;
                        _80c = _806.getSelection(this.editor.window);
                        _80d = _80c.getRangeAt(0);
                        if (!_80d.collapsed) {
                            _80d.deleteContents();
                            _80c = _806.getSelection(this.editor.window);
                            _80d = _80c.getRangeAt(0);
                        }
                        var _817 = _806.getBlockAncestor(_80d.endContainer, null, this.editor.editNode);
                        var _818 = _817.blockNode;
                        if ((this._checkListLater = (_818 && (_818.nodeName == "LI" || _818.parentNode.nodeName == "LI")))) {
                            if (has("mozilla")) {
                                this._pressedEnterInBlock = _818;
                            }
                            if (/^(\s|&nbsp;|&#160;|\xA0|<span\b[^>]*\bclass=['"]Apple-style-span['"][^>]*>(\s|&nbsp;|&#160;|\xA0)<\/span>)?(<br>)?$/.test(_818.innerHTML)) {
                                _818.innerHTML = "";
                                if (has("webkit")) {
                                    _80e = _806.create(this.editor.window);
                                    _80e.setStart(_818, 0);
                                    _80c.removeAllRanges();
                                    _80c.addRange(_80e);
                                }
                                this._checkListLater = false;
                            }
                            return true;
                        }
                        if (!_817.blockNode || _817.blockNode === this.editor.editNode) {
                            try {
                                _805.prototype.execCommand.call(this.editor, "formatblock", this.blockNodeForEnter);
                            } catch (e2) {}
                            _817 = {
                                blockNode: this.editor.selection.getAncestorElement(this.blockNodeForEnter),
                                blockContainer: this.editor.editNode
                            };
                            if (_817.blockNode) {
                                if (_817.blockNode != this.editor.editNode && (!(_817.blockNode.textContent || _817.blockNode.innerHTML).replace(/^\s+|\s+$/g, "").length)) {
                                    this.removeTrailingBr(_817.blockNode);
                                    return false;
                                }
                            } else {
                                _817.blockNode = this.editor.editNode;
                            }
                            _80c = _806.getSelection(this.editor.window);
                            _80d = _80c.getRangeAt(0);
                        }
                        var _819 = doc.createElement(this.blockNodeForEnter);
                        _819.innerHTML = this.bogusHtmlContent;
                        this.removeTrailingBr(_817.blockNode);
                        var _81a = _80d.endOffset;
                        var node = _80d.endContainer;
                        if (node.length < _81a) {
                            var ret = this._adjustNodeAndOffset(node, _81a);
                            node = ret.node;
                            _81a = ret.offset;
                        }
                        if (_806.atEndOfContainer(_817.blockNode, node, _81a)) {
                            if (_817.blockNode === _817.blockContainer) {
                                _817.blockNode.appendChild(_819);
                            } else {
                                _802.place(_819, _817.blockNode, "after");
                            }
                            _816 = false;
                            _80e = _806.create(this.editor.window);
                            _80e.setStart(_819, 0);
                            _80c.removeAllRanges();
                            _80c.addRange(_80e);
                            if (this.editor.height) {
                                _803.scrollIntoView(_819);
                            }
                        } else {
                            if (_806.atBeginningOfContainer(_817.blockNode, _80d.startContainer, _80d.startOffset)) {
                                _802.place(_819, _817.blockNode, _817.blockNode === _817.blockContainer ? "first" : "before");
                                if (_819.nextSibling && this.editor.height) {
                                    _80e = _806.create(this.editor.window);
                                    _80e.setStart(_819.nextSibling, 0);
                                    _80c.removeAllRanges();
                                    _80c.addRange(_80e);
                                    _803.scrollIntoView(_819.nextSibling);
                                }
                                _816 = false;
                            } else {
                                if (_817.blockNode === _817.blockContainer) {
                                    _817.blockNode.appendChild(_819);
                                } else {
                                    _802.place(_819, _817.blockNode, "after");
                                }
                                _816 = false;
                                if (_817.blockNode.style) {
                                    if (_819.style) {
                                        if (_817.blockNode.style.cssText) {
                                            _819.style.cssText = _817.blockNode.style.cssText;
                                        }
                                    }
                                }
                                rs = _80d.startContainer;
                                var _81b;
                                if (rs && rs.nodeType == 3) {
                                    var _81c, _81d;
                                    _81a = _80d.endOffset;
                                    if (rs.length < _81a) {
                                        ret = this._adjustNodeAndOffset(rs, _81a);
                                        rs = ret.node;
                                        _81a = ret.offset;
                                    }
                                    txt = rs.nodeValue;
                                    _80f = doc.createTextNode(txt.substring(0, _81a));
                                    _810 = doc.createTextNode(txt.substring(_81a, txt.length));
                                    _802.place(_80f, rs, "before");
                                    _802.place(_810, rs, "after");
                                    _802.destroy(rs);
                                    var _81e = _80f.parentNode;
                                    while (_81e !== _817.blockNode) {
                                        var tg = _81e.tagName;
                                        var _81f = doc.createElement(tg);
                                        if (_81e.style) {
                                            if (_81f.style) {
                                                if (_81e.style.cssText) {
                                                    _81f.style.cssText = _81e.style.cssText;
                                                }
                                            }
                                        }
                                        if (_81e.tagName === "FONT") {
                                            if (_81e.color) {
                                                _81f.color = _81e.color;
                                            }
                                            if (_81e.face) {
                                                _81f.face = _81e.face;
                                            }
                                            if (_81e.size) {
                                                _81f.size = _81e.size;
                                            }
                                        }
                                        _81c = _810;
                                        while (_81c) {
                                            _81d = _81c.nextSibling;
                                            _81f.appendChild(_81c);
                                            _81c = _81d;
                                        }
                                        _802.place(_81f, _81e, "after");
                                        _80f = _81e;
                                        _810 = _81f;
                                        _81e = _81e.parentNode;
                                    }
                                    _81c = _810;
                                    if (_81c.nodeType == 1 || (_81c.nodeType == 3 && _81c.nodeValue)) {
                                        _819.innerHTML = "";
                                    }
                                    _81b = _81c;
                                    while (_81c) {
                                        _81d = _81c.nextSibling;
                                        _819.appendChild(_81c);
                                        _81c = _81d;
                                    }
                                }
                                _80e = _806.create(this.editor.window);
                                var _820;
                                var _821 = _81b;
                                if (this.blockNodeForEnter !== "BR") {
                                    while (_821) {
                                        _820 = _821;
                                        _81d = _821.firstChild;
                                        _821 = _81d;
                                    }
                                    if (_820 && _820.parentNode) {
                                        _819 = _820.parentNode;
                                        _80e.setStart(_819, 0);
                                        _80c.removeAllRanges();
                                        _80c.addRange(_80e);
                                        if (this.editor.height) {
                                            _803.scrollIntoView(_819);
                                        }
                                        if (has("mozilla")) {
                                            this._pressedEnterInBlock = _817.blockNode;
                                        }
                                    } else {
                                        _816 = true;
                                    }
                                } else {
                                    _80e.setStart(_819, 0);
                                    _80c.removeAllRanges();
                                    _80c.addRange(_80e);
                                    if (this.editor.height) {
                                        _803.scrollIntoView(_819);
                                    }
                                    if (has("mozilla")) {
                                        this._pressedEnterInBlock = _817.blockNode;
                                    }
                                }
                            }
                        }
                        return _816;
                    },
                    _adjustNodeAndOffset: function(node, _822) {
                        while (node.length < _822 && node.nextSibling && node.nextSibling.nodeType == 3) {
                            _822 = _822 - node.length;
                            node = node.nextSibling;
                        }
                        return {
                            "node": node,
                            "offset": _822
                        };
                    },
                    removeTrailingBr: function(_823) {
                        var para = /P|DIV|LI/i.test(_823.tagName) ? _823 : this.editor.selection.getParentOfType(_823, ["P", "DIV", "LI"]);
                        if (!para) {
                            return;
                        }
                        if (para.lastChild) {
                            if ((para.childNodes.length > 1 && para.lastChild.nodeType == 3 && /^[\s\xAD]*$/.test(para.lastChild.nodeValue)) || para.lastChild.tagName == "BR") {
                                _802.destroy(para.lastChild);
                            }
                        }
                        if (!para.childNodes.length) {
                            para.innerHTML = this.bogusHtmlContent;
                        }
                    }
                });
            });
        },
        "dijit/_editor/RichText": function() {
            define(["dojo/_base/array", "dojo/_base/config", "dojo/_base/declare", "dojo/_base/Deferred", "dojo/dom", "dojo/dom-attr", "dojo/dom-class", "dojo/dom-construct", "dojo/dom-geometry", "dojo/dom-style", "dojo/_base/kernel", "dojo/keys", "dojo/_base/lang", "dojo/on", "dojo/query", "dojo/domReady", "dojo/sniff", "dojo/string", "dojo/topic", "dojo/_base/unload", "dojo/_base/url", "dojo/window", "../_Widget", "../_CssStateMixin", "../selection", "./range", "./html", "../focus", "../main"], function(_824, _825, _826, _827, dom, _828, _829, _82a, _82b, _82c, _82d, keys, lang, on, _82e, _82f, has, _830, _831, _832, _833, _834, _835, _836, _837, _838, _839, _83a, _83b) {
                var _83c = _826("dijit._editor.RichText", [_835, _836], {
                    constructor: function(_83d) {
                        this.contentPreFilters = [];
                        this.contentPostFilters = [];
                        this.contentDomPreFilters = [];
                        this.contentDomPostFilters = [];
                        this.editingAreaStyleSheets = [];
                        this.events = [].concat(this.events);
                        this._keyHandlers = {};
                        if (_83d && lang.isString(_83d.value)) {
                            this.value = _83d.value;
                        }
                        this.onLoadDeferred = new _827();
                    },
                    baseClass: "dijitEditor",
                    inheritWidth: false,
                    focusOnLoad: false,
                    name: "",
                    styleSheets: "",
                    height: "300px",
                    minHeight: "1em",
                    isClosed: true,
                    isLoaded: false,
                    _SEPARATOR: "@@**%%__RICHTEXTBOUNDRY__%%**@@",
                    _NAME_CONTENT_SEP: "@@**%%:%%**@@",
                    onLoadDeferred: null,
                    isTabIndent: false,
                    disableSpellCheck: false,
                    postCreate: function() {
                        if ("textarea" === this.domNode.tagName.toLowerCase()) {
                            console.warn("RichText should not be used with the TEXTAREA tag.  See dijit._editor.RichText docs.");
                        }
                        this.contentPreFilters = [lang.trim, lang.hitch(this, "_preFixUrlAttributes")].concat(this.contentPreFilters);
                        if (has("mozilla")) {
                            this.contentPreFilters = [this._normalizeFontStyle].concat(this.contentPreFilters);
                            this.contentPostFilters = [this._removeMozBogus].concat(this.contentPostFilters);
                        }
                        if (has("webkit")) {
                            this.contentPreFilters = [this._removeWebkitBogus].concat(this.contentPreFilters);
                            this.contentPostFilters = [this._removeWebkitBogus].concat(this.contentPostFilters);
                        }
                        if (has("ie") || has("trident")) {
                            this.contentPostFilters = [this._normalizeFontStyle].concat(this.contentPostFilters);
                            this.contentDomPostFilters = [lang.hitch(this, "_stripBreakerNodes")].concat(this.contentDomPostFilters);
                        }
                        this.contentDomPostFilters = [lang.hitch(this, "_stripTrailingEmptyNodes")].concat(this.contentDomPostFilters);
                        this.inherited(arguments);
                        _831.publish(_83b._scopeName + "._editor.RichText::init", this);
                    },
                    startup: function() {
                        this.inherited(arguments);
                        this.open();
                        this.setupDefaultShortcuts();
                    },
                    setupDefaultShortcuts: function() {
                        var exec = lang.hitch(this, function(cmd, arg) {
                            return function() {
                                return !this.execCommand(cmd, arg);
                            }
                            ;
                        });
                        var _83e = {
                            b: exec("bold"),
                            i: exec("italic"),
                            u: exec("underline"),
                            a: exec("selectall"),
                            s: function() {
                                this.save(true);
                            },
                            m: function() {
                                this.isTabIndent = !this.isTabIndent;
                            },
                            "1": exec("formatblock", "h1"),
                            "2": exec("formatblock", "h2"),
                            "3": exec("formatblock", "h3"),
                            "4": exec("formatblock", "h4"),
                            "\\": exec("insertunorderedlist")
                        };
                        if (!has("ie")) {
                            _83e.Z = exec("redo");
                        }
                        var key;
                        for (key in _83e) {
                            this.addKeyHandler(key, true, false, _83e[key]);
                        }
                    },
                    events: ["onKeyDown", "onKeyUp"],
                    captureEvents: [],
                    _editorCommandsLocalized: false,
                    _localizeEditorCommands: function() {
                        if (_83c._editorCommandsLocalized) {
                            this._local2NativeFormatNames = _83c._local2NativeFormatNames;
                            this._native2LocalFormatNames = _83c._native2LocalFormatNames;
                            return;
                        }
                        _83c._editorCommandsLocalized = true;
                        _83c._local2NativeFormatNames = {};
                        _83c._native2LocalFormatNames = {};
                        this._local2NativeFormatNames = _83c._local2NativeFormatNames;
                        this._native2LocalFormatNames = _83c._native2LocalFormatNames;
                        var _83f = ["div", "p", "pre", "h1", "h2", "h3", "h4", "h5", "h6", "ol", "ul", "address"];
                        var _840 = "", _841, i = 0;
                        while ((_841 = _83f[i++])) {
                            if (_841.charAt(1) !== "l") {
                                _840 += "<" + _841 + "><span>content</span></" + _841 + "><br/>";
                            } else {
                                _840 += "<" + _841 + "><li>content</li></" + _841 + "><br/>";
                            }
                        }
                        var _842 = {
                            position: "absolute",
                            top: "0px",
                            zIndex: 10,
                            opacity: 0.01
                        };
                        var div = _82a.create("div", {
                            style: _842,
                            innerHTML: _840
                        });
                        this.ownerDocumentBody.appendChild(div);
                        var _843 = lang.hitch(this, function() {
                            var node = div.firstChild;
                            while (node) {
                                try {
                                    this.selection.selectElement(node.firstChild);
                                    var _844 = node.tagName.toLowerCase();
                                    this._local2NativeFormatNames[_844] = document.queryCommandValue("formatblock");
                                    this._native2LocalFormatNames[this._local2NativeFormatNames[_844]] = _844;
                                    node = node.nextSibling.nextSibling;
                                } catch (e) {}
                            }
                            _82a.destroy(div);
                        });
                        this.defer(_843);
                    },
                    open: function(_845) {
                        if (!this.onLoadDeferred || this.onLoadDeferred.fired >= 0) {
                            this.onLoadDeferred = new _827();
                        }
                        if (!this.isClosed) {
                            this.close();
                        }
                        _831.publish(_83b._scopeName + "._editor.RichText::open", this);
                        if (arguments.length === 1 && _845.nodeName) {
                            this.domNode = _845;
                        }
                        var dn = this.domNode;
                        var html;
                        if (lang.isString(this.value)) {
                            html = this.value;
                            dn.innerHTML = "";
                        } else {
                            if (dn.nodeName && dn.nodeName.toLowerCase() == "textarea") {
                                var ta = (this.textarea = dn);
                                this.name = ta.name;
                                html = ta.value;
                                dn = this.domNode = this.ownerDocument.createElement("div");
                                dn.setAttribute("widgetId", this.id);
                                ta.removeAttribute("widgetId");
                                dn.cssText = ta.cssText;
                                dn.className += " " + ta.className;
                                _82a.place(dn, ta, "before");
                                var _846 = lang.hitch(this, function() {
                                    _82c.set(ta, {
                                        display: "block",
                                        position: "absolute",
                                        top: "-1000px"
                                    });
                                    if (has("ie")) {
                                        var s = ta.style;
                                        this.__overflow = s.overflow;
                                        s.overflow = "hidden";
                                    }
                                });
                                if (has("ie")) {
                                    this.defer(_846, 10);
                                } else {
                                    _846();
                                }
                                if (ta.form) {
                                    var _847 = ta.value;
                                    this.reset = function() {
                                        var _848 = this.getValue();
                                        if (_848 !== _847) {
                                            this.replaceValue(_847);
                                        }
                                    }
                                    ;
                                    on(ta.form, "submit", lang.hitch(this, function() {
                                        _828.set(ta, "disabled", this.disabled);
                                        ta.value = this.getValue();
                                    }));
                                }
                            } else {
                                html = _839.getChildrenHtml(dn);
                                dn.innerHTML = "";
                            }
                        }
                        this.value = html;
                        if (dn.nodeName && dn.nodeName === "LI") {
                            dn.innerHTML = " <br>";
                        }
                        this.header = dn.ownerDocument.createElement("div");
                        dn.appendChild(this.header);
                        this.editingArea = dn.ownerDocument.createElement("div");
                        dn.appendChild(this.editingArea);
                        this.footer = dn.ownerDocument.createElement("div");
                        dn.appendChild(this.footer);
                        if (!this.name) {
                            this.name = this.id + "_AUTOGEN";
                        }
                        if (this.name !== "" && (!_825["useXDomain"] || _825["allowXdRichTextSave"])) {
                            var _849 = dom.byId(_83b._scopeName + "._editor.RichText.value");
                            if (_849 && _849.value !== "") {
                                var _84a = _849.value.split(this._SEPARATOR), i = 0, dat;
                                while ((dat = _84a[i++])) {
                                    var data = dat.split(this._NAME_CONTENT_SEP);
                                    if (data[0] === this.name) {
                                        this.value = data[1];
                                        _84a = _84a.splice(i, 1);
                                        _849.value = _84a.join(this._SEPARATOR);
                                        break;
                                    }
                                }
                            }
                            if (!_83c._globalSaveHandler) {
                                _83c._globalSaveHandler = {};
                                _832.addOnUnload(function() {
                                    var id;
                                    for (id in _83c._globalSaveHandler) {
                                        var f = _83c._globalSaveHandler[id];
                                        if (lang.isFunction(f)) {
                                            f();
                                        }
                                    }
                                });
                            }
                            _83c._globalSaveHandler[this.id] = lang.hitch(this, "_saveContent");
                        }
                        this.isClosed = false;
                        var ifr = (this.editorObject = this.iframe = this.ownerDocument.createElement("iframe"));
                        ifr.id = this.id + "_iframe";
                        ifr.style.border = "none";
                        ifr.style.width = "100%";
                        if (this._layoutMode) {
                            ifr.style.height = "100%";
                        } else {
                            if (has("ie") >= 7) {
                                if (this.height) {
                                    ifr.style.height = this.height;
                                }
                                if (this.minHeight) {
                                    ifr.style.minHeight = this.minHeight;
                                }
                            } else {
                                ifr.style.height = this.height ? this.height : this.minHeight;
                            }
                        }
                        ifr.frameBorder = 0;
                        ifr._loadFunc = lang.hitch(this, function(w) {
                            this.window = w;
                            this.document = w.document;
                            this.selection = new _837.SelectionManager(w);
                            if (has("ie")) {
                                this._localizeEditorCommands();
                            }
                            this.onLoad(this.get("value"));
                        });
                        var src = this._getIframeDocTxt().replace(/\\/g, "\\\\").replace(/'/g, "\\'"), s;
                        if (has("ie") < 11) {
                            s = "javascript:document.open();try{parent.window;}catch(e){document.domain=\"" + document.domain + "\";}" + "document.write('" + src + "');document.close()";
                        } else {
                            s = "javascript: '" + src + "'";
                        }
                        this.editingArea.appendChild(ifr);
                        ifr.src = s;
                        if (dn.nodeName === "LI") {
                            dn.lastChild.style.marginTop = "-1.2em";
                        }
                        _829.add(this.domNode, this.baseClass);
                    },
                    _local2NativeFormatNames: {},
                    _native2LocalFormatNames: {},
                    _getIframeDocTxt: function() {
                        var _84b = _82c.getComputedStyle(this.domNode);
                        var _84c;
                        if (this["aria-label"]) {
                            _84c = this["aria-label"];
                        } else {
                            var _84d = _82e("label[for=\"" + this.id + "\"]", this.ownerDocument)[0] || dom.byId(this["aria-labelledby"], this.ownerDocument);
                            if (_84d) {
                                _84c = _84d.textContent || _84d.innerHTML || "";
                            }
                        }
                        var html = "<div id='dijitEditorBody' role='textbox' aria-multiline='true' " + (_84c ? " aria-label='" + _830.escape(_84c) + "'" : "") + "></div>";
                        var font = [_84b.fontWeight, _84b.fontSize, _84b.fontFamily].join(" ");
                        var _84e = _84b.lineHeight;
                        if (_84e.indexOf("px") >= 0) {
                            _84e = parseFloat(_84e) / parseFloat(_84b.fontSize);
                        } else {
                            if (_84e.indexOf("em") >= 0) {
                                _84e = parseFloat(_84e);
                            } else {
                                _84e = "normal";
                            }
                        }
                        var _84f = "";
                        var self = this;
                        this.style.replace(/(^|;)\s*(line-|font-?)[^;]+/ig, function(_850) {
                            _850 = _850.replace(/^;/ig, "") + ";";
                            var s = _850.split(":")[0];
                            if (s) {
                                s = lang.trim(s);
                                s = s.toLowerCase();
                                var i;
                                var sC = "";
                                for (i = 0; i < s.length; i++) {
                                    var c = s.charAt(i);
                                    switch (c) {
                                    case "-":
                                        i++;
                                        c = s.charAt(i).toUpperCase();
                                    default:
                                        sC += c;
                                    }
                                }
                                _82c.set(self.domNode, sC, "");
                            }
                            _84f += _850 + ";";
                        });
                        this.iframe.setAttribute("title", _84c);
                        var _851 = this.lang || _82d.locale.replace(/-.*/, "");
                        return ["<!DOCTYPE html>", "<html lang='" + _851 + "'" + (this.isLeftToRight() ? "" : " dir='rtl'") + ">\n", "<head>\n", "<meta http-equiv='Content-Type' content='text/html'>\n", _84c ? "<title>" + _830.escape(_84c) + "</title>" : "", "<style>\n", "\tbody,html {\n", "\t\tbackground:transparent;\n", "\t\tpadding: 1px 0 0 0;\n", "\t\tmargin: -1px 0 0 0;\n", "\t}\n", "\tbody,html,#dijitEditorBody { outline: none; }", "html { height: 100%; width: 100%; overflow: hidden; }\n", this.height ? "\tbody,#dijitEditorBody { height: 100%; width: 100%; overflow: auto; }\n" : "\tbody,#dijitEditorBody { min-height: " + this.minHeight + "; width: 100%; overflow-x: auto; overflow-y: hidden; }\n", "\tbody{\n", "\t\ttop:0px;\n", "\t\tleft:0px;\n", "\t\tright:0px;\n", "\t\tfont:", font, ";\n", ((this.height || has("opera")) ? "" : "\t\tposition: fixed;\n"), "\t\tline-height:", _84e, ";\n", "\t}\n", "\tp{ margin: 1em 0; }\n", "\tli > ul:-moz-first-node, li > ol:-moz-first-node{ padding-top: 1.2em; }\n", (has("ie") || has("trident") || has("edge") ? "" : "\tli{ min-height:1.2em; }\n"), "</style>\n", this._applyEditingAreaStyleSheets(), "\n", "</head>\n<body role='application'", _84c ? " aria-label='" + _830.escape(_84c) + "'" : "", "onload='try{frameElement && frameElement._loadFunc(window,document)}catch(e){document.domain=\"" + document.domain + "\";frameElement._loadFunc(window,document)}' ", "style='" + _84f + "'>", html, "</body>\n</html>"].join("");
                    },
                    _applyEditingAreaStyleSheets: function() {
                        var _852 = [];
                        if (this.styleSheets) {
                            _852 = this.styleSheets.split(";");
                            this.styleSheets = "";
                        }
                        _852 = _852.concat(this.editingAreaStyleSheets);
                        this.editingAreaStyleSheets = [];
                        var text = "", i = 0, url, _853 = _834.get(this.ownerDocument);
                        while ((url = _852[i++])) {
                            var _854 = (new _833(_853.location,url)).toString();
                            this.editingAreaStyleSheets.push(_854);
                            text += "<link rel=\"stylesheet\" type=\"text/css\" href=\"" + _854 + "\"/>";
                        }
                        return text;
                    },
                    addStyleSheet: function(uri) {
                        var url = uri.toString()
                          , _855 = _834.get(this.ownerDocument);
                        if (url.charAt(0) === "." || (url.charAt(0) !== "/" && !uri.host)) {
                            url = (new _833(_855.location,url)).toString();
                        }
                        if (_824.indexOf(this.editingAreaStyleSheets, url) > -1) {
                            return;
                        }
                        this.editingAreaStyleSheets.push(url);
                        this.onLoadDeferred.then(lang.hitch(this, function() {
                            if (this.document.createStyleSheet) {
                                this.document.createStyleSheet(url);
                            } else {
                                var head = this.document.getElementsByTagName("head")[0];
                                var _856 = this.document.createElement("link");
                                _856.rel = "stylesheet";
                                _856.type = "text/css";
                                _856.href = url;
                                head.appendChild(_856);
                            }
                        }));
                    },
                    removeStyleSheet: function(uri) {
                        var url = uri.toString()
                          , _857 = _834.get(this.ownerDocument);
                        if (url.charAt(0) === "." || (url.charAt(0) !== "/" && !uri.host)) {
                            url = (new _833(_857.location,url)).toString();
                        }
                        var _858 = _824.indexOf(this.editingAreaStyleSheets, url);
                        if (_858 === -1) {
                            return;
                        }
                        delete this.editingAreaStyleSheets[_858];
                        _82e("link[href=\"" + url + "\"]", this.window.document).orphan();
                    },
                    disabled: false,
                    _mozSettingProps: {
                        "styleWithCSS": false
                    },
                    _setDisabledAttr: function(_859) {
                        _859 = !!_859;
                        this._set("disabled", _859);
                        if (!this.isLoaded) {
                            return;
                        }
                        var _85a = has("ie") && (this.isLoaded || !this.focusOnLoad);
                        if (_85a) {
                            this.editNode.unselectable = "on";
                        }
                        this.editNode.contentEditable = !_859;
                        this.editNode.tabIndex = _859 ? "-1" : this.tabIndex;
                        if (_85a) {
                            this.defer(function() {
                                if (this.editNode) {
                                    this.editNode.unselectable = "off";
                                }
                            });
                        }
                        if (has("mozilla") && !_859 && this._mozSettingProps) {
                            var ps = this._mozSettingProps;
                            var n;
                            for (n in ps) {
                                if (ps.hasOwnProperty(n)) {
                                    try {
                                        this.document.execCommand(n, false, ps[n]);
                                    } catch (e2) {}
                                }
                            }
                        }
                        this._disabledOK = true;
                    },
                    onLoad: function(html) {
                        if (!this.window.__registeredWindow) {
                            this.window.__registeredWindow = true;
                            this._iframeRegHandle = _83a.registerIframe(this.iframe);
                        }
                        this.editNode = this.document.body.firstChild;
                        var _85b = this;
                        this.beforeIframeNode = _82a.place("<div tabIndex=-1></div>", this.iframe, "before");
                        this.afterIframeNode = _82a.place("<div tabIndex=-1></div>", this.iframe, "after");
                        this.iframe.onfocus = this.document.onfocus = function() {
                            _85b.editNode.focus();
                        }
                        ;
                        this.focusNode = this.editNode;
                        var _85c = this.events.concat(this.captureEvents);
                        var ap = this.iframe ? this.document : this.editNode;
                        this.own.apply(this, _824.map(_85c, function(item) {
                            var type = item.toLowerCase().replace(/^on/, "");
                            return on(ap, type, lang.hitch(this, item));
                        }, this));
                        this.own(on(ap, "mouseup", lang.hitch(this, "onClick")));
                        if (has("ie")) {
                            this.own(on(this.document, "mousedown", lang.hitch(this, "_onIEMouseDown")));
                            this.editNode.style.zoom = 1;
                        }
                        if (has("webkit")) {
                            this._webkitListener = this.own(on(this.document, "mouseup", lang.hitch(this, "onDisplayChanged")))[0];
                            this.own(on(this.document, "mousedown", lang.hitch(this, function(e) {
                                var t = e.target;
                                if (t && (t === this.document.body || t === this.document)) {
                                    this.defer("placeCursorAtEnd");
                                }
                            })));
                        }
                        if (has("ie")) {
                            try {
                                this.document.execCommand("RespectVisibilityInDesign", true, null);
                            } catch (e) {}
                        }
                        this.isLoaded = true;
                        this.set("disabled", this.disabled);
                        var _85d = lang.hitch(this, function() {
                            this.setValue(html);
                            if (this.onLoadDeferred && !this.onLoadDeferred.isFulfilled()) {
                                this.onLoadDeferred.resolve(true);
                            }
                            this.onDisplayChanged();
                            if (this.focusOnLoad) {
                                _82f(lang.hitch(this, "defer", "focus", this.updateInterval));
                            }
                            this.value = this.getValue(true);
                        });
                        if (this.setValueDeferred) {
                            this.setValueDeferred.then(_85d);
                        } else {
                            _85d();
                        }
                    },
                    onKeyDown: function(e) {
                        if (e.keyCode === keys.SHIFT || e.keyCode === keys.ALT || e.keyCode === keys.META || e.keyCode === keys.CTRL) {
                            return true;
                        }
                        if (e.keyCode === keys.TAB && this.isTabIndent) {
                            e.stopPropagation();
                            e.preventDefault();
                            if (this.queryCommandEnabled((e.shiftKey ? "outdent" : "indent"))) {
                                this.execCommand((e.shiftKey ? "outdent" : "indent"));
                            }
                        }
                        if (e.keyCode == keys.TAB && !this.isTabIndent && !e.ctrlKey && !e.altKey) {
                            if (e.shiftKey) {
                                this.beforeIframeNode.focus();
                            } else {
                                this.afterIframeNode.focus();
                            }
                            return true;
                        }
                        if (has("ie") < 9 && e.keyCode === keys.BACKSPACE && this.document.selection.type === "Control") {
                            e.stopPropagation();
                            e.preventDefault();
                            this.execCommand("delete");
                        }
                        if (has("ff")) {
                            if (e.keyCode === keys.PAGE_UP || e.keyCode === keys.PAGE_DOWN) {
                                if (this.editNode.clientHeight >= this.editNode.scrollHeight) {
                                    e.preventDefault();
                                }
                            }
                        }
                        var _85e = this._keyHandlers[e.keyCode]
                          , args = arguments;
                        if (_85e && !e.altKey) {
                            _824.some(_85e, function(h) {
                                if (!(h.shift ^ e.shiftKey) && !(h.ctrl ^ (e.ctrlKey || e.metaKey))) {
                                    if (!h.handler.apply(this, args)) {
                                        e.preventDefault();
                                    }
                                    return true;
                                }
                            }, this);
                        }
                        this.defer("onKeyPressed", 1);
                        return true;
                    },
                    onKeyUp: function() {},
                    setDisabled: function(_85f) {
                        _82d.deprecated("dijit.Editor::setDisabled is deprecated", "use dijit.Editor::attr(\"disabled\",boolean) instead", 2);
                        this.set("disabled", _85f);
                    },
                    _setValueAttr: function(_860) {
                        this.setValue(_860);
                    },
                    _setDisableSpellCheckAttr: function(_861) {
                        if (this.document) {
                            _828.set(this.document.body, "spellcheck", !_861);
                        } else {
                            this.onLoadDeferred.then(lang.hitch(this, function() {
                                _828.set(this.document.body, "spellcheck", !_861);
                            }));
                        }
                        this._set("disableSpellCheck", _861);
                    },
                    addKeyHandler: function(key, ctrl, _862, _863) {
                        if (typeof key == "string") {
                            key = key.toUpperCase().charCodeAt(0);
                        }
                        if (!lang.isArray(this._keyHandlers[key])) {
                            this._keyHandlers[key] = [];
                        }
                        this._keyHandlers[key].push({
                            shift: _862 || false,
                            ctrl: ctrl || false,
                            handler: _863
                        });
                    },
                    onKeyPressed: function() {
                        this.onDisplayChanged();
                    },
                    onClick: function(e) {
                        this.onDisplayChanged(e);
                    },
                    _onIEMouseDown: function() {
                        if (!this.focused && !this.disabled) {
                            this.focus();
                        }
                    },
                    _onBlur: function(e) {
                        if (has("ie") || has("trident")) {
                            this.defer(function() {
                                if (!_83a.curNode) {
                                    this.ownerDocumentBody.focus();
                                }
                            });
                        }
                        this.inherited(arguments);
                        var _864 = this.getValue(true);
                        if (_864 !== this.value) {
                            this.onChange(_864);
                        }
                        this._set("value", _864);
                    },
                    _onFocus: function(e) {
                        if (!this.disabled) {
                            if (!this._disabledOK) {
                                this.set("disabled", false);
                            }
                            this.inherited(arguments);
                        }
                    },
                    blur: function() {
                        if (!has("ie") && this.window.document.documentElement && this.window.document.documentElement.focus) {
                            this.window.document.documentElement.focus();
                        } else {
                            if (this.ownerDocumentBody.focus) {
                                this.ownerDocumentBody.focus();
                            }
                        }
                    },
                    focus: function() {
                        if (!this.isLoaded) {
                            this.focusOnLoad = true;
                            return;
                        }
                        if (has("ie") < 9) {
                            this.iframe.fireEvent("onfocus", document.createEventObject());
                        } else {
                            this.editNode.focus();
                        }
                    },
                    updateInterval: 200,
                    _updateTimer: null,
                    onDisplayChanged: function() {
                        if (this._updateTimer) {
                            this._updateTimer.remove();
                        }
                        this._updateTimer = this.defer("onNormalizedDisplayChanged", this.updateInterval);
                    },
                    onNormalizedDisplayChanged: function() {
                        delete this._updateTimer;
                    },
                    onChange: function() {},
                    _normalizeCommand: function(cmd, _865) {
                        var _866 = cmd.toLowerCase();
                        if (_866 === "formatblock") {
                            if (has("safari") && _865 === undefined) {
                                _866 = "heading";
                            }
                        } else {
                            if (_866 === "hilitecolor" && !has("mozilla")) {
                                _866 = "backcolor";
                            }
                        }
                        return _866;
                    },
                    _implCommand: function(cmd) {
                        return "_" + this._normalizeCommand(cmd) + "EnabledImpl";
                    },
                    _qcaCache: {},
                    queryCommandAvailable: function(_867) {
                        var ca = this._qcaCache[_867];
                        if (ca !== undefined) {
                            return ca;
                        }
                        return (this._qcaCache[_867] = this._queryCommandAvailable(_867));
                    },
                    _queryCommandAvailable: function(_868) {
                        switch (_868.toLowerCase()) {
                        case "bold":
                        case "italic":
                        case "underline":
                        case "subscript":
                        case "superscript":
                        case "fontname":
                        case "fontsize":
                        case "forecolor":
                        case "hilitecolor":
                        case "justifycenter":
                        case "justifyfull":
                        case "justifyleft":
                        case "justifyright":
                        case "delete":
                        case "selectall":
                        case "toggledir":
                        case "createlink":
                        case "unlink":
                        case "removeformat":
                        case "inserthorizontalrule":
                        case "insertimage":
                        case "insertorderedlist":
                        case "insertunorderedlist":
                        case "indent":
                        case "outdent":
                        case "formatblock":
                        case "inserthtml":
                        case "undo":
                        case "redo":
                        case "strikethrough":
                        case "tabindent":
                        case "cut":
                        case "copy":
                        case "paste":
                            return true;
                        case "blockdirltr":
                        case "blockdirrtl":
                        case "dirltr":
                        case "dirrtl":
                        case "inlinedirltr":
                        case "inlinedirrtl":
                            return has("ie") || has("trident") || has("edge");
                        case "inserttable":
                        case "insertcell":
                        case "insertcol":
                        case "insertrow":
                        case "deletecells":
                        case "deletecols":
                        case "deleterows":
                        case "mergecells":
                        case "splitcell":
                            return !has("webkit");
                        default:
                            return false;
                        }
                    },
                    execCommand: function(_869, _86a) {
                        var _86b;
                        if (this.focused) {
                            this.focus();
                        }
                        _869 = this._normalizeCommand(_869, _86a);
                        if (_86a !== undefined) {
                            if (_869 === "heading") {
                                throw new Error("unimplemented");
                            } else {
                                if (_869 === "formatblock" && (has("ie") || has("trident"))) {
                                    _86a = "<" + _86a + ">";
                                }
                            }
                        }
                        var _86c = "_" + _869 + "Impl";
                        if (this[_86c]) {
                            _86b = this[_86c](_86a);
                        } else {
                            _86a = arguments.length > 1 ? _86a : null;
                            if (_86a || _869 !== "createlink") {
                                _86b = this.document.execCommand(_869, false, _86a);
                            }
                        }
                        this.onDisplayChanged();
                        return _86b;
                    },
                    queryCommandEnabled: function(_86d) {
                        if (this.disabled || !this._disabledOK) {
                            return false;
                        }
                        _86d = this._normalizeCommand(_86d);
                        var _86e = this._implCommand(_86d);
                        if (this[_86e]) {
                            return this[_86e](_86d);
                        } else {
                            return this._browserQueryCommandEnabled(_86d);
                        }
                    },
                    queryCommandState: function(_86f) {
                        if (this.disabled || !this._disabledOK) {
                            return false;
                        }
                        _86f = this._normalizeCommand(_86f);
                        try {
                            return this.document.queryCommandState(_86f);
                        } catch (e) {
                            return false;
                        }
                    },
                    queryCommandValue: function(_870) {
                        if (this.disabled || !this._disabledOK) {
                            return false;
                        }
                        var r;
                        _870 = this._normalizeCommand(_870);
                        if (has("ie") && _870 === "formatblock") {
                            r = this._native2LocalFormatNames[this.document.queryCommandValue(_870)];
                        } else {
                            if (has("mozilla") && _870 === "hilitecolor") {
                                var _871;
                                try {
                                    _871 = this.document.queryCommandValue("styleWithCSS");
                                } catch (e) {
                                    _871 = false;
                                }
                                this.document.execCommand("styleWithCSS", false, true);
                                r = this.document.queryCommandValue(_870);
                                this.document.execCommand("styleWithCSS", false, _871);
                            } else {
                                r = this.document.queryCommandValue(_870);
                            }
                        }
                        return r;
                    },
                    _sCall: function(name, args) {
                        return this.selection[name].apply(this.selection, args);
                    },
                    placeCursorAtStart: function() {
                        this.focus();
                        var _872 = false;
                        if (has("mozilla")) {
                            var _873 = this.editNode.firstChild;
                            while (_873) {
                                if (_873.nodeType === 3) {
                                    if (_873.nodeValue.replace(/^\s+|\s+$/g, "").length > 0) {
                                        _872 = true;
                                        this.selection.selectElement(_873);
                                        break;
                                    }
                                } else {
                                    if (_873.nodeType === 1) {
                                        _872 = true;
                                        var tg = _873.tagName ? _873.tagName.toLowerCase() : "";
                                        if (/br|input|img|base|meta|area|basefont|hr|link/.test(tg)) {
                                            this.selection.selectElement(_873);
                                        } else {
                                            this.selection.selectElementChildren(_873);
                                        }
                                        break;
                                    }
                                }
                                _873 = _873.nextSibling;
                            }
                        } else {
                            _872 = true;
                            this.selection.selectElementChildren(this.editNode);
                        }
                        if (_872) {
                            this.selection.collapse(true);
                        }
                    },
                    placeCursorAtEnd: function() {
                        this.focus();
                        var _874 = false;
                        if (has("mozilla")) {
                            var last = this.editNode.lastChild;
                            while (last) {
                                if (last.nodeType === 3) {
                                    if (last.nodeValue.replace(/^\s+|\s+$/g, "").length > 0) {
                                        _874 = true;
                                        this.selection.selectElement(last);
                                        break;
                                    }
                                } else {
                                    if (last.nodeType === 1) {
                                        _874 = true;
                                        this.selection.selectElement(last.lastChild || last);
                                        break;
                                    }
                                }
                                last = last.previousSibling;
                            }
                        } else {
                            _874 = true;
                            this.selection.selectElementChildren(this.editNode);
                        }
                        if (_874) {
                            this.selection.collapse(false);
                        }
                    },
                    getValue: function(_875) {
                        if (this.textarea) {
                            if (this.isClosed || !this.isLoaded) {
                                return this.textarea.value;
                            }
                        }
                        return this.isLoaded ? this._postFilterContent(null, _875) : this.value;
                    },
                    _getValueAttr: function() {
                        return this.getValue(true);
                    },
                    setValue: function(html) {
                        if (!this.isLoaded) {
                            this.onLoadDeferred.then(lang.hitch(this, function() {
                                this.setValue(html);
                            }));
                            return;
                        }
                        if (this.textarea && (this.isClosed || !this.isLoaded)) {
                            this.textarea.value = html;
                        } else {
                            html = this._preFilterContent(html);
                            var node = this.isClosed ? this.domNode : this.editNode;
                            node.innerHTML = html;
                            this._preDomFilterContent(node);
                        }
                        this.onDisplayChanged();
                        this._set("value", this.getValue(true));
                    },
                    replaceValue: function(html) {
                        if (this.isClosed) {
                            this.setValue(html);
                        } else {
                            if (this.window && this.window.getSelection && !has("mozilla")) {
                                this.setValue(html);
                            } else {
                                if (this.window && this.window.getSelection) {
                                    html = this._preFilterContent(html);
                                    this.execCommand("selectall");
                                    this.execCommand("inserthtml", html);
                                    this._preDomFilterContent(this.editNode);
                                } else {
                                    if (this.document && this.document.selection) {
                                        this.setValue(html);
                                    }
                                }
                            }
                        }
                        this._set("value", this.getValue(true));
                    },
                    _preFilterContent: function(html) {
                        var ec = html;
                        _824.forEach(this.contentPreFilters, function(ef) {
                            if (ef) {
                                ec = ef(ec);
                            }
                        });
                        return ec;
                    },
                    _preDomFilterContent: function(dom) {
                        dom = dom || this.editNode;
                        _824.forEach(this.contentDomPreFilters, function(ef) {
                            if (ef && lang.isFunction(ef)) {
                                ef(dom);
                            }
                        }, this);
                    },
                    _postFilterContent: function(dom, _876) {
                        var ec;
                        if (!lang.isString(dom)) {
                            dom = dom || this.editNode;
                            if (this.contentDomPostFilters.length) {
                                if (_876) {
                                    dom = lang.clone(dom);
                                }
                                _824.forEach(this.contentDomPostFilters, function(ef) {
                                    dom = ef(dom);
                                });
                            }
                            ec = _839.getChildrenHtml(dom);
                        } else {
                            ec = dom;
                        }
                        if (!lang.trim(ec.replace(/^\xA0\xA0*/, "").replace(/\xA0\xA0*$/, "")).length) {
                            ec = "";
                        }
                        _824.forEach(this.contentPostFilters, function(ef) {
                            ec = ef(ec);
                        });
                        return ec;
                    },
                    _saveContent: function() {
                        var _877 = dom.byId(_83b._scopeName + "._editor.RichText.value");
                        if (_877) {
                            if (_877.value) {
                                _877.value += this._SEPARATOR;
                            }
                            _877.value += this.name + this._NAME_CONTENT_SEP + this.getValue(true);
                        }
                    },
                    escapeXml: function(str, _878) {
                        str = str.replace(/&/gm, "&amp;").replace(/</gm, "&lt;").replace(/>/gm, "&gt;").replace(/"/gm, "&quot;");
                        if (!_878) {
                            str = str.replace(/'/gm, "&#39;");
                        }
                        return str;
                    },
                    getNodeHtml: function(node) {
                        _82d.deprecated("dijit.Editor::getNodeHtml is deprecated", "use dijit/_editor/html::getNodeHtml instead", 2);
                        return _839.getNodeHtml(node);
                    },
                    getNodeChildrenHtml: function(dom) {
                        _82d.deprecated("dijit.Editor::getNodeChildrenHtml is deprecated", "use dijit/_editor/html::getChildrenHtml instead", 2);
                        return _839.getChildrenHtml(dom);
                    },
                    close: function(save) {
                        if (this.isClosed) {
                            return;
                        }
                        if (!arguments.length) {
                            save = true;
                        }
                        if (save) {
                            this._set("value", this.getValue(true));
                        }
                        if (this.interval) {
                            clearInterval(this.interval);
                        }
                        if (this._webkitListener) {
                            this._webkitListener.remove();
                            delete this._webkitListener;
                        }
                        if (has("ie")) {
                            this.iframe.onfocus = null;
                        }
                        this.iframe._loadFunc = null;
                        if (this._iframeRegHandle) {
                            this._iframeRegHandle.remove();
                            delete this._iframeRegHandle;
                        }
                        if (this.textarea) {
                            var s = this.textarea.style;
                            s.position = "";
                            s.left = s.top = "";
                            if (has("ie")) {
                                s.overflow = this.__overflow;
                                this.__overflow = null;
                            }
                            this.textarea.value = this.value;
                            _82a.destroy(this.domNode);
                            this.domNode = this.textarea;
                        } else {
                            this.domNode.innerHTML = this.value;
                        }
                        delete this.iframe;
                        _829.remove(this.domNode, this.baseClass);
                        this.isClosed = true;
                        this.isLoaded = false;
                        delete this.editNode;
                        delete this.focusNode;
                        if (this.window && this.window._frameElement) {
                            this.window._frameElement = null;
                        }
                        this.window = null;
                        this.document = null;
                        this.editingArea = null;
                        this.editorObject = null;
                    },
                    destroy: function() {
                        if (!this.isClosed) {
                            this.close(false);
                        }
                        if (this._updateTimer) {
                            this._updateTimer.remove();
                        }
                        this.inherited(arguments);
                        if (_83c._globalSaveHandler) {
                            delete _83c._globalSaveHandler[this.id];
                        }
                    },
                    _removeMozBogus: function(html) {
                        return html.replace(/\stype="_moz"/gi, "").replace(/\s_moz_dirty=""/gi, "").replace(/_moz_resizing="(true|false)"/gi, "");
                    },
                    _removeWebkitBogus: function(html) {
                        html = html.replace(/\sclass="webkit-block-placeholder"/gi, "");
                        html = html.replace(/\sclass="apple-style-span"/gi, "");
                        html = html.replace(/<meta charset=\"utf-8\" \/>/gi, "");
                        return html;
                    },
                    _normalizeFontStyle: function(html) {
                        return html.replace(/<(\/)?strong([ \>])/gi, "<$1b$2").replace(/<(\/)?em([ \>])/gi, "<$1i$2");
                    },
                    _preFixUrlAttributes: function(html) {
                        return html.replace(/(?:(<a(?=\s).*?\shref=)("|')(.*?)\2)|(?:(<a\s.*?href=)([^"'][^ >]+))/gi, "$1$4$2$3$5$2 _djrealurl=$2$3$5$2").replace(/(?:(<img(?=\s).*?\ssrc=)("|')(.*?)\2)|(?:(<img\s.*?src=)([^"'][^ >]+))/gi, "$1$4$2$3$5$2 _djrealurl=$2$3$5$2");
                    },
                    _browserQueryCommandEnabled: function(_879) {
                        if (!_879) {
                            return false;
                        }
                        var elem = has("ie") < 9 ? this.document.selection.createRange() : this.document;
                        try {
                            return elem.queryCommandEnabled(_879);
                        } catch (e) {
                            return false;
                        }
                    },
                    _createlinkEnabledImpl: function() {
                        var _87a = true;
                        if (has("opera")) {
                            var sel = this.window.getSelection();
                            if (sel.isCollapsed) {
                                _87a = true;
                            } else {
                                _87a = this.document.queryCommandEnabled("createlink");
                            }
                        } else {
                            _87a = this._browserQueryCommandEnabled("createlink");
                        }
                        return _87a;
                    },
                    _unlinkEnabledImpl: function() {
                        var _87b = true;
                        if (has("mozilla") || has("webkit")) {
                            _87b = this.selection.hasAncestorElement("a");
                        } else {
                            _87b = this._browserQueryCommandEnabled("unlink");
                        }
                        return _87b;
                    },
                    _inserttableEnabledImpl: function() {
                        var _87c = true;
                        if (has("mozilla") || has("webkit")) {
                            _87c = true;
                        } else {
                            _87c = this._browserQueryCommandEnabled("inserttable");
                        }
                        return _87c;
                    },
                    _cutEnabledImpl: function() {
                        var _87d = true;
                        if (has("webkit")) {
                            var sel = this.window.getSelection();
                            if (sel) {
                                sel = sel.toString();
                            }
                            _87d = !!sel;
                        } else {
                            _87d = this._browserQueryCommandEnabled("cut");
                        }
                        return _87d;
                    },
                    _copyEnabledImpl: function() {
                        var _87e = true;
                        if (has("webkit")) {
                            var sel = this.window.getSelection();
                            if (sel) {
                                sel = sel.toString();
                            }
                            _87e = !!sel;
                        } else {
                            _87e = this._browserQueryCommandEnabled("copy");
                        }
                        return _87e;
                    },
                    _pasteEnabledImpl: function() {
                        var _87f = true;
                        if (has("webkit")) {
                            return true;
                        } else {
                            _87f = this._browserQueryCommandEnabled("paste");
                        }
                        return _87f;
                    },
                    _inserthorizontalruleImpl: function(_880) {
                        if (has("ie")) {
                            return this._inserthtmlImpl("<hr>");
                        }
                        return this.document.execCommand("inserthorizontalrule", false, _880);
                    },
                    _unlinkImpl: function(_881) {
                        if ((this.queryCommandEnabled("unlink")) && (has("mozilla") || has("webkit"))) {
                            var a = this.selection.getAncestorElement("a");
                            this.selection.selectElement(a);
                            return this.document.execCommand("unlink", false, null);
                        }
                        return this.document.execCommand("unlink", false, _881);
                    },
                    _hilitecolorImpl: function(_882) {
                        var _883;
                        var _884 = this._handleTextColorOrProperties("hilitecolor", _882);
                        if (!_884) {
                            if (has("mozilla")) {
                                this.document.execCommand("styleWithCSS", false, true);
                                _883 = this.document.execCommand("hilitecolor", false, _882);
                                this.document.execCommand("styleWithCSS", false, false);
                            } else {
                                _883 = this.document.execCommand("hilitecolor", false, _882);
                            }
                        }
                        return _883;
                    },
                    _backcolorImpl: function(_885) {
                        if (has("ie")) {
                            _885 = _885 ? _885 : null;
                        }
                        var _886 = this._handleTextColorOrProperties("backcolor", _885);
                        if (!_886) {
                            _886 = this.document.execCommand("backcolor", false, _885);
                        }
                        return _886;
                    },
                    _forecolorImpl: function(_887) {
                        if (has("ie")) {
                            _887 = _887 ? _887 : null;
                        }
                        var _888 = false;
                        _888 = this._handleTextColorOrProperties("forecolor", _887);
                        if (!_888) {
                            _888 = this.document.execCommand("forecolor", false, _887);
                        }
                        return _888;
                    },
                    _inserthtmlImpl: function(_889) {
                        _889 = this._preFilterContent(_889);
                        var rv = true;
                        if (has("ie") < 9) {
                            var _88a = this.document.selection.createRange();
                            if (this.document.selection.type.toUpperCase() === "CONTROL") {
                                var n = _88a.item(0);
                                while (_88a.length) {
                                    _88a.remove(_88a.item(0));
                                }
                                n.outerHTML = _889;
                            } else {
                                _88a.pasteHTML(_889);
                            }
                            _88a.select();
                        } else {
                            if (has("trident") < 8) {
                                var _88a;
                                var _88b = _838.getSelection(this.window);
                                if (_88b && _88b.rangeCount && _88b.getRangeAt) {
                                    _88a = _88b.getRangeAt(0);
                                    _88a.deleteContents();
                                    var div = _82a.create("div");
                                    div.innerHTML = _889;
                                    var node, _88c;
                                    var n = this.document.createDocumentFragment();
                                    while ((node = div.firstChild)) {
                                        _88c = n.appendChild(node);
                                    }
                                    _88a.insertNode(n);
                                    if (_88c) {
                                        _88a = _88a.cloneRange();
                                        _88a.setStartAfter(_88c);
                                        _88a.collapse(false);
                                        _88b.removeAllRanges();
                                        _88b.addRange(_88a);
                                    }
                                }
                            } else {
                                if (has("mozilla") && !_889.length) {
                                    this.selection.remove();
                                } else {
                                    rv = this.document.execCommand("inserthtml", false, _889);
                                }
                            }
                        }
                        return rv;
                    },
                    _boldImpl: function(_88d) {
                        var _88e = false;
                        if (has("ie") || has("trident")) {
                            this._adaptIESelection();
                            _88e = this._adaptIEFormatAreaAndExec("bold");
                        }
                        if (!_88e) {
                            _88e = this.document.execCommand("bold", false, _88d);
                        }
                        return _88e;
                    },
                    _italicImpl: function(_88f) {
                        var _890 = false;
                        if (has("ie") || has("trident")) {
                            this._adaptIESelection();
                            _890 = this._adaptIEFormatAreaAndExec("italic");
                        }
                        if (!_890) {
                            _890 = this.document.execCommand("italic", false, _88f);
                        }
                        return _890;
                    },
                    _underlineImpl: function(_891) {
                        var _892 = false;
                        if (has("ie") || has("trident")) {
                            this._adaptIESelection();
                            _892 = this._adaptIEFormatAreaAndExec("underline");
                        }
                        if (!_892) {
                            _892 = this.document.execCommand("underline", false, _891);
                        }
                        return _892;
                    },
                    _strikethroughImpl: function(_893) {
                        var _894 = false;
                        if (has("ie") || has("trident")) {
                            this._adaptIESelection();
                            _894 = this._adaptIEFormatAreaAndExec("strikethrough");
                        }
                        if (!_894) {
                            _894 = this.document.execCommand("strikethrough", false, _893);
                        }
                        return _894;
                    },
                    _superscriptImpl: function(_895) {
                        var _896 = false;
                        if (has("ie") || has("trident")) {
                            this._adaptIESelection();
                            _896 = this._adaptIEFormatAreaAndExec("superscript");
                        }
                        if (!_896) {
                            _896 = this.document.execCommand("superscript", false, _895);
                        }
                        return _896;
                    },
                    _subscriptImpl: function(_897) {
                        var _898 = false;
                        if (has("ie") || has("trident")) {
                            this._adaptIESelection();
                            _898 = this._adaptIEFormatAreaAndExec("subscript");
                        }
                        if (!_898) {
                            _898 = this.document.execCommand("subscript", false, _897);
                        }
                        return _898;
                    },
                    _fontnameImpl: function(_899) {
                        var _89a;
                        if (has("ie") || has("trident")) {
                            _89a = this._handleTextColorOrProperties("fontname", _899);
                        }
                        if (!_89a) {
                            _89a = this.document.execCommand("fontname", false, _899);
                        }
                        return _89a;
                    },
                    _fontsizeImpl: function(_89b) {
                        var _89c;
                        if (has("ie") || has("trident")) {
                            _89c = this._handleTextColorOrProperties("fontsize", _89b);
                        }
                        if (!_89c) {
                            _89c = this.document.execCommand("fontsize", false, _89b);
                        }
                        return _89c;
                    },
                    _insertorderedlistImpl: function(_89d) {
                        var _89e = false;
                        if (has("ie") || has("trident") || has("edge")) {
                            _89e = this._adaptIEList("insertorderedlist", _89d);
                        }
                        if (!_89e) {
                            _89e = this.document.execCommand("insertorderedlist", false, _89d);
                        }
                        return _89e;
                    },
                    _insertunorderedlistImpl: function(_89f) {
                        var _8a0 = false;
                        if (has("ie") || has("trident") || has("edge")) {
                            _8a0 = this._adaptIEList("insertunorderedlist", _89f);
                        }
                        if (!_8a0) {
                            _8a0 = this.document.execCommand("insertunorderedlist", false, _89f);
                        }
                        return _8a0;
                    },
                    getHeaderHeight: function() {
                        return this._getNodeChildrenHeight(this.header);
                    },
                    getFooterHeight: function() {
                        return this._getNodeChildrenHeight(this.footer);
                    },
                    _getNodeChildrenHeight: function(node) {
                        var h = 0;
                        if (node && node.childNodes) {
                            var i;
                            for (i = 0; i < node.childNodes.length; i++) {
                                var size = _82b.position(node.childNodes[i]);
                                h += size.h;
                            }
                        }
                        return h;
                    },
                    _isNodeEmpty: function(node, _8a1) {
                        if (node.nodeType === 1) {
                            if (node.childNodes.length > 0) {
                                return this._isNodeEmpty(node.childNodes[0], _8a1);
                            }
                            return true;
                        } else {
                            if (node.nodeType === 3) {
                                return (node.nodeValue.substring(_8a1) === "");
                            }
                        }
                        return false;
                    },
                    _removeStartingRangeFromRange: function(node, _8a2) {
                        if (node.nextSibling) {
                            _8a2.setStart(node.nextSibling, 0);
                        } else {
                            var _8a3 = node.parentNode;
                            while (_8a3 && _8a3.nextSibling == null) {
                                _8a3 = _8a3.parentNode;
                            }
                            if (_8a3) {
                                _8a2.setStart(_8a3.nextSibling, 0);
                            }
                        }
                        return _8a2;
                    },
                    _adaptIESelection: function() {
                        var _8a4 = _838.getSelection(this.window);
                        if (_8a4 && _8a4.rangeCount && !_8a4.isCollapsed) {
                            var _8a5 = _8a4.getRangeAt(0);
                            var _8a6 = _8a5.startContainer;
                            var _8a7 = _8a5.startOffset;
                            while (_8a6.nodeType === 3 && _8a7 >= _8a6.length && _8a6.nextSibling) {
                                _8a7 = _8a7 - _8a6.length;
                                _8a6 = _8a6.nextSibling;
                            }
                            var _8a8 = null;
                            while (this._isNodeEmpty(_8a6, _8a7) && _8a6 !== _8a8) {
                                _8a8 = _8a6;
                                _8a5 = this._removeStartingRangeFromRange(_8a6, _8a5);
                                _8a6 = _8a5.startContainer;
                                _8a7 = 0;
                            }
                            _8a4.removeAllRanges();
                            _8a4.addRange(_8a5);
                        }
                    },
                    _adaptIEFormatAreaAndExec: function(_8a9) {
                        var _8aa = _838.getSelection(this.window);
                        var doc = this.document;
                        var rs, ret, _8ab, txt, _8ac, _8ad, _8ae, _8af;
                        if (_8a9 && _8aa && _8aa.isCollapsed) {
                            var _8b0 = this.queryCommandValue(_8a9);
                            if (_8b0) {
                                var _8b1 = this._tagNamesForCommand(_8a9);
                                _8ab = _8aa.getRangeAt(0);
                                var fs = _8ab.startContainer;
                                if (fs.nodeType === 3) {
                                    var _8b2 = _8ab.endOffset;
                                    if (fs.length < _8b2) {
                                        ret = this._adjustNodeAndOffset(rs, _8b2);
                                        fs = ret.node;
                                        _8b2 = ret.offset;
                                    }
                                }
                                var _8b3;
                                while (fs && fs !== this.editNode) {
                                    var _8b4 = fs.tagName ? fs.tagName.toLowerCase() : "";
                                    if (_824.indexOf(_8b1, _8b4) > -1) {
                                        _8b3 = fs;
                                        break;
                                    }
                                    fs = fs.parentNode;
                                }
                                if (_8b3) {
                                    rs = _8ab.startContainer;
                                    var _8b5 = doc.createElement(_8b3.tagName);
                                    _82a.place(_8b5, _8b3, "after");
                                    if (rs && rs.nodeType === 3) {
                                        var _8b6, _8b7;
                                        var _8b8 = _8ab.endOffset;
                                        if (rs.length < _8b8) {
                                            ret = this._adjustNodeAndOffset(rs, _8b8);
                                            rs = ret.node;
                                            _8b8 = ret.offset;
                                        }
                                        txt = rs.nodeValue;
                                        _8ac = doc.createTextNode(txt.substring(0, _8b8));
                                        var _8b9 = txt.substring(_8b8, txt.length);
                                        if (_8b9) {
                                            _8ad = doc.createTextNode(_8b9);
                                        }
                                        _82a.place(_8ac, rs, "before");
                                        if (_8ad) {
                                            _8ae = doc.createElement("span");
                                            _8ae.className = "ieFormatBreakerSpan";
                                            _82a.place(_8ae, rs, "after");
                                            _82a.place(_8ad, _8ae, "after");
                                            _8ad = _8ae;
                                        }
                                        _82a.destroy(rs);
                                        var _8ba = _8ac.parentNode;
                                        var _8bb = [];
                                        var _8bc;
                                        while (_8ba !== _8b3) {
                                            var tg = _8ba.tagName;
                                            _8bc = {
                                                tagName: tg
                                            };
                                            _8bb.push(_8bc);
                                            var _8bd = doc.createElement(tg);
                                            if (_8ba.style) {
                                                if (_8bd.style) {
                                                    if (_8ba.style.cssText) {
                                                        _8bd.style.cssText = _8ba.style.cssText;
                                                        _8bc.cssText = _8ba.style.cssText;
                                                    }
                                                }
                                            }
                                            if (_8ba.tagName === "FONT") {
                                                if (_8ba.color) {
                                                    _8bd.color = _8ba.color;
                                                    _8bc.color = _8ba.color;
                                                }
                                                if (_8ba.face) {
                                                    _8bd.face = _8ba.face;
                                                    _8bc.face = _8ba.face;
                                                }
                                                if (_8ba.size) {
                                                    _8bd.size = _8ba.size;
                                                    _8bc.size = _8ba.size;
                                                }
                                            }
                                            if (_8ba.className) {
                                                _8bd.className = _8ba.className;
                                                _8bc.className = _8ba.className;
                                            }
                                            if (_8ad) {
                                                _8b6 = _8ad;
                                                while (_8b6) {
                                                    _8b7 = _8b6.nextSibling;
                                                    _8bd.appendChild(_8b6);
                                                    _8b6 = _8b7;
                                                }
                                            }
                                            if (_8bd.tagName == _8ba.tagName) {
                                                _8ae = doc.createElement("span");
                                                _8ae.className = "ieFormatBreakerSpan";
                                                _82a.place(_8ae, _8ba, "after");
                                                _82a.place(_8bd, _8ae, "after");
                                            } else {
                                                _82a.place(_8bd, _8ba, "after");
                                            }
                                            _8ac = _8ba;
                                            _8ad = _8bd;
                                            _8ba = _8ba.parentNode;
                                        }
                                        if (_8ad) {
                                            _8b6 = _8ad;
                                            if (_8b6.nodeType === 1 || (_8b6.nodeType === 3 && _8b6.nodeValue)) {
                                                _8b5.innerHTML = "";
                                            }
                                            while (_8b6) {
                                                _8b7 = _8b6.nextSibling;
                                                _8b5.appendChild(_8b6);
                                                _8b6 = _8b7;
                                            }
                                        }
                                        var _8be;
                                        if (_8bb.length) {
                                            _8bc = _8bb.pop();
                                            var _8bf = doc.createElement(_8bc.tagName);
                                            if (_8bc.cssText && _8bf.style) {
                                                _8bf.style.cssText = _8bc.cssText;
                                            }
                                            if (_8bc.className) {
                                                _8bf.className = _8bc.className;
                                            }
                                            if (_8bc.tagName === "FONT") {
                                                if (_8bc.color) {
                                                    _8bf.color = _8bc.color;
                                                }
                                                if (_8bc.face) {
                                                    _8bf.face = _8bc.face;
                                                }
                                                if (_8bc.size) {
                                                    _8bf.size = _8bc.size;
                                                }
                                            }
                                            _82a.place(_8bf, _8b5, "before");
                                            while (_8bb.length) {
                                                _8bc = _8bb.pop();
                                                var _8c0 = doc.createElement(_8bc.tagName);
                                                if (_8bc.cssText && _8c0.style) {
                                                    _8c0.style.cssText = _8bc.cssText;
                                                }
                                                if (_8bc.className) {
                                                    _8c0.className = _8bc.className;
                                                }
                                                if (_8bc.tagName === "FONT") {
                                                    if (_8bc.color) {
                                                        _8c0.color = _8bc.color;
                                                    }
                                                    if (_8bc.face) {
                                                        _8c0.face = _8bc.face;
                                                    }
                                                    if (_8bc.size) {
                                                        _8c0.size = _8bc.size;
                                                    }
                                                }
                                                _8bf.appendChild(_8c0);
                                                _8bf = _8c0;
                                            }
                                            _8af = doc.createTextNode(".");
                                            _8ae.appendChild(_8af);
                                            _8bf.appendChild(_8af);
                                            _8be = _838.create(this.window);
                                            _8be.setStart(_8af, 0);
                                            _8be.setEnd(_8af, _8af.length);
                                            _8aa.removeAllRanges();
                                            _8aa.addRange(_8be);
                                            this.selection.collapse(false);
                                            _8af.parentNode.innerHTML = "";
                                        } else {
                                            _8ae = doc.createElement("span");
                                            _8ae.className = "ieFormatBreakerSpan";
                                            _8af = doc.createTextNode(".");
                                            _8ae.appendChild(_8af);
                                            _82a.place(_8ae, _8b5, "before");
                                            _8be = _838.create(this.window);
                                            _8be.setStart(_8af, 0);
                                            _8be.setEnd(_8af, _8af.length);
                                            _8aa.removeAllRanges();
                                            _8aa.addRange(_8be);
                                            this.selection.collapse(false);
                                            _8af.parentNode.innerHTML = "";
                                        }
                                        if (!_8b5.firstChild) {
                                            _82a.destroy(_8b5);
                                        }
                                        return true;
                                    }
                                }
                                return false;
                            } else {
                                _8ab = _8aa.getRangeAt(0);
                                rs = _8ab.startContainer;
                                if (rs && rs.nodeType === 3) {
                                    var _8b2 = _8ab.startOffset;
                                    if (rs.length < _8b2) {
                                        ret = this._adjustNodeAndOffset(rs, _8b2);
                                        rs = ret.node;
                                        _8b2 = ret.offset;
                                    }
                                    txt = rs.nodeValue;
                                    _8ac = doc.createTextNode(txt.substring(0, _8b2));
                                    var _8b9 = txt.substring(_8b2);
                                    if (_8b9 !== "") {
                                        _8ad = doc.createTextNode(txt.substring(_8b2));
                                    }
                                    _8ae = doc.createElement("span");
                                    _8af = doc.createTextNode(".");
                                    _8ae.appendChild(_8af);
                                    if (_8ac.length) {
                                        _82a.place(_8ac, rs, "after");
                                    } else {
                                        _8ac = rs;
                                    }
                                    _82a.place(_8ae, _8ac, "after");
                                    if (_8ad) {
                                        _82a.place(_8ad, _8ae, "after");
                                    }
                                    _82a.destroy(rs);
                                    var _8be = _838.create(this.window);
                                    _8be.setStart(_8af, 0);
                                    _8be.setEnd(_8af, _8af.length);
                                    _8aa.removeAllRanges();
                                    _8aa.addRange(_8be);
                                    doc.execCommand(_8a9);
                                    _82a.place(_8ae.firstChild, _8ae, "before");
                                    _82a.destroy(_8ae);
                                    _8be.setStart(_8af, 0);
                                    _8be.setEnd(_8af, _8af.length);
                                    _8aa.removeAllRanges();
                                    _8aa.addRange(_8be);
                                    this.selection.collapse(false);
                                    _8af.parentNode.innerHTML = "";
                                    return true;
                                }
                            }
                        } else {
                            return false;
                        }
                    },
                    _adaptIEList: function(_8c1) {
                        var _8c2 = _838.getSelection(this.window);
                        if (_8c2.isCollapsed) {
                            if (_8c2.rangeCount && !this.queryCommandValue(_8c1)) {
                                var _8c3 = _8c2.getRangeAt(0);
                                var sc = _8c3.startContainer;
                                if (sc && sc.nodeType == 3) {
                                    if (!_8c3.startOffset) {
                                        var _8c4 = "ul";
                                        if (_8c1 === "insertorderedlist") {
                                            _8c4 = "ol";
                                        }
                                        var list = this.document.createElement(_8c4);
                                        var li = _82a.create("li", null, list);
                                        _82a.place(list, sc, "before");
                                        li.appendChild(sc);
                                        _82a.create("br", null, list, "after");
                                        var _8c5 = _838.create(this.window);
                                        _8c5.setStart(sc, 0);
                                        _8c5.setEnd(sc, sc.length);
                                        _8c2.removeAllRanges();
                                        _8c2.addRange(_8c5);
                                        this.selection.collapse(true);
                                        return true;
                                    }
                                }
                            }
                        }
                        return false;
                    },
                    _handleTextColorOrProperties: function(_8c6, _8c7) {
                        var _8c8 = _838.getSelection(this.window);
                        var doc = this.document;
                        var rs, ret, _8c9, txt, _8ca, _8cb, _8cc, _8cd;
                        _8c7 = _8c7 || null;
                        if (_8c6 && _8c8 && _8c8.isCollapsed) {
                            if (_8c8.rangeCount) {
                                _8c9 = _8c8.getRangeAt(0);
                                rs = _8c9.startContainer;
                                if (rs && rs.nodeType === 3) {
                                    var _8ce = _8c9.startOffset;
                                    if (rs.length < _8ce) {
                                        ret = this._adjustNodeAndOffset(rs, _8ce);
                                        rs = ret.node;
                                        _8ce = ret.offset;
                                    }
                                    txt = rs.nodeValue;
                                    _8ca = doc.createTextNode(txt.substring(0, _8ce));
                                    var _8cf = txt.substring(_8ce);
                                    if (_8cf !== "") {
                                        _8cb = doc.createTextNode(txt.substring(_8ce));
                                    }
                                    _8cc = doc.createElement("span");
                                    _8cd = doc.createTextNode(".");
                                    _8cc.appendChild(_8cd);
                                    var _8d0 = doc.createElement("span");
                                    _8cc.appendChild(_8d0);
                                    if (_8ca.length) {
                                        _82a.place(_8ca, rs, "after");
                                    } else {
                                        _8ca = rs;
                                    }
                                    _82a.place(_8cc, _8ca, "after");
                                    if (_8cb) {
                                        _82a.place(_8cb, _8cc, "after");
                                    }
                                    _82a.destroy(rs);
                                    var _8d1 = _838.create(this.window);
                                    _8d1.setStart(_8cd, 0);
                                    _8d1.setEnd(_8cd, _8cd.length);
                                    _8c8.removeAllRanges();
                                    _8c8.addRange(_8d1);
                                    if (has("webkit")) {
                                        var _8d2 = "color";
                                        if (_8c6 === "hilitecolor" || _8c6 === "backcolor") {
                                            _8d2 = "backgroundColor";
                                        }
                                        _82c.set(_8cc, _8d2, _8c7);
                                        this.selection.remove();
                                        _82a.destroy(_8d0);
                                        _8cc.innerHTML = "&#160;";
                                        this.selection.selectElement(_8cc);
                                        this.focus();
                                    } else {
                                        this.execCommand(_8c6, _8c7);
                                        _82a.place(_8cc.firstChild, _8cc, "before");
                                        _82a.destroy(_8cc);
                                        _8d1.setStart(_8cd, 0);
                                        _8d1.setEnd(_8cd, _8cd.length);
                                        _8c8.removeAllRanges();
                                        _8c8.addRange(_8d1);
                                        this.selection.collapse(false);
                                        _8cd.parentNode.removeChild(_8cd);
                                    }
                                    return true;
                                }
                            }
                        }
                        return false;
                    },
                    _adjustNodeAndOffset: function(node, _8d3) {
                        while (node.length < _8d3 && node.nextSibling && node.nextSibling.nodeType === 3) {
                            _8d3 = _8d3 - node.length;
                            node = node.nextSibling;
                        }
                        return {
                            "node": node,
                            "offset": _8d3
                        };
                    },
                    _tagNamesForCommand: function(_8d4) {
                        if (_8d4 === "bold") {
                            return ["b", "strong"];
                        } else {
                            if (_8d4 === "italic") {
                                return ["i", "em"];
                            } else {
                                if (_8d4 === "strikethrough") {
                                    return ["s", "strike"];
                                } else {
                                    if (_8d4 === "superscript") {
                                        return ["sup"];
                                    } else {
                                        if (_8d4 === "subscript") {
                                            return ["sub"];
                                        } else {
                                            if (_8d4 === "underline") {
                                                return ["u"];
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        return [];
                    },
                    _stripBreakerNodes: function(node) {
                        if (!this.isLoaded) {
                            return;
                        }
                        _82e(".ieFormatBreakerSpan", node).forEach(function(b) {
                            while (b.firstChild) {
                                _82a.place(b.firstChild, b, "before");
                            }
                            _82a.destroy(b);
                        });
                        return node;
                    },
                    _stripTrailingEmptyNodes: function(node) {
                        function _8d5(node) {
                            return (/^(p|div|br)$/i.test(node.nodeName) && node.children.length == 0 && /^[\s\xA0]*$/.test(node.textContent || node.innerText || "")) || (node.nodeType === 3 && /^[\s\xA0]*$/.test(node.nodeValue));
                        }
                        ;while (node.lastChild && _8d5(node.lastChild)) {
                            _82a.destroy(node.lastChild);
                        }
                        return node;
                    },
                    _setTextDirAttr: function(_8d6) {
                        this._set("textDir", _8d6);
                        this.onLoadDeferred.then(lang.hitch(this, function() {
                            this.editNode.dir = _8d6;
                        }));
                    }
                });
                return _83c;
            });
        },
        "dijit/selection": function() {
            define(["dojo/_base/array", "dojo/dom", "dojo/_base/lang", "dojo/sniff", "dojo/_base/window", "dijit/focus"], function(_8d7, dom, lang, has, _8d8, _8d9) {
                var _8da = function(win) {
                    var doc = win.document;
                    this.getType = function() {
                        if (doc.getSelection) {
                            var _8db = "text";
                            var oSel;
                            try {
                                oSel = win.getSelection();
                            } catch (e) {}
                            if (oSel && oSel.rangeCount == 1) {
                                var _8dc = oSel.getRangeAt(0);
                                if ((_8dc.startContainer == _8dc.endContainer) && ((_8dc.endOffset - _8dc.startOffset) == 1) && (_8dc.startContainer.nodeType != 3)) {
                                    _8db = "control";
                                }
                            }
                            return _8db;
                        } else {
                            return doc.selection.type.toLowerCase();
                        }
                    }
                    ;
                    this.getSelectedText = function() {
                        if (doc.getSelection) {
                            var _8dd = win.getSelection();
                            return _8dd ? _8dd.toString() : "";
                        } else {
                            if (this.getType() == "control") {
                                return null;
                            }
                            return doc.selection.createRange().text;
                        }
                    }
                    ;
                    this.getSelectedHtml = function() {
                        if (doc.getSelection) {
                            var _8de = win.getSelection();
                            if (_8de && _8de.rangeCount) {
                                var i;
                                var html = "";
                                for (i = 0; i < _8de.rangeCount; i++) {
                                    var frag = _8de.getRangeAt(i).cloneContents();
                                    var div = doc.createElement("div");
                                    div.appendChild(frag);
                                    html += div.innerHTML;
                                }
                                return html;
                            }
                            return null;
                        } else {
                            if (this.getType() == "control") {
                                return null;
                            }
                            return doc.selection.createRange().htmlText;
                        }
                    }
                    ;
                    this.getSelectedElement = function() {
                        if (this.getType() == "control") {
                            if (doc.getSelection) {
                                var _8df = win.getSelection();
                                return _8df.anchorNode.childNodes[_8df.anchorOffset];
                            } else {
                                var _8e0 = doc.selection.createRange();
                                if (_8e0 && _8e0.item) {
                                    return doc.selection.createRange().item(0);
                                }
                            }
                        }
                        return null;
                    }
                    ;
                    this.getParentElement = function() {
                        if (this.getType() == "control") {
                            var p = this.getSelectedElement();
                            if (p) {
                                return p.parentNode;
                            }
                        } else {
                            if (doc.getSelection) {
                                var _8e1 = doc.getSelection();
                                if (_8e1) {
                                    var node = _8e1.anchorNode;
                                    while (node && (node.nodeType != 1)) {
                                        node = node.parentNode;
                                    }
                                    return node;
                                }
                            } else {
                                var r = doc.selection.createRange();
                                r.collapse(true);
                                return r.parentElement();
                            }
                        }
                        return null;
                    }
                    ;
                    this.hasAncestorElement = function(_8e2) {
                        return this.getAncestorElement.apply(this, arguments) != null;
                    }
                    ;
                    this.getAncestorElement = function(_8e3) {
                        var node = this.getSelectedElement() || this.getParentElement();
                        return this.getParentOfType(node, arguments);
                    }
                    ;
                    this.isTag = function(node, tags) {
                        if (node && node.tagName) {
                            var _8e4 = node.tagName.toLowerCase();
                            for (var i = 0; i < tags.length; i++) {
                                var _8e5 = String(tags[i]).toLowerCase();
                                if (_8e4 == _8e5) {
                                    return _8e5;
                                }
                            }
                        }
                        return "";
                    }
                    ;
                    this.getParentOfType = function(node, tags) {
                        while (node) {
                            if (this.isTag(node, tags).length) {
                                return node;
                            }
                            node = node.parentNode;
                        }
                        return null;
                    }
                    ;
                    this.collapse = function(_8e6) {
                        if (doc.getSelection) {
                            var _8e7 = win.getSelection();
                            if (_8e7.removeAllRanges) {
                                if (_8e6) {
                                    _8e7.collapseToStart();
                                } else {
                                    _8e7.collapseToEnd();
                                }
                            } else {
                                _8e7.collapse(_8e6);
                            }
                        } else {
                            var _8e8 = doc.selection.createRange();
                            _8e8.collapse(_8e6);
                            _8e8.select();
                        }
                    }
                    ;
                    this.remove = function() {
                        var sel = doc.selection;
                        if (doc.getSelection) {
                            sel = win.getSelection();
                            sel.deleteFromDocument();
                            return sel;
                        } else {
                            if (sel.type.toLowerCase() != "none") {
                                sel.clear();
                            }
                            return sel;
                        }
                    }
                    ;
                    this.selectElementChildren = function(_8e9, _8ea) {
                        var _8eb;
                        _8e9 = dom.byId(_8e9);
                        if (doc.getSelection) {
                            var _8ec = win.getSelection();
                            if (has("opera")) {
                                if (_8ec.rangeCount) {
                                    _8eb = _8ec.getRangeAt(0);
                                } else {
                                    _8eb = doc.createRange();
                                }
                                _8eb.setStart(_8e9, 0);
                                _8eb.setEnd(_8e9, (_8e9.nodeType == 3) ? _8e9.length : _8e9.childNodes.length);
                                _8ec.addRange(_8eb);
                            } else {
                                _8ec.selectAllChildren(_8e9);
                            }
                        } else {
                            _8eb = _8e9.ownerDocument.body.createTextRange();
                            _8eb.moveToElementText(_8e9);
                            if (!_8ea) {
                                try {
                                    _8eb.select();
                                } catch (e) {}
                            }
                        }
                    }
                    ;
                    this.selectElement = function(_8ed, _8ee) {
                        var _8ef;
                        _8ed = dom.byId(_8ed);
                        if (doc.getSelection) {
                            var _8f0 = doc.getSelection();
                            _8ef = doc.createRange();
                            if (_8f0.removeAllRanges) {
                                if (has("opera")) {
                                    if (_8f0.getRangeAt(0)) {
                                        _8ef = _8f0.getRangeAt(0);
                                    }
                                }
                                _8ef.selectNode(_8ed);
                                _8f0.removeAllRanges();
                                _8f0.addRange(_8ef);
                            }
                        } else {
                            try {
                                var tg = _8ed.tagName ? _8ed.tagName.toLowerCase() : "";
                                if (tg === "img" || tg === "table") {
                                    _8ef = _8d8.body(doc).createControlRange();
                                } else {
                                    _8ef = _8d8.body(doc).createRange();
                                }
                                _8ef.addElement(_8ed);
                                if (!_8ee) {
                                    _8ef.select();
                                }
                            } catch (e) {
                                this.selectElementChildren(_8ed, _8ee);
                            }
                        }
                    }
                    ;
                    this.inSelection = function(node) {
                        if (node) {
                            var _8f1;
                            var _8f2;
                            if (doc.getSelection) {
                                var sel = win.getSelection();
                                if (sel && sel.rangeCount > 0) {
                                    _8f2 = sel.getRangeAt(0);
                                }
                                if (_8f2 && _8f2.compareBoundaryPoints && doc.createRange) {
                                    try {
                                        _8f1 = doc.createRange();
                                        _8f1.setStart(node, 0);
                                        if (_8f2.compareBoundaryPoints(_8f2.START_TO_END, _8f1) === 1) {
                                            return true;
                                        }
                                    } catch (e) {}
                                }
                            } else {
                                _8f2 = doc.selection.createRange();
                                try {
                                    _8f1 = node.ownerDocument.body.createTextRange();
                                    _8f1.moveToElementText(node);
                                } catch (e2) {}
                                if (_8f2 && _8f1) {
                                    if (_8f2.compareEndPoints("EndToStart", _8f1) === 1) {
                                        return true;
                                    }
                                }
                            }
                        }
                        return false;
                    }
                    ;
                    this.getBookmark = function() {
                        var bm, rg, tg, sel = doc.selection, cf = _8d9.curNode;
                        if (doc.getSelection) {
                            sel = win.getSelection();
                            if (sel) {
                                if (sel.isCollapsed) {
                                    tg = cf ? cf.tagName : "";
                                    if (tg) {
                                        tg = tg.toLowerCase();
                                        if (tg == "textarea" || (tg == "input" && (!cf.type || cf.type.toLowerCase() == "text"))) {
                                            sel = {
                                                start: cf.selectionStart,
                                                end: cf.selectionEnd,
                                                node: cf,
                                                pRange: true
                                            };
                                            return {
                                                isCollapsed: (sel.end <= sel.start),
                                                mark: sel
                                            };
                                        }
                                    }
                                    bm = {
                                        isCollapsed: true
                                    };
                                    if (sel.rangeCount) {
                                        bm.mark = sel.getRangeAt(0).cloneRange();
                                    }
                                } else {
                                    rg = sel.getRangeAt(0);
                                    bm = {
                                        isCollapsed: false,
                                        mark: rg.cloneRange()
                                    };
                                }
                            }
                        } else {
                            if (sel) {
                                tg = cf ? cf.tagName : "";
                                tg = tg.toLowerCase();
                                if (cf && tg && (tg == "button" || tg == "textarea" || tg == "input")) {
                                    if (sel.type && sel.type.toLowerCase() == "none") {
                                        return {
                                            isCollapsed: true,
                                            mark: null
                                        };
                                    } else {
                                        rg = sel.createRange();
                                        return {
                                            isCollapsed: rg.text && rg.text.length ? false : true,
                                            mark: {
                                                range: rg,
                                                pRange: true
                                            }
                                        };
                                    }
                                }
                                bm = {};
                                try {
                                    rg = sel.createRange();
                                    bm.isCollapsed = !(sel.type == "Text" ? rg.htmlText.length : rg.length);
                                } catch (e) {
                                    bm.isCollapsed = true;
                                    return bm;
                                }
                                if (sel.type.toUpperCase() == "CONTROL") {
                                    if (rg.length) {
                                        bm.mark = [];
                                        var i = 0
                                          , len = rg.length;
                                        while (i < len) {
                                            bm.mark.push(rg.item(i++));
                                        }
                                    } else {
                                        bm.isCollapsed = true;
                                        bm.mark = null;
                                    }
                                } else {
                                    bm.mark = rg.getBookmark();
                                }
                            } else {
                                console.warn("No idea how to store the current selection for this browser!");
                            }
                        }
                        return bm;
                    }
                    ;
                    this.moveToBookmark = function(_8f3) {
                        var mark = _8f3.mark;
                        if (mark) {
                            if (doc.getSelection) {
                                var sel = win.getSelection();
                                if (sel && sel.removeAllRanges) {
                                    if (mark.pRange) {
                                        var n = mark.node;
                                        n.selectionStart = mark.start;
                                        n.selectionEnd = mark.end;
                                    } else {
                                        sel.removeAllRanges();
                                        sel.addRange(mark);
                                    }
                                } else {
                                    console.warn("No idea how to restore selection for this browser!");
                                }
                            } else {
                                if (doc.selection && mark) {
                                    var rg;
                                    if (mark.pRange) {
                                        rg = mark.range;
                                    } else {
                                        if (lang.isArray(mark)) {
                                            rg = doc.body.createControlRange();
                                            _8d7.forEach(mark, function(n) {
                                                rg.addElement(n);
                                            });
                                        } else {
                                            rg = doc.body.createTextRange();
                                            rg.moveToBookmark(mark);
                                        }
                                    }
                                    rg.select();
                                }
                            }
                        }
                    }
                    ;
                    this.isCollapsed = function() {
                        return this.getBookmark().isCollapsed;
                    }
                    ;
                };
                var _8f4 = new _8da(window);
                _8f4.SelectionManager = _8da;
                return _8f4;
            });
        },
        "dijit/_editor/range": function() {
            define(["dojo/_base/array", "dojo/_base/declare", "dojo/_base/lang"], function(_8f5, _8f6, lang) {
                var _8f7 = {
                    getIndex: function(node, _8f8) {
                        var ret = []
                          , retR = [];
                        var _8f9 = node;
                        var _8fa, n;
                        while (node != _8f8) {
                            var i = 0;
                            _8fa = node.parentNode;
                            while ((n = _8fa.childNodes[i++])) {
                                if (n === node) {
                                    --i;
                                    break;
                                }
                            }
                            ret.unshift(i);
                            retR.unshift(i - _8fa.childNodes.length);
                            node = _8fa;
                        }
                        if (ret.length > 0 && _8f9.nodeType == 3) {
                            n = _8f9.previousSibling;
                            while (n && n.nodeType == 3) {
                                ret[ret.length - 1]--;
                                n = n.previousSibling;
                            }
                            n = _8f9.nextSibling;
                            while (n && n.nodeType == 3) {
                                retR[retR.length - 1]++;
                                n = n.nextSibling;
                            }
                        }
                        return {
                            o: ret,
                            r: retR
                        };
                    },
                    getNode: function(_8fb, _8fc) {
                        if (!lang.isArray(_8fb) || _8fb.length == 0) {
                            return _8fc;
                        }
                        var node = _8fc;
                        _8f5.every(_8fb, function(i) {
                            if (i >= 0 && i < node.childNodes.length) {
                                node = node.childNodes[i];
                            } else {
                                node = null;
                                return false;
                            }
                            return true;
                        });
                        return node;
                    },
                    getCommonAncestor: function(n1, n2, root) {
                        root = root || n1.ownerDocument.body;
                        var _8fd = function(n) {
                            var as = [];
                            while (n) {
                                as.unshift(n);
                                if (n !== root) {
                                    n = n.parentNode;
                                } else {
                                    break;
                                }
                            }
                            return as;
                        };
                        var n1as = _8fd(n1);
                        var n2as = _8fd(n2);
                        var m = Math.min(n1as.length, n2as.length);
                        var com = n1as[0];
                        for (var i = 1; i < m; i++) {
                            if (n1as[i] === n2as[i]) {
                                com = n1as[i];
                            } else {
                                break;
                            }
                        }
                        return com;
                    },
                    getAncestor: function(node, _8fe, root) {
                        root = root || node.ownerDocument.body;
                        while (node && node !== root) {
                            var name = node.nodeName.toUpperCase();
                            if (_8fe.test(name)) {
                                return node;
                            }
                            node = node.parentNode;
                        }
                        return null;
                    },
                    BlockTagNames: /^(?:P|DIV|H1|H2|H3|H4|H5|H6|ADDRESS|PRE|OL|UL|LI|DT|DE)$/,
                    getBlockAncestor: function(node, _8ff, root) {
                        root = root || node.ownerDocument.body;
                        _8ff = _8ff || _8f7.BlockTagNames;
                        var _900 = null, _901;
                        while (node && node !== root) {
                            var name = node.nodeName.toUpperCase();
                            if (!_900 && _8ff.test(name)) {
                                _900 = node;
                            }
                            if (!_901 && (/^(?:BODY|TD|TH|CAPTION)$/).test(name)) {
                                _901 = node;
                            }
                            node = node.parentNode;
                        }
                        return {
                            blockNode: _900,
                            blockContainer: _901 || node.ownerDocument.body
                        };
                    },
                    atBeginningOfContainer: function(_902, node, _903) {
                        var _904 = false;
                        var _905 = (_903 == 0);
                        if (!_905 && node.nodeType == 3) {
                            if (/^[\s\xA0]+$/.test(node.nodeValue.substr(0, _903))) {
                                _905 = true;
                            }
                        }
                        if (_905) {
                            var _906 = node;
                            _904 = true;
                            while (_906 && _906 !== _902) {
                                if (_906.previousSibling) {
                                    _904 = false;
                                    break;
                                }
                                _906 = _906.parentNode;
                            }
                        }
                        return _904;
                    },
                    atEndOfContainer: function(_907, node, _908) {
                        var _909 = false;
                        var _90a = (_908 == (node.length || node.childNodes.length));
                        if (!_90a && node.nodeType == 3) {
                            if (/^[\s\xA0]+$/.test(node.nodeValue.substr(_908))) {
                                _90a = true;
                            }
                        }
                        if (_90a) {
                            var _90b = node;
                            _909 = true;
                            while (_90b && _90b !== _907) {
                                if (_90b.nextSibling) {
                                    _909 = false;
                                    break;
                                }
                                _90b = _90b.parentNode;
                            }
                        }
                        return _909;
                    },
                    adjacentNoneTextNode: function(_90c, next) {
                        var node = _90c;
                        var len = (0 - _90c.length) || 0;
                        var prop = next ? "nextSibling" : "previousSibling";
                        while (node) {
                            if (node.nodeType != 3) {
                                break;
                            }
                            len += node.length;
                            node = node[prop];
                        }
                        return [node, len];
                    },
                    create: function(win) {
                        win = win || window;
                        if (win.getSelection) {
                            return win.document.createRange();
                        } else {
                            return new _90d();
                        }
                    },
                    getSelection: function(_90e, _90f) {
                        if (_90e.getSelection) {
                            return _90e.getSelection();
                        } else {
                            var s = new ie.selection(_90e);
                            if (!_90f) {
                                s._getCurrentSelection();
                            }
                            return s;
                        }
                    }
                };
                if (!window.getSelection) {
                    var ie = _8f7.ie = {
                        cachedSelection: {},
                        selection: function(_910) {
                            this._ranges = [];
                            this.addRange = function(r, _911) {
                                this._ranges.push(r);
                                if (!_911) {
                                    r._select();
                                }
                                this.rangeCount = this._ranges.length;
                            }
                            ;
                            this.removeAllRanges = function() {
                                this._ranges = [];
                                this.rangeCount = 0;
                            }
                            ;
                            var _912 = function() {
                                var r = _910.document.selection.createRange();
                                var type = _910.document.selection.type.toUpperCase();
                                if (type == "CONTROL") {
                                    return new _90d(ie.decomposeControlRange(r));
                                } else {
                                    return new _90d(ie.decomposeTextRange(r));
                                }
                            };
                            this.getRangeAt = function(i) {
                                return this._ranges[i];
                            }
                            ;
                            this._getCurrentSelection = function() {
                                this.removeAllRanges();
                                var r = _912();
                                if (r) {
                                    this.addRange(r, true);
                                    this.isCollapsed = r.collapsed;
                                } else {
                                    this.isCollapsed = true;
                                }
                            }
                            ;
                        },
                        decomposeControlRange: function(_913) {
                            var _914 = _913.item(0)
                              , _915 = _913.item(_913.length - 1);
                            var _916 = _914.parentNode
                              , _917 = _915.parentNode;
                            var _918 = _8f7.getIndex(_914, _916).o[0];
                            var _919 = _8f7.getIndex(_915, _917).o[0] + 1;
                            return [_916, _918, _917, _919];
                        },
                        getEndPoint: function(_91a, end) {
                            var _91b = _91a.duplicate();
                            _91b.collapse(!end);
                            var _91c = "EndTo" + (end ? "End" : "Start");
                            var _91d = _91b.parentElement();
                            var _91e, _91f, _920;
                            if (_91d.childNodes.length > 0) {
                                _8f5.every(_91d.childNodes, function(node, i) {
                                    var _921;
                                    if (node.nodeType != 3) {
                                        _91b.moveToElementText(node);
                                        if (_91b.compareEndPoints(_91c, _91a) > 0) {
                                            if (_920 && _920.nodeType == 3) {
                                                _91e = _920;
                                                _921 = true;
                                            } else {
                                                _91e = _91d;
                                                _91f = i;
                                                return false;
                                            }
                                        } else {
                                            if (i == _91d.childNodes.length - 1) {
                                                _91e = _91d;
                                                _91f = _91d.childNodes.length;
                                                return false;
                                            }
                                        }
                                    } else {
                                        if (i == _91d.childNodes.length - 1) {
                                            _91e = node;
                                            _921 = true;
                                        }
                                    }
                                    if (_921 && _91e) {
                                        var _922 = _8f7.adjacentNoneTextNode(_91e)[0];
                                        if (_922) {
                                            _91e = _922.nextSibling;
                                        } else {
                                            _91e = _91d.firstChild;
                                        }
                                        var _923 = _8f7.adjacentNoneTextNode(_91e);
                                        _922 = _923[0];
                                        var _924 = _923[1];
                                        if (_922) {
                                            _91b.moveToElementText(_922);
                                            _91b.collapse(false);
                                        } else {
                                            _91b.moveToElementText(_91d);
                                        }
                                        _91b.setEndPoint(_91c, _91a);
                                        _91f = _91b.text.length - _924;
                                        return false;
                                    }
                                    _920 = node;
                                    return true;
                                });
                            } else {
                                _91e = _91d;
                                _91f = 0;
                            }
                            if (!end && _91e.nodeType == 1 && _91f == _91e.childNodes.length) {
                                var _925 = _91e.nextSibling;
                                if (_925 && _925.nodeType == 3) {
                                    _91e = _925;
                                    _91f = 0;
                                }
                            }
                            return [_91e, _91f];
                        },
                        setEndPoint: function(_926, _927, _928) {
                            var _929 = _926.duplicate(), node, len;
                            if (_927.nodeType != 3) {
                                if (_928 > 0) {
                                    node = _927.childNodes[_928 - 1];
                                    if (node) {
                                        if (node.nodeType == 3) {
                                            _927 = node;
                                            _928 = node.length;
                                        } else {
                                            if (node.nextSibling && node.nextSibling.nodeType == 3) {
                                                _927 = node.nextSibling;
                                                _928 = 0;
                                            } else {
                                                _929.moveToElementText(node.nextSibling ? node : _927);
                                                var _92a = node.parentNode;
                                                var _92b = _92a.insertBefore(node.ownerDocument.createTextNode(" "), node.nextSibling);
                                                _929.collapse(false);
                                                _92a.removeChild(_92b);
                                            }
                                        }
                                    }
                                } else {
                                    _929.moveToElementText(_927);
                                    _929.collapse(true);
                                }
                            }
                            if (_927.nodeType == 3) {
                                var _92c = _8f7.adjacentNoneTextNode(_927);
                                var _92d = _92c[0];
                                len = _92c[1];
                                if (_92d) {
                                    _929.moveToElementText(_92d);
                                    _929.collapse(false);
                                    if (_92d.contentEditable != "inherit") {
                                        len++;
                                    }
                                } else {
                                    _929.moveToElementText(_927.parentNode);
                                    _929.collapse(true);
                                    _929.move("character", 1);
                                    _929.move("character", -1);
                                }
                                _928 += len;
                                if (_928 > 0) {
                                    if (_929.move("character", _928) != _928) {
                                        console.error("Error when moving!");
                                    }
                                }
                            }
                            return _929;
                        },
                        decomposeTextRange: function(_92e) {
                            var _92f = ie.getEndPoint(_92e);
                            var _930 = _92f[0]
                              , _931 = _92f[1];
                            var _932 = _92f[0]
                              , _933 = _92f[1];
                            if (_92e.htmlText.length) {
                                if (_92e.htmlText == _92e.text) {
                                    _933 = _931 + _92e.text.length;
                                } else {
                                    _92f = ie.getEndPoint(_92e, true);
                                    _932 = _92f[0],
                                    _933 = _92f[1];
                                }
                            }
                            return [_930, _931, _932, _933];
                        },
                        setRange: function(_934, _935, _936, _937, _938, _939) {
                            var _93a = ie.setEndPoint(_934, _935, _936);
                            _934.setEndPoint("StartToStart", _93a);
                            if (!_939) {
                                var end = ie.setEndPoint(_934, _937, _938);
                            }
                            _934.setEndPoint("EndToEnd", end || _93a);
                            return _934;
                        }
                    };
                    var _90d = _8f7.W3CRange = _8f6(null, {
                        constructor: function() {
                            if (arguments.length > 0) {
                                this.setStart(arguments[0][0], arguments[0][1]);
                                this.setEnd(arguments[0][2], arguments[0][3]);
                            } else {
                                this.commonAncestorContainer = null;
                                this.startContainer = null;
                                this.startOffset = 0;
                                this.endContainer = null;
                                this.endOffset = 0;
                                this.collapsed = true;
                            }
                        },
                        _updateInternal: function() {
                            if (this.startContainer !== this.endContainer) {
                                this.commonAncestorContainer = _8f7.getCommonAncestor(this.startContainer, this.endContainer);
                            } else {
                                this.commonAncestorContainer = this.startContainer;
                            }
                            this.collapsed = (this.startContainer === this.endContainer) && (this.startOffset == this.endOffset);
                        },
                        setStart: function(node, _93b) {
                            _93b = parseInt(_93b);
                            if (this.startContainer === node && this.startOffset == _93b) {
                                return;
                            }
                            delete this._cachedBookmark;
                            this.startContainer = node;
                            this.startOffset = _93b;
                            if (!this.endContainer) {
                                this.setEnd(node, _93b);
                            } else {
                                this._updateInternal();
                            }
                        },
                        setEnd: function(node, _93c) {
                            _93c = parseInt(_93c);
                            if (this.endContainer === node && this.endOffset == _93c) {
                                return;
                            }
                            delete this._cachedBookmark;
                            this.endContainer = node;
                            this.endOffset = _93c;
                            if (!this.startContainer) {
                                this.setStart(node, _93c);
                            } else {
                                this._updateInternal();
                            }
                        },
                        setStartAfter: function(node, _93d) {
                            this._setPoint("setStart", node, _93d, 1);
                        },
                        setStartBefore: function(node, _93e) {
                            this._setPoint("setStart", node, _93e, 0);
                        },
                        setEndAfter: function(node, _93f) {
                            this._setPoint("setEnd", node, _93f, 1);
                        },
                        setEndBefore: function(node, _940) {
                            this._setPoint("setEnd", node, _940, 0);
                        },
                        _setPoint: function(what, node, _941, ext) {
                            var _942 = _8f7.getIndex(node, node.parentNode).o;
                            this[what](node.parentNode, _942.pop() + ext);
                        },
                        _getIERange: function() {
                            var r = (this._body || this.endContainer.ownerDocument.body).createTextRange();
                            ie.setRange(r, this.startContainer, this.startOffset, this.endContainer, this.endOffset, this.collapsed);
                            return r;
                        },
                        getBookmark: function() {
                            this._getIERange();
                            return this._cachedBookmark;
                        },
                        _select: function() {
                            var r = this._getIERange();
                            r.select();
                        },
                        deleteContents: function() {
                            var s = this.startContainer
                              , r = this._getIERange();
                            if (s.nodeType === 3 && !this.startOffset) {
                                this.setStartBefore(s);
                            }
                            r.pasteHTML("");
                            this.endContainer = this.startContainer;
                            this.endOffset = this.startOffset;
                            this.collapsed = true;
                        },
                        cloneRange: function() {
                            var r = new _90d([this.startContainer, this.startOffset, this.endContainer, this.endOffset]);
                            r._body = this._body;
                            return r;
                        },
                        detach: function() {
                            this._body = null;
                            this.commonAncestorContainer = null;
                            this.startContainer = null;
                            this.startOffset = 0;
                            this.endContainer = null;
                            this.endOffset = 0;
                            this.collapsed = true;
                        }
                    });
                }
                lang.setObject("dijit.range", _8f7);
                return _8f7;
            });
        },
        "dijit/_editor/html": function() {
            define(["dojo/_base/array", "dojo/_base/lang", "dojo/sniff"], function(_943, lang, has) {
                var _944 = {};
                lang.setObject("dijit._editor.html", _944);
                var _945 = _944.escapeXml = function(str, _946) {
                    str = str.replace(/&/gm, "&amp;").replace(/</gm, "&lt;").replace(/>/gm, "&gt;").replace(/"/gm, "&quot;");
                    if (!_946) {
                        str = str.replace(/'/gm, "&#39;");
                    }
                    return str;
                }
                ;
                _944.getNodeHtml = function(node) {
                    var _947 = [];
                    _944.getNodeHtmlHelper(node, _947);
                    return _947.join("");
                }
                ;
                _944.getNodeHtmlHelper = function(node, _948) {
                    switch (node.nodeType) {
                    case 1:
                        var _949 = node.nodeName.toLowerCase();
                        if (!_949 || _949.charAt(0) == "/") {
                            return "";
                        }
                        _948.push("<", _949);
                        var _94a = []
                          , _94b = {};
                        var attr;
                        if (has("dom-attributes-explicit") || has("dom-attributes-specified-flag")) {
                            var i = 0;
                            while ((attr = node.attributes[i++])) {
                                var n = attr.name;
                                if (n.substr(0, 3) !== "_dj" && (!has("dom-attributes-specified-flag") || attr.specified) && !(n in _94b)) {
                                    var v = attr.value;
                                    if (n == "src" || n == "href") {
                                        if (node.getAttribute("_djrealurl")) {
                                            v = node.getAttribute("_djrealurl");
                                        }
                                    }
                                    if (has("ie") === 8 && n === "style") {
                                        v = v.replace("HEIGHT:", "height:").replace("WIDTH:", "width:");
                                    }
                                    _94a.push([n, v]);
                                    _94b[n] = v;
                                }
                            }
                        } else {
                            var _94c = /^input$|^img$/i.test(node.nodeName) ? node : node.cloneNode(false);
                            var s = _94c.outerHTML;
                            var _94d = /[\w-]+=("[^"]*"|'[^']*'|\S*)/gi;
                            var _94e = s.match(_94d);
                            s = s.substr(0, s.indexOf(">"));
                            _943.forEach(_94e, function(attr) {
                                if (attr) {
                                    var idx = attr.indexOf("=");
                                    if (idx > 0) {
                                        var key = attr.substring(0, idx);
                                        if (key.substr(0, 3) != "_dj") {
                                            if (key == "src" || key == "href") {
                                                if (node.getAttribute("_djrealurl")) {
                                                    _94a.push([key, node.getAttribute("_djrealurl")]);
                                                    return;
                                                }
                                            }
                                            var val, _94f;
                                            switch (key) {
                                            case "style":
                                                val = node.style.cssText.toLowerCase();
                                                break;
                                            case "class":
                                                val = node.className;
                                                break;
                                            case "width":
                                                if (_949 === "img") {
                                                    _94f = /width=(\S+)/i.exec(s);
                                                    if (_94f) {
                                                        val = _94f[1];
                                                    }
                                                    break;
                                                }
                                            case "height":
                                                if (_949 === "img") {
                                                    _94f = /height=(\S+)/i.exec(s);
                                                    if (_94f) {
                                                        val = _94f[1];
                                                    }
                                                    break;
                                                }
                                            default:
                                                val = node.getAttribute(key);
                                            }
                                            if (val != null) {
                                                _94a.push([key, val.toString()]);
                                            }
                                        }
                                    }
                                }
                            }, this);
                        }
                        _94a.sort(function(a, b) {
                            return a[0] < b[0] ? -1 : (a[0] == b[0] ? 0 : 1);
                        });
                        var j = 0;
                        while ((attr = _94a[j++])) {
                            _948.push(" ", attr[0], "=\"", (typeof attr[1] === "string" ? _945(attr[1], true) : attr[1]), "\"");
                        }
                        switch (_949) {
                        case "br":
                        case "hr":
                        case "img":
                        case "input":
                        case "base":
                        case "meta":
                        case "area":
                        case "basefont":
                            _948.push(" />");
                            break;
                        case "script":
                            _948.push(">", node.innerHTML, "</", _949, ">");
                            break;
                        default:
                            _948.push(">");
                            if (node.hasChildNodes()) {
                                _944.getChildrenHtmlHelper(node, _948);
                            }
                            _948.push("</", _949, ">");
                        }
                        break;
                    case 4:
                    case 3:
                        _948.push(_945(node.nodeValue, true));
                        break;
                    case 8:
                        _948.push("<!--", _945(node.nodeValue, true), "-->");
                        break;
                    default:
                        _948.push("<!-- Element not recognized - Type: ", node.nodeType, " Name: ", node.nodeName, "-->");
                    }
                }
                ;
                _944.getChildrenHtml = function(node) {
                    var _950 = [];
                    _944.getChildrenHtmlHelper(node, _950);
                    return _950.join("");
                }
                ;
                _944.getChildrenHtmlHelper = function(dom, _951) {
                    if (!dom) {
                        return;
                    }
                    var _952 = dom["childNodes"] || dom;
                    var _953 = !has("ie") || _952 !== dom;
                    var node, i = 0;
                    while ((node = _952[i++])) {
                        if (!_953 || node.parentNode == dom) {
                            _944.getNodeHtmlHelper(node, _951);
                        }
                    }
                }
                ;
                return _944;
            });
        },
        "dijit/_editor/plugins/FontChoice": function() {
            define(["require", "dojo/_base/array", "dojo/_base/declare", "dojo/dom-construct", "dojo/i18n", "dojo/_base/lang", "dojo/string", "dojo/store/Memory", "../../registry", "../../_Widget", "../../_TemplatedMixin", "../../_WidgetsInTemplateMixin", "../../form/FilteringSelect", "../_Plugin", "../range", "dojo/i18n!../nls/FontChoice"], function(_954, _955, _956, _957, i18n, lang, _958, _959, _95a, _95b, _95c, _95d, _95e, _95f, _960) {
                var _961 = _956("dijit._editor.plugins._FontDropDown", [_95b, _95c, _95d], {
                    label: "",
                    plainText: false,
                    templateString: "<span style='white-space: nowrap' class='dijit dijitReset dijitInline'>" + "<label class='dijitLeft dijitInline' for='${selectId}'>${label}</label>" + "<input data-dojo-type='../../form/FilteringSelect' required='false' " + "data-dojo-props='labelType:\"html\", labelAttr:\"label\", searchAttr:\"name\"' " + "class='${comboClass}' " + "tabIndex='-1' id='${selectId}' data-dojo-attach-point='select' value=''/>" + "</span>",
                    contextRequire: _954,
                    postMixInProperties: function() {
                        this.inherited(arguments);
                        this.strings = i18n.getLocalization("dijit._editor", "FontChoice");
                        this.label = this.strings[this.command];
                        this.id = _95a.getUniqueId(this.declaredClass.replace(/\./g, "_"));
                        this.selectId = this.id + "_select";
                        this.inherited(arguments);
                    },
                    postCreate: function() {
                        this.select.set("store", new _959({
                            idProperty: "value",
                            data: _955.map(this.values, function(_962) {
                                var name = this.strings[_962] || _962;
                                return {
                                    label: this.getLabel(_962, name),
                                    name: name,
                                    value: _962
                                };
                            }, this)
                        }));
                        this.select.set("value", "", false);
                        this.disabled = this.select.get("disabled");
                    },
                    _setValueAttr: function(_963, _964) {
                        _964 = _964 !== false;
                        this.select.set("value", _955.indexOf(this.values, _963) < 0 ? "" : _963, _964);
                        if (!_964) {
                            this.select._lastValueReported = null;
                        }
                    },
                    _getValueAttr: function() {
                        return this.select.get("value");
                    },
                    focus: function() {
                        this.select.focus();
                    },
                    _setDisabledAttr: function(_965) {
                        this._set("disabled", _965);
                        this.select.set("disabled", _965);
                    }
                });
                var _966 = _956("dijit._editor.plugins._FontNameDropDown", _961, {
                    generic: false,
                    command: "fontName",
                    comboClass: "dijitFontNameCombo",
                    postMixInProperties: function() {
                        if (!this.values) {
                            this.values = this.generic ? ["serif", "sans-serif", "monospace", "cursive", "fantasy"] : ["Arial", "Times New Roman", "Comic Sans MS", "Courier New"];
                        }
                        this.inherited(arguments);
                    },
                    getLabel: function(_967, name) {
                        if (this.plainText) {
                            return name;
                        } else {
                            return "<div style='font-family: " + _967 + "'>" + name + "</div>";
                        }
                    },
                    _normalizeFontName: function(_968) {
                        var _969 = this.values;
                        if (!_968 || !_969) {
                            return _968;
                        }
                        var _96a = _968.split(",");
                        if (_96a.length > 1) {
                            for (var i = 0, l = _96a.length; i < l; i++) {
                                var _96b = _958.trim(_96a[i]);
                                var pos = _955.indexOf(_969, _96b);
                                if (pos > -1) {
                                    return _96b;
                                }
                            }
                        }
                        return _968;
                    },
                    _setValueAttr: function(_96c, _96d) {
                        _96d = _96d !== false;
                        _96c = this._normalizeFontName(_96c);
                        if (this.generic) {
                            var map = {
                                "Arial": "sans-serif",
                                "Helvetica": "sans-serif",
                                "Myriad": "sans-serif",
                                "Times": "serif",
                                "Times New Roman": "serif",
                                "Comic Sans MS": "cursive",
                                "Apple Chancery": "cursive",
                                "Courier": "monospace",
                                "Courier New": "monospace",
                                "Papyrus": "fantasy",
                                "Estrangelo Edessa": "cursive",
                                "Gabriola": "fantasy"
                            };
                            _96c = map[_96c] || _96c;
                        }
                        this.inherited(arguments, [_96c, _96d]);
                    }
                });
                var _96e = _956("dijit._editor.plugins._FontSizeDropDown", _961, {
                    command: "fontSize",
                    comboClass: "dijitFontSizeCombo",
                    values: [1, 2, 3, 4, 5, 6, 7],
                    getLabel: function(_96f, name) {
                        if (this.plainText) {
                            return name;
                        } else {
                            return "<font size=" + _96f + "'>" + name + "</font>";
                        }
                    },
                    _setValueAttr: function(_970, _971) {
                        _971 = _971 !== false;
                        if (_970.indexOf && _970.indexOf("px") != -1) {
                            var _972 = parseInt(_970, 10);
                            _970 = {
                                10: 1,
                                13: 2,
                                16: 3,
                                18: 4,
                                24: 5,
                                32: 6,
                                48: 7
                            }[_972] || _970;
                        }
                        this.inherited(arguments, [_970, _971]);
                    }
                });
                var _973 = _956("dijit._editor.plugins._FormatBlockDropDown", _961, {
                    command: "formatBlock",
                    comboClass: "dijitFormatBlockCombo",
                    values: ["noFormat", "p", "h1", "h2", "h3", "pre"],
                    postCreate: function() {
                        this.inherited(arguments);
                        this.set("value", "noFormat", false);
                    },
                    getLabel: function(_974, name) {
                        if (this.plainText || _974 == "noFormat") {
                            return name;
                        } else {
                            return "<" + _974 + ">" + name + "</" + _974 + ">";
                        }
                    },
                    _execCommand: function(_975, _976, _977) {
                        if (_977 === "noFormat") {
                            var _978;
                            var end;
                            var sel = _960.getSelection(_975.window);
                            if (sel && sel.rangeCount > 0) {
                                var _979 = sel.getRangeAt(0);
                                var node, tag;
                                if (_979) {
                                    _978 = _979.startContainer;
                                    end = _979.endContainer;
                                    while (_978 && _978 !== _975.editNode && _978 !== _975.document.body && _978.nodeType !== 1) {
                                        _978 = _978.parentNode;
                                    }
                                    while (end && end !== _975.editNode && end !== _975.document.body && end.nodeType !== 1) {
                                        end = end.parentNode;
                                    }
                                    var _97a = lang.hitch(this, function(node, ary) {
                                        if (node.childNodes && node.childNodes.length) {
                                            var i;
                                            for (i = 0; i < node.childNodes.length; i++) {
                                                var c = node.childNodes[i];
                                                if (c.nodeType == 1) {
                                                    if (_975.selection.inSelection(c)) {
                                                        var tag = c.tagName ? c.tagName.toLowerCase() : "";
                                                        if (_955.indexOf(this.values, tag) !== -1) {
                                                            ary.push(c);
                                                        }
                                                        _97a(c, ary);
                                                    }
                                                }
                                            }
                                        }
                                    });
                                    var _97b = lang.hitch(this, function(_97c) {
                                        if (_97c && _97c.length) {
                                            _975.beginEditing();
                                            while (_97c.length) {
                                                this._removeFormat(_975, _97c.pop());
                                            }
                                            _975.endEditing();
                                        }
                                    });
                                    var _97d = [];
                                    if (_978 == end) {
                                        var _97e;
                                        node = _978;
                                        while (node && node !== _975.editNode && node !== _975.document.body) {
                                            if (node.nodeType == 1) {
                                                tag = node.tagName ? node.tagName.toLowerCase() : "";
                                                if (_955.indexOf(this.values, tag) !== -1) {
                                                    _97e = node;
                                                    break;
                                                }
                                            }
                                            node = node.parentNode;
                                        }
                                        _97a(_978, _97d);
                                        if (_97e) {
                                            _97d = [_97e].concat(_97d);
                                        }
                                        _97b(_97d);
                                    } else {
                                        node = _978;
                                        while (_975.selection.inSelection(node)) {
                                            if (node.nodeType == 1) {
                                                tag = node.tagName ? node.tagName.toLowerCase() : "";
                                                if (_955.indexOf(this.values, tag) !== -1) {
                                                    _97d.push(node);
                                                }
                                                _97a(node, _97d);
                                            }
                                            node = node.nextSibling;
                                        }
                                        _97b(_97d);
                                    }
                                    _975.onDisplayChanged();
                                }
                            }
                        } else {
                            _975.execCommand(_976, _977);
                        }
                    },
                    _removeFormat: function(_97f, node) {
                        if (_97f.customUndo) {
                            while (node.firstChild) {
                                _957.place(node.firstChild, node, "before");
                            }
                            node.parentNode.removeChild(node);
                        } else {
                            _97f.selection.selectElementChildren(node);
                            var html = _97f.selection.getSelectedHtml();
                            _97f.selection.selectElement(node);
                            _97f.execCommand("inserthtml", html || "");
                        }
                    }
                });
                var _980 = _956("dijit._editor.plugins.FontChoice", _95f, {
                    useDefaultCommand: false,
                    _initButton: function() {
                        var _981 = {
                            fontName: _966,
                            fontSize: _96e,
                            formatBlock: _973
                        }[this.command]
                          , _982 = this.params;
                        if (this.params.custom) {
                            _982.values = this.params.custom;
                        }
                        var _983 = this.editor;
                        this.button = new _981(lang.delegate({
                            dir: _983.dir,
                            lang: _983.lang
                        }, _982));
                        this.own(this.button.select.on("change", lang.hitch(this, function(_984) {
                            if (this.editor.focused) {
                                this.editor.focus();
                            }
                            if (this.command == "fontName" && _984.indexOf(" ") != -1) {
                                _984 = "'" + _984 + "'";
                            }
                            if (this.button._execCommand) {
                                this.button._execCommand(this.editor, this.command, _984);
                            } else {
                                this.editor.execCommand(this.command, _984);
                            }
                        })));
                    },
                    updateState: function() {
                        var _985 = this.editor;
                        var _986 = this.command;
                        if (!_985 || !_985.isLoaded || !_986.length) {
                            return;
                        }
                        if (this.button) {
                            var _987 = this.get("disabled");
                            this.button.set("disabled", _987);
                            if (_987) {
                                return;
                            }
                            var _988;
                            try {
                                _988 = _985.queryCommandValue(_986) || "";
                            } catch (e) {
                                _988 = "";
                            }
                            var _989 = lang.isString(_988) && (_988.match(/'([^']*)'/) || _988.match(/"([^"]*)"/));
                            if (_989) {
                                _988 = _989[1];
                            }
                            if (_986 === "fontSize" && !_988) {
                                _988 = 3;
                            }
                            if (_986 === "formatBlock") {
                                if (!_988 || _988 == "p") {
                                    _988 = null;
                                    var elem;
                                    var sel = _960.getSelection(this.editor.window);
                                    if (sel && sel.rangeCount > 0) {
                                        var _98a = sel.getRangeAt(0);
                                        if (_98a) {
                                            elem = _98a.endContainer;
                                        }
                                    }
                                    while (elem && elem !== _985.editNode && elem !== _985.document) {
                                        var tg = elem.tagName ? elem.tagName.toLowerCase() : "";
                                        if (tg && _955.indexOf(this.button.values, tg) > -1) {
                                            _988 = tg;
                                            break;
                                        }
                                        elem = elem.parentNode;
                                    }
                                    if (!_988) {
                                        _988 = "noFormat";
                                    }
                                } else {
                                    if (_955.indexOf(this.button.values, _988) < 0) {
                                        _988 = "noFormat";
                                    }
                                }
                            }
                            if (_988 !== this.button.get("value")) {
                                this.button.set("value", _988, false);
                            }
                        }
                    }
                });
                _955.forEach(["fontName", "fontSize", "formatBlock"], function(name) {
                    _95f.registry[name] = function(args) {
                        return new _980({
                            command: name,
                            plainText: args.plainText
                        });
                    }
                    ;
                });
                _980._FontDropDown = _961;
                _980._FontNameDropDown = _966;
                _980._FontSizeDropDown = _96e;
                _980._FormatBlockDropDown = _973;
                return _980;
            });
        },
        "dijit/_WidgetsInTemplateMixin": function() {
            define(["dojo/_base/array", "dojo/aspect", "dojo/_base/declare", "dojo/_base/lang", "dojo/parser"], function(_98b, _98c, _98d, lang, _98e) {
                return _98d("dijit._WidgetsInTemplateMixin", null, {
                    _earlyTemplatedStartup: false,
                    contextRequire: null,
                    _beforeFillContent: function() {
                        if (/dojoType|data-dojo-type/i.test(this.domNode.innerHTML)) {
                            var node = this.domNode;
                            if (this.containerNode && !this.searchContainerNode) {
                                this.containerNode.stopParser = true;
                            }
                            _98e.parse(node, {
                                noStart: !this._earlyTemplatedStartup,
                                template: true,
                                inherited: {
                                    dir: this.dir,
                                    lang: this.lang,
                                    textDir: this.textDir
                                },
                                propsThis: this,
                                contextRequire: this.contextRequire,
                                scope: "dojo"
                            }).then(lang.hitch(this, function(_98f) {
                                this._startupWidgets = _98f;
                                for (var i = 0; i < _98f.length; i++) {
                                    this._processTemplateNode(_98f[i], function(n, p) {
                                        return n[p];
                                    }, function(_990, type, _991) {
                                        if (type in _990) {
                                            return _990.connect(_990, type, _991);
                                        } else {
                                            return _990.on(type, _991, true);
                                        }
                                    });
                                }
                                if (this.containerNode && this.containerNode.stopParser) {
                                    delete this.containerNode.stopParser;
                                }
                            }));
                            if (!this._startupWidgets) {
                                throw new Error(this.declaredClass + ": parser returned unfilled promise (probably waiting for module auto-load), " + "unsupported by _WidgetsInTemplateMixin.   Must pre-load all supporting widgets before instantiation.");
                            }
                        }
                    },
                    _processTemplateNode: function(_992, _993, _994) {
                        if (_993(_992, "dojoType") || _993(_992, "data-dojo-type")) {
                            return true;
                        }
                        return this.inherited(arguments);
                    },
                    startup: function() {
                        _98b.forEach(this._startupWidgets, function(w) {
                            if (w && !w._started && w.startup) {
                                w.startup();
                            }
                        });
                        this._startupWidgets = null;
                        this.inherited(arguments);
                    }
                });
            });
        },
        "dijit/_editor/plugins/TextColor": function() {
            define(["require", "dojo/colors", "dojo/_base/declare", "dojo/_base/lang", "../_Plugin", "../../form/DropDownButton"], function(_995, _996, _997, lang, _998, _999) {
                var _99a = _997("dijit._editor.plugins.TextColor", _998, {
                    buttonClass: _999,
                    colorPicker: "dijit/ColorPalette",
                    useDefaultCommand: false,
                    _initButton: function() {
                        this.command = this.name;
                        this.inherited(arguments);
                        var self = this;
                        this.button.loadDropDown = function(_99b) {
                            function _99c(_99d) {
                                self.button.dropDown = new _99d({
                                    dir: self.editor.dir,
                                    ownerDocument: self.editor.ownerDocument,
                                    value: self.value,
                                    onChange: function(_99e) {
                                        self.editor.execCommand(self.command, _99e);
                                    },
                                    onExecute: function() {
                                        self.editor.execCommand(self.command, this.get("value"));
                                    }
                                });
                                _99b();
                            }
                            ;if (typeof self.colorPicker == "string") {
                                _995([self.colorPicker], _99c);
                            } else {
                                _99c(self.colorPicker);
                            }
                        }
                        ;
                    },
                    updateState: function() {
                        var _99f = this.editor;
                        var _9a0 = this.command;
                        if (!_99f || !_99f.isLoaded || !_9a0.length) {
                            return;
                        }
                        if (this.button) {
                            var _9a1 = this.get("disabled");
                            this.button.set("disabled", _9a1);
                            if (_9a1) {
                                return;
                            }
                            var _9a2;
                            try {
                                _9a2 = _99f.queryCommandValue(_9a0) || "";
                            } catch (e) {
                                _9a2 = "";
                            }
                        }
                        if (_9a2 == "") {
                            _9a2 = "#000000";
                        }
                        if (_9a2 == "transparent") {
                            _9a2 = "#ffffff";
                        }
                        if (typeof _9a2 == "string") {
                            if (_9a2.indexOf("rgb") > -1) {
                                _9a2 = _996.fromRgb(_9a2).toHex();
                            }
                        } else {
                            _9a2 = ((_9a2 & 255) << 16) | (_9a2 & 65280) | ((_9a2 & 16711680) >>> 16);
                            _9a2 = _9a2.toString(16);
                            _9a2 = "#000000".slice(0, 7 - _9a2.length) + _9a2;
                        }
                        this.value = _9a2;
                        var _9a3 = this.button.dropDown;
                        if (_9a3 && _9a3.get && _9a2 !== _9a3.get("value")) {
                            _9a3.set("value", _9a2, false);
                        }
                    }
                });
                _998.registry["foreColor"] = function(args) {
                    return new _99a(args);
                }
                ;
                _998.registry["hiliteColor"] = function(args) {
                    return new _99a(args);
                }
                ;
                return _99a;
            });
        },
        "dojo/colors": function() {
            define(["./_base/kernel", "./_base/lang", "./_base/Color", "./_base/array"], function(dojo, lang, _9a4, _9a5) {
                var _9a6 = {};
                lang.setObject("dojo.colors", _9a6);
                var _9a7 = function(m1, m2, h) {
                    if (h < 0) {
                        ++h;
                    }
                    if (h > 1) {
                        --h;
                    }
                    var h6 = 6 * h;
                    if (h6 < 1) {
                        return m1 + (m2 - m1) * h6;
                    }
                    if (2 * h < 1) {
                        return m2;
                    }
                    if (3 * h < 2) {
                        return m1 + (m2 - m1) * (2 / 3 - h) * 6;
                    }
                    return m1;
                };
                dojo.colorFromRgb = _9a4.fromRgb = function(_9a8, obj) {
                    var m = _9a8.toLowerCase().match(/^(rgba?|hsla?)\(([\s\.\-,%0-9]+)\)/);
                    if (m) {
                        var c = m[2].split(/\s*,\s*/), l = c.length, t = m[1], a;
                        if ((t == "rgb" && l == 3) || (t == "rgba" && l == 4)) {
                            var r = c[0];
                            if (r.charAt(r.length - 1) == "%") {
                                a = _9a5.map(c, function(x) {
                                    return parseFloat(x) * 2.56;
                                });
                                if (l == 4) {
                                    a[3] = c[3];
                                }
                                return _9a4.fromArray(a, obj);
                            }
                            return _9a4.fromArray(c, obj);
                        }
                        if ((t == "hsl" && l == 3) || (t == "hsla" && l == 4)) {
                            var H = ((parseFloat(c[0]) % 360) + 360) % 360 / 360
                              , S = parseFloat(c[1]) / 100
                              , L = parseFloat(c[2]) / 100
                              , m2 = L <= 0.5 ? L * (S + 1) : L + S - L * S
                              , m1 = 2 * L - m2;
                            a = [_9a7(m1, m2, H + 1 / 3) * 256, _9a7(m1, m2, H) * 256, _9a7(m1, m2, H - 1 / 3) * 256, 1];
                            if (l == 4) {
                                a[3] = c[3];
                            }
                            return _9a4.fromArray(a, obj);
                        }
                    }
                    return null;
                }
                ;
                var _9a9 = function(c, low, high) {
                    c = Number(c);
                    return isNaN(c) ? high : c < low ? low : c > high ? high : c;
                };
                _9a4.prototype.sanitize = function() {
                    var t = this;
                    t.r = Math.round(_9a9(t.r, 0, 255));
                    t.g = Math.round(_9a9(t.g, 0, 255));
                    t.b = Math.round(_9a9(t.b, 0, 255));
                    t.a = _9a9(t.a, 0, 1);
                    return this;
                }
                ;
                _9a6.makeGrey = _9a4.makeGrey = function(g, a) {
                    return _9a4.fromArray([g, g, g, a]);
                }
                ;
                lang.mixin(_9a4.named, {
                    "aliceblue": [240, 248, 255],
                    "antiquewhite": [250, 235, 215],
                    "aquamarine": [127, 255, 212],
                    "azure": [240, 255, 255],
                    "beige": [245, 245, 220],
                    "bisque": [255, 228, 196],
                    "blanchedalmond": [255, 235, 205],
                    "blueviolet": [138, 43, 226],
                    "brown": [165, 42, 42],
                    "burlywood": [222, 184, 135],
                    "cadetblue": [95, 158, 160],
                    "chartreuse": [127, 255, 0],
                    "chocolate": [210, 105, 30],
                    "coral": [255, 127, 80],
                    "cornflowerblue": [100, 149, 237],
                    "cornsilk": [255, 248, 220],
                    "crimson": [220, 20, 60],
                    "cyan": [0, 255, 255],
                    "darkblue": [0, 0, 139],
                    "darkcyan": [0, 139, 139],
                    "darkgoldenrod": [184, 134, 11],
                    "darkgray": [169, 169, 169],
                    "darkgreen": [0, 100, 0],
                    "darkgrey": [169, 169, 169],
                    "darkkhaki": [189, 183, 107],
                    "darkmagenta": [139, 0, 139],
                    "darkolivegreen": [85, 107, 47],
                    "darkorange": [255, 140, 0],
                    "darkorchid": [153, 50, 204],
                    "darkred": [139, 0, 0],
                    "darksalmon": [233, 150, 122],
                    "darkseagreen": [143, 188, 143],
                    "darkslateblue": [72, 61, 139],
                    "darkslategray": [47, 79, 79],
                    "darkslategrey": [47, 79, 79],
                    "darkturquoise": [0, 206, 209],
                    "darkviolet": [148, 0, 211],
                    "deeppink": [255, 20, 147],
                    "deepskyblue": [0, 191, 255],
                    "dimgray": [105, 105, 105],
                    "dimgrey": [105, 105, 105],
                    "dodgerblue": [30, 144, 255],
                    "firebrick": [178, 34, 34],
                    "floralwhite": [255, 250, 240],
                    "forestgreen": [34, 139, 34],
                    "gainsboro": [220, 220, 220],
                    "ghostwhite": [248, 248, 255],
                    "gold": [255, 215, 0],
                    "goldenrod": [218, 165, 32],
                    "greenyellow": [173, 255, 47],
                    "grey": [128, 128, 128],
                    "honeydew": [240, 255, 240],
                    "hotpink": [255, 105, 180],
                    "indianred": [205, 92, 92],
                    "indigo": [75, 0, 130],
                    "ivory": [255, 255, 240],
                    "khaki": [240, 230, 140],
                    "lavender": [230, 230, 250],
                    "lavenderblush": [255, 240, 245],
                    "lawngreen": [124, 252, 0],
                    "lemonchiffon": [255, 250, 205],
                    "lightblue": [173, 216, 230],
                    "lightcoral": [240, 128, 128],
                    "lightcyan": [224, 255, 255],
                    "lightgoldenrodyellow": [250, 250, 210],
                    "lightgray": [211, 211, 211],
                    "lightgreen": [144, 238, 144],
                    "lightgrey": [211, 211, 211],
                    "lightpink": [255, 182, 193],
                    "lightsalmon": [255, 160, 122],
                    "lightseagreen": [32, 178, 170],
                    "lightskyblue": [135, 206, 250],
                    "lightslategray": [119, 136, 153],
                    "lightslategrey": [119, 136, 153],
                    "lightsteelblue": [176, 196, 222],
                    "lightyellow": [255, 255, 224],
                    "limegreen": [50, 205, 50],
                    "linen": [250, 240, 230],
                    "magenta": [255, 0, 255],
                    "mediumaquamarine": [102, 205, 170],
                    "mediumblue": [0, 0, 205],
                    "mediumorchid": [186, 85, 211],
                    "mediumpurple": [147, 112, 219],
                    "mediumseagreen": [60, 179, 113],
                    "mediumslateblue": [123, 104, 238],
                    "mediumspringgreen": [0, 250, 154],
                    "mediumturquoise": [72, 209, 204],
                    "mediumvioletred": [199, 21, 133],
                    "midnightblue": [25, 25, 112],
                    "mintcream": [245, 255, 250],
                    "mistyrose": [255, 228, 225],
                    "moccasin": [255, 228, 181],
                    "navajowhite": [255, 222, 173],
                    "oldlace": [253, 245, 230],
                    "olivedrab": [107, 142, 35],
                    "orange": [255, 165, 0],
                    "orangered": [255, 69, 0],
                    "orchid": [218, 112, 214],
                    "palegoldenrod": [238, 232, 170],
                    "palegreen": [152, 251, 152],
                    "paleturquoise": [175, 238, 238],
                    "palevioletred": [219, 112, 147],
                    "papayawhip": [255, 239, 213],
                    "peachpuff": [255, 218, 185],
                    "peru": [205, 133, 63],
                    "pink": [255, 192, 203],
                    "plum": [221, 160, 221],
                    "powderblue": [176, 224, 230],
                    "rosybrown": [188, 143, 143],
                    "royalblue": [65, 105, 225],
                    "saddlebrown": [139, 69, 19],
                    "salmon": [250, 128, 114],
                    "sandybrown": [244, 164, 96],
                    "seagreen": [46, 139, 87],
                    "seashell": [255, 245, 238],
                    "sienna": [160, 82, 45],
                    "skyblue": [135, 206, 235],
                    "slateblue": [106, 90, 205],
                    "slategray": [112, 128, 144],
                    "slategrey": [112, 128, 144],
                    "snow": [255, 250, 250],
                    "springgreen": [0, 255, 127],
                    "steelblue": [70, 130, 180],
                    "tan": [210, 180, 140],
                    "thistle": [216, 191, 216],
                    "tomato": [255, 99, 71],
                    "turquoise": [64, 224, 208],
                    "violet": [238, 130, 238],
                    "wheat": [245, 222, 179],
                    "whitesmoke": [245, 245, 245],
                    "yellowgreen": [154, 205, 50]
                });
                return _9a4;
            });
        },
        "dijit/form/DropDownButton": function() {
            define(["dojo/_base/declare", "dojo/_base/kernel", "dojo/_base/lang", "dojo/query", "../registry", "../popup", "./Button", "../_Container", "../_HasDropDown", "dojo/text!./templates/DropDownButton.html", "../a11yclick"], function(_9aa, _9ab, lang, _9ac, _9ad, _9ae, _9af, _9b0, _9b1, _9b2) {
                return _9aa("dijit.form.DropDownButton", [_9af, _9b0, _9b1], {
                    baseClass: "dijitDropDownButton",
                    templateString: _9b2,
                    _fillContent: function() {
                        var _9b3 = this.srcNodeRef;
                        var dest = this.containerNode;
                        if (_9b3 && dest) {
                            while (_9b3.hasChildNodes()) {
                                var _9b4 = _9b3.firstChild;
                                if (_9b4.hasAttribute && (_9b4.hasAttribute("data-dojo-type") || _9b4.hasAttribute("dojoType") || _9b4.hasAttribute("data-" + _9ab._scopeName + "-type") || _9b4.hasAttribute(_9ab._scopeName + "Type"))) {
                                    this.dropDownContainer = this.ownerDocument.createElement("div");
                                    this.dropDownContainer.appendChild(_9b4);
                                } else {
                                    dest.appendChild(_9b4);
                                }
                            }
                        }
                    },
                    startup: function() {
                        if (this._started) {
                            return;
                        }
                        if (!this.dropDown && this.dropDownContainer) {
                            this.dropDown = _9ad.byNode(this.dropDownContainer.firstChild);
                            delete this.dropDownContainer;
                        }
                        if (this.dropDown) {
                            _9ae.hide(this.dropDown);
                        }
                        this.inherited(arguments);
                    },
                    isLoaded: function() {
                        var _9b5 = this.dropDown;
                        return (!!_9b5 && (!_9b5.href || _9b5.isLoaded));
                    },
                    loadDropDown: function(_9b6) {
                        var _9b7 = this.dropDown;
                        var _9b8 = _9b7.on("load", lang.hitch(this, function() {
                            _9b8.remove();
                            _9b6();
                        }));
                        _9b7.refresh();
                    },
                    isFocusable: function() {
                        return this.inherited(arguments) && !this._mouseDown;
                    }
                });
            });
        },
        "dijit/_editor/plugins/LinkDialog": function() {
            define(["require", "dojo/_base/declare", "dojo/dom-attr", "dojo/keys", "dojo/_base/lang", "dojo/on", "dojo/sniff", "dojo/query", "dojo/string", "../_Plugin", "../../form/DropDownButton", "../range"], function(_9b9, _9ba, _9bb, keys, lang, on, has, _9bc, _9bd, _9be, _9bf, _9c0) {
                var _9c1 = _9ba("dijit._editor.plugins.LinkDialog", _9be, {
                    buttonClass: _9bf,
                    useDefaultCommand: false,
                    urlRegExp: "((https?|ftps?|file)\\://|./|../|/|)(/[a-zA-Z]{1,1}:/|)(((?:(?:[\\da-zA-Z](?:[-\\da-zA-Z]{0,61}[\\da-zA-Z])?)\\.)*(?:[a-zA-Z](?:[-\\da-zA-Z]{0,80}[\\da-zA-Z])?)\\.?)|(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])|(0[xX]0*[\\da-fA-F]?[\\da-fA-F]\\.){3}0[xX]0*[\\da-fA-F]?[\\da-fA-F]|(0+[0-3][0-7][0-7]\\.){3}0+[0-3][0-7][0-7]|(0|[1-9]\\d{0,8}|[1-3]\\d{9}|4[01]\\d{8}|42[0-8]\\d{7}|429[0-3]\\d{6}|4294[0-8]\\d{5}|42949[0-5]\\d{4}|429496[0-6]\\d{3}|4294967[01]\\d{2}|42949672[0-8]\\d|429496729[0-5])|0[xX]0*[\\da-fA-F]{1,8}|([\\da-fA-F]{1,4}\\:){7}[\\da-fA-F]{1,4}|([\\da-fA-F]{1,4}\\:){6}((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])))(\\:\\d+)?(/(?:[^?#\\s/]+/)*(?:[^?#\\s/]{0,}(?:\\?[^?#\\s/]*)?(?:#.*)?)?)?",
                    emailRegExp: "<?(mailto\\:)([!#-'*+\\-\\/-9=?A-Z^-~]+[.])*[!#-'*+\\-\\/-9=?A-Z^-~]+" + "@" + "((?:(?:[\\da-zA-Z](?:[-\\da-zA-Z]{0,61}[\\da-zA-Z])?)\\.)+(?:[a-zA-Z](?:[-\\da-zA-Z]{0,6}[\\da-zA-Z])?)\\.?)|localhost|^[^-][a-zA-Z0-9_-]*>?",
                    htmlTemplate: "<a href=\"${urlInput}\" _djrealurl=\"${urlInput}\"" + " target=\"${targetSelect}\"" + ">${textInput}</a>",
                    tag: "a",
                    _hostRxp: /^((([^\[:]+):)?([^@]+)@)?(\[([^\]]+)\]|([^\[:]*))(:([0-9]+))?$/,
                    _userAtRxp: /^([!#-'*+\-\/-9=?A-Z^-~]+[.])*[!#-'*+\-\/-9=?A-Z^-~]+@/i,
                    linkDialogTemplate: ["<table role='presentation'><tr><td>", "<label for='${id}_urlInput'>${url}</label>", "</td><td>", "<input data-dojo-type='dijit.form.ValidationTextBox' required='true' " + "id='${id}_urlInput' name='urlInput' data-dojo-props='intermediateChanges:true'/>", "</td></tr><tr><td>", "<label for='${id}_textInput'>${text}</label>", "</td><td>", "<input data-dojo-type='dijit.form.ValidationTextBox' required='true' id='${id}_textInput' " + "name='textInput' data-dojo-props='intermediateChanges:true'/>", "</td></tr><tr><td>", "<label for='${id}_targetSelect'>${target}</label>", "</td><td>", "<select id='${id}_targetSelect' name='targetSelect' data-dojo-type='dijit.form.Select'>", "<option selected='selected' value='_self'>${currentWindow}</option>", "<option value='_blank'>${newWindow}</option>", "<option value='_top'>${topWindow}</option>", "<option value='_parent'>${parentWindow}</option>", "</select>", "</td></tr><tr><td colspan='2'>", "<button data-dojo-type='dijit.form.Button' type='submit' id='${id}_setButton'>${set}</button>", "<button data-dojo-type='dijit.form.Button' type='button' id='${id}_cancelButton'>${buttonCancel}</button>", "</td></tr></table>"].join(""),
                    _initButton: function() {
                        this.inherited(arguments);
                        this.button.loadDropDown = lang.hitch(this, "_loadDropDown");
                        this._connectTagEvents();
                    },
                    _loadDropDown: function(_9c2) {
                        _9b9(["dojo/i18n", "../../TooltipDialog", "../../registry", "../../form/Button", "../../form/Select", "../../form/ValidationTextBox", "dojo/i18n!../../nls/common", "dojo/i18n!../nls/LinkDialog"], lang.hitch(this, function(i18n, _9c3, _9c4) {
                            var _9c5 = this;
                            this.tag = this.command == "insertImage" ? "img" : "a";
                            var _9c6 = lang.delegate(i18n.getLocalization("dijit", "common", this.lang), i18n.getLocalization("dijit._editor", "LinkDialog", this.lang));
                            var _9c7 = (this.dropDown = this.button.dropDown = new _9c3({
                                title: _9c6[this.command + "Title"],
                                ownerDocument: this.editor.ownerDocument,
                                dir: this.editor.dir,
                                execute: lang.hitch(this, "setValue"),
                                onOpen: function() {
                                    _9c5._onOpenDialog();
                                    _9c3.prototype.onOpen.apply(this, arguments);
                                },
                                onCancel: function() {
                                    setTimeout(lang.hitch(_9c5, "_onCloseDialog"), 0);
                                }
                            }));
                            _9c6.urlRegExp = this.urlRegExp;
                            _9c6.id = _9c4.getUniqueId(this.editor.id);
                            this._uniqueId = _9c6.id;
                            this._setContent(_9c7.title + "<div style='border-bottom: 1px black solid;padding-bottom:2pt;margin-bottom:4pt'></div>" + _9bd.substitute(this.linkDialogTemplate, _9c6));
                            _9c7.startup();
                            this._urlInput = _9c4.byId(this._uniqueId + "_urlInput");
                            this._textInput = _9c4.byId(this._uniqueId + "_textInput");
                            this._setButton = _9c4.byId(this._uniqueId + "_setButton");
                            this.own(_9c4.byId(this._uniqueId + "_cancelButton").on("click", lang.hitch(this.dropDown, "onCancel")));
                            if (this._urlInput) {
                                this.own(this._urlInput.on("change", lang.hitch(this, "_checkAndFixInput")));
                            }
                            if (this._textInput) {
                                this.own(this._textInput.on("change", lang.hitch(this, "_checkAndFixInput")));
                            }
                            this._urlRegExp = new RegExp("^" + this.urlRegExp + "$","i");
                            this._emailRegExp = new RegExp("^" + this.emailRegExp + "$","i");
                            this._urlInput.isValid = lang.hitch(this, function() {
                                var _9c8 = this._urlInput.get("value");
                                return this._urlRegExp.test(_9c8) || this._emailRegExp.test(_9c8);
                            });
                            this.own(on(_9c7.domNode, "keydown", lang.hitch(this, lang.hitch(this, function(e) {
                                if (e && e.keyCode == keys.ENTER && !e.shiftKey && !e.metaKey && !e.ctrlKey && !e.altKey) {
                                    if (!this._setButton.get("disabled")) {
                                        _9c7.onExecute();
                                        _9c7.execute(_9c7.get("value"));
                                    }
                                }
                            }))));
                            _9c2();
                        }));
                    },
                    _checkAndFixInput: function() {
                        var self = this;
                        var url = this._urlInput.get("value");
                        var _9c9 = function(url) {
                            var _9ca = false;
                            var _9cb = false;
                            if (url && url.length > 1) {
                                url = lang.trim(url);
                                if (url.indexOf("mailto:") !== 0) {
                                    if (url.indexOf("/") > 0) {
                                        if (url.indexOf("://") === -1) {
                                            if (url.charAt(0) !== "/" && url.indexOf("./") && url.indexOf("../") !== 0) {
                                                if (self._hostRxp.test(url)) {
                                                    _9ca = true;
                                                }
                                            }
                                        }
                                    } else {
                                        if (self._userAtRxp.test(url)) {
                                            _9cb = true;
                                        }
                                    }
                                }
                            }
                            if (_9ca) {
                                self._urlInput.set("value", "http://" + url);
                            }
                            if (_9cb) {
                                self._urlInput.set("value", "mailto:" + url);
                            }
                            self._setButton.set("disabled", !self._isValid());
                        };
                        if (this._delayedCheck) {
                            clearTimeout(this._delayedCheck);
                            this._delayedCheck = null;
                        }
                        this._delayedCheck = setTimeout(function() {
                            _9c9(url);
                        }, 250);
                    },
                    _connectTagEvents: function() {
                        this.editor.onLoadDeferred.then(lang.hitch(this, function() {
                            this.own(on(this.editor.editNode, "mouseup", lang.hitch(this, "_onMouseUp")));
                            this.own(on(this.editor.editNode, "dblclick", lang.hitch(this, "_onDblClick")));
                        }));
                    },
                    _isValid: function() {
                        return this._urlInput.isValid() && this._textInput.isValid();
                    },
                    _setContent: function(_9cc) {
                        this.dropDown.set({
                            parserScope: "dojo",
                            content: _9cc
                        });
                    },
                    _checkValues: function(args) {
                        if (args && args.urlInput) {
                            args.urlInput = args.urlInput.replace(/"/g, "&quot;");
                        }
                        return args;
                    },
                    _createlinkEnabledImpl: function() {
                        return true;
                    },
                    setValue: function(args) {
                        this._onCloseDialog();
                        if (has("ie") < 9) {
                            var sel = _9c0.getSelection(this.editor.window);
                            var _9cd = sel.getRangeAt(0);
                            var a = _9cd.endContainer;
                            if (a.nodeType === 3) {
                                a = a.parentNode;
                            }
                            if (a && (a.nodeName && a.nodeName.toLowerCase() !== this.tag)) {
                                a = this.editor.selection.getSelectedElement(this.tag);
                            }
                            if (a && (a.nodeName && a.nodeName.toLowerCase() === this.tag)) {
                                if (this.editor.queryCommandEnabled("unlink")) {
                                    this.editor.selection.selectElementChildren(a);
                                    this.editor.execCommand("unlink");
                                }
                            }
                        }
                        args = this._checkValues(args);
                        this.editor.execCommand("inserthtml", _9bd.substitute(this.htmlTemplate, args));
                        _9bc("a", this.editor.document).forEach(function(a) {
                            if (!a.innerHTML && !_9bb.has(a, "name")) {
                                a.parentNode.removeChild(a);
                            }
                        }, this);
                    },
                    _onCloseDialog: function() {
                        if (this.editor.focused) {
                            this.editor.focus();
                        }
                    },
                    _getCurrentValues: function(a) {
                        var url, text, _9ce;
                        if (a && a.tagName.toLowerCase() === this.tag) {
                            url = a.getAttribute("_djrealurl") || a.getAttribute("href");
                            _9ce = a.getAttribute("target") || "_self";
                            text = a.textContent || a.innerText;
                            this.editor.selection.selectElement(a, true);
                        } else {
                            text = this.editor.selection.getSelectedText();
                        }
                        return {
                            urlInput: url || "",
                            textInput: text || "",
                            targetSelect: _9ce || ""
                        };
                    },
                    _onOpenDialog: function() {
                        var a, b, fc;
                        if (has("ie")) {
                            var sel = _9c0.getSelection(this.editor.window);
                            if (sel.rangeCount) {
                                var _9cf = sel.getRangeAt(0);
                                a = _9cf.endContainer;
                                if (a.nodeType === 3) {
                                    a = a.parentNode;
                                }
                                if (a && (a.nodeName && a.nodeName.toLowerCase() !== this.tag)) {
                                    a = this.editor.selection.getSelectedElement(this.tag);
                                }
                                if (!a || (a.nodeName && a.nodeName.toLowerCase() !== this.tag)) {
                                    b = this.editor.selection.getAncestorElement(this.tag);
                                    if (b && (b.nodeName && b.nodeName.toLowerCase() == this.tag)) {
                                        a = b;
                                        this.editor.selection.selectElement(a);
                                    } else {
                                        if (_9cf.startContainer === _9cf.endContainer) {
                                            fc = _9cf.startContainer.firstChild;
                                            if (fc && (fc.nodeName && fc.nodeName.toLowerCase() == this.tag)) {
                                                a = fc;
                                                this.editor.selection.selectElement(a);
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            a = this.editor.selection.getAncestorElement(this.tag);
                        }
                        this.dropDown.reset();
                        this._setButton.set("disabled", true);
                        this.dropDown.set("value", this._getCurrentValues(a));
                    },
                    _onDblClick: function(e) {
                        if (e && e.target) {
                            var t = e.target;
                            var tg = t.tagName ? t.tagName.toLowerCase() : "";
                            if (tg === this.tag && _9bb.get(t, "href")) {
                                var _9d0 = this.editor;
                                this.editor.selection.selectElement(t);
                                _9d0.onDisplayChanged();
                                if (_9d0._updateTimer) {
                                    _9d0._updateTimer.remove();
                                    delete _9d0._updateTimer;
                                }
                                _9d0.onNormalizedDisplayChanged();
                                var _9d1 = this.button;
                                setTimeout(function() {
                                    _9d1.set("disabled", false);
                                    _9d1.loadAndOpenDropDown().then(function() {
                                        if (_9d1.dropDown.focus) {
                                            _9d1.dropDown.focus();
                                        }
                                    });
                                }, 10);
                            }
                        }
                    },
                    _onMouseUp: function() {
                        if (has("ff")) {
                            var a = this.editor.selection.getAncestorElement(this.tag);
                            if (a) {
                                var _9d2 = _9c0.getSelection(this.editor.window);
                                var _9d3 = _9d2.getRangeAt(0);
                                if (_9d3.collapsed && a.childNodes.length) {
                                    var test = _9d3.cloneRange();
                                    test.selectNodeContents(a.childNodes[a.childNodes.length - 1]);
                                    test.setStart(a.childNodes[0], 0);
                                    if (_9d3.compareBoundaryPoints(test.START_TO_START, test) !== 1) {
                                        _9d3.setStartBefore(a);
                                    } else {
                                        if (_9d3.compareBoundaryPoints(test.END_TO_START, test) !== -1) {
                                            _9d3.setStartAfter(a);
                                        }
                                    }
                                }
                            }
                        }
                    }
                });
                var _9d4 = _9ba("dijit._editor.plugins.ImgLinkDialog", [_9c1], {
                    linkDialogTemplate: ["<table role='presentation'><tr><td>", "<label for='${id}_urlInput'>${url}</label>", "</td><td>", "<input dojoType='dijit.form.ValidationTextBox' regExp='${urlRegExp}' " + "required='true' id='${id}_urlInput' name='urlInput' data-dojo-props='intermediateChanges:true'/>", "</td></tr><tr><td>", "<label for='${id}_textInput'>${text}</label>", "</td><td>", "<input data-dojo-type='dijit.form.ValidationTextBox' required='false' id='${id}_textInput' " + "name='textInput' data-dojo-props='intermediateChanges:true'/>", "</td></tr><tr><td>", "</td><td>", "</td></tr><tr><td colspan='2'>", "<button data-dojo-type='dijit.form.Button' type='submit' id='${id}_setButton'>${set}</button>", "<button data-dojo-type='dijit.form.Button' type='button' id='${id}_cancelButton'>${buttonCancel}</button>", "</td></tr></table>"].join(""),
                    htmlTemplate: "<img src=\"${urlInput}\" _djrealurl=\"${urlInput}\" alt=\"${textInput}\" />",
                    tag: "img",
                    _getCurrentValues: function(img) {
                        var url, text;
                        if (img && img.tagName.toLowerCase() === this.tag) {
                            url = img.getAttribute("_djrealurl") || img.getAttribute("src");
                            text = img.getAttribute("alt");
                            this.editor.selection.selectElement(img, true);
                        } else {
                            text = this.editor.selection.getSelectedText();
                        }
                        return {
                            urlInput: url || "",
                            textInput: text || ""
                        };
                    },
                    _isValid: function() {
                        return this._urlInput.isValid();
                    },
                    _connectTagEvents: function() {
                        this.inherited(arguments);
                        this.editor.onLoadDeferred.then(lang.hitch(this, function() {
                            this.own(on(this.editor.editNode, "mousedown", lang.hitch(this, "_selectTag")));
                        }));
                    },
                    _selectTag: function(e) {
                        if (e && e.target) {
                            var t = e.target;
                            var tg = t.tagName ? t.tagName.toLowerCase() : "";
                            if (tg === this.tag) {
                                this.editor.selection.selectElement(t);
                            }
                        }
                    },
                    _checkValues: function(args) {
                        if (args && args.urlInput) {
                            args.urlInput = args.urlInput.replace(/"/g, "&quot;");
                        }
                        if (args && args.textInput) {
                            args.textInput = args.textInput.replace(/"/g, "&quot;");
                        }
                        return args;
                    },
                    _onDblClick: function(e) {
                        if (e && e.target) {
                            var t = e.target;
                            var tg = t.tagName ? t.tagName.toLowerCase() : "";
                            if (tg === this.tag && _9bb.get(t, "src")) {
                                var _9d5 = this.editor;
                                this.editor.selection.selectElement(t);
                                _9d5.onDisplayChanged();
                                if (_9d5._updateTimer) {
                                    _9d5._updateTimer.remove();
                                    delete _9d5._updateTimer;
                                }
                                _9d5.onNormalizedDisplayChanged();
                                var _9d6 = this.button;
                                setTimeout(function() {
                                    _9d6.set("disabled", false);
                                    _9d6.loadAndOpenDropDown().then(function() {
                                        if (_9d6.dropDown.focus) {
                                            _9d6.dropDown.focus();
                                        }
                                    });
                                }, 10);
                            }
                        }
                    }
                });
                _9be.registry["createLink"] = function() {
                    return new _9c1({
                        command: "createLink"
                    });
                }
                ;
                _9be.registry["insertImage"] = function() {
                    return new _9d4({
                        command: "insertImage"
                    });
                }
                ;
                _9c1.ImgLinkDialog = _9d4;
                return _9c1;
            });
        },
        "dijit/_editor/plugins/ViewSource": function() {
            define(["dojo/_base/array", "dojo/aspect", "dojo/_base/declare", "dojo/dom-attr", "dojo/dom-construct", "dojo/dom-geometry", "dojo/dom-style", "dojo/i18n", "dojo/keys", "dojo/_base/lang", "dojo/on", "dojo/sniff", "dojo/window", "../../focus", "../_Plugin", "../../form/ToggleButton", "../..", "../../registry", "dojo/i18n!../nls/commands"], function(_9d7, _9d8, _9d9, _9da, _9db, _9dc, _9dd, i18n, keys, lang, on, has, _9de, _9df, _9e0, _9e1, _9e2, _9e3) {
                var _9e4 = _9d9("dijit._editor.plugins.ViewSource", _9e0, {
                    stripScripts: true,
                    stripComments: true,
                    stripIFrames: true,
                    stripEventHandlers: true,
                    readOnly: false,
                    _fsPlugin: null,
                    toggle: function() {
                        if (has("webkit")) {
                            this._vsFocused = true;
                        }
                        this.button.set("checked", !this.button.get("checked"));
                    },
                    _initButton: function() {
                        var _9e5 = i18n.getLocalization("dijit._editor", "commands")
                          , _9e6 = this.editor;
                        this.button = new _9e1({
                            label: _9e5["viewSource"],
                            ownerDocument: _9e6.ownerDocument,
                            dir: _9e6.dir,
                            lang: _9e6.lang,
                            showLabel: false,
                            iconClass: this.iconClassPrefix + " " + this.iconClassPrefix + "ViewSource",
                            tabIndex: "-1",
                            onChange: lang.hitch(this, "_showSource")
                        });
                        this.button.set("readOnly", false);
                    },
                    setEditor: function(_9e7) {
                        this.editor = _9e7;
                        this._initButton();
                        this.editor.addKeyHandler(keys.F12, true, true, lang.hitch(this, function(e) {
                            this.button.focus();
                            this.toggle();
                            e.stopPropagation();
                            e.preventDefault();
                            setTimeout(lang.hitch(this, function() {
                                if (this.editor.focused) {
                                    this.editor.focus();
                                }
                            }), 100);
                        }));
                    },
                    _showSource: function(_9e8) {
                        var ed = this.editor;
                        var _9e9 = ed._plugins;
                        var html;
                        this._sourceShown = _9e8;
                        var self = this;
                        try {
                            if (!this.sourceArea) {
                                this._createSourceView();
                            }
                            if (_9e8) {
                                ed._sourceQueryCommandEnabled = ed.queryCommandEnabled;
                                ed.queryCommandEnabled = function(cmd) {
                                    return cmd.toLowerCase() === "viewsource";
                                }
                                ;
                                this.editor.onDisplayChanged();
                                html = ed.get("value");
                                html = this._filter(html);
                                ed.set("value", html);
                                _9d7.forEach(_9e9, function(p) {
                                    if (p && !(p instanceof _9e4) && p.isInstanceOf(_9e0)) {
                                        p.set("disabled", true);
                                    }
                                });
                                if (this._fsPlugin) {
                                    this._fsPlugin._getAltViewNode = function() {
                                        return self.sourceArea;
                                    }
                                    ;
                                }
                                this.sourceArea.value = html;
                                this.sourceArea.style.height = ed.iframe.style.height;
                                this.sourceArea.style.width = ed.iframe.style.width;
                                ed.iframe.parentNode.style.position = "relative";
                                _9dd.set(ed.iframe, {
                                    position: "absolute",
                                    top: 0,
                                    visibility: "hidden"
                                });
                                _9dd.set(this.sourceArea, {
                                    display: "block"
                                });
                                var _9ea = function() {
                                    var vp = _9de.getBox(ed.ownerDocument);
                                    if ("_prevW"in this && "_prevH"in this) {
                                        if (vp.w === this._prevW && vp.h === this._prevH) {
                                            return;
                                        } else {
                                            this._prevW = vp.w;
                                            this._prevH = vp.h;
                                        }
                                    } else {
                                        this._prevW = vp.w;
                                        this._prevH = vp.h;
                                    }
                                    if (this._resizer) {
                                        clearTimeout(this._resizer);
                                        delete this._resizer;
                                    }
                                    this._resizer = setTimeout(lang.hitch(this, function() {
                                        delete this._resizer;
                                        this._resize();
                                    }), 10);
                                };
                                this._resizeHandle = on(window, "resize", lang.hitch(this, _9ea));
                                setTimeout(lang.hitch(this, this._resize), 100);
                                this.editor.onNormalizedDisplayChanged();
                                this.editor.__oldGetValue = this.editor.getValue;
                                this.editor.getValue = lang.hitch(this, function() {
                                    var txt = this.sourceArea.value;
                                    txt = this._filter(txt);
                                    return txt;
                                });
                                this._setListener = _9d8.after(this.editor, "setValue", lang.hitch(this, function(_9eb) {
                                    _9eb = _9eb || "";
                                    _9eb = this._filter(_9eb);
                                    this.sourceArea.value = _9eb;
                                }), true);
                            } else {
                                if (!ed._sourceQueryCommandEnabled) {
                                    return;
                                }
                                this._setListener.remove();
                                delete this._setListener;
                                this._resizeHandle.remove();
                                delete this._resizeHandle;
                                if (this.editor.__oldGetValue) {
                                    this.editor.getValue = this.editor.__oldGetValue;
                                    delete this.editor.__oldGetValue;
                                }
                                ed.queryCommandEnabled = ed._sourceQueryCommandEnabled;
                                if (!this._readOnly) {
                                    html = this.sourceArea.value;
                                    html = this._filter(html);
                                    ed.beginEditing();
                                    ed.set("value", html);
                                    ed.endEditing();
                                }
                                _9d7.forEach(_9e9, function(p) {
                                    if (p && p.isInstanceOf(_9e0)) {
                                        p.set("disabled", false);
                                    }
                                });
                                _9dd.set(this.sourceArea, "display", "none");
                                _9dd.set(ed.iframe, {
                                    position: "relative",
                                    visibility: "visible"
                                });
                                delete ed._sourceQueryCommandEnabled;
                                this.editor.onDisplayChanged();
                            }
                            setTimeout(lang.hitch(this, function() {
                                var _9ec = ed.domNode.parentNode;
                                if (_9ec) {
                                    var _9ed = _9e3.getEnclosingWidget(_9ec);
                                    if (_9ed && _9ed.resize) {
                                        _9ed.resize();
                                    }
                                }
                                ed.resize();
                            }), 300);
                        } catch (e) {}
                    },
                    updateState: function() {
                        this.button.set("disabled", this.get("disabled"));
                    },
                    _resize: function() {
                        var ed = this.editor;
                        var tbH = ed.getHeaderHeight();
                        var fH = ed.getFooterHeight();
                        var eb = _9dc.position(ed.domNode);
                        var _9ee = _9dc.getPadBorderExtents(ed.iframe.parentNode);
                        var _9ef = _9dc.getMarginExtents(ed.iframe.parentNode);
                        var _9f0 = _9dc.getPadBorderExtents(ed.domNode);
                        var edb = {
                            w: eb.w - _9f0.w,
                            h: eb.h - (tbH + _9f0.h + fH)
                        };
                        if (this._fsPlugin && this._fsPlugin.isFullscreen) {
                            var vp = _9de.getBox(ed.ownerDocument);
                            edb.w = (vp.w - _9f0.w);
                            edb.h = (vp.h - (tbH + _9f0.h + fH));
                        }
                        _9dc.setMarginBox(this.sourceArea, {
                            w: Math.round(edb.w - (_9ee.w + _9ef.w)),
                            h: Math.round(edb.h - (_9ee.h + _9ef.h))
                        });
                    },
                    _createSourceView: function() {
                        var ed = this.editor;
                        var _9f1 = ed._plugins;
                        this.sourceArea = _9db.create("textarea");
                        if (this.readOnly) {
                            _9da.set(this.sourceArea, "readOnly", true);
                            this._readOnly = true;
                        }
                        _9dd.set(this.sourceArea, {
                            padding: "0px",
                            margin: "0px",
                            borderWidth: "0px",
                            borderStyle: "none"
                        });
                        _9da.set(this.sourceArea, "aria-label", this.editor.id);
                        _9db.place(this.sourceArea, ed.iframe, "before");
                        if (has("ie") && ed.iframe.parentNode.lastChild !== ed.iframe) {
                            _9dd.set(ed.iframe.parentNode.lastChild, {
                                width: "0px",
                                height: "0px",
                                padding: "0px",
                                margin: "0px",
                                borderWidth: "0px",
                                borderStyle: "none"
                            });
                        }
                        ed._viewsource_oldFocus = ed.focus;
                        var self = this;
                        ed.focus = function() {
                            if (self._sourceShown) {
                                self.setSourceAreaCaret();
                            } else {
                                try {
                                    if (this._vsFocused) {
                                        delete this._vsFocused;
                                        _9df.focus(ed.editNode);
                                    } else {
                                        ed._viewsource_oldFocus();
                                    }
                                } catch (e) {}
                            }
                        }
                        ;
                        var i, p;
                        for (i = 0; i < _9f1.length; i++) {
                            p = _9f1[i];
                            if (p && (p.declaredClass === "dijit._editor.plugins.FullScreen" || p.declaredClass === (_9e2._scopeName + "._editor.plugins.FullScreen"))) {
                                this._fsPlugin = p;
                                break;
                            }
                        }
                        if (this._fsPlugin) {
                            this._fsPlugin._viewsource_getAltViewNode = this._fsPlugin._getAltViewNode;
                            this._fsPlugin._getAltViewNode = function() {
                                return self._sourceShown ? self.sourceArea : this._viewsource_getAltViewNode();
                            }
                            ;
                        }
                        this.own(on(this.sourceArea, "keydown", lang.hitch(this, function(e) {
                            if (this._sourceShown && e.keyCode == keys.F12 && e.ctrlKey && e.shiftKey) {
                                this.button.focus();
                                this.button.set("checked", false);
                                setTimeout(lang.hitch(this, function() {
                                    ed.focus();
                                }), 100);
                                e.stopPropagation();
                                e.preventDefault();
                            }
                        })));
                    },
                    _stripScripts: function(html) {
                        if (html) {
                            html = html.replace(/<\s*script[^>]*>((.|\s)*?)<\\?\/\s*script\s*>/ig, "");
                            html = html.replace(/<\s*script\b([^<>]|\s)*>?/ig, "");
                            html = html.replace(/<[^>]*=(\s|)*[("|')]javascript:[^$1][(\s|.)]*[$1][^>]*>/ig, "");
                        }
                        return html;
                    },
                    _stripComments: function(html) {
                        if (html) {
                            html = html.replace(/<!--(.|\s){1,}?-->/g, "");
                        }
                        return html;
                    },
                    _stripIFrames: function(html) {
                        if (html) {
                            html = html.replace(/<\s*iframe[^>]*>((.|\s)*?)<\\?\/\s*iframe\s*>/ig, "");
                        }
                        return html;
                    },
                    _stripEventHandlers: function(html) {
                        if (html) {
                            var _9f2 = html.match(/<[a-z]+?\b(.*?on.*?(['"]).*?\2.*?)+>/gim);
                            if (_9f2) {
                                for (var i = 0, l = _9f2.length; i < l; i++) {
                                    var _9f3 = _9f2[i];
                                    var _9f4 = _9f3.replace(/\s+on[a-z]*\s*=\s*(['"])(.*?)\1/igm, "");
                                    html = html.replace(_9f3, _9f4);
                                }
                            }
                        }
                        return html;
                    },
                    _filter: function(html) {
                        if (html) {
                            if (this.stripScripts) {
                                html = this._stripScripts(html);
                            }
                            if (this.stripComments) {
                                html = this._stripComments(html);
                            }
                            if (this.stripIFrames) {
                                html = this._stripIFrames(html);
                            }
                            if (this.stripEventHandlers) {
                                html = this._stripEventHandlers(html);
                            }
                        }
                        return html;
                    },
                    setSourceAreaCaret: function() {
                        var elem = this.sourceArea;
                        _9df.focus(elem);
                        if (this._sourceShown && !this.readOnly) {
                            if (elem.setSelectionRange) {
                                elem.setSelectionRange(0, 0);
                            } else {
                                if (this.sourceArea.createTextRange) {
                                    var _9f5 = elem.createTextRange();
                                    _9f5.collapse(true);
                                    _9f5.moveStart("character", -99999);
                                    _9f5.moveStart("character", 0);
                                    _9f5.moveEnd("character", 0);
                                    _9f5.select();
                                }
                            }
                        }
                    },
                    destroy: function() {
                        if (this._resizer) {
                            clearTimeout(this._resizer);
                            delete this._resizer;
                        }
                        if (this._resizeHandle) {
                            this._resizeHandle.remove();
                            delete this._resizeHandle;
                        }
                        if (this._setListener) {
                            this._setListener.remove();
                            delete this._setListener;
                        }
                        this.inherited(arguments);
                    }
                });
                _9e0.registry["viewSource"] = _9e0.registry["viewsource"] = function(args) {
                    return new _9e4({
                        readOnly: ("readOnly"in args) ? args.readOnly : false,
                        stripComments: ("stripComments"in args) ? args.stripComments : true,
                        stripScripts: ("stripScripts"in args) ? args.stripScripts : true,
                        stripIFrames: ("stripIFrames"in args) ? args.stripIFrames : true,
                        stripEventHandlers: ("stripEventHandlers"in args) ? args.stripEventHandlers : true
                    });
                }
                ;
                return _9e4;
            });
        },
        "ebg/core/core": function() {
            define(["dojo", "dojo/_base/declare", "ebg/core/common", "dojo/string", "dojo/fx", "dojo/fx/easing", "dojo/parser", "dojo/io/iframe", "dijit/Tooltip", "dojox/uuid/generateRandomUuid", "dijit/Dialog", "ebg/core/i18n", "ebg/webrtc", "ebg/webpush", "ebg/draggable", "ebg/resizable", "ebg/popindialog"], function(dojo, _9f6) {
                dojo.extend(dijit.Dialog, {
                    attr: function(_9f7, _9f8) {
                        this.set(_9f7, _9f8);
                    },
                    set: function(_9f9, _9fa) {
                        if (_9f9 == "content") {
                            this.thisDlg = new ebg.popindialog();
                            this.thisDlg.bCloseIsHiding = true;
                            this.thisDlg.create("dialog_" + this.id, $("main-content") !== null ? "main-content" : "left-side");
                            this.thisDlg.setTitle(this.title);
                            if (this.onHide) {
                                this.thisDlg.onHide = dojo.hitch(this, this.onHide);
                            }
                            this.thisDlg.setContent(_9fa);
                        }
                    },
                    show: function() {
                        if (typeof this.thisDlg != "undefined") {
                            this.thisDlg.show();
                        }
                    },
                    hide: function() {
                        if (typeof this.thisDlg != "undefined") {
                            this.thisDlg.hide();
                        }
                    },
                    destroyRecursive: function() {
                        if (typeof this.thisDlg != "undefined") {
                            this.thisDlg.destroy(false);
                        }
                    },
                    destroy: function() {
                        if (typeof this.thisDlg != "undefined") {
                            this.thisDlg.destroy(false);
                        }
                    },
                });
                return _9f6("ebg.core.core", null, {
                    constructor: function() {
                        this.subscriptions = [];
                        this.comet_subscriptions = [];
                        this.unload_in_progress = false;
                        this.bCancelAllAjax = false;
                        this.tooltips = {};
                        this.tooltipsInfos = {};
                        this.screenMinWidth = 0;
                        this.currentZoom = 1;
                        this.mozScale = 1;
                        this.rotateToPosition = {};
                        this.connections = [];
                        this.instantaneousMode = false;
                        this.webrtc = null;
                        this.webrtcmsg_ntf_handle = null;
                        this.room = null;
                        this.already_accepted_room = null;
                        this.rtc_mode = 0;
                        this.mediaConstraints = {
                            "video": false,
                            "audio": false
                        };
                        this.gameMalePlayers = [];
                        this.toReplaceForMale = {};
                        this.toReplaceForMale["fr"] = "·e|·es|·e·s";
                        this.replacementForMale = {};
                        this.replacementForMale["fr"] = "";
                        this.gameFemalePlayers = [];
                        this.toReplaceForFemale = {};
                        this.toReplaceForFemale["en"] = " his ";
                        this.toReplaceForFemale["fr"] = "·";
                        this.toReplaceForFemale["nl"] = " zijn ";
                        this.replacementForFemale = {};
                        this.replacementForFemale["en"] = " her ";
                        this.replacementForFemale["fr"] = "";
                        this.replacementForFemale["nl"] = " haar ";
                        this.replacementBlacklist = {};
                        this.replacementBlacklist["nl"] = [];
                        this.replacementBlacklist["nl"].push("zijn gekozen");
                        this.gameNeutralPlayers = [];
                        this.toReplaceForNeutral = {};
                        this.toReplaceForNeutral["en"] = " his ";
                        this.replacementForNeutral = {};
                        this.replacementForNeutral["en"] = " their ";
                        this.emoticons = {
                            ":)": "smile",
                            ":-)": "smile",
                            ":D": "bigsmile",
                            ":-D": "bigsmile",
                            ":(": "unsmile",
                            ":-(": "unsmile",
                            ";)": "blink",
                            ";-)": "blink",
                            ":/": "bad",
                            ":-/": "bad",
                            ":s": "bad",
                            ":-s": "bad",
                            ":P": "mischievous",
                            ":-P": "mischievous",
                            ":p": "mischievous",
                            ":-p": "mischievous",
                            ":$": "blushing",
                            ":-$": "blushing",
                            ":o": "surprised",
                            ":-o": "surprised",
                            ":O": "shocked",
                            ":-O": "shocked",
                            "o_o": "shocked",
                            "O_O": "shocked",
                            "8)": "sunglass",
                            "8-)": "sunglass"
                        };
                        this.defaultTooltipPosition = ["above", "below", "after", "before"];
                        this.webpush = null;
                    },
                    ajaxcall: function(url, _9fb, _9fc, _9fd, _9fe, _9ff) {
                        g_sitecore.ajaxcall_running++;
                        g_sitecore.updateAjaxCallStatus();
                        if (typeof _9fb != "object") {
                            console.error("ajaxcall : params should be an object. param =");
                            console.error(_9fb);
                        }
                        if (typeof _9fb.action != "undefined") {
                            console.error("ajaxcall : sorry you cannot use 'action' argument (reserved)");
                            this.showMessage("Ajaxcall : sorry you cannot use 'action' argument (reserved keyword)", "error");
                            return;
                        }
                        if (typeof _9fb.module != "undefined") {
                            console.error("ajaxcall : sorry you cannot use 'module' argument (reserved)");
                            this.showMessage("Ajaxcall : sorry you cannot use 'module' argument (reserved keyword)", "error");
                            return;
                        }
                        if (typeof _9fb["class"] != "undefined") {
                            console.error("ajaxcall : sorry you cannot use 'class' argument (reserved)");
                            this.showMessage("Ajaxcall : sorry you cannot use 'class' argument (reserved keyword)", "error");
                            return;
                        }
                        if (_9fb.lock) {
                            var _a00 = null;
                            if (_9fb.lock == "table") {
                                _a00 = "table";
                            } else {
                                if (_9fb.lock == "player") {
                                    _a00 = "player";
                                }
                            }
                            _9fb.lock = dojox.uuid.generateRandomUuid();
                            dojo.publish("lockInterface", [{
                                status: "outgoing",
                                uuid: _9fb.lock,
                                type: _a00
                            }]);
                        }
                        var _a01 = dojo.hitch(this, function(_a02, _a03) {
                            if (_a02 && _a02.status == 1) {
                                if (typeof _a02.profilingd != "undefined") {
                                    $("ajax_call_profiling").innerHTML += _a02.profilingd;
                                }
                                if (_a03.args.content.lock) {
                                    dojo.publish("lockInterface", [{
                                        status: "recorded",
                                        uuid: _a03.args.content.lock
                                    }]);
                                }
                                if (typeof _a02.data == "object" && _a02.data !== null && typeof _a02.data.data == "object" && _a02.data.data !== null && typeof _a02.data.data.tbyt != "undefined") {
                                    this.number_of_tb_table_its_your_turn = _a02.data.data.tbyt;
                                }
                                if (!this.bCancelAllAjax) {
                                    try {
                                        var _a04 = dojo.hitch(_9fc, _9fd)(_a02.data);
                                        if ((typeof _9fe != "undefined")) {
                                            dojo.hitch(_9fc, _9fe)(false);
                                        }
                                    } catch (error) {
                                        console.error("Exception during callback " + _9fd + " after a call to URL " + url);
                                        console.error("Exception message : " + error.message);
                                        console.error("URL = " + url);
                                        console.error("Ajaxcall params :");
                                        console.error(_9fb);
                                        console.error("Ajaxcall result :");
                                        console.error(_a02);
                                        error.message = "Error during callback from url " + url + ". " + error.message;
                                        throw error;
                                    }
                                }
                            } else {
                                var _a05 = "";
                                if (_a02 === null) {
                                    this.showMessage(__("lang_mainsite", "Ajaxcall error: empty answer"), "error");
                                    this.showMessage(__("lang_mainsite", "If your game interface seems unstable, press F5 or <a href='javascript:location.reload(true)'>click here</a>"), "info");
                                    console.error("Ajaxcall error: empty answer from " + url);
                                } else {
                                    if (_a02.code == 800) {
                                        dojo.publish("signalVisitorNotAllowed");
                                    } else {
                                        if (_a02.code == 801) {
                                            this.showMessage(_a02.error, "error");
                                            if (typeof gotourl != "undefined") {
                                                gotourl("premium");
                                            } else {
                                                if (typeof this.metasiteurl != "undefined") {
                                                    setTimeout(dojo.hitch(this, function() {
                                                        document.location.href = this.metasiteurl + "/premium";
                                                    }), 2000);
                                                }
                                            }
                                        } else {
                                            if (_a02.code == 114) {
                                                if (typeof gotourl != "undefined") {
                                                    gotourl("account?page=newuser");
                                                    this.showMessage(_a02.error, "error");
                                                } else {
                                                    if (typeof this.metasiteurl != "undefined") {
                                                        this.showMessage(_a02.error, "error");
                                                        setTimeout(dojo.hitch(this, function() {
                                                            document.location.href = this.metasiteurl + "/account?page=newuser";
                                                        }), 2000);
                                                    }
                                                }
                                            } else {
                                                if (toint(_a02.expected) === 0) {
                                                    this.showMessage(__("lang_mainsite", "Unexpected error: ") + _a02.error, "error");
                                                    this.showMessage(__("lang_mainsite", "If your game interface seems unstable, press F5 or <a href='javascript:location.reload(true)'>click here</a>"), "info");
                                                    console.error("Unexpected error:  " + _a02.error);
                                                } else {
                                                    this.showMessage(_a02.error, "error");
                                                    _a05 = _a02.error;
                                                }
                                            }
                                        }
                                    }
                                }
                                if (_a03.args.content.lock) {
                                    dojo.publish("lockInterface", [{
                                        status: "updated",
                                        uuid: _a03.args.content.lock
                                    }]);
                                }
                                if (!this.bCancelAllAjax) {
                                    if ((typeof _9fe != "undefined")) {
                                        dojo.hitch(_9fc, _9fe)(true, _a05, (_a02 === null ? 0 : _a02.code));
                                    }
                                }
                            }
                        });
                        var _a06 = dojo.hitch(this, function(_a07, _a08) {
                            if (_a08.xhr) {
                                if (_a08.xhr.status == 200) {
                                    var _a09 = _a08.xhr.responseText;
                                    _a09 = _a09.replace(/^\s+/g, "").replace(/\s+$/g, "");
                                    if (_a09[0] != "{") {
                                        this.showMessage(__("lang_mainsite", "Server syntax error: ") + _a08.xhr.responseText, "error");
                                        this.showMessage(__("lang_mainsite", "If your game interface seems unstable, press F5 or <a href='javascript:location.reload(true)'>click here</a>"), "info");
                                        console.error("Server syntax error: " + url + " " + _a07 + " / " + _a08.xhr.responseText);
                                    } else {
                                        this.showMessage(__("lang_mainsite", "Client error: ") + _a07 + ". During " + _a08.args.url + " Received: " + _a08.xhr.responseText, "only_to_log");
                                        this.showMessage(__("lang_mainsite", "If your game interface seems unstable, press F5 or <a href='javascript:location.reload(true)'>click here</a>"), "only_to_log");
                                        console.error("Error during callback error: " + url + " / " + _a07);
                                        console.error(_a08);
                                    }
                                } else {
                                    console.error("HTTP code " + _a08.xhr.status + " " + url);
                                    this.displayUserHttpError(_a08.xhr.status);
                                }
                            } else {
                                console.error("Server error: " + _a07);
                                if (typeof _a08.error != "undefined") {
                                    this.showMessage(_a08.error.toString(), "error");
                                }
                            }
                            if (_a08.args.content.lock) {
                                dojo.publish("lockInterface", [{
                                    status: "updated",
                                    uuid: _a08.args.content.lock
                                }]);
                            }
                            if (!this.bCancelAllAjax) {
                                if ((typeof _9fe != "undefined")) {
                                    dojo.hitch(_9fc, _9fe)(true);
                                }
                            }
                        });
                        var _a0a = dojo.hitch(this, function(_a0b, _a0c) {
                            g_sitecore.ajaxcall_running--;
                            g_sitecore.updateAjaxCallStatus();
                        });
                        var form = null;
                        if ($("debug_output")) {
                            var n = url.lastIndexOf("/");
                            var _a0d = url.substring(n + 1);
                            var _a0e = dojo.clone(_9fb);
                            if (_a0e.lock) {
                                delete _a0e.lock;
                            }
                            var _a0f = "<div>> <b>" + _a0d + "</b>?" + dojo.objectToQuery(_a0e) + "</div>";
                            dojo.place(_a0f, "debug_output", "first");
                        }
                        if (_9ff != "post" && _9ff != "iframe") {
                            dojo.xhrGet({
                                url: url,
                                handleAs: "json",
                                preventCache: true,
                                content: _9fb,
                                load: _a01,
                                error: _a06,
                                handle: _a0a,
                                timeout: 20000
                            });
                        } else {
                            if (_9ff == "post") {
                                if (typeof _9fb.form_id != "undefined") {
                                    if (_9fb.form_id !== null) {
                                        form = _9fb.form_id;
                                    }
                                }
                                dojo.xhrPost({
                                    url: url,
                                    handleAs: "json",
                                    preventCache: true,
                                    content: _9fb,
                                    form: form,
                                    load: _a01,
                                    error: _a06,
                                    handle: _a0a,
                                    timeout: 20000
                                });
                            } else {
                                if (_9ff == "iframe") {
                                    if (_9fb.form_id !== null) {
                                        form = _9fb.form_id;
                                    }
                                    dojo.io.iframe.send({
                                        url: url,
                                        handleAs: "json",
                                        preventCache: true,
                                        content: _9fb,
                                        form: form,
                                        load: _a01,
                                        error: _a06,
                                        handle: _a0a,
                                        timeout: 20000
                                    });
                                }
                            }
                        }
                    },
                    ajaxpageload: function(url, _a10, _a11, _a12, _a13) {
                        g_sitecore.ajaxcall_running++;
                        g_sitecore.updateAjaxCallStatus();
                        dojo.xhrGet({
                            url: url,
                            handleAs: "text",
                            preventCache: true,
                            content: _a10,
                            timeout: 20000,
                            load: dojo.hitch(this, function(_a14, _a15) {
                                dojo.empty(_a11);
                                dojo.place(_a14, _a11);
                                if ($("bga_fatal_error")) {
                                    if (toint($("bga_fatal_error_code").innerHTML) == 800) {
                                        dojo.publish("signalVisitorNotAllowed");
                                    } else {
                                        if (toint($("bga_fatal_error_code").innerHTML) == 802) {
                                            var _a16 = $("bga_fatal_error_descr").innerHTML;
                                            var _a17 = _a16.split(":");
                                            gotourl(_a17[1]);
                                        }
                                    }
                                } else {
                                    dojo.hitch(_a12, _a13)(_a14.data);
                                }
                            }),
                            error: dojo.hitch(this, function(_a18, _a19) {
                                if (_a19.xhr.status == 200) {
                                    var _a1a = _a19.xhr.responseText;
                                    _a1a = _a1a.replace(/^\s+/g, "").replace(/\s+$/g, "");
                                    if (_a1a[0] != "<") {
                                        this.showMessage("Server syntax error: " + _a19.xhr.responseText, "error");
                                    } else {
                                        this.showMessage("Callback error: " + _a18, "error");
                                        console.error("Callback error: " + _a18);
                                    }
                                } else {
                                    console.error("HTTP code " + _a19.xhr.status + " " + url);
                                    this.displayUserHttpError(_a19.xhr.status);
                                }
                                console.error("Error during ajaxpageload. HTTP status code: ", _a19.xhr.status);
                            }),
                            handle: dojo.hitch(this, function(_a1b, _a1c) {
                                g_sitecore.ajaxcall_running--;
                                g_sitecore.updateAjaxCallStatus();
                            })
                        });
                    },
                    displayUserHttpError: function(_a1d) {
                        if (g_sitecore.page_is_unloading) {
                            return;
                        } else {
                            _a1d = toint(_a1d);
                            var msg = "";
                            switch (_a1d) {
                            case 404:
                                msg = __("lang_mainsite", "The requested page was not found");
                                break;
                            case 500:
                                msg = __("lang_mainsite", "The server reported an error.");
                                break;
                            case 407:
                                msg = __("lang_mainsite", "You need to authenticate with a proxy.");
                                break;
                            case 0:
                                msg = __("lang_mainsite", "Unable to contact the server. Are you connected ?");
                                break;
                            default:
                                msg = __("lang_mainsite", "Unknown network error") + " (" + _a1d + ")";
                                break;
                            }
                            this.showMessage(msg, "error");
                        }
                    },
                    cancelAjaxCall: function() {
                        this.bCancelAllAjax = true;
                    },
                    format_block: function(_a1e, args) {
                        return dojo.trim(dojo.string.substitute(dojo.eval(_a1e), args));
                    },
                    format_string: function(_a1f, args) {
                        return dojo.trim(dojo.string.substitute(_a1f, args));
                    },
                    format_string_recursive: function(_a20, args) {
                        if (_a20 === null) {
                            console.error("format_string_recursive called with a null string with args:");
                            console.error(args);
                            return "null_tr_string";
                        }
                        var _a21 = "";
                        if (_a20 != "") {
                            var _a22 = this.clienttranslate_string(_a20);
                            if (_a22 === null) {
                                this.showMessage("Missing translation for `" + _a20 + "`", "error");
                                console.error("Missing translation for `" + _a20 + "`", "error");
                                return "";
                            }
                            var i;
                            var _a23;
                            if (typeof args.i18n != "undefined") {
                                for (i in args.i18n) {
                                    _a23 = args.i18n[i];
                                    args[_a23] = this.clienttranslate_string(args[_a23]);
                                }
                            }
                            for (_a23 in args) {
                                if ((_a23 != "i18n") && ((typeof args[_a23]) == "object")) {
                                    if (args[_a23] !== null) {
                                        if ((typeof args[_a23].log != "undefined") && (typeof args[_a23].args != "undefined")) {
                                            args[_a23] = this.format_string_recursive(args[_a23].log, args[_a23].args);
                                        }
                                    }
                                }
                            }
                            try {
                                _a21 = dojo.string.substitute(_a22, args);
                            } catch (e) {
                                if (typeof this.prevent_error_rentry == "undefined") {
                                    this.prevent_error_rentry = 0;
                                }
                                this.prevent_error_rentry++;
                                if (this.prevent_error_rentry >= 10) {
                                    console.error("Preventing error rentry => ABORTING");
                                } else {
                                    this.showMessage("Invalid or missing substitution argument for log message: " + _a22, "error");
                                }
                                this.prevent_error_rentry--;
                                console.error("Invalid or missing substitution argument for log message: " + _a22, "error");
                                _a21 = _a22;
                            }
                        }
                        return _a21;
                    },
                    clienttranslate_string: function(_a24) {
                        var _a25 = _(_a24);
                        if (_a25 == _a24) {
                            return __("lang_mainsite", _a24);
                        } else {
                            return _a25;
                        }
                    },
                    translate_client_targets: function(args, _a26) {
                        dojo.query(".clienttranslatetarget").forEach(dojo.hitch(this, function(node) {
                            var _a27 = node.innerHTML;
                            if (typeof _a26 !== undefined) {
                                _a27 = __(_a26, _a27);
                            } else {
                                _a27 = _(_a27);
                            }
                            node.innerHTML = dojo.string.substitute(_a27, args);
                        }));
                    },
                    register_subs: function(_a28) {
                        this.subscriptions.push(_a28);
                    },
                    register_cometd_subs: function(_a29) {
                        this.comet_subscriptions.push(_a29);
                        return _a29;
                    },
                    unsubscribe_all: function() {
                        var sub = null;
                        while (this.subscriptions.length > 0) {
                            sub = this.subscriptions.shift();
                            dojo.unsubscribe(sub);
                        }
                        while (this.comet_subscriptions.length > 0) {
                            sub_id = this.comet_subscriptions.shift();
                            g_sitecore.unsubscribeCometdChannel(sub_id);
                        }
                    },
                    showMessage: function(msg, type) {
                        g_sitecore.showMessage(msg, type);
                    },
                    adaptScreenToMinWidth: function(_a2a) {
                        this.interface_min_width = _a2a;
                        return;
                    },
                    adaptScreenToMinWidthWorker: function() {
                        var _a2b = dojo.position("ebd-body");
                        if (dojo.isMozilla) {
                            console.error("BGA Screen adaptation NOT SUPPORTED FOR MOZILLA BASED BROWSER");
                        } else {
                            var _a2c = _a2b.w * this.currentZoom;
                            var _a2d = this.screenMinWidth;
                            if (dojo.hasClass("ebd-body", "game_interface") && dojo.hasClass("ebd-body", "mobile_version")) {
                                _a2d -= 240;
                            }
                            if (_a2c <= _a2d) {
                                this.currentZoom = (_a2c) / _a2d;
                            } else {
                                this.currentZoom = 1;
                            }
                            dojo.style("ebd-body", "zoom", this.currentZoom);
                        }
                    },
                    getObjPosition: function(obj) {
                        var res = dojo.oldPosition(obj);
                        if (this.mozScale != 1) {
                            res.x /= this.mozScale;
                            res.y /= this.mozScale;
                            return res;
                        } else {
                            return res;
                        }
                    },
                    placeOnObject: function(_a2e, _a2f) {
                        if (_a2e === null) {
                            console.error("placeOnObject: mobile obj is null");
                        }
                        if (_a2f === null) {
                            console.error("placeOnObject: target obj is null");
                        }
                        if (typeof _a2e == "string") {
                            var _a30 = $(_a2e);
                        } else {
                            var _a30 = _a2e;
                        }
                        var _a31 = this.disable3dIfNeeded();
                        var tgt = dojo.position(_a2f);
                        var src = dojo.position(_a2e);
                        var left = dojo.style(_a2e, "left");
                        var top = dojo.style(_a2e, "top");
                        var _a32 = {
                            x: tgt.x - src.x + (tgt.w - src.w) / 2,
                            y: tgt.y - src.y + (tgt.h - src.h) / 2
                        };
                        var _a33 = this.getAbsRotationAngle(_a30.parentNode);
                        var _a34 = this.vector_rotate(_a32, _a33);
                        left = left + _a34.x;
                        top = top + _a34.y;
                        dojo.style(_a2e, "top", top + "px");
                        dojo.style(_a2e, "left", left + "px");
                        this.enable3dIfNeeded(_a31);
                    },
                    placeOnObjectPos: function(_a35, _a36, _a37, _a38) {
                        if (_a35 === null) {
                            console.error("placeOnObject: mobile obj is null");
                        }
                        if (_a36 === null) {
                            console.error("placeOnObject: target obj is null");
                        }
                        if (typeof _a35 == "string") {
                            var _a39 = $(_a35);
                        } else {
                            var _a39 = _a35;
                        }
                        var _a3a = this.disable3dIfNeeded();
                        var tgt = dojo.position(_a36);
                        var src = dojo.position(_a35);
                        var left = dojo.style(_a35, "left");
                        var top = dojo.style(_a35, "top");
                        var _a3b = {
                            x: tgt.x - src.x + (tgt.w - src.w) / 2 + _a37,
                            y: tgt.y - src.y + (tgt.h - src.h) / 2 + _a38
                        };
                        var _a3c = this.getAbsRotationAngle(_a39.parentNode);
                        var _a3d = this.vector_rotate(_a3b, _a3c);
                        left = left + _a3d.x;
                        top = top + _a3d.y;
                        dojo.style(_a35, "top", top + "px");
                        dojo.style(_a35, "left", left + "px");
                        this.enable3dIfNeeded(_a3a);
                    },
                    disable3dIfNeeded: function() {
                        if (dojo.hasClass("ebd-body", "mode_3d")) {
                            dojo.removeClass("ebd-body", "enableTransitions");
                            var save = $("game_play_area").style.transform;
                            dojo.removeClass("ebd-body", "mode_3d");
                            dojo.style("game_play_area", "transform", "rotatex(" + 0 + "deg) translate(" + 0 + "px," + 0 + "px) rotateZ(" + 0 + "deg)");
                            return save;
                        }
                        return null;
                    },
                    enable3dIfNeeded: function(save) {
                        if (save !== null) {
                            dojo.style("game_play_area", "transform", save);
                            dojo.addClass("ebd-body", "mode_3d");
                        }
                    },
                    getComputedTranslateZ: function(obj) {
                        if (!window.getComputedStyle) {
                            return;
                        }
                        var _a3e = getComputedStyle(obj);
                        var _a3f = _a3e.transform || _a3e.webkitTransform || _a3e.mozTransform;
                        var mat = _a3f.match(/^matrix3d\((.+)\)$/);
                        return mat ? ~~(mat[1].split(", ")[14]) : 0;
                    },
                    transformSlideAnimTo3d: function(anim, _a40, _a41, _a42, dx, dy) {
                        if (dojo.hasClass("ebd-body", "mode_3d")) {
                            if (typeof dx == "undefined" || typeof dy == "undefined") {
                                var _a43 = 50;
                            } else {
                                var _a44 = Math.sqrt(dx * dx + dy * dy);
                                _a43 = Math.max(20, Math.min(80, Math.round(_a44 / 2)));
                            }
                            var _a45 = this.getComputedTranslateZ(_a40);
                            if (typeof _a41 == "undefined" || _a41 === null) {
                                _a41 = 500;
                            }
                            if (typeof _a42 == "undefined" || _a42 === null) {
                                _a42 = 0;
                            }
                            if (typeof _a40 == "string") {
                                _a40 = $(_a40);
                            }
                            var _a46 = new dojo.Animation({
                                curve: [_a45, _a45 + _a43],
                                delay: _a42,
                                duration: _a41 / 2,
                                onAnimate: dojo.hitch(this, function(v) {
                                    _a40.style.transform = "translateZ(" + v + "px)";
                                })
                            });
                            var _a47 = new dojo.Animation({
                                curve: [_a45 + _a43, _a45],
                                delay: _a42 + _a41 / 2,
                                duration: _a41 / 2,
                                onAnimate: dojo.hitch(this, function(v) {
                                    _a40.style.transform = "translateZ(" + v + "px)";
                                })
                            });
                            var _a48 = dojo.fx.combine([anim, _a46, _a47]);
                            return _a48;
                        } else {
                            return anim;
                        }
                    },
                    slideToObject: function(_a49, _a4a, _a4b, _a4c) {
                        if (_a49 === null) {
                            console.error("slideToObject: mobile obj is null");
                        }
                        if (_a4a === null) {
                            console.error("slideToObject: target obj is null");
                        }
                        if (typeof _a49 == "string") {
                            var _a4d = $(_a49);
                        } else {
                            var _a4d = _a49;
                        }
                        var _a4e = this.disable3dIfNeeded();
                        var tgt = dojo.position(_a4a);
                        var src = dojo.position(_a49);
                        if (typeof _a4b == "undefined") {
                            _a4b = 500;
                        }
                        if (typeof _a4c == "undefined") {
                            _a4c = 0;
                        }
                        if (this.instantaneousMode) {
                            _a4c = Math.min(1, _a4c);
                            _a4b = Math.min(1, _a4b);
                        }
                        var left = dojo.style(_a49, "left");
                        var top = dojo.style(_a49, "top");
                        var _a4f = {
                            x: tgt.x - src.x + (tgt.w - src.w) / 2,
                            y: tgt.y - src.y + (tgt.h - src.h) / 2
                        };
                        var _a50 = this.getAbsRotationAngle(_a4d.parentNode);
                        var _a51 = this.vector_rotate(_a4f, _a50);
                        left = left + _a51.x;
                        top = top + _a51.y;
                        this.enable3dIfNeeded(_a4e);
                        var anim = dojo.fx.slideTo({
                            node: _a49,
                            top: top,
                            left: left,
                            delay: _a4c,
                            duration: _a4b,
                            unit: "px"
                        });
                        if (_a4e !== null) {
                            anim = this.transformSlideAnimTo3d(anim, _a4d, _a4b, _a4c, _a51.x, _a51.y);
                        }
                        return anim;
                    },
                    slideToObjectPos: function(_a52, _a53, _a54, _a55, _a56, _a57) {
                        if (_a52 === null) {
                            console.error("slideToObjectPos: mobile obj is null");
                        }
                        if (_a53 === null) {
                            console.error("slideToObjectPos: target obj is null");
                        }
                        if (_a54 === null) {
                            console.error("slideToObjectPos: target x is null");
                        }
                        if (_a55 === null) {
                            console.error("slideToObjectPos: target y is null");
                        }
                        if (typeof _a52 == "string") {
                            var _a58 = $(_a52);
                        } else {
                            var _a58 = _a52;
                        }
                        var _a59 = this.disable3dIfNeeded();
                        var tgt = dojo.position(_a53);
                        var src = dojo.position(_a52);
                        if (typeof _a56 == "undefined") {
                            _a56 = 500;
                        }
                        if (typeof _a57 == "undefined") {
                            _a57 = 0;
                        }
                        if (this.instantaneousMode) {
                            _a57 = Math.min(1, _a57);
                            _a56 = Math.min(1, _a56);
                        }
                        var left = dojo.style(_a52, "left");
                        var top = dojo.style(_a52, "top");
                        var _a5a = {
                            x: tgt.x - src.x + toint(_a54),
                            y: tgt.y - src.y + toint(_a55)
                        };
                        var _a5b = this.getAbsRotationAngle(_a58.parentNode);
                        var _a5c = this.vector_rotate(_a5a, _a5b);
                        left = left + _a5c.x;
                        top = top + _a5c.y;
                        this.enable3dIfNeeded(_a59);
                        var anim = dojo.fx.slideTo({
                            node: _a52,
                            top: top,
                            left: left,
                            delay: _a57,
                            duration: _a56,
                            easing: dojo.fx.easing.cubicInOut,
                            unit: "px"
                        });
                        if (_a59 !== null) {
                            anim = this.transformSlideAnimTo3d(anim, _a58, _a56, _a57, _a5c.x, _a5c.y);
                        }
                        return anim;
                    },
                    slideToObjectPctPos: function(_a5d, _a5e, _a5f, _a60, _a61, _a62) {
                        if (_a5e === null) {
                            console.error("slideToObjectPctPos: target obj is null");
                        }
                        var tgt = dojo.position(_a5e);
                        var x = Math.round(tgt.w * _a5f / 100);
                        var y = Math.round(tgt.h * _a60 / 100);
                        return this.slideToObjectPos(_a5d, _a5e, x, y, _a61, _a62);
                    },
                    toRadians: function(_a63) {
                        return _a63 * (Math.PI / 180);
                    },
                    vector_rotate: function(_a64, _a65) {
                        if (_a65 == 0) {
                            return _a64;
                        }
                        var rad = -this.toRadians(_a65);
                        return {
                            x: _a64.x * Math.cos(rad) - _a64.y * Math.sin(rad),
                            y: _a64.x * Math.sin(rad) + _a64.y * Math.cos(rad)
                        };
                    },
                    attachToNewParent: function(_a66, _a67, _a68) {
                        if (typeof _a66 == "string") {
                            _a66 = $(_a66);
                        }
                        if (typeof _a67 == "string") {
                            _a67 = $(_a67);
                        }
                        if (typeof _a68 == "undefined") {
                            _a68 = "last";
                        }
                        if (_a66 === null) {
                            console.error("attachToNewParent: mobile obj is null");
                        }
                        if (_a67 === null) {
                            console.error("attachToNewParent: new_parent is null");
                        }
                        var _a69 = this.disable3dIfNeeded();
                        var tgt = dojo.position(_a66);
                        var _a6a = this.getAbsRotationAngle(_a66);
                        var _a6b = dojo.clone(_a66);
                        dojo.destroy(_a66);
                        dojo.place(_a6b, _a67, _a68);
                        var src = dojo.position(_a6b);
                        var left = dojo.style(_a6b, "left");
                        var top = dojo.style(_a6b, "top");
                        var _a6c = this.getAbsRotationAngle(_a6b);
                        var _a6d = this.getAbsRotationAngle(_a67);
                        var _a6e = {
                            x: tgt.x - src.x + (tgt.w - src.w) / 2,
                            y: tgt.y - src.y + (tgt.h - src.h) / 2
                        };
                        var _a6f = this.vector_rotate(_a6e, _a6d);
                        left = left + _a6f.x;
                        top = top + _a6f.y;
                        dojo.style(_a6b, "top", top + "px");
                        dojo.style(_a6b, "left", left + "px");
                        if (_a6c != _a6a) {
                            this.rotateInstantDelta(_a6b, _a6a - _a6c);
                        }
                        this.enable3dIfNeeded(_a69);
                        return _a6b;
                    },
                    attachToNewParentNoReplace: function(_a70, _a71, _a72) {
                        if (typeof _a70 == "string") {
                            _a70 = $(_a70);
                        }
                        if (typeof _a71 == "string") {
                            _a71 = $(_a71);
                        }
                        if (typeof _a72 == "undefined") {
                            _a72 = "last";
                        }
                        if (_a70 === null) {
                            console.error("attachToNewParent: mobile obj is null");
                        }
                        if (_a71 === null) {
                            console.error("attachToNewParent: new_parent is null");
                        }
                        var _a73 = dojo.clone(_a70);
                        dojo.destroy(_a70);
                        dojo.place(_a73, _a71, _a72);
                        return _a73;
                    },
                    slideTemporaryObject: function(_a74, _a75, from, to, _a76, _a77) {
                        var obj = dojo.place(_a74, _a75);
                        dojo.style(obj, "position", "absolute");
                        dojo.style(obj, "left", "0px");
                        dojo.style(obj, "top", "0px");
                        this.placeOnObject(obj, from);
                        var anim = this.slideToObject(obj, to, _a76, _a77);
                        var _a78 = function(node) {
                            dojo.destroy(node);
                        };
                        dojo.connect(anim, "onEnd", _a78);
                        anim.play();
                        return anim;
                    },
                    slideToObjectAndDestroy: function(_a79, _a7a, _a7b, _a7c) {
                        dojo.style(_a79, "zIndex", 100);
                        var anim = this.slideToObject(_a79, _a7a, _a7b, _a7c);
                        dojo.connect(anim, "onEnd", function(node) {
                            dojo.destroy(node);
                        });
                        anim.play();
                    },
                    fadeOutAndDestroy: function(node, _a7d, _a7e) {
                        if (typeof _a7d == "undefined") {
                            _a7d = 500;
                        }
                        if (typeof _a7e == "undefined") {
                            _a7e = 0;
                        }
                        if (this.instantaneousMode) {
                            _a7d = Math.min(1, _a7d);
                        }
                        var anim = dojo.fadeOut({
                            node: node,
                            duration: _a7d,
                            delay: _a7e
                        });
                        var _a7f = function(node) {
                            dojo.destroy(node);
                        };
                        dojo.connect(anim, "onEnd", _a7f);
                        anim.play();
                    },
                    rotateInstantTo: function(node, _a80) {
                        if (typeof node == "string") {
                            node = $(node);
                        }
                        _a80 = tofloat(_a80);
                        var old = 0;
                        if (typeof this.rotateToPosition[node.id] != "undefined") {
                            old = this.rotateToPosition[node.id];
                        }
                        if (_a80 == old) {
                            return;
                        }
                        var _a81;
                        dojo.forEach(["transform", "WebkitTransform", "msTransform", "MozTransform", "OTransform"], function(name) {
                            if (typeof dojo.body().style[name] != "undefined") {
                                _a81 = name;
                            }
                        });
                        this.transform = _a81;
                        dojo.style(node, this.transform, "rotate(" + _a80 + "deg)");
                        this.rotateToPosition[node.id] = _a80;
                    },
                    rotateInstantDelta: function(node, _a82) {
                        if (typeof node == "string") {
                            node = $(node);
                        }
                        _a82 = tofloat(_a82);
                        if (typeof this.rotateToPosition[node.id] != "undefined") {
                            this.rotateInstantTo(node, this.rotateToPosition[node.id] + _a82);
                        } else {
                            this.rotateInstantTo(node, _a82);
                        }
                    },
                    rotateTo: function(node, _a83) {
                        if (typeof node == "string") {
                            node = $(node);
                        }
                        _a83 = tofloat(_a83);
                        var _a84;
                        dojo.forEach(["transform", "WebkitTransform", "msTransform", "MozTransform", "OTransform"], function(name) {
                            if (typeof dojo.body().style[name] != "undefined") {
                                _a84 = name;
                            }
                        });
                        this.transform = _a84;
                        var old = 0;
                        if (typeof this.rotateToPosition[node.id] != "undefined") {
                            old = this.rotateToPosition[node.id];
                        }
                        if (_a83 == old) {
                            return;
                        }
                        while (_a83 > old + 180) {
                            _a83 -= 360;
                        }
                        while (_a83 < old - 180) {
                            _a83 += 360;
                        }
                        this.rotateToPosition[node.id] = _a83;
                        var _a85 = new dojo.Animation({
                            curve: [old, _a83],
                            onAnimate: dojo.hitch(this, function(v) {
                                node.style[this.transform] = "rotate(" + v + "deg)";
                            })
                        });
                        _a85.play();
                    },
                    getAbsRotationAngle: function(node) {
                        var _a86 = 0;
                        if (typeof node == "string") {
                            node = $(node);
                        }
                        if (node === null) {
                            return 0;
                        }
                        if (typeof node.id != "undefined") {
                            if (typeof this.rotateToPosition[node.id] != "undefined") {
                                _a86 = this.rotateToPosition[node.id];
                            }
                            if (typeof node.id == "overall-content") {
                                return 0;
                            }
                        }
                        if (typeof node.parentNode != "undefined") {
                            return _a86 + this.getAbsRotationAngle(node.parentNode);
                        } else {
                            return 0;
                        }
                    },
                    addStyleToClass: function(_a87, _a88, _a89) {
                        var _a8a = dojo.query("." + _a87);
                        for (var i = 0; i < _a8a.length; i++) {
                            dojo.style(_a8a[i], _a88, _a89);
                        }
                    },
                    connect: function(_a8b, _a8c, _a8d) {
                        if (_a8b == null) {
                            return;
                        }
                        this.connections.push({
                            element: _a8b,
                            event: _a8c,
                            handle: dojo.connect(_a8b, _a8c, this, _a8d)
                        });
                    },
                    disconnect: function(_a8e, _a8f) {
                        dojo.forEach(this.connections, function(_a90) {
                            if (_a90.element == _a8e && _a90.event == _a8f) {
                                dojo.disconnect(_a90.handle);
                            }
                        });
                    },
                    connectClass: function(_a91, _a92, _a93) {
                        var list = dojo.query("." + _a91);
                        for (var i = 0; i < list.length; i++) {
                            var _a94 = list[i];
                            this.connections.push({
                                element: _a94,
                                event: _a92,
                                handle: dojo.connect(_a94, _a92, this, _a93)
                            });
                        }
                    },
                    addEventToClass: function(_a95, _a96, _a97) {
                        this.connectClass(_a95, _a96, _a97);
                    },
                    disconnectAll: function() {
                        dojo.forEach(this.connections, function(_a98) {
                            dojo.disconnect(_a98.handle);
                        });
                        this.connections = [];
                    },
                    updateCounters: function(_a99) {
                        if (typeof _a99 == "undefined") {
                            return;
                        }
                        for (var _a9a in _a99) {
                            var _a9b = _a99[_a9a];
                            if (this.gamedatas.counters[_a9a] && _a9b.counter_value != null) {
                                this.setCounter(_a9b.counter_name, _a9b.counter_value);
                            } else {}
                        }
                    },
                    setCounter: function(_a9c, _a9d) {
                        var _a9e = this.gamedatas.counters[_a9c];
                        _a9e.counter_value = _a9d;
                        $(_a9e.counter_name).innerHTML = _a9e.counter_value;
                    },
                    incCounter: function(_a9f, _aa0) {
                        var _aa1 = this.gamedatas.counters[_a9f];
                        _aa1.counter_value = parseInt(_aa1.counter_value) + parseInt(_aa0);
                        $(_aa1.counter_name).innerHTML = _aa1.counter_value;
                    },
                    decrCounter: function(_aa2, _aa3) {
                        var _aa4 = this.gamedatas.counters[_aa2];
                        _aa4.counter_value = parseInt(_aa4.counter_value) - parseInt(_aa3);
                        if (_aa4.counter_value < 0) {
                            _aa4.counter_value = 0;
                        }
                        $(_aa4.counter_name).innerHTML = _aa4.counter_value;
                    },
                    getHtmlFromTooltipinfos: function(help, _aa5) {
                        var html = "<div class=\"midSizeDialog\">";
                        if (help != "") {
                            html += "<img class='imgtext' src='" + getStaticAssetUrl("img/layout/help_info.png") + "' alt='info' /> <span class='tooltiptext'>" + help + "</span>";
                            if (_aa5 != "") {
                                html += "<br/>";
                            }
                        }
                        if (_aa5 != "") {
                            html += "<img class='imgtext' src='" + getStaticAssetUrl("img/layout/help_click.png") + "' alt='action' /> <span class='tooltiptext'>" + _aa5 + "</span>";
                        }
                        html += "</div>";
                        return html;
                    },
                    addTooltip: function(id, help, _aa6, _aa7) {
                        if (typeof id != "string") {
                            console.error("Call addTooltip with an id that is not a string !");
                        }
                        if (this.tooltips[id]) {
                            this.tooltips[id].destroy();
                        }
                        var _aa8 = 400;
                        if (typeof _aa7 !== "undefined") {
                            _aa8 = _aa7;
                        }
                        this.tooltips[id] = new dijit.Tooltip({
                            connectId: [id],
                            label: this.getHtmlFromTooltipinfos(help, _aa6),
                            showDelay: _aa8
                        });
                        dojo.connect($(id), "onclick", this.tooltips[id], "close");
                        this.tooltipsInfos[id] = {
                            hideOnHoverEvt: null
                        };
                        dojo.connect(this.tooltips[id], "_onHover", dojo.hitch(this, function() {
                            if ((this.tooltipsInfos[id].hideOnHoverEvt === null) && $("dijit__MasterTooltip_0")) {
                                this.tooltipsInfos[id].hideOnHoverEvt = dojo.connect($("dijit__MasterTooltip_0"), "onmouseenter", this.tooltips[id], "close");
                            }
                        }));
                    },
                    addTooltipHtml: function(id, html, _aa9) {
                        html = "<div class=\"midSizeDialog\">" + html + "</div>";
                        if (this.tooltips[id]) {
                            this.tooltips[id].destroy();
                        }
                        var _aaa = 400;
                        if (typeof _aa9 !== "undefined") {
                            _aaa = _aa9;
                        }
                        this.tooltips[id] = new dijit.Tooltip({
                            connectId: [id],
                            label: html,
                            position: this.defaultTooltipPosition,
                            showDelay: _aaa
                        });
                        dojo.connect($(id), "onclick", this.tooltips[id], "close");
                        this.tooltipsInfos[id] = {
                            hideOnHoverEvt: null
                        };
                        dojo.connect(this.tooltips[id], "_onHover", dojo.hitch(this, function() {
                            if ((this.tooltipsInfos[id].hideOnHoverEvt === null) && $("dijit__MasterTooltip_0")) {
                                this.tooltipsInfos[id].hideOnHoverEvt = dojo.connect($("dijit__MasterTooltip_0"), "onmouseenter", this.tooltips[id], "close");
                            }
                        }));
                    },
                    removeTooltip: function(id) {
                        if (this.tooltips[id]) {
                            this.tooltips[id].destroy();
                        }
                    },
                    switchDisplayTooltips: function(mode) {
                        if (mode != 0) {
                            for (var i in this.tooltips) {
                                this.tooltips[i].onShow = dojo.hitch(this.tooltips[i], function() {
                                    this.close();
                                });
                            }
                        } else {
                            if (mode == 0) {
                                for (var i in this.tooltips) {
                                    this.tooltips[i].onShow = function() {}
                                    ;
                                }
                            }
                        }
                    },
                    addTooltipToClass: function(_aab, help, _aac, _aad) {
                        if (_aab[0] == ".") {
                            _aab = _aab.substr(1);
                        }
                        var _aae = dojo.query("." + _aab);
                        for (var i = 0; i < _aae.length; i++) {
                            if (_aae[i].id == "") {
                                _aae[i].id = dojox.uuid.generateRandomUuid();
                            }
                            this.addTooltip(_aae[i].id, help, _aac, _aad);
                        }
                    },
                    addTooltipHtmlToClass: function(_aaf, html, _ab0) {
                        if (_aaf[0] == ".") {
                            _aaf = _aaf.substr(1);
                        }
                        var _ab1 = dojo.query("." + _aaf);
                        for (var i = 0; i < _ab1.length; i++) {
                            if (_ab1[i].id != "") {
                                this.addTooltipHtml(_ab1[i].id, html, _ab0);
                            } else {
                                console.error("Add tooltip to an element with no id during addTooltipToClass " + _aaf);
                            }
                        }
                    },
                    applyCommentMarkup: function(text) {
                        text = text.replace(/\*(.*?)\*/g, "<b>$1</b>");
                        text = replaceAll(text, "---", "<hr/>");
                        text = replaceAll(text, "[red]", "<span style='color:red'>");
                        text = replaceAll(text, "[/red]", "</span>");
                        text = replaceAll(text, "[green]", "<span style='color:green'>");
                        text = replaceAll(text, "[/green]", "</span>");
                        text = replaceAll(text, "[blue]", "<span style='color:blue'>");
                        text = replaceAll(text, "[/blue]", "</span>");
                        text = replaceAll(text, "!!!", "<i class='fa  fa-exclamation-triangle'></i>");
                        text = replaceAll(text, "[tip]", "<i class='fa  fa-lightbulb-o'></i>");
                        return text;
                    },
                    confirmationDialog: function(text, _ab2, _ab3, _ab4) {
                        if (typeof _ab4 == "undefined") {
                            _ab4 = null;
                        }
                        if (typeof this.confirmationDialogUid == "undefined") {
                            this.confirmationDialogUid = 0;
                        }
                        if (typeof this.confirmationDialogUid_called == "undefined") {
                            this.confirmationDialogUid_called = 0;
                        }
                        this.confirmationDialogUid++;
                        var _ab5 = new ebg.popindialog();
                        _ab5.create("confirmation_dialog_" + this.confirmationDialogUid, $("main-content") !== null ? "main-content" : "left-side");
                        _ab5.setTitle(__("lang_mainsite", "Are you sure ?"));
                        _ab5.setMaxWidth(500);
                        var html = "<div id='confirmation_dialog_" + this.confirmationDialogUid + "'>";
                        html += text;
                        html += "<br/><br/><div style='text-align: center;'>";
                        html += "<a class='bgabutton bgabutton_gray' id='infirm_btn_" + this.confirmationDialogUid + "' href='#'><span>" + __("lang_mainsite", "Please, no") + "</span></a> &nbsp; ";
                        html += "<a class='bgabutton bgabutton_blue' id='confirm_btn_" + this.confirmationDialogUid + "' href='#'><span>" + __("lang_mainsite", "I confirm") + "</span></a>";
                        html += "</div></div>";
                        _ab5.setContent(html);
                        _ab5.hideCloseIcon();
                        _ab5.show();
                        dojo.connect($("confirm_btn_" + this.confirmationDialogUid), "onclick", this, function(evt) {
                            evt.preventDefault();
                            _ab5.destroy();
                            if (this.confirmationDialogUid_called == this.confirmationDialogUid) {} else {
                                this.confirmationDialogUid_called = this.confirmationDialogUid;
                                _ab2(_ab4);
                            }
                        });
                        dojo.connect($("infirm_btn_" + this.confirmationDialogUid), "onclick", this, function(evt) {
                            evt.preventDefault();
                            _ab5.destroy();
                            if (typeof _ab3 !== "undefined" && _ab3 !== null) {
                                if (this.confirmationDialogUid_called == this.confirmationDialogUid) {} else {
                                    this.confirmationDialogUid_called = this.confirmationDialogUid;
                                    _ab3(_ab4);
                                }
                            }
                        });
                    },
                    warningDialog: function(text, _ab6) {
                        var _ab7 = new ebg.popindialog();
                        _ab7.create("warning_dialog");
                        _ab7.setTitle(__("lang_mainsite", "Warning notice"));
                        var html = "<div id='warning_dialog'>";
                        html += text;
                        html += "<br/><br/><div style='text-align: center'>";
                        html += "<a class='bgabutton bgabutton_blue' id='warning_btn' href='#'><span>" + __("lang_mainsite", "Duly noted!") + "</span></a>";
                        html += "</div></div>";
                        _ab7.setContent(html);
                        _ab7.show();
                        dojo.connect($("warning_btn"), "onclick", this, function(evt) {
                            evt.preventDefault();
                            _ab7.destroy();
                            _ab6();
                        });
                    },
                    multipleChoiceDialog: function(text, _ab8, _ab9) {
                        var _aba = new ebg.popindialog();
                        _aba.create("multipleChoice_dialog");
                        _aba.setTitle(text);
                        var html = "<div id='multipleChoice_dialog'>";
                        html += "<br/><ul style='text-align:center'>";
                        for (var _abb in _ab8) {
                            html += "<li><a class='multiplechoice_btn bgabutton bgabutton_blue' id='choice_btn_" + _abb + "' href='#'><span>" + _ab8[_abb] + "</span></a></li>";
                        }
                        html += "</ul>";
                        html += "<br/>";
                        html += "</div>";
                        _aba.setContent(html);
                        _aba.show();
                        dojo.query(".multiplechoice_btn").connect("onclick", this, function(evt) {
                            evt.preventDefault();
                            _aba.destroy();
                            var _abc = evt.currentTarget.id.substr(11);
                            _ab9(_abc);
                        });
                    },
                    askForValueDialog: function(text, _abd) {
                        var _abe = new ebg.popindialog();
                        _abe.create("askforvalue_dialog");
                        _abe.setTitle(text);
                        var html = "<div id='askforvalue_dialog'>";
                        html += "<br/><input id='choicedlg_value' type='text' style='width:100%;height:30px'>";
                        html += "<br/>";
                        html += "<a class='bgabutton bgabutton_blue' id='ok_btn' href='#'><span>" + __("lang_mainsite", "Ok") + "</span></a>";
                        html += "</div>";
                        _abe.setContent(html);
                        _abe.show();
                        $("choicedlg_value").focus();
                        dojo.connect($("ok_btn"), "onclick", this, dojo.hitch(this, function(evt) {
                            dojo.stopEvent(evt);
                            _abe.destroy();
                            var _abf = $("choicedlg_value").value;
                            _abd(_abf);
                        }));
                    },
                    displayScoring: function(_ac0, _ac1, _ac2, _ac3, dx, dy) {
                        if (typeof _ac3 == "undefined" || _ac3 == null) {
                            _ac3 = 1000;
                        }
                        dojo.place(this.format_string("<div class=\"scorenumber\" id=\"scorenumber_${score_id}\">" + (_ac2 >= 0 ? "+" : "-") + "${score_number}</div>", {
                            score_id: _ac0,
                            score_number: Math.abs(_ac2)
                        }), _ac0);
                        if (typeof dx != "undefined" && typeof dy != "undefined" && dx !== null && dy !== null) {
                            this.placeOnObjectPos("scorenumber_" + _ac0, _ac0, dx, dy);
                        } else {
                            this.placeOnObject("scorenumber_" + _ac0, _ac0);
                        }
                        dojo.style("scorenumber_" + _ac0, "color", "#" + _ac1);
                        dojo.addClass("scorenumber_" + _ac0, "scorenumber_anim");
                        this.fadeOutAndDestroy("scorenumber_" + _ac0, _ac3, 2000);
                    },
                    showBubble: function(_ac4, text, _ac5, _ac6, _ac7) {
                        if (typeof this.discussionTimeout == "undefined") {
                            this.discussionTimeout = {};
                        }
                        if (typeof _ac5 == "undefined") {
                            _ac5 = 0;
                        }
                        if (typeof _ac6 == "undefined") {
                            _ac6 = 3000;
                        }
                        if (_ac5 > 0) {
                            setTimeout(dojo.hitch(this, function() {
                                this.doShowBubble(_ac4, text, _ac7);
                            }), _ac5);
                        } else {
                            this.doShowBubble(_ac4, text, _ac7);
                        }
                        if (this.discussionTimeout[_ac4]) {
                            clearTimeout(this.discussionTimeout[_ac4]);
                            delete this.discussionTimeout[_ac4];
                        }
                        if (text != "") {
                            this.discussionTimeout[_ac4] = setTimeout(dojo.hitch(this, function() {
                                this.doShowBubble(_ac4, "");
                            }), _ac5 + _ac6);
                        }
                    },
                    doShowBubble: function(_ac8, text, _ac9) {
                        if (text == "") {
                            if (this.discussionTimeout[_ac8]) {
                                delete this.discussionTimeout[_ac8];
                            }
                            var anim = dojo.fadeOut({
                                node: "discussion_bubble_" + _ac8,
                                duration: 100
                            });
                            dojo.connect(anim, "onEnd", function() {});
                            anim.play();
                        } else {
                            if (!$("discussion_bubble_" + _ac8)) {
                                var cc = (typeof _ac9 == "undefined" ? "" : _ac9);
                                dojo.place("<div id=\"discussion_bubble_" + _ac8 + "\" class=\"discussion_bubble " + cc + "\"></div>", _ac8);
                            }
                            $("discussion_bubble_" + _ac8).innerHTML = text;
                            dojo.style("discussion_bubble_" + _ac8, "display", "block");
                            dojo.style("discussion_bubble_" + _ac8, "opacity", 0);
                            dojo.fadeIn({
                                node: "discussion_bubble_" + _ac8,
                                duration: 100
                            }).play();
                        }
                    },
                    showClick: function(_aca, x, y, _acb) {
                        if (typeof _acb == "undefined") {
                            _acb = "red";
                        }
                        if (typeof this.showclick_circles_no == "undefined") {
                            this.showclick_circles_no = 0;
                        } else {
                            this.showclick_circles_no++;
                        }
                        dojo.place("<div id=\"showclick_circles_" + this.showclick_circles_no + "\" class=\"concentric-circles\" style=\"background-color:" + _acb + ";left:" + x + "px;top:" + y + "px\"></div>", _aca);
                        var _acc = this.showclick_circles_no;
                        setTimeout(dojo.hitch(this, function() {
                            dojo.destroy("showclick_circles_" + _acc);
                        }), 2200);
                    },
                    getRankString: function(rank, _acd) {
                        if (rank === null || rank === "") {
                            return __("lang_mainsite", "not ranked");
                        }
                        rank = toint(rank);
                        var _ace = "";
                        if (rank == 1) {
                            _ace = (typeof _acd !== "undefined" && _acd) ? __("lang_mainsite", "Winner") : __("lang_mainsite", "1st");
                        } else {
                            if (rank == 2) {
                                _ace = (typeof _acd !== "undefined" && _acd) ? __("lang_mainsite", "Loser") : __("lang_mainsite", "2nd");
                            } else {
                                if (rank == 3) {
                                    _ace = (typeof _acd !== "undefined" && _acd) ? __("lang_mainsite", "Loser") : __("lang_mainsite", "3rd");
                                } else {
                                    if (rank > 3) {
                                        _ace = (typeof _acd !== "undefined" && _acd) ? __("lang_mainsite", "Loser") : rank + __("lang_mainsite", "th");
                                    }
                                }
                            }
                        }
                        return _ace;
                    },
                    getKarmaLabel: function(_acf) {
                        var _acf = toint(_acf);
                        if (_acf == 100) {
                            return {
                                label: _("Perfect"),
                                css: "exceptional"
                            };
                        } else {
                            if (_acf >= 90) {
                                return {
                                    label: _("Excellent"),
                                    css: "perfect"
                                };
                            } else {
                                if (_acf >= 80) {
                                    return {
                                        label: _("Very good"),
                                        css: "verygood"
                                    };
                                } else {
                                    if (_acf >= 75) {
                                        return {
                                            label: _("Good"),
                                            css: "good"
                                        };
                                    } else {
                                        if (_acf >= 65) {
                                            return {
                                                label: _("Average"),
                                                css: "average"
                                            };
                                        } else {
                                            if (_acf >= 50) {
                                                return {
                                                    label: _("Not good"),
                                                    css: "notgood"
                                                };
                                            } else {
                                                if (_acf >= 25) {
                                                    return {
                                                        label: _("Bad"),
                                                        css: "bad"
                                                    };
                                                } else {
                                                    if (_acf >= 0) {
                                                        return {
                                                            label: _("Very bad"),
                                                            css: "verybad"
                                                        };
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    getObjectLength: function(obj) {
                        var len = 0;
                        for (var k in obj) {
                            len++;
                        }
                        return len;
                    },
                    getGameNameDisplayed: function(_ad0) {
                        var res = __("lang_mainsite", _ad0 + "_displayed");
                        if (res == _ad0 + "_displayed") {
                            return _ad0;
                        } else {
                            return res;
                        }
                    },
                    formatReflexionTime: function(_ad1) {
                        _ad1 = Math.round(_ad1);
                        var ret = {
                            string: "-- : --",
                            mn: 0,
                            s: 0,
                            h: 0,
                            positive: true
                        };
                        var _ad2 = true;
                        if (_ad1 < 0) {
                            _ad1 = -_ad1;
                            _ad2 = false;
                        }
                        var _ad3 = Math.floor(_ad1 / 60);
                        var _ad4 = _ad1 - 60 * _ad3;
                        if (_ad4 < 10) {
                            _ad4 = "0" + _ad4;
                        }
                        var _ad5 = Math.floor(_ad3 / 60);
                        var _ad6 = Math.floor(_ad3 / (60 * 24));
                        _ad3 = _ad3 - 60 * _ad5;
                        ret.mn = _ad3;
                        ret.s = _ad4;
                        ret.h = _ad5;
                        ret.positive = _ad2;
                        if (isNaN(_ad3) || isNaN(_ad4)) {
                            ret.string = "-- : --";
                        } else {
                            if (_ad5 == 0) {
                                if (_ad2) {
                                    ret.string = _ad3 + ":" + _ad4;
                                } else {
                                    ret.string = "-" + _ad3 + ":" + _ad4;
                                }
                            } else {
                                if (_ad6 < 2) {
                                    if (_ad3 < 10) {
                                        _ad3 = "0" + _ad3;
                                    }
                                    if (_ad2) {
                                        ret.string = _ad5 + "h" + _ad3;
                                    } else {
                                        ret.string = "-" + _ad5 + "h" + _ad3;
                                    }
                                } else {
                                    if (_ad2) {
                                        ret.string = _ad6 + " " + __("lang_mainsite", "days");
                                    } else {
                                        ret.string = "-" + _ad6 + " " + __("lang_mainsite", "days");
                                    }
                                }
                            }
                        }
                        return ret;
                    },
                    strip_tags: function(str, _ad7) {
                        var key = ""
                          , _ad8 = false;
                        var _ad9 = [];
                        var _ada = [];
                        var _adb = "";
                        var i = 0;
                        var k = "";
                        var html = "";
                        var _adc = function(_add, _ade, str) {
                            return str.split(_add).join(_ade);
                        };
                        if (_ad7) {
                            _ada = _ad7.match(/([a-zA-Z0-9]+)/gi);
                        }
                        str += "";
                        _ad9 = str.match(/(<\/?[\S][^>]*>)/gi);
                        for (key in _ad9) {
                            if (isNaN(key)) {
                                continue;
                            }
                            html = _ad9[key].toString();
                            _ad8 = false;
                            for (k in _ada) {
                                _adb = _ada[k];
                                i = -1;
                                if (i) {
                                    i = html.toLowerCase().indexOf("<" + _adb + ">");
                                }
                                if (!i) {
                                    i = html.toLowerCase().indexOf("<" + _adb + " ");
                                }
                                if (i) {
                                    i = html.toLowerCase().indexOf("</" + _adb);
                                }
                                if (!i) {
                                    _ad8 = true;
                                    break;
                                }
                            }
                            if (!_ad8) {
                                str = _adc(html, "", str);
                            }
                        }
                        return str;
                    },
                    validURL: function(str) {
                        var _adf = new RegExp("^(https?:\\/\\/)?" + "((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|" + "((\\d{1,3}\\.){3}\\d{1,3}))" + "(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*" + "(\\?[;&a-z\\d%_.~+=-]*)?" + "(\\#[-a-z\\d_]*)?$","i");
                        return !!_adf.test(str);
                    },
                    nl2br: function(str, _ae0) {
                        var _ae1 = (_ae0 || typeof _ae0 === "undefined") ? "" : "<br>";
                        return (str + "").replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, "$1" + _ae1 + "$2");
                    },
                    htmlentities: function(_ae2, _ae3, _ae4, _ae5) {
                        var _ae6 = this.get_html_translation_table("HTML_ENTITIES", _ae3)
                          , _ae7 = "";
                        _ae2 = _ae2 == null ? "" : _ae2 + "";
                        if (!_ae6) {
                            return false;
                        }
                        if (_ae3 && _ae3 === "ENT_QUOTES") {
                            _ae6["'"] = "&#039;";
                        }
                        if (!!_ae5 || _ae5 == null) {
                            for (_ae7 in _ae6) {
                                if (_ae6.hasOwnProperty(_ae7)) {
                                    _ae2 = _ae2.split(_ae7).join(_ae6[_ae7]);
                                }
                            }
                        } else {
                            _ae2 = _ae2.replace(/([\s\S]*?)(&(?:#\d+|#x[\da-f]+|[a-zA-Z][\da-z]*);|$)/g, function(_ae8, text, _ae9) {
                                for (_ae7 in _ae6) {
                                    if (_ae6.hasOwnProperty(_ae7)) {
                                        text = text.split(_ae7).join(_ae6[_ae7]);
                                    }
                                }
                                return text + _ae9;
                            });
                        }
                        return _ae2;
                    },
                    html_entity_decode: function(_aea, _aeb) {
                        var _aec = {}
                          , _aed = ""
                          , _aee = ""
                          , _aef = "";
                        _aee = _aea.toString();
                        if (false === (_aec = this.get_html_translation_table("HTML_ENTITIES", _aeb))) {
                            return false;
                        }
                        delete (_aec["&"]);
                        _aec["&"] = "&amp;";
                        for (_aed in _aec) {
                            _aef = _aec[_aed];
                            _aee = _aee.split(_aef).join(_aed);
                        }
                        _aee = _aee.split("&#039;").join("'");
                        return _aee;
                    },
                    get_html_translation_table: function(_af0, _af1) {
                        var _af2 = {}, _af3 = {}, _af4;
                        var _af5 = {}
                          , _af6 = {};
                        var _af7 = {}
                          , _af8 = {};
                        _af5[0] = "HTML_SPECIALCHARS";
                        _af5[1] = "HTML_ENTITIES";
                        _af6[0] = "ENT_NOQUOTES";
                        _af6[2] = "ENT_COMPAT";
                        _af6[3] = "ENT_QUOTES";
                        _af7 = !isNaN(_af0) ? _af5[_af0] : _af0 ? _af0.toUpperCase() : "HTML_SPECIALCHARS";
                        _af8 = !isNaN(_af1) ? _af6[_af1] : _af1 ? _af1.toUpperCase() : "ENT_COMPAT";
                        if (_af7 !== "HTML_SPECIALCHARS" && _af7 !== "HTML_ENTITIES") {
                            throw new Error("Table: " + _af7 + " not supported");
                        }
                        _af2["38"] = "&amp;";
                        if (_af7 === "HTML_ENTITIES") {
                            _af2["160"] = "&nbsp;";
                            _af2["161"] = "&iexcl;";
                            _af2["162"] = "&cent;";
                            _af2["163"] = "&pound;";
                            _af2["164"] = "&curren;";
                            _af2["165"] = "&yen;";
                            _af2["166"] = "&brvbar;";
                            _af2["167"] = "&sect;";
                            _af2["168"] = "&uml;";
                            _af2["169"] = "&copy;";
                            _af2["170"] = "&ordf;";
                            _af2["171"] = "&laquo;";
                            _af2["172"] = "&not;";
                            _af2["173"] = "&shy;";
                            _af2["174"] = "&reg;";
                            _af2["175"] = "&macr;";
                            _af2["176"] = "&deg;";
                            _af2["177"] = "&plusmn;";
                            _af2["178"] = "&sup2;";
                            _af2["179"] = "&sup3;";
                            _af2["180"] = "&acute;";
                            _af2["181"] = "&micro;";
                            _af2["182"] = "&para;";
                            _af2["183"] = "&middot;";
                            _af2["184"] = "&cedil;";
                            _af2["185"] = "&sup1;";
                            _af2["186"] = "&ordm;";
                            _af2["187"] = "&raquo;";
                            _af2["188"] = "&frac14;";
                            _af2["189"] = "&frac12;";
                            _af2["190"] = "&frac34;";
                            _af2["191"] = "&iquest;";
                            _af2["192"] = "&Agrave;";
                            _af2["193"] = "&Aacute;";
                            _af2["194"] = "&Acirc;";
                            _af2["195"] = "&Atilde;";
                            _af2["196"] = "&Auml;";
                            _af2["197"] = "&Aring;";
                            _af2["198"] = "&AElig;";
                            _af2["199"] = "&Ccedil;";
                            _af2["200"] = "&Egrave;";
                            _af2["201"] = "&Eacute;";
                            _af2["202"] = "&Ecirc;";
                            _af2["203"] = "&Euml;";
                            _af2["204"] = "&Igrave;";
                            _af2["205"] = "&Iacute;";
                            _af2["206"] = "&Icirc;";
                            _af2["207"] = "&Iuml;";
                            _af2["208"] = "&ETH;";
                            _af2["209"] = "&Ntilde;";
                            _af2["210"] = "&Ograve;";
                            _af2["211"] = "&Oacute;";
                            _af2["212"] = "&Ocirc;";
                            _af2["213"] = "&Otilde;";
                            _af2["214"] = "&Ouml;";
                            _af2["215"] = "&times;";
                            _af2["216"] = "&Oslash;";
                            _af2["217"] = "&Ugrave;";
                            _af2["218"] = "&Uacute;";
                            _af2["219"] = "&Ucirc;";
                            _af2["220"] = "&Uuml;";
                            _af2["221"] = "&Yacute;";
                            _af2["222"] = "&THORN;";
                            _af2["223"] = "&szlig;";
                            _af2["224"] = "&agrave;";
                            _af2["225"] = "&aacute;";
                            _af2["226"] = "&acirc;";
                            _af2["227"] = "&atilde;";
                            _af2["228"] = "&auml;";
                            _af2["229"] = "&aring;";
                            _af2["230"] = "&aelig;";
                            _af2["231"] = "&ccedil;";
                            _af2["232"] = "&egrave;";
                            _af2["233"] = "&eacute;";
                            _af2["234"] = "&ecirc;";
                            _af2["235"] = "&euml;";
                            _af2["236"] = "&igrave;";
                            _af2["237"] = "&iacute;";
                            _af2["238"] = "&icirc;";
                            _af2["239"] = "&iuml;";
                            _af2["240"] = "&eth;";
                            _af2["241"] = "&ntilde;";
                            _af2["242"] = "&ograve;";
                            _af2["243"] = "&oacute;";
                            _af2["244"] = "&ocirc;";
                            _af2["245"] = "&otilde;";
                            _af2["246"] = "&ouml;";
                            _af2["247"] = "&divide;";
                            _af2["248"] = "&oslash;";
                            _af2["249"] = "&ugrave;";
                            _af2["250"] = "&uacute;";
                            _af2["251"] = "&ucirc;";
                            _af2["252"] = "&uuml;";
                            _af2["253"] = "&yacute;";
                            _af2["254"] = "&thorn;";
                            _af2["255"] = "&yuml;";
                        }
                        if (_af8 !== "ENT_NOQUOTES") {
                            _af2["34"] = "&quot;";
                        }
                        if (_af8 === "ENT_QUOTES") {
                            _af2["39"] = "&#39;";
                        }
                        _af2["60"] = "&lt;";
                        _af2["62"] = "&gt;";
                        for (_af4 in _af2) {
                            if (_af2.hasOwnProperty(_af4)) {
                                _af3[String.fromCharCode(_af4)] = _af2[_af4];
                            }
                        }
                        return _af3;
                    },
                    ucFirst: function(_af9) {
                        return _af9.charAt(0).toUpperCase() + _af9.slice(1);
                    },
                    setupWebPush: function() {
                        if (this.webpush == null) {
                            this.webpush = new ebg.webpush(dojo.hitch(this, "ajaxcall"));
                        }
                        return this.webpush.init();
                    },
                    refreshWebPushWorker: function() {
                        if (this.webpush == null) {
                            this.webpush = new ebg.webpush(dojo.hitch(this, "ajaxcall"));
                        }
                        if (this.webpush.isSupported()) {
                            this.webpush.refresh();
                        }
                    },
                    getRTCTemplate: function(_afa, _afb, _afc) {
                        var _afd = "<div id=\"rtc_container_${player_id}\" class=\"rtc_container";
                        if (!_afa && !_afb) {
                            return _afd += "\"></div>";
                        }
                        if (_afb) {
                            _afd += " rtc_video_container\">" + "<div id=\"videofeed_${player_id}_pulse\"></div>" + (_afc ? "<video id=\"videofeed_${player_id}\" class=\"videofeed\" autoplay ${muted}></video>" : "<video id=\"videofeed_${player_id}\" class=\"videofeed videoflipped\" autoplay ${muted}></video>") + "<div id=\"videofeed_${player_id}_name\" class=\"rtc_video_name\"></div>" + "<div id=\"videofeed_${player_id}_min\" class=\"rtc_video_control rtc_video_min\"></div>" + "<div id=\"videofeed_${player_id}_size\" class=\"rtc_video_control rtc_video_size\"></div>" + "<div id=\"videofeed_${player_id}_cam\" class=\"rtc_video_control rtc_video_cam rtc_video_cam_off\"></div>";
                        } else {
                            if (_afa) {
                                _afd += " rtc_audio_container\">" + "<video id=\"videofeed_${player_id}\" class=\"videofeed\" autoplay ${muted}></video>";
                            }
                        }
                        if (_afa) {
                            if (_afc) {
                                _afd += "<div id=\"videofeed_${player_id}_spk\" class=\"rtc_video_control rtc_video_spk rtc_video_spk_off\"></div>";
                            } else {
                                _afd += "<div id=\"videofeed_${player_id}_mic\" class=\"rtc_video_control rtc_video_mic rtc_video_mic_off\"></div>";
                            }
                        }
                        _afd += "</div>";
                        return _afd;
                    },
                    setupRTCEvents: function(_afe) {
                        var _aff = (typeof current_player_id != "undefined" ? current_player_id : this.player_id);
                        if (this.mediaConstraints.video !== false) {
                            dojo.connect($("rtc_container_" + _afe), "onclick", this, "onClickRTCVideoMax");
                            dojo.connect($("videofeed_" + _afe + "_min"), "onclick", this, "onClickRTCVideoMin");
                            dojo.connect($("videofeed_" + _afe + "_size"), "onclick", this, "onClickRTCVideoSize");
                            dojo.connect($("videofeed_" + _afe + "_cam"), "onclick", this, "onClickRTCVideoCam");
                            this.addTooltip("videofeed_" + _afe + "_min", "", _("Minimize video"));
                            this.addTooltip("videofeed_" + _afe + "_size", "", _("Resize video"));
                            if (_afe == _aff) {
                                this.addTooltip("videofeed_" + _afe + "_cam", "", _("Mute/Unmute your video camera"));
                            } else {
                                this.addTooltip("videofeed_" + _afe + "_cam", "", _("Mute/Unmute video"));
                            }
                            if ($("player_name_" + _afe)) {
                                var _b00 = dojo.getStyle("player_name_" + _afe, "color");
                                dojo.setStyle("videofeed_" + _afe + "_pulse", "borderColor", _b00);
                                dojo.setStyle("rtc_container_" + _afe, "borderColor", _b00);
                                dojo.setStyle("rtc_container_" + _afe, "boxShadow", "0px 0px 3px " + _b00);
                            }
                            if ($("player_name_" + _afe)) {
                                var _b00 = dojo.getStyle("player_name_" + _afe, "color");
                                dojo.setStyle("videofeed_" + _afe + "_name", "color", _b00);
                                var text = "";
                                var _b01 = $("player_name_" + _afe);
                                for (var i = 0; i < _b01.childNodes.length; ++i) {
                                    if (_b01.childNodes[i].nodeType === 3) {
                                        text += _b01.childNodes[i].textContent;
                                    }
                                }
                                $("videofeed_" + _afe + "_name").innerHTML = text;
                            }
                            if ($("emblem_" + _afe)) {
                                var text = dojo.getAttr($("emblem_" + _afe), "alt");
                                $("videofeed_" + _afe + "_name").innerHTML = text;
                            }
                            if (!dojo.hasClass("ebd-body", "mobile_version")) {
                                var _b02 = new ebg.draggable();
                                _b02.create(this, "rtc_container_" + _afe);
                            }
                        }
                        if (this.mediaConstraints.audio !== false) {
                            if ($("videofeed_" + _afe + "_mic") != null) {
                                dojo.connect($("videofeed_" + _afe + "_mic"), "onclick", this, "onClickRTCVideoMic");
                                this.addTooltip("videofeed_" + _afe + "_mic", "", _("Mute/Unmute your microphone"));
                            }
                            if ($("videofeed_" + _afe + "_spk") != null) {
                                dojo.connect($("videofeed_" + _afe + "_spk"), "onclick", this, "onClickRTCVideoSpk");
                                this.addTooltip("videofeed_" + _afe + "_spk", "", _("Mute/Unmute audio"));
                            }
                        }
                    },
                    getRtcVideoConstraints: function(_b03) {
                        var _b04 = false;
                        switch (parseInt(_b03, 10)) {
                        case 2:
                            _b04 = {
                                mandatory: {
                                    minAspectRatio: 1.333,
                                    maxAspectRatio: 1.334,
                                    maxWidth: 240,
                                    maxFrameRate: 30
                                },
                                optional: []
                            };
                            break;
                        default:
                            break;
                        }
                        return _b04;
                    },
                    startRTC: function() {
                        if (this.mediaConstraints.video === false && this.mediaConstraints.audio === false) {
                            return;
                        }
                        require([g_themeurl + "js/webrtcadapter.js"], dojo.hitch(this, "doStartRTC"));
                    },
                    doStartRTC: function() {
                        this.ajaxcall("/videochat/videochat/getRTCConfig.html", {}, this, function(_b05) {
                            var _b06 = (typeof current_player_id != "undefined" ? current_player_id : this.player_id);
                            if ($("videofeed_" + _b06) === null) {
                                return;
                            }
                            webrtcConfig.audioSendCodec = "";
                            webrtcConfig.audioReceiveCodec = "opus/48000";
                            var _b07 = JSON.parse(JSON.stringify(webrtcConfig.pcConfig));
                            if (typeof _b05.static_turn != "undefined" && typeof _b05.static_turn["urls"] != "undefined" && _b05.static_turn["urls"] !== "") {
                                _b07.iceServers.push(_b05.static_turn);
                            }
                            if (typeof _b05.dynamic_iceservers != "undefined") {
                                try {
                                    dynamicConfig = JSON.parse(_b05.dynamic_iceservers);
                                    if (dynamicConfig.s === "ok") {
                                        _b07 = dynamicConfig.v;
                                    } else {
                                        alert("Error: failed to retrieve RTC ICE servers dynamic configuration");
                                    }
                                } catch (e) {
                                    alert("Error: failed to parse RTC ICE servers dynamic configuration");
                                }
                            }
                            this.webrtc = new ebg.webrtc(_b06,this.room,_b07,webrtcConfig.pcConstraints,this.mediaConstraints,false,dojo.hitch(this, "ajaxcall"),dojo.hitch(this, "onGetUserMediaSuccess"),dojo.hitch(this, "onGetUserMediaError"),dojo.hitch(this, "onJoinRoom"),dojo.hitch(this, "onLeaveRoomImmediate"));
                            this.webrtc.setLocalFeed($("videofeed_" + _b06));
                            if (this.webrtcmsg_ntf_handle === null) {
                                this.webrtcmsg_ntf_handle = dojo.subscribe("webrtcmsg", this, "ntf_webrtcmsg");
                            }
                        }, function(_b08) {
                            if (_b08) {}
                        });
                    },
                    onGetUserMediaSuccess: function() {
                        var _b09 = (typeof current_player_id != "undefined" ? current_player_id : this.player_id);
                        if ($("videofeed_" + _b09 + "_mic") != null) {
                            dojo.addClass($("videofeed_" + _b09 + "_mic"), "rtc_video_mic_on");
                            dojo.removeClass($("videofeed_" + _b09 + "_mic"), "rtc_video_mic_off");
                        }
                        if ($("videofeed_" + _b09 + "_cam") != null) {
                            dojo.addClass($("videofeed_" + _b09 + "_cam"), "rtc_video_cam_on");
                            dojo.removeClass($("videofeed_" + _b09 + "_cam"), "rtc_video_cam_off");
                        }
                        this.ajaxcall("/videochat/videochat/joinRoom.html", {
                            room: this.room,
                            lock: false,
                            audio: (this.mediaConstraints.audio !== false),
                            video: (this.mediaConstraints.video !== false)
                        }, this, function(_b0a) {
                            if (_b0a.videochat_terms_accepted == true) {
                                if (!_b0a.already_in && !_b0a.joined) {
                                    if (this.room === this.already_accepted_room) {
                                        this.ajaxcall("/videochat/videochat/joinRoom.html", {
                                            room: this.room,
                                            accept: true,
                                            lock: false,
                                            audio: (this.mediaConstraints.audio !== false),
                                            video: (this.mediaConstraints.video !== false)
                                        }, this, function(_b0b) {
                                            this.already_accepted_room = null;
                                            for (var i = 0; i < _b0b.in_room.length; i++) {
                                                var _b0c = _b0b.in_room[i];
                                                this.onJoinRoom(_b0c, false);
                                            }
                                        }, function(_b0d) {});
                                    } else {
                                        var html = "<div  class=\"rtc_dialog\">" + "<br />";
                                        html += "<div style=\"text-align: center; border-bottom: 1px solid black; border-top: 1px solid black; padding: 5px 5px 5px 5px;\"><i>" + (this.mediaConstraints.video !== false ? (this.room.indexOf("T") >= 0 ? _("A Premium user has set up a video chat session for this table!") : _("A Premium user has set up a video chat session with you!")) : (this.room.indexOf("T") >= 0 ? _("A Premium user has set up an audio chat session for this table!") : _("A Premium user has set up an audio chat session with you!"))) + "</i></div>" + "<br /><br />";
                                        html += "<div style=\"text-align: center; font-weight: bold;\">" + _("Do you want to join the call?") + "</div><br /><br />";
                                        if (this.room.indexOf("T") >= 0) {
                                            html += _("If you choose \"no\" then change your mind, just refresh the page (F5) to get this prompt again!");
                                        }
                                        html += "</div>";
                                        this.confirmationDialog(html, dojo.hitch(this, function() {
                                            if (this.room === null) {
                                                return;
                                            }
                                            this.ajaxcall("/videochat/videochat/joinRoom.html", {
                                                room: this.room,
                                                accept: true,
                                                lock: false,
                                                audio: (this.mediaConstraints.audio !== false),
                                                video: (this.mediaConstraints.video !== false)
                                            }, this, function(_b0e) {
                                                for (var i = 0; i < _b0e.in_room.length; i++) {
                                                    var _b0f = _b0e.in_room[i];
                                                    this.onJoinRoom(_b0f, false);
                                                }
                                            }, function(_b10) {});
                                        }), dojo.hitch(this, function() {
                                            if (this.room !== null && this.room.indexOf("T") >= 0) {
                                                this.doLeaveRoom();
                                            } else {
                                                if (this.room !== null && this.room.indexOf("P") >= 0) {
                                                    var _b11 = this.room.substr(1).split("_");
                                                    var _b12 = _b11[0] == _b15 ? _b11[1] : _b11[0];
                                                    if (this.mediaConstraints.video) {
                                                        this.ajaxcall("/table/table/startStopVideo.html", {
                                                            target_table: null,
                                                            target_player: _b12
                                                        }, this, function(_b13) {
                                                            this.doLeaveRoom();
                                                        });
                                                    } else {
                                                        if (this.mediaConstraints.audio) {
                                                            this.ajaxcall("/table/table/startStopAudio.html", {
                                                                target_table: null,
                                                                target_player: _b12
                                                            }, this, function(_b14) {
                                                                this.doLeaveRoom();
                                                            });
                                                        }
                                                    }
                                                }
                                            }
                                        }));
                                    }
                                } else {
                                    for (var i = 0; i < _b0a.in_room.length; i++) {
                                        var _b15 = _b0a.in_room[i];
                                        this.onJoinRoom(_b15, false);
                                    }
                                }
                            } else {
                                var html = "<div  class=\"rtc_dialog\">" + "<br />";
                                html += "<div style=\"text-align: center; border-bottom: 1px solid black; border-top: 1px solid black; padding: 5px 5px 5px 5px;\"><i>" + (this.mediaConstraints.video !== false ? (this.room.indexOf("T") >= 0 ? _("A Premium user has set up a video chat session for this table!") : _("A Premium user has set up a video chat session with you!")) : (this.room.indexOf("T") >= 0 ? _("A Premium user has set up an audio chat session for this table!") : _("A Premium user has set up an audio chat session with you!"))) + "</i></div>" + "<br /><br />";
                                html += "<b>" + _("You are about to enter a real time chat room on Board Game Arena for the first time.") + "</b>" + "<br /><br />";
                                html += _("Please note that any interaction between players in a real time chat room is private to and the sole responsability of those players.") + "<br /><br />";
                                html += _("Board Game Arena doesn't record real time chat activity, but you should be aware that any player in the chat room has the possibility to make such recordings. Thus, you shouldn't do or say anything that you wouldn't want on record (or on Youtube).") + "<br /><br />";
                                html += _("You should also be aware that real time chat, be it voice or video, consumes more bandwidth than classic web browsing. It is your responsability to monitor your usage and check that it matches your contract with your internet provider so as not to incur unexpected fees.") + "<br /><br />";
                                html += "<b>" + _("By accepting to proceed, you state that you are an adult according to the laws of your country or that you received explicit permission to use this service from an adult legally responsible for you, and you recognise and attest that Board Game Arena won't be liable for any inconvenience or damage directly or indirectly linked to the use of this service.") + "</b>";
                                html += "</div>";
                                this.confirmationDialog(html, dojo.hitch(this, function() {
                                    if (this.room === null) {
                                        return;
                                    }
                                    this.ajaxcall("/videochat/videochat/joinRoom.html", {
                                        room: this.room,
                                        accept: true,
                                        lock: false,
                                        audio: (this.mediaConstraints.audio !== false),
                                        video: (this.mediaConstraints.video !== false)
                                    }, this, function(_b16) {
                                        for (var i = 0; i < _b16.in_room.length; i++) {
                                            var _b17 = _b16.in_room[i];
                                            this.onJoinRoom(_b17, false);
                                        }
                                    }, function(_b18) {});
                                }), dojo.hitch(this, function() {
                                    this.ajaxcall("/videochat/videochat/joinRoom.html", {
                                        room: this.room,
                                        accept: false,
                                        lock: false,
                                        audio: (this.mediaConstraints.audio !== false),
                                        video: (this.mediaConstraints.video !== false)
                                    }, this, function(_b19) {
                                        this.clearRTC();
                                    }, function(_b1a) {});
                                }));
                            }
                        }, function(_b1b) {
                            if (_b1b) {}
                        });
                    },
                    onGetUserMediaError: function() {
                        var html = "<div class=\"rtc_dialog\">" + "<br />";
                        html += "<b>" + _("Sorry, Board Game Arena failed to get access to your local camera/microphone...") + "</b>" + "<br /><br />";
                        html += _("If you denied authorisation by mistake, please refresh the page to start over.") + " ";
                        var _b1c = "";
                        html += _("If that fails, you should check your browser permissions in your browser's <i>%s</i> local configuration.").replace("%s", _b1c) + "<br /><br />";
                        html += _("Otherwise, please check that your camera/microphone is correctly plugged in, and that you are using a WebRTC capable browser: ");
                        html += "<a href=\"http://iswebrtcreadyyet.com/\" target=\"_blank\">http://iswebrtcreadyyet.com/</a>";
                        html += "</div>";
                        this.warningDialog(html, function() {});
                    },
                    onJoinRoom: function(_b1d, _b1e) {
                        if (this.webrtc != null && !this.webrtc.isInRoom(_b1d)) {
                            this.webrtc.addToRoom(_b1d);
                        }
                        if (this.webrtc.room.indexOf("T") >= 0) {
                            if ($("rtc_container_" + _b1d) === null && ($("emblem_" + _b1d) !== null || $("rtc_placeholder_" + _b1d) !== null)) {
                                dojo.place(this.format_string(this.getRTCTemplate(this.mediaConstraints.audio, this.mediaConstraints.video, true), {
                                    player_id: _b1d,
                                    muted: ""
                                }), ($("rtc_placeholder_" + _b1d) !== null ? $("rtc_placeholder_" + _b1d) : $("table_rtc_placeholder")));
                                if ($("emblem_" + _b1d) !== null) {
                                    this.placeOnObject($("rtc_container_" + _b1d), $("emblem_" + _b1d));
                                }
                                this.setupRTCEvents(_b1d);
                                if (typeof this.gamedatas != "undefined" && _b1d == this.gamedatas.gamestate.active_player) {
                                    if ($("videofeed_" + _b1d + "_pulse")) {
                                        dojo.addClass("videofeed_" + _b1d + "_pulse", "rtc_video_pulsating");
                                    }
                                }
                            } else {
                                if ($("videofeed_" + _b1d + "_mic") != null) {
                                    dojo.addClass($("videofeed_" + _b1d + "_mic"), "rtc_video_mic_off");
                                    dojo.removeClass($("videofeed_" + _b1d + "_mic"), "rtc_video_mic_on");
                                }
                                if ($("videofeed_" + _b1d + "_cam") != null) {
                                    dojo.addClass($("videofeed_" + _b1d + "_cam"), "rtc_video_cam_off");
                                    dojo.removeClass($("videofeed_" + _b1d + "_cam"), "rtc_video_cam_on");
                                }
                            }
                        } else {
                            if (this.webrtc.room.indexOf("P") >= 0) {
                                if ($("rtc_container_" + _b1d) == null && $("chatwindowlogs_zone_privatechat_" + _b1d) !== null) {
                                    dojo.place(this.format_string(this.getRTCTemplate(this.mediaConstraints.audio, this.mediaConstraints.video, true), {
                                        player_id: _b1d,
                                        muted: ""
                                    }), $("chatwindowlogs_privatechat_" + _b1d));
                                    if (this.mediaConstraints.video) {
                                        dojo.addClass($("rtc_container_" + _b1d), "rtc_video_container_privatechat");
                                    } else {
                                        if (this.mediaConstraints.audio) {
                                            dojo.style($("rtc_container_" + _b1d), "top", "-13px");
                                            dojo.style($("rtc_container_" + _b1d), "left", "110px");
                                        }
                                    }
                                    this.setupRTCEvents(_b1d);
                                }
                            }
                        }
                        this.webrtc.maybeConnect(_b1d, _b1e);
                        if (this.webrtc.isAudioMuted) {
                            this.webrtc.toggleAudioMute();
                        }
                    },
                    onClickRTCVideoMax: function(evt) {
                        dojo.stopEvent(evt);
                        var node = evt.currentTarget;
                        var _b1f = node.id.split("_")[2];
                        this.maximizeRTCVideo(node, _b1f);
                    },
                    maximizeRTCVideo: function(node, _b20) {
                        if (dojo.hasClass(node, "rtc_video_container")) {
                            dojo.addClass(node, "rtc_video_container_free");
                            dojo.removeClass(node, "rtc_video_container");
                            var _b21 = dojo.hasClass(node, "rtc_video_container_privatechat");
                            if (typeof _b21 == "undefined" || !_b21) {
                                var box = dojo.marginBox("videofeed_" + _b20);
                                dojo.style(node, "width", box.w + "px");
                                dojo.style(node, "height", box.h + "px");
                                var _b22 = dojo.marginBox(node);
                                dojo.style(node, "top", Math.round(_b22.t - (box.h - 32) / 2) + "px");
                                dojo.style(node, "left", Math.round(_b22.l - (box.w - 32) / 2) + "px");
                            } else {
                                dojo.addClass(node, "rtc_video_container_free_privatechat");
                                dojo.removeClass(node, "rtc_video_container_privatechat");
                                var box = dojo.marginBox("videofeed_" + _b20);
                                dojo.style(node, "width", box.w + "px");
                                dojo.style(node, "height", box.h + "px");
                            }
                            if ($("rtc_placeholder_" + _b20)) {
                                dojo.style("rtc_placeholder_" + _b20, "zIndex", 497);
                            } else {
                                if ($("rtc_container_" + _b20)) {
                                    dojo.style("rtc_container_" + _b20, "zIndex", 497);
                                }
                            }
                            var _b23 = new ebg.resizable();
                            _b23.create(this, "videofeed_" + _b20, "videofeed_" + _b20 + "_size", true, false, true);
                        }
                    },
                    onClickRTCVideoMin: function(evt) {
                        dojo.stopEvent(evt);
                        var node = evt.currentTarget.parentNode;
                        var _b24 = node.id.split("_")[2];
                        var _b25 = dojo.hasClass($("rtc_container_" + _b24).parentNode, "chatwindowlogs");
                        var _b26 = dojo.hasClass(node, "rtc_video_container_free_privatechat");
                        dojo.addClass(node, "rtc_video_container");
                        dojo.removeClass(node, "rtc_video_container_free");
                        dojo.style(node, "width", "");
                        dojo.style(node, "height", "");
                        dojo.style(node, "left", "");
                        dojo.style(node, "top", "");
                        dojo.style($("videofeed_" + _b24), "width", "");
                        dojo.style($("videofeed_" + _b24), "height", "");
                        if ($("emblem_" + _b24) !== null && !_b25 && !_b26) {
                            this.placeOnObject($("rtc_container_" + _b24), $("emblem_" + _b24));
                        } else {
                            if (_b25 && !_b26) {
                                dojo.style($("rtc_container_" + _b24), "top", "-6px");
                                dojo.style($("rtc_container_" + _b24), "left", "115px");
                            }
                        }
                        if ($("rtc_placeholder_" + _b24) !== null) {
                            dojo.style("rtc_placeholder_" + _b24, "zIndex", "");
                        } else {
                            if ($("rtc_container_" + _b24)) {
                                dojo.style("rtc_container_" + _b24, "zIndex", "");
                            }
                        }
                        if (_b26) {
                            dojo.addClass(node, "rtc_video_container_privatechat");
                            dojo.removeClass(node, "rtc_video_container_free_privatechat");
                        }
                    },
                    onClickRTCVideoSize: function(evt) {
                        dojo.stopEvent(evt);
                    },
                    onClickRTCVideoMic: function(evt) {
                        dojo.stopEvent(evt);
                        var node = evt.currentTarget;
                        var _b27 = node.id.split("_")[1];
                        var _b28 = this.webrtc.toggleAudioMute(_b27);
                        if (_b28) {
                            dojo.addClass(evt.currentTarget, "rtc_video_mic_off");
                            dojo.removeClass(evt.currentTarget, "rtc_video_mic_on");
                        } else {
                            dojo.addClass(evt.currentTarget, "rtc_video_mic_on");
                            dojo.removeClass(evt.currentTarget, "rtc_video_mic_off");
                        }
                    },
                    onClickRTCVideoSpk: function(evt) {
                        dojo.stopEvent(evt);
                        var node = evt.currentTarget;
                        var _b29 = node.id.split("_")[1];
                        var _b2a = this.webrtc.toggleAudioMute(_b29);
                        if (_b2a) {
                            dojo.addClass(evt.currentTarget, "rtc_video_spk_off");
                            dojo.removeClass(evt.currentTarget, "rtc_video_spk_on");
                        } else {
                            dojo.addClass(evt.currentTarget, "rtc_video_spk_on");
                            dojo.removeClass(evt.currentTarget, "rtc_video_spk_off");
                        }
                    },
                    onClickRTCVideoCam: function(evt) {
                        dojo.stopEvent(evt);
                        var node = evt.currentTarget;
                        var _b2b = node.id.split("_")[1];
                        var _b2c = this.webrtc.toggleVideoMute(_b2b);
                        if (_b2c) {
                            dojo.addClass(evt.currentTarget, "rtc_video_cam_off");
                            dojo.removeClass(evt.currentTarget, "rtc_video_cam_on");
                        } else {
                            dojo.addClass(evt.currentTarget, "rtc_video_cam_on");
                            dojo.removeClass(evt.currentTarget, "rtc_video_cam_off");
                        }
                    },
                    onLeaveRoom: function(_b2d, _b2e) {
                        if (this.webrtc != null && this.webrtc.isInRoom(_b2d)) {
                            var node = $("rtc_container_" + _b2d);
                            if (_b2e === true) {
                                dojo.destroy(node);
                            } else {
                                var _b2f = dojo.fadeOut({
                                    node: node,
                                    duration: 1000,
                                    delay: 500
                                });
                                dojo.connect(_b2f, "onEnd", function(node) {
                                    dojo.destroy(node);
                                });
                                _b2f.play();
                            }
                            this.webrtc.removeFromRoom(_b2d);
                        }
                    },
                    onLeaveRoomImmediate: function(_b30) {
                        this.onLeaveRoom(_b30, true);
                    },
                    doLeaveRoom: function(_b31) {
                        this.clearRTC();
                        if (this.room == null) {
                            return;
                        }
                        this.ajaxcall("/videochat/videochat/leaveRoom.html", {
                            room: this.room,
                            lock: true
                        }, this, function(_b32) {
                            this.room = null;
                            this.rtc_mode = 0;
                            this.mediaConstraints = {
                                "video": false,
                                "audio": false
                            };
                            if (typeof _b31 != "undefined") {
                                _b31();
                            }
                        }, function(_b33) {
                            if (_b33) {}
                        });
                    },
                    clearRTC: function() {
                        if (this.webrtc != null) {
                            this.webrtc.hangup();
                        }
                        this.webrtc = null;
                        dojo.unsubscribe(this.webrtcmsg_ntf_handle);
                        this.webrtcmsg_ntf_handle = null;
                        dojo.query(".rtc_container").forEach(function(node, _b34, arr) {
                            dojo.destroy(node);
                        });
                        dojo.query(".audiovideo_active").removeClass("audiovideo_active").addClass("audiovideo_inactive");
                    },
                    ntf_webrtcmsg: function(_b35) {
                        if (this.webrtc != null && typeof _b35.args.message != "undefined") {
                            this.webrtc.onMessageReceived(_b35.args);
                        }
                    },
                    addSmileyToText: function(text) {
                        var _b36 = this.emoticons;
                        var _b37 = []
                          , _b38 = /[[\]{}()*+?.\\|^$\-,&#\s]/g;
                        for (var i in _b36) {
                            if (_b36.hasOwnProperty(i)) {
                                _b37.push("(( +|^)" + i.replace(_b38, "\\$&") + "( +|$|\\s))");
                            }
                        }
                        var text = text.replace(new RegExp(_b37.join("|"),"g"), function(_b39) {
                            var _b3a = _b39.trim();
                            return typeof _b36[_b3a] != "undefined" ? _b39.replace(_b3a, "<div class=\"icon20_textalign\"><div class=\"bgasmiley bgasmiley_" + _b36[_b3a] + "\"></div></div>") : _b39;
                        });
                        return text.replace(new RegExp(_b37.join("|"),"g"), function(_b3b) {
                            var _b3c = _b3b.trim();
                            return typeof _b36[_b3c] != "undefined" ? _b3b.replace(_b3c, "<div class=\"icon20_textalign\"><div class=\"bgasmiley bgasmiley_" + _b36[_b3c] + "\"></div></div>") : _b3b;
                        });
                    },
                    getSmileyClassToCodeTable: function() {
                        var _b3d = {};
                        for (var i in this.emoticons) {
                            if (typeof _b3d[this.emoticons[i]] == "undefined") {
                                _b3d[this.emoticons[i]] = i;
                            }
                        }
                        return _b3d;
                    },
                    makeClickableLinks: function(str, _b3e) {
                        if (typeof _b3e == "undefined") {
                            _b3e = true;
                        }
                        if (_b3e) {
                            if (str.indexOf("boardgamearena.com") != -1) {
                                var _b3f = /(\b(https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*boardgamearena\.com[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
                                return this.makeBgaLinksLocalLinks(str.replace(_b3f, "<a href=\"$1\">$1</a>"));
                            } else {
                                return this.makeBgaLinksLocalLinks(str);
                            }
                        } else {
                            if (str.indexOf("yucata.de") == -1 && str.indexOf("boiteajeux") == -1 && str.indexOf("tabletopia") == -1 && str.indexOf("berserk-games") == -1 && str.indexOf("dominion.games") == -1 && str.indexOf("wakan.pl") == -1 && str.indexOf("littlegolem.net") == -1 && str.indexOf("vassalengine.org") == -1 && str.indexOf("hanabi.live") == -1) {
                                var _b3f = /(\b(https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
                                return this.makeBgaLinksLocalLinks(str.replace(_b3f, "<a href=\"$1\" target=\"_blank\">$1</a>"));
                            } else {
                                return this.makeBgaLinksLocalLinks(str);
                            }
                        }
                    },
                    makeBgaLinksLocalLinks: function(url) {
                        var _b40 = /(https?):\/\/[-a-zA-Z.]*boardgamearena\.com\//gim;
                        url = url.replace(_b40, "/");
                        var _b41 = /((https?):\/\/)[-a-zA-Z.]*.([0-9].boardgamearena\.com)/gim;
                        return url.replace(_b41, "$1$3");
                    },
                    ensureEbgObjectReinit: function(_b42) {
                        if (typeof _b42 == "object") {
                            if (_b42 !== null) {
                                if (typeof _b42.destroy != "undefined") {
                                    _b42.destroy();
                                }
                            }
                        }
                    },
                    getRankClassFromElo: function(elo) {
                        elo = parseFloat(elo);
                        if (elo == 1300) {
                            return _("Beginner");
                        } else {
                            if (elo < 1400) {
                                return _("Apprentice");
                            } else {
                                if (elo < 1500) {
                                    return _("Average");
                                } else {
                                    if (elo < 1600) {
                                        return _("Good");
                                    } else {
                                        if (elo < 1800) {
                                            return _("Strong");
                                        } else {
                                            if (elo < 2000) {
                                                return _("Expert");
                                            } else {
                                                return _("Master");
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    getColorFromElo: function(elo) {
                        elo = parseFloat(elo);
                        if (elo == 1300) {
                            return "#74bed1";
                        } else {
                            if (elo < 1400) {
                                return "#74bed1";
                            } else {
                                if (elo < 1500) {
                                    return "#84b8de";
                                } else {
                                    if (elo < 1600) {
                                        return "#94acd6";
                                    } else {
                                        if (elo < 1800) {
                                            return "#9ba5d0";
                                        } else {
                                            if (elo < 2000) {
                                                return "#a99bc9";
                                            } else {
                                                return "#b593c4";
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    getRankClassFromEloUntranslated: function(elo) {
                        elo = parseFloat(elo);
                        if (elo == 1300) {
                            return ("beginner");
                        } else {
                            if (elo < 1400) {
                                return ("apprentice");
                            } else {
                                if (elo < 1500) {
                                    return ("average");
                                } else {
                                    if (elo < 1600) {
                                        return ("good");
                                    } else {
                                        if (elo < 1800) {
                                            return ("strong");
                                        } else {
                                            if (elo < 2000) {
                                                return ("expert");
                                            } else {
                                                return ("master");
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    eloToBarPercentage: function(elo) {
                        elo = parseFloat(elo);
                        if (elo < 1400) {
                            return (elo - 1300) / 4;
                        } else {
                            if (elo > 2100) {
                                return 100;
                            } else {
                                return Math.min(100, 25 + 75 * ((elo - 1400) / (2000 - 1400)));
                            }
                        }
                    },
                    formatElo: function(elo) {
                        return parseInt(Math.round(Math.max(0, parseFloat(elo) - 1300)));
                    },
                    formatEloDecimal: function(elo) {
                        return (Math.round((elo - 1300) * 100) / 100);
                    },
                    getEloLabel: function(elo, _b43, _b44) {
                        if (typeof _b43 == "undefined") {
                            _b43 = false;
                        }
                        if (typeof _b44 == "undefined") {
                            _b44 = true;
                        }
                        if (_b44) {
                            return "<div class=\"gamerank gamerank_" + this.getRankClassFromEloUntranslated(elo) + (_b43 ? " gamerank_mini" : "") + "\"><span class=\"icon20 icon20_rankw" + (_b43 ? "mini" : "") + "\"></span> <span class=\"gamerank_value\">" + this.formatElo(elo) + "</span></div>";
                        } else {
                            return "<div class=\"gamerank gamerank_" + this.getRankClassFromEloUntranslated(elo) + (_b43 ? " gamerank_mini" : "") + "\"><span class=\"icon20 icon20_rankw" + (_b43 ? "mini" : "") + "\"></span> <span class=\"gamerank_value\">" + this.formatEloDecimal(elo) + "</span></div>";
                        }
                    },
                    getArenaLabel: function(_b45, _b46) {
                        var _b47 = this.arenaPointsDetails(_b45);
                        var res = "<div class=\"myarena_league league_" + _b47.league + "\">";
                        if (_b47.league != 5) {
                            res += "<div class=\"arena_label\">" + _b47.points + "</div>";
                        } else {
                            if (typeof _b46 != "undefined") {
                                res += "<div class=\"arena_label\">" + _b46 + "</div>";
                                res += "<div class=\"arena_points\">" + Math.round(_b47.arelo) + "</div>";
                            }
                        }
                        res += "</div>";
                        return res;
                    },
                    insertParamIntoCurrentURL: function(key, _b48) {
                        key = escape(key);
                        _b48 = escape(_b48);
                        var kvp = document.location.search.substr(1).split("&");
                        if (kvp == "") {
                            document.location.search = "?" + key + "=" + _b48;
                        } else {
                            var i = kvp.length;
                            var x;
                            while (i--) {
                                x = kvp[i].split("=");
                                if (x[0] == key) {
                                    x[1] = _b48;
                                    kvp[i] = x.join("=");
                                    break;
                                }
                            }
                            if (i < 0) {
                                kvp[kvp.length] = [key, _b48].join("=");
                            }
                            document.location.search = kvp.join("&");
                        }
                    },
                    playerawardsCollapsedAlignement: function() {
                        if (typeof this.onresizePlayerAwardsEvent == "undefined") {
                            this.onresizePlayerAwardsEvent = dojo.connect(window, "onresize", this, dojo.hitch(this, "playerawardsCollapsedAlignement"));
                            dojo.query(".show_awards_details").connect("onclick", this, function(evt) {
                                dojo.stopEvent(evt);
                                var _b49 = evt.currentTarget.parentNode;
                                while (_b49 !== null && !dojo.hasClass(_b49, "playerawards")) {
                                    _b49 = _b49.parentNode;
                                }
                                if (_b49 !== null) {
                                    dojo.removeClass(_b49, "playerawards_collapsed");
                                    dojo.destroy(evt.currentTarget);
                                }
                            });
                        }
                        if (dojo.query(".playerawards_collapsed").length == 0) {
                            if (typeof this.onresizePlayerAwardsEvent != "undefined") {
                                dojo.disconnect(this.onresizePlayerAwardsEvent);
                                delete this.onresizePlayerAwardsEvent;
                            }
                        } else {
                            dojo.query(".playerawards_collapsed").forEach(dojo.hitch(this, "playerawardCollapsedAlignement"));
                        }
                    },
                    playerawardCollapsedAlignement: function(node) {
                        var _b4a = -1;
                        var _b4b = false;
                        if (node.id == "") {
                            console.error("Please specity an ID to playerawards to support playerawardCollapsedAlignement");
                            return;
                        }
                        dojo.query("#" + node.id + " .trophy_large").forEach(dojo.hitch(this, function(_b4c) {
                            var _b4d = dojo.position(_b4c);
                            if (_b4d.y != _b4a) {
                                _b4b = !_b4b;
                                _b4a = _b4d.y;
                            }
                            dojo.removeClass(_b4c, "oddawardline evenawardline");
                            dojo.addClass(_b4c, _b4b ? "oddawardline" : "evenawardline");
                        }));
                    },
                    arenaPointsDetails: function(_b4e, _b4f) {
                        var _b50 = {
                            0: _("Bronze league"),
                            1: _("Silver league"),
                            2: _("Gold league"),
                            3: _("Platinum league"),
                            4: _("Diamond league"),
                            5: _("Elite league")
                        };
                        var _b51 = {
                            0: _("Bronze"),
                            1: _("Silver"),
                            2: _("Gold"),
                            3: _("Platinum"),
                            4: _("Diamond"),
                            5: _("Elite")
                        };
                        var _b52 = toint(Math.floor(_b4e / 100));
                        var _b53 = toint(Math.floor(_b4e % 100));
                        var _b54 = 10000 * (_b4e % 1);
                        var _b55 = (typeof _b50[_b52] == "undefined") ? "Error: unknow league " + _b52 : _b50[_b52];
                        var _b56 = (typeof _b51[_b52] == "undefined") ? "Error: unknow league " + _b52 : _b51[_b52];
                        var _b57 = "?";
                        if (typeof _b4f != "undefined") {
                            var _b58 = (_b4f - 2);
                            if (_b52 == 5) {
                                _b57 = "";
                            } else {
                                if (_b52 >= _b58) {
                                    _b57 = _b51[5];
                                } else {
                                    _b57 = _b51[toint(_b52) + 1];
                                }
                            }
                        }
                        if (_b57 === null) {
                            _b57 = "?";
                        }
                        if (_b55 === null) {
                            _b55 = "?";
                        }
                        if (_b56 === null) {
                            _b56 = "?";
                        }
                        return {
                            league: _b52,
                            league_name: _b55,
                            league_shortname: _b56,
                            league_promotion_shortname: _b57,
                            points: _b53,
                            arelo: _b54
                        };
                    },
                    arenaPointsHtml: function(_b59) {
                        var _b5a = "";
                        var _b5b = "";
                        var _b5c = _b59.league_name;
                        var _b5d = "";
                        var _b5e = "";
                        var _b5f = {
                            0: 10,
                            1: 10,
                            2: 10,
                            3: 10,
                            4: 10,
                            5: 0
                        };
                        var _b60 = _b5f[_b59.league];
                        if (_b60 == 0) {
                            _b5a += Math.round(_b59.arelo) + " " + _("points");
                            _b5d = 30 + (Math.min(2100, Math.max(1200, _b59.arelo)) - 1200) * 70 / (2100 - 1200);
                            _b5e = _b5d;
                            _b5d = "width:" + Math.round(_b5d) + "%";
                        } else {
                            var _b61 = Math.floor((100 / _b60) * 100) / 100;
                            for (var i = 0; i < _b60; i++) {
                                if (i < _b59.points) {
                                    _b5a += "<div class=\"arena_point_wrap arena_point_wrap_" + i + "\" style=\"width:" + _b61 + "%\">" + "<div class=\"icon32 icon_arena arena_white\"  style=\"opacity:0;\"></div>" + "<div class=\"icon32 icon_arena arena_shadow\"></div>" + "<div class=\"icon32 icon_arena arena_colored\"></div>" + "</div>";
                                } else {
                                    _b5a += "<div class=\"arena_point_wrap arena_point_wrap_" + i + "\" style=\"width:" + _b61 + "%\">" + "<div class=\"icon32 icon_arena arena_white\"></div>" + "<div class=\"icon32 icon_arena arena_shadow\" style=\"opacity:0;\"></div>" + "<div class=\"icon32 icon_arena arena_colored\" style=\"opacity:0;\"></div>" + "</div>";
                                }
                            }
                            var _b62 = _b60 - _b59.points;
                            if (typeof _b59.league_promotion_shortname == "undefined" || _b59.league_promotion_shortname === null) {
                                _b59.league_promotion_shortname = "?";
                            }
                            if (_b62 == 1) {
                                _b5b = dojo.string.substitute(_("1 point to ${league}"), {
                                    points: _b62,
                                    league: _b59.league_promotion_shortname
                                }).replace("1", "<span class=\"remain_arena_points\">1</span>");
                            } else {
                                _b5b = dojo.string.substitute(_("${points} points to ${league}"), {
                                    points: "<span class=\"remain_arena_points\">" + _b62 + "</span>",
                                    league: _b59.league_promotion_shortname
                                });
                            }
                        }
                        return {
                            bar_content: _b5a,
                            bottom_infos: _b5b,
                            bar_pcent: _b5d,
                            bar_pcent_number: _b5e
                        };
                    },
                });
            });
        },
        "ebg/core/common": function() {
            define(["dojo", "dojo/date"], function(dojo) {
                getStaticAssetUrl = function(_b63) {
                    var _b64 = "./" + _b63;
                    if (g_staticassets === null) {
                        console.error("Error: g_staticassets is null", _b63);
                        return g_themeurl + _b63;
                    }
                    var _b65 = g_staticassets.find(function(_b66) {
                        return _b66.file = _b64;
                    });
                    if (typeof _b65 != "undefined") {
                        return g_themeurl.substr(0, g_themeurl.length - 12) + _b65.version + "/" + _b63;
                    } else {
                        return g_themeurl + _b63;
                    }
                }
                ;
                endnotif = function() {
                    dojo.publish("notifEnd", null);
                }
                ;
                time_format = function(mn) {
                    if (mn < 60) {
                        return mn + " mn";
                    } else {
                        if (mn < 75) {
                            return "1h";
                        } else {
                            if (mn < 105) {
                                return "1h30";
                            } else {
                                var h = Math.round(mn / 60);
                                if (h < 24) {
                                    return h + " h";
                                } else {
                                    var d = Math.round(h / 24);
                                    if (d == 1) {
                                        return " " + __("lang_mainsite", "one day");
                                    } else {
                                        if (d < 60) {
                                            return d + " " + __("lang_mainsite", "days");
                                        } else {
                                            if (d < 366) {
                                                var m = Math.round(d / 30.5);
                                                return m + " " + __("lang_mainsite", "months");
                                            } else {
                                                var y = Math.round(d / 365.25);
                                                if (y == 1) {
                                                    return __("lang_mainsite", "one year");
                                                } else {
                                                    return y + " " + __("lang_mainsite", "years");
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                ;
                date_format = function(_b67, _b68, _b69, _b6a) {
                    var now = new Date();
                    var date = new Date(_b67 * 1000);
                    if (typeof _b6a == "undefined") {
                        _b6a = false;
                    }
                    var _b6b = "";
                    if (_b6a) {
                        _b6b = " (" + mainsite.timezone.replace("_", " ") + ")";
                    }
                    var diff = (Math.abs(now.getTime() - date.getTime())) / 1000;
                    var _b6c = (date.getTime() >= now.getTime());
                    if (typeof _b69 == "undefined") {
                        _b69 = false;
                    }
                    if (_b69) {
                        return dojo.string.substitute(__("lang_mainsite", "${M}/${D}/${Y}"), {
                            M: zeroFill(date.getMonth() + 1, 2),
                            D: zeroFill(date.getDate(), 2),
                            Y: 1900 + date.getYear()
                        });
                    } else {
                        if (diff < 3600) {
                            var mn = Math.round(diff / 60);
                            if (_b6c) {
                                return dojo.string.substitute(__("lang_mainsite", "in ${mn} min"), {
                                    mn: mn
                                });
                            } else {
                                return dojo.string.substitute(__("lang_mainsite", "${mn} min ago"), {
                                    mn: mn
                                });
                            }
                        } else {
                            if (diff < 4 * 3600) {
                                if (_b68) {
                                    var hour = Math.floor(diff / 3600);
                                    var mn = zeroFill(Math.round((diff - (3600 * hour)) / 60), 2);
                                    if (_b6c) {
                                        return dojo.string.substitute(__("lang_mainsite", "in ${hour}h${mn}"), {
                                            hour: hour,
                                            mn: mn
                                        });
                                    } else {
                                        return dojo.string.substitute(__("lang_mainsite", "${hour}h${mn} ago"), {
                                            hour: hour,
                                            mn: mn
                                        });
                                    }
                                } else {
                                    var hour = Math.round(diff / 3600);
                                    if (_b6c) {
                                        if (hour == 1) {
                                            return __("lang_mainsite", "in one hour");
                                        } else {
                                            return dojo.string.substitute(__("lang_mainsite", "in ${hour} hours"), {
                                                hour: hour
                                            });
                                        }
                                    } else {
                                        if (hour == 1) {
                                            return __("lang_mainsite", "one hour ago");
                                        } else {
                                            return dojo.string.substitute(__("lang_mainsite", "${hour} hours ago"), {
                                                hour: hour
                                            });
                                        }
                                    }
                                }
                            } else {
                                if (date.getYear() == now.getYear() && date.getMonth() == now.getMonth() && date.getDate() == now.getDate()) {
                                    return dojo.string.substitute(__("lang_mainsite", "today at ${H}:${m}"), {
                                        H: zeroFill(date.getHours(), 2),
                                        m: zeroFill(date.getMinutes(), 2)
                                    }) + _b6b;
                                }
                                var _b6d = dojo.date.add(now, "day", 1);
                                if (date.getYear() == _b6d.getYear() && date.getMonth() == _b6d.getMonth() && date.getDate() == _b6d.getDate()) {
                                    return dojo.string.substitute(__("lang_mainsite", "tomorrow at ${H}:${m}"), {
                                        H: zeroFill(date.getHours(), 2),
                                        m: zeroFill(date.getMinutes(), 2)
                                    }) + _b6b;
                                }
                                var _b6e = dojo.date.add(now, "day", -1);
                                if (date.getYear() == _b6e.getYear() && date.getMonth() == _b6e.getMonth() && date.getDate() == _b6e.getDate()) {
                                    return dojo.string.substitute(__("lang_mainsite", "yesterday at ${H}:${m}"), {
                                        H: zeroFill(date.getHours(), 2),
                                        m: zeroFill(date.getMinutes(), 2)
                                    }) + _b6b;
                                }
                            }
                        }
                        return dojo.string.substitute(__("lang_mainsite", "${M}/${D}/${Y} at ${H}:${m}"), {
                            M: zeroFill(date.getMonth() + 1, 2),
                            D: zeroFill(date.getDate(), 2),
                            Y: 1900 + date.getYear(),
                            H: zeroFill(date.getHours(), 2),
                            m: zeroFill(date.getMinutes(), 2)
                        }) + _b6b;
                    }
                }
                ;
                date_format_simple = function(_b6f) {
                    var date = new Date(_b6f * 1000);
                    return dojo.string.substitute(__("lang_mainsite", "${M}/${D}/${Y} at ${H}:${m}"), {
                        M: zeroFill(date.getMonth() + 1, 2),
                        D: zeroFill(date.getDate(), 2),
                        Y: 1900 + date.getYear(),
                        H: zeroFill(date.getHours(), 2),
                        m: zeroFill(date.getMinutes(), 2)
                    });
                }
                ;
                daytime_format = function(_b70) {
                    var date = new Date(_b70 * 1000);
                    return dojo.string.substitute("${H}:${m}", {
                        H: zeroFill(date.getHours(), 2),
                        m: zeroFill(date.getMinutes(), 2)
                    });
                }
                ;
                isset = function(_b71) {
                    return (typeof _b71 != "undefined");
                }
                ;
                toint = function(_b72) {
                    if (_b72 === null) {
                        return null;
                    }
                    return parseInt(_b72, 10);
                }
                ;
                tofloat = function(_b73) {
                    if (_b73 === null) {
                        return null;
                    }
                    return parseFloat(_b73);
                }
                ;
                zeroFill = function(_b74, _b75) {
                    _b75 -= _b74.toString().length;
                    if (_b75 > 0) {
                        return new Array(_b75 + (/\./.test(_b74) ? 2 : 1)).join("0") + _b74;
                    }
                    return _b74;
                }
                ;
                ucFirst = function(_b76) {
                    return _b76.charAt(0).toUpperCase() + _b76.slice(1);
                }
                ;
                format_number = function(x) {
                    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
                }
                ;
                playSound = function(_b77) {
                    if (soundManager.flashMedia && soundManager.flashMedia.doPlay && (typeof soundManager.flashMedia.doPlay == "function")) {
                        if (soundManager.bMuteSound) {
                            return;
                        }
                        try {
                            if (typeof soundManager.volume != "undefined") {
                                soundManager.doPlay({
                                    id: _b77,
                                    volume: soundManager.volume
                                });
                            } else {
                                soundManager.doPlay({
                                    id: _b77
                                });
                            }
                        } catch (e) {}
                    }
                    if (soundManager.html5) {
                        soundManager.doPlay({
                            id: _b77
                        });
                    }
                }
                ;
                playSoundFile = function(_b78) {
                    if (soundManager.html5) {
                        soundManager.doPlayFile(_b78);
                    }
                }
                ;
                stopSound = function(_b79) {
                    if (soundManager.flashMedia && soundManager.flashMedia.doPlay && (typeof soundManager.flashMedia.doPlay == "function")) {
                        try {
                            soundManager.stop({
                                id: _b79
                            });
                        } catch (e) {}
                    }
                    if (soundManager.html5) {
                        soundManager.stop({
                            id: _b79
                        });
                    }
                }
                ;
                _ = function(_b7a) {
                    if (typeof g_i18n == "undefined") {
                        console.error("Try to use a translated string in JS object declaration : impossible => string is NOT translated");
                        console.error("String not translated : " + _b7a);
                        return _b7a;
                    }
                    return g_i18n.getSimpleTranslation(_b7a);
                }
                ;
                __ = function(_b7b, _b7c) {
                    if (typeof g_i18n == "undefined") {
                        console.error("Try to use a translated string in JS object declaration : impossible => string is NOT translated");
                        console.error("String not translated : " + _b7c);
                        return _b7c;
                    }
                    return g_i18n.getTranslation(_b7b, _b7c);
                }
                ;
                getLocationDescriptionFromResult = function(_b7d) {
                    var _b7e = "";
                    for (var c in _b7d.address_components) {
                        if (_b7e != "") {
                            _b7e += ", ";
                        }
                        _b7e += _b7d.address_components[c].long_name;
                    }
                    return _b7e;
                }
                ;
                analyseLocationDescriptionFromResult = function(_b7f) {
                    var _b80 = {
                        city: "",
                        area1: "",
                        area2: "",
                        country: ""
                    };
                    for (var c in _b7f.address_components) {
                        for (var i in _b7f.address_components[c].types) {
                            if (_b7f.address_components[c].types[i] == "administrative_area_level_1") {
                                _b80.area1 = _b7f.address_components[c].long_name;
                            } else {
                                if (_b7f.address_components[c].types[i] == "administrative_area_level_2") {
                                    _b80.area2 = _b7f.address_components[c].long_name;
                                } else {
                                    if (_b7f.address_components[c].types[i] == "locality") {
                                        _b80.city = _b7f.address_components[c].long_name;
                                    } else {
                                        if (_b7f.address_components[c].types[i] == "country") {
                                            _b80.country = _b7f.address_components[c].short_name;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    return _b80;
                }
                ;
                id_to_path = function(id) {
                    return Math.floor(id / 1000000000) + "/" + Math.floor(id / 1000000) + "/" + Math.floor(id / 1000);
                }
                ;
                playerDeviceToIcon = function(_b81) {
                    return (_b81 == "desktop") ? "circle" : ((_b81 == "tablet") ? "tablet" : "mobile");
                }
                ;
                jzTimezoneDetector = {};
                jzTimezoneDetector.HEMISPHERE_SOUTH = "SOUTH";
                jzTimezoneDetector.HEMISPHERE_NORTH = "NORTH";
                jzTimezoneDetector.HEMISPHERE_UNKNOWN = "N/A";
                jzTimezoneDetector.olson = {};
                jzTimezoneDetector.TimeZone = function(_b82, _b83, _b84) {
                    this.utc_offset = _b82;
                    this.olson_tz = _b83;
                    this.uses_dst = _b84;
                }
                ;
                jzTimezoneDetector.TimeZone.prototype.display = function() {
                    this.ambiguity_check();
                    var _b85 = "<b>UTC-offset</b>: " + this.utc_offset + "<br/>";
                    _b85 += "<b>Zoneinfo key</b>: " + this.olson_tz + "<br/>";
                    _b85 += "<b>Zone uses DST</b>: " + (this.uses_dst ? "yes" : "no") + "<br/>";
                    return _b85;
                }
                ;
                jzTimezoneDetector.TimeZone.prototype.ambiguity_check = function() {
                    var _b86 = jzTimezoneDetector.olson.ambiguity_list[this.olson_tz];
                    if (typeof (_b86) == "undefined") {
                        return;
                    }
                    var _b87 = _b86.length;
                    for (var i = 0; i < _b87; i++) {
                        var tz = _b86[i];
                        if (jzTimezoneDetector.date_is_dst(jzTimezoneDetector.olson.dst_start_dates[tz])) {
                            this.olson_tz = tz;
                            return;
                        }
                    }
                }
                ;
                jzTimezoneDetector.date_is_dst = function(date) {
                    var _b88 = ((date.getMonth() > 5 ? jzTimezoneDetector.get_june_offset() : jzTimezoneDetector.get_january_offset()));
                    var _b89 = jzTimezoneDetector.get_date_offset(date);
                    return toint((_b88 - _b89)) !== 0;
                }
                ;
                jzTimezoneDetector.get_date_offset = function(date) {
                    return -date.getTimezoneOffset();
                }
                ;
                jzTimezoneDetector.get_timezone_info = function() {
                    var _b8a = jzTimezoneDetector.get_january_offset();
                    var _b8b = jzTimezoneDetector.get_june_offset();
                    var diff = _b8a - _b8b;
                    if (diff < 0) {
                        return {
                            "utc_offset": _b8a,
                            "dst": 1,
                            "hemisphere": jzTimezoneDetector.HEMISPHERE_NORTH
                        };
                    } else {
                        if (diff > 0) {
                            return {
                                "utc_offset": _b8b,
                                "dst": 1,
                                "hemisphere": jzTimezoneDetector.HEMISPHERE_SOUTH
                            };
                        }
                    }
                    return {
                        "utc_offset": _b8a,
                        "dst": 0,
                        "hemisphere": jzTimezoneDetector.HEMISPHERE_UNKNOWN
                    };
                }
                ;
                jzTimezoneDetector.get_january_offset = function() {
                    return jzTimezoneDetector.get_date_offset(new Date(2011,0,1,0,0,0,0));
                }
                ;
                jzTimezoneDetector.get_june_offset = function() {
                    return jzTimezoneDetector.get_date_offset(new Date(2011,5,1,0,0,0,0));
                }
                ;
                jzTimezoneDetector.determine_timezone = function() {
                    var _b8c = jzTimezoneDetector.get_timezone_info();
                    var _b8d = "";
                    if (_b8c.hemisphere == jzTimezoneDetector.HEMISPHERE_SOUTH) {
                        _b8d = ",s";
                    }
                    var _b8e = _b8c.utc_offset + "," + _b8c.dst + _b8d;
                    return {
                        "timezone": jzTimezoneDetector.olson.timezones[_b8e],
                        "key": _b8e
                    };
                }
                ;
                jzTimezoneDetector.olson.timezones = {
                    "-720,0": new jzTimezoneDetector.TimeZone("-12:00","Etc/GMT+12",false),
                    "-660,0": new jzTimezoneDetector.TimeZone("-11:00","Pacific/Pago_Pago",false),
                    "-600,1": new jzTimezoneDetector.TimeZone("-11:00","America/Adak",true),
                    "-660,1,s": new jzTimezoneDetector.TimeZone("-11:00","Pacific/Apia",true),
                    "-600,0": new jzTimezoneDetector.TimeZone("-10:00","Pacific/Honolulu",false),
                    "-570,0": new jzTimezoneDetector.TimeZone("-10:30","Pacific/Marquesas",false),
                    "-540,0": new jzTimezoneDetector.TimeZone("-09:00","Pacific/Gambier",false),
                    "-540,1": new jzTimezoneDetector.TimeZone("-09:00","America/Anchorage",true),
                    "-480,1": new jzTimezoneDetector.TimeZone("-08:00","America/Los_Angeles",true),
                    "-480,0": new jzTimezoneDetector.TimeZone("-08:00","Pacific/Pitcairn",false),
                    "-420,0": new jzTimezoneDetector.TimeZone("-07:00","America/Phoenix",false),
                    "-420,1": new jzTimezoneDetector.TimeZone("-07:00","America/Denver",true),
                    "-360,0": new jzTimezoneDetector.TimeZone("-06:00","America/Guatemala",false),
                    "-360,1": new jzTimezoneDetector.TimeZone("-06:00","America/Chicago",true),
                    "-360,1,s": new jzTimezoneDetector.TimeZone("-06:00","Pacific/Easter",true),
                    "-300,0": new jzTimezoneDetector.TimeZone("-05:00","America/Bogota",false),
                    "-300,1": new jzTimezoneDetector.TimeZone("-05:00","America/New_York",true),
                    "-270,0": new jzTimezoneDetector.TimeZone("-04:30","America/Caracas",false),
                    "-240,1": new jzTimezoneDetector.TimeZone("-04:00","America/Halifax",true),
                    "-240,0": new jzTimezoneDetector.TimeZone("-04:00","America/Santo_Domingo",false),
                    "-240,1,s": new jzTimezoneDetector.TimeZone("-04:00","America/Asuncion",true),
                    "-210,1": new jzTimezoneDetector.TimeZone("-03:30","America/St_Johns",true),
                    "-180,1": new jzTimezoneDetector.TimeZone("-03:00","America/Godthab",true),
                    "-180,0": new jzTimezoneDetector.TimeZone("-03:00","America/Argentina/Buenos_Aires",false),
                    "-180,1,s": new jzTimezoneDetector.TimeZone("-03:00","America/Montevideo",true),
                    "-120,0": new jzTimezoneDetector.TimeZone("-02:00","America/Noronha",false),
                    "-120,1": new jzTimezoneDetector.TimeZone("-02:00","Etc/GMT+2",true),
                    "-60,1": new jzTimezoneDetector.TimeZone("-01:00","Atlantic/Azores",true),
                    "-60,0": new jzTimezoneDetector.TimeZone("-01:00","Atlantic/Cape_Verde",false),
                    "0,0": new jzTimezoneDetector.TimeZone("00:00","Etc/UTC",false),
                    "0,1": new jzTimezoneDetector.TimeZone("00:00","Europe/London",true),
                    "60,1": new jzTimezoneDetector.TimeZone("+01:00","Europe/Berlin",true),
                    "60,0": new jzTimezoneDetector.TimeZone("+01:00","Africa/Lagos",false),
                    "60,1,s": new jzTimezoneDetector.TimeZone("+01:00","Africa/Windhoek",true),
                    "120,1": new jzTimezoneDetector.TimeZone("+02:00","Asia/Beirut",true),
                    "120,0": new jzTimezoneDetector.TimeZone("+02:00","Africa/Johannesburg",false),
                    "180,1": new jzTimezoneDetector.TimeZone("+03:00","Europe/Moscow",true),
                    "180,0": new jzTimezoneDetector.TimeZone("+03:00","Asia/Baghdad",false),
                    "210,1": new jzTimezoneDetector.TimeZone("+03:30","Asia/Tehran",true),
                    "240,0": new jzTimezoneDetector.TimeZone("+04:00","Asia/Dubai",false),
                    "240,1": new jzTimezoneDetector.TimeZone("+04:00","Asia/Yerevan",true),
                    "270,0": new jzTimezoneDetector.TimeZone("+04:30","Asia/Kabul",false),
                    "300,1": new jzTimezoneDetector.TimeZone("+05:00","Asia/Yekaterinburg",true),
                    "300,0": new jzTimezoneDetector.TimeZone("+05:00","Asia/Karachi",false),
                    "330,0": new jzTimezoneDetector.TimeZone("+05:30","Asia/Kolkata",false),
                    "345,0": new jzTimezoneDetector.TimeZone("+05:45","Asia/Kathmandu",false),
                    "360,0": new jzTimezoneDetector.TimeZone("+06:00","Asia/Dhaka",false),
                    "360,1": new jzTimezoneDetector.TimeZone("+06:00","Asia/Omsk",true),
                    "390,0": new jzTimezoneDetector.TimeZone("+06:30","Asia/Rangoon",false),
                    "420,1": new jzTimezoneDetector.TimeZone("+07:00","Asia/Krasnoyarsk",true),
                    "420,0": new jzTimezoneDetector.TimeZone("+07:00","Asia/Jakarta",false),
                    "480,0": new jzTimezoneDetector.TimeZone("+08:00","Asia/Shanghai",false),
                    "480,1": new jzTimezoneDetector.TimeZone("+08:00","Asia/Irkutsk",true),
                    "525,0": new jzTimezoneDetector.TimeZone("+08:45","Australia/Eucla",true),
                    "525,1,s": new jzTimezoneDetector.TimeZone("+08:45","Australia/Eucla",true),
                    "540,1": new jzTimezoneDetector.TimeZone("+09:00","Asia/Yakutsk",true),
                    "540,0": new jzTimezoneDetector.TimeZone("+09:00","Asia/Tokyo",false),
                    "570,0": new jzTimezoneDetector.TimeZone("+09:30","Australia/Darwin",false),
                    "570,1,s": new jzTimezoneDetector.TimeZone("+09:30","Australia/Adelaide",true),
                    "600,0": new jzTimezoneDetector.TimeZone("+10:00","Australia/Brisbane",false),
                    "600,1": new jzTimezoneDetector.TimeZone("+10:00","Asia/Vladivostok",true),
                    "600,1,s": new jzTimezoneDetector.TimeZone("+10:00","Australia/Sydney",true),
                    "630,1,s": new jzTimezoneDetector.TimeZone("+10:30","Australia/Lord_Howe",true),
                    "660,1": new jzTimezoneDetector.TimeZone("+11:00","Asia/Kamchatka",true),
                    "660,0": new jzTimezoneDetector.TimeZone("+11:00","Pacific/Noumea",false),
                    "690,0": new jzTimezoneDetector.TimeZone("+11:30","Pacific/Norfolk",false),
                    "720,1,s": new jzTimezoneDetector.TimeZone("+12:00","Pacific/Auckland",true),
                    "720,0": new jzTimezoneDetector.TimeZone("+12:00","Pacific/Tarawa",false),
                    "765,1,s": new jzTimezoneDetector.TimeZone("+12:45","Pacific/Chatham",true),
                    "780,0": new jzTimezoneDetector.TimeZone("+13:00","Pacific/Tongatapu",false),
                    "840,0": new jzTimezoneDetector.TimeZone("+14:00","Pacific/Kiritimati",false)
                };
                jzTimezoneDetector.olson.dst_start_dates = {
                    "America/Denver": new Date(2011,2,13,3,0,0,0),
                    "America/Mazatlan": new Date(2011,3,3,3,0,0,0),
                    "America/Chicago": new Date(2011,2,13,3,0,0,0),
                    "America/Mexico_City": new Date(2011,3,3,3,0,0,0),
                    "Atlantic/Stanley": new Date(2011,8,4,7,0,0,0),
                    "America/Asuncion": new Date(2011,9,2,3,0,0,0),
                    "America/Santiago": new Date(2011,9,9,3,0,0,0),
                    "America/Campo_Grande": new Date(2011,9,16,5,0,0,0),
                    "America/Montevideo": new Date(2011,9,2,3,0,0,0),
                    "America/Sao_Paulo": new Date(2011,9,16,5,0,0,0),
                    "America/Los_Angeles": new Date(2011,2,13,8,0,0,0),
                    "America/Santa_Isabel": new Date(2011,3,5,8,0,0,0),
                    "America/Havana": new Date(2011,2,13,2,0,0,0),
                    "America/New_York": new Date(2011,2,13,7,0,0,0),
                    "Asia/Gaza": new Date(2011,2,26,23,0,0,0),
                    "Asia/Beirut": new Date(2011,2,27,1,0,0,0),
                    "Europe/Minsk": new Date(2011,2,27,3,0,0,0),
                    "Europe/Istanbul": new Date(2011,2,27,7,0,0,0),
                    "Asia/Damascus": new Date(2011,3,1,2,0,0,0),
                    "Asia/Jerusalem": new Date(2011,3,1,6,0,0,0),
                    "Africa/Cairo": new Date(2011,3,29,4,0,0,0),
                    "Asia/Yerevan": new Date(2011,2,27,4,0,0,0),
                    "Asia/Baku": new Date(2011,2,27,8,0,0,0),
                    "Pacific/Auckland": new Date(2011,8,26,7,0,0,0),
                    "Pacific/Fiji": new Date(2010,11,29,23,0,0,0),
                    "America/Halifax": new Date(2011,2,13,6,0,0,0),
                    "America/Goose_Bay": new Date(2011,2,13,2,1,0,0),
                    "America/Miquelon": new Date(2011,2,13,5,0,0,0),
                    "America/Godthab": new Date(2011,2,27,1,0,0,0)
                };
                jzTimezoneDetector.olson.ambiguity_list = {
                    "America/Denver": ["America/Denver", "America/Mazatlan"],
                    "America/Chicago": ["America/Chicago", "America/Mexico_City"],
                    "America/Asuncion": ["Atlantic/Stanley", "America/Asuncion", "America/Santiago", "America/Campo_Grande"],
                    "America/Montevideo": ["America/Montevideo", "America/Sao_Paulo"],
                    "Asia/Beirut": ["Asia/Gaza", "Asia/Beirut", "Europe/Minsk", "Europe/Istanbul", "Asia/Damascus", "Asia/Jerusalem", "Africa/Cairo"],
                    "Asia/Yerevan": ["Asia/Yerevan", "Asia/Baku"],
                    "Pacific/Auckland": ["Pacific/Auckland", "Pacific/Fiji"],
                    "America/Los_Angeles": ["America/Los_Angeles", "America/Santa_Isabel"],
                    "America/New_York": ["America/Havana", "America/New_York"],
                    "America/Halifax": ["America/Goose_Bay", "America/Halifax"],
                    "America/Godthab": ["America/Miquelon", "America/Godthab"]
                };
                return {};
            });
            setCaretPosition = function(ctrl, pos) {
                if (ctrl.setSelectionRange) {
                    ctrl.focus();
                    ctrl.setSelectionRange(pos, pos);
                } else {
                    if (ctrl.createTextRange) {
                        var _b8f = ctrl.createTextRange();
                        _b8f.collapse(true);
                        _b8f.moveEnd("character", pos);
                        _b8f.moveStart("character", pos);
                        _b8f.select();
                    }
                }
            }
            ;
            playerDeviceToIcon = function(_b90) {
                return (_b90 == "desktop") ? "circle" : ((_b90 == "tablet") ? "tablet" : "mobile");
            }
            ;
            replaceAll = function(str, from, to) {
                var _b91 = from.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
                return str.replace(new RegExp(_b91,"g"), to);
            }
            ;
            array_unique = function(a) {
                var seen = {};
                return a.filter(function(item) {
                    return seen.hasOwnProperty(item) ? false : (seen[item] = true);
                });
            }
            ;
            extractDomain = function(url) {
                var _b92;
                if (url.indexOf("://") > -1) {
                    _b92 = url.split("/")[0] + "/" + url.split("/")[1] + "/" + url.split("/")[2];
                } else {
                    _b92 = url.split("/")[0];
                }
                return _b92;
            }
            ;
            cookieConsentInit = function() {
                !function(e) {
                    if (!e.hasInitialised) {
                        var t = {
                            escapeRegExp: function(e) {
                                return e.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
                            },
                            hasClass: function(e, t) {
                                var i = " ";
                                return 1 === e.nodeType && (i + e.className + i).replace(/[\n\t]/g, i).indexOf(i + t + i) >= 0;
                            },
                            addClass: function(e, t) {
                                e.className += " " + t;
                            },
                            removeClass: function(e, t) {
                                var i = new RegExp("\\b" + this.escapeRegExp(t) + "\\b");
                                e.className = e.className.replace(i, "");
                            },
                            interpolateString: function(e, t) {
                                var i = /{{([a-z][a-z0-9\-_]*)}}/gi;
                                return e.replace(i, function(e) {
                                    return t(arguments[1]) || "";
                                });
                            },
                            getCookie: function(e) {
                                var t = "; " + document.cookie
                                  , i = t.split("; " + e + "=");
                                return 2 != i.length ? void 0 : i.pop().split(";").shift();
                            },
                            setCookie: function(e, t, i, n, o) {
                                var s = new Date;
                                s.setDate(s.getDate() + (i || 365));
                                var r = [e + "=" + t, "expires=" + s.toUTCString(), "path=" + (o || "/")];
                                n && r.push("domain=" + n),
                                document.cookie = r.join(";");
                            },
                            deepExtend: function(e, t) {
                                for (var i in t) {
                                    t.hasOwnProperty(i) && (i in e && this.isPlainObject(e[i]) && this.isPlainObject(t[i]) ? this.deepExtend(e[i], t[i]) : e[i] = t[i]);
                                }
                                return e;
                            },
                            throttle: function(e, t) {
                                var i = !1;
                                return function() {
                                    i || (e.apply(this, arguments),
                                    i = !0,
                                    setTimeout(function() {
                                        i = !1;
                                    }, t));
                                }
                                ;
                            },
                            hash: function(e) {
                                var t, i, n, o = 0;
                                if (0 === e.length) {
                                    return o;
                                }
                                for (t = 0,
                                n = e.length; t < n; ++t) {
                                    i = e.charCodeAt(t),
                                    o = (o << 5) - o + i,
                                    o |= 0;
                                }
                                return o;
                            },
                            normaliseHex: function(e) {
                                return "#" == e[0] && (e = e.substr(1)),
                                3 == e.length && (e = e[0] + e[0] + e[1] + e[1] + e[2] + e[2]),
                                e;
                            },
                            getContrast: function(e) {
                                e = this.normaliseHex(e);
                                var t = parseInt(e.substr(0, 2), 16)
                                  , i = parseInt(e.substr(2, 2), 16)
                                  , n = parseInt(e.substr(4, 2), 16)
                                  , o = (299 * t + 587 * i + 114 * n) / 1000;
                                return o >= 128 ? "#000" : "#fff";
                            },
                            getLuminance: function(e) {
                                var t = parseInt(this.normaliseHex(e), 16)
                                  , i = 38
                                  , n = (t >> 16) + i
                                  , o = (t >> 8 & 255) + i
                                  , s = (255 & t) + i
                                  , r = (16777216 + 65536 * (n < 255 ? n < 1 ? 0 : n : 255) + 256 * (o < 255 ? o < 1 ? 0 : o : 255) + (s < 255 ? s < 1 ? 0 : s : 255)).toString(16).slice(1);
                                return "#" + r;
                            },
                            isMobile: function() {
                                return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
                            },
                            isPlainObject: function(e) {
                                return "object" == typeof e && null !== e && e.constructor == Object;
                            }
                        };
                        e.status = {
                            deny: "deny",
                            allow: "allow",
                            dismiss: "dismiss"
                        },
                        e.transitionEnd = function() {
                            var e = document.createElement("div")
                              , t = {
                                t: "transitionend",
                                OT: "oTransitionEnd",
                                msT: "MSTransitionEnd",
                                MozT: "transitionend",
                                WebkitT: "webkitTransitionEnd"
                            };
                            for (var i in t) {
                                if (t.hasOwnProperty(i) && "undefined" != typeof e.style[i + "ransition"]) {
                                    return t[i];
                                }
                            }
                            return "";
                        }(),
                        e.hasTransition = !!e.transitionEnd;
                        var i = Object.keys(e.status).map(t.escapeRegExp);
                        e.customStyles = {},
                        e.Popup = function() {
                            function n() {
                                this.initialise.apply(this, arguments);
                            }
                            ;function o(e) {
                                this.openingTimeout = null,
                                t.removeClass(e, "cc-invisible");
                            }
                            ;function s(t) {
                                t.style.display = "none",
                                t.removeEventListener(e.transitionEnd, this.afterTransition),
                                this.afterTransition = null;
                            }
                            ;function r() {
                                var t = this.options.onInitialise.bind(this);
                                if (!window.navigator.cookieEnabled) {
                                    return t(e.status.deny),
                                    !0;
                                }
                                if (window.CookiesOK || window.navigator.CookiesOK) {
                                    return t(e.status.allow),
                                    !0;
                                }
                                var i = Object.keys(e.status)
                                  , n = this.getStatus()
                                  , o = i.indexOf(n) >= 0;
                                return o && t(n),
                                o;
                            }
                            ;function a() {
                                var e = this.options.position.split("-")
                                  , t = [];
                                return e.forEach(function(e) {
                                    t.push("cc-" + e);
                                }),
                                t;
                            }
                            ;function c() {
                                var e = this.options
                                  , i = "top" == e.position || "bottom" == e.position ? "banner" : "floating";
                                t.isMobile() && (i = "floating");
                                var n = ["cc-" + i, "cc-type-" + e.type, "cc-theme-" + e.theme];
                                e["static"] && n.push("cc-static"),
                                n.push.apply(n, a.call(this));
                                p.call(this, this.options.palette);
                                return this.customStyleSelector && n.push(this.customStyleSelector),
                                n;
                            }
                            ;function l() {
                                var e = {}
                                  , i = this.options;
                                i.showLink || (i.elements.link = "",
                                i.elements.messagelink = i.elements.message),
                                Object.keys(i.elements).forEach(function(n) {
                                    e[n] = t.interpolateString(i.elements[n], function(e) {
                                        var t = i.content[e];
                                        return e && "string" == typeof t && t.length ? t : "";
                                    });
                                });
                                var n = i.compliance[i.type];
                                n || (n = i.compliance.info),
                                e.compliance = t.interpolateString(n, function(t) {
                                    return e[t];
                                });
                                var o = i.layouts[i.layout];
                                return o || (o = i.layouts.basic),
                                t.interpolateString(o, function(t) {
                                    return e[t];
                                });
                            }
                            ;function u(i) {
                                var n = this.options
                                  , o = document.createElement("div")
                                  , s = n.container && 1 === n.container.nodeType ? n.container : document.body;
                                o.innerHTML = i;
                                var r = o.children[0];
                                return r.style.display = "none",
                                t.hasClass(r, "cc-window") && e.hasTransition && t.addClass(r, "cc-invisible"),
                                this.onButtonClick = h.bind(this),
                                r.addEventListener("click", this.onButtonClick),
                                n.autoAttach && (s.firstChild ? s.insertBefore(r, s.firstChild) : s.appendChild(r)),
                                r;
                            }
                            ;function h(n) {
                                var o = n.target;
                                if (t.hasClass(o, "cc-btn")) {
                                    var s = o.className.match(new RegExp("\\bcc-(" + i.join("|") + ")\\b"))
                                      , r = s && s[1] || !1;
                                    r && (this.setStatus(r),
                                    this.close(!0));
                                }
                                t.hasClass(o, "cc-close") && (this.setStatus(e.status.dismiss),
                                this.close(!0)),
                                t.hasClass(o, "cc-revoke") && this.revokeChoice();
                            }
                            ;function p(e) {
                                var i = t.hash(JSON.stringify(e))
                                  , n = "cc-color-override-" + i
                                  , o = t.isPlainObject(e);
                                return this.customStyleSelector = o ? n : null,
                                o && d(i, e, "." + n),
                                o;
                            }
                            ;function d(i, n, o) {
                                if (e.customStyles[i]) {
                                    return void ++e.customStyles[i].references;
                                }
                                var s = {}
                                  , r = n.popup
                                  , a = n.button
                                  , c = n.highlight;
                                r && (r.text = r.text ? r.text : t.getContrast(r.background),
                                r.link = r.link ? r.link : r.text,
                                s[o + ".cc-window"] = ["color: " + r.text, "background-color: " + r.background],
                                s[o + ".cc-revoke"] = ["color: " + r.text, "background-color: " + r.background],
                                s[o + " .cc-link," + o + " .cc-link:active," + o + " .cc-link:visited"] = ["color: " + r.link],
                                a && (a.text = a.text ? a.text : t.getContrast(a.background),
                                a.border = a.border ? a.border : "transparent",
                                s[o + " .cc-btn"] = ["color: " + a.text, "border-color: " + a.border, "background-color: " + a.background],
                                "transparent" != a.background && (s[o + " .cc-btn:hover, " + o + " .cc-btn:focus"] = ["background-color: " + v(a.background)]),
                                c ? (c.text = c.text ? c.text : t.getContrast(c.background),
                                c.border = c.border ? c.border : "transparent",
                                s[o + " .cc-highlight .cc-btn:first-child"] = ["color: " + c.text, "border-color: " + c.border, "background-color: " + c.background]) : s[o + " .cc-highlight .cc-btn:first-child"] = ["color: " + r.text]));
                                var l = document.createElement("style");
                                document.head.appendChild(l),
                                e.customStyles[i] = {
                                    references: 1,
                                    element: l.sheet
                                };
                                var u = -1;
                                for (var h in s) {
                                    s.hasOwnProperty(h) && l.sheet.insertRule(h + "{" + s[h].join(";") + "}", ++u);
                                }
                            }
                            ;function v(e) {
                                return e = t.normaliseHex(e),
                                "000000" == e ? "#222" : t.getLuminance(e);
                            }
                            ;function f(i) {
                                if (t.isPlainObject(i)) {
                                    var n = t.hash(JSON.stringify(i))
                                      , o = e.customStyles[n];
                                    if (o && !--o.references) {
                                        var s = o.element.ownerNode;
                                        s && s.parentNode && s.parentNode.removeChild(s),
                                        e.customStyles[n] = null;
                                    }
                                }
                            }
                            ;function m(e, t) {
                                for (var i = 0, n = e.length; i < n; ++i) {
                                    var o = e[i];
                                    if (o instanceof RegExp && o.test(t) || "string" == typeof o && o.length && o === t) {
                                        return !0;
                                    }
                                }
                                return !1;
                            }
                            ;function b() {
                                var t = this.setStatus.bind(this)
                                  , i = this.options.dismissOnTimeout;
                                "number" == typeof i && i >= 0 && (this.dismissTimeout = window.setTimeout(function() {
                                    t(e.status.dismiss);
                                }, Math.floor(i)));
                                var n = this.options.dismissOnScroll;
                                if ("number" == typeof n && n >= 0) {
                                    var o = function(i) {
                                        window.pageYOffset > Math.floor(n) && (t(e.status.dismiss),
                                        window.removeEventListener("scroll", o),
                                        this.onWindowScroll = null);
                                    };
                                    this.onWindowScroll = o,
                                    window.addEventListener("scroll", o);
                                }
                            }
                            ;function y() {
                                if ("info" != this.options.type && (this.options.revokable = !0),
                                t.isMobile() && (this.options.animateRevokable = !1),
                                this.options.revokable) {
                                    var e = a.call(this);
                                    this.options.animateRevokable && e.push("cc-animate"),
                                    this.customStyleSelector && e.push(this.customStyleSelector);
                                    var i = this.options.revokeBtn.replace("{{classes}}", e.join(" "));
                                    this.revokeBtn = u.call(this, i);
                                    var n = this.revokeBtn;
                                    if (this.options.animateRevokable) {
                                        var o = t.throttle(function(e) {
                                            var i = !1
                                              , o = 20
                                              , s = window.innerHeight - 20;
                                            t.hasClass(n, "cc-top") && e.clientY < o && (i = !0),
                                            t.hasClass(n, "cc-bottom") && e.clientY > s && (i = !0),
                                            i ? t.hasClass(n, "cc-active") || t.addClass(n, "cc-active") : t.hasClass(n, "cc-active") && t.removeClass(n, "cc-active");
                                        }, 200);
                                        this.onMouseMove = o,
                                        window.addEventListener("mousemove", o);
                                    }
                                }
                            }
                            ;var g = {
                                enabled: !0,
                                container: null,
                                cookie: {
                                    name: "cookieconsent_status",
                                    path: "/",
                                    domain: "",
                                    expiryDays: 365
                                },
                                onPopupOpen: function() {},
                                onPopupClose: function() {},
                                onInitialise: function(e) {},
                                onStatusChange: function(e, t) {},
                                onRevokeChoice: function() {},
                                content: {
                                    header: "Cookies used on the website!",
                                    message: "This website uses cookies to ensure you get the best experience on our website.",
                                    dismiss: "Got it!",
                                    allow: "Allow cookies",
                                    deny: "Decline",
                                    link: "Learn more",
                                    href: "http://cookiesandyou.com",
                                    close: "&#x274c;"
                                },
                                elements: {
                                    header: "<span class=\"cc-header\">{{header}}</span>&nbsp;",
                                    message: "<span id=\"cookieconsent:desc\" class=\"cc-message\">{{message}}</span>",
                                    messagelink: "<span id=\"cookieconsent:desc\" class=\"cc-message\">{{message}} <a aria-label=\"learn more about cookies\" role=button tabindex=\"0\" class=\"cc-link\" href=\"{{href}}\" target=\"_blank\">{{link}}</a></span>",
                                    dismiss: "<a aria-label=\"dismiss cookie message\" role=button tabindex=\"0\" class=\"cc-btn cc-dismiss\">{{dismiss}}</a>",
                                    allow: "<a aria-label=\"allow cookies\" role=button tabindex=\"0\"  class=\"cc-btn cc-allow\">{{allow}}</a>",
                                    deny: "<a aria-label=\"deny cookies\" role=button tabindex=\"0\" class=\"cc-btn cc-deny\">{{deny}}</a>",
                                    link: "<a aria-label=\"learn more about cookies\" role=button tabindex=\"0\" class=\"cc-link\" href=\"{{href}}\" target=\"_blank\">{{link}}</a>",
                                    close: "<span aria-label=\"dismiss cookie message\" role=button tabindex=\"0\" class=\"cc-close\">{{close}}</span>"
                                },
                                window: "<div role=\"dialog\" aria-live=\"polite\" aria-label=\"cookieconsent\" aria-describedby=\"cookieconsent:desc\" class=\"cc-window {{classes}}\"><!--googleoff: all-->{{children}}<!--googleon: all--></div>",
                                revokeBtn: "<div class=\"cc-revoke {{classes}}\">Cookie Policy</div>",
                                compliance: {
                                    info: "<div class=\"cc-compliance\">{{dismiss}}</div>",
                                    "opt-in": "<div class=\"cc-compliance cc-highlight\">{{dismiss}}{{allow}}</div>",
                                    "opt-out": "<div class=\"cc-compliance cc-highlight\">{{deny}}{{dismiss}}</div>"
                                },
                                type: "info",
                                layouts: {
                                    basic: "{{messagelink}}{{compliance}}",
                                    "basic-close": "{{messagelink}}{{compliance}}{{close}}",
                                    "basic-header": "{{header}}{{message}}{{link}}{{compliance}}"
                                },
                                layout: "basic",
                                position: "bottom",
                                theme: "block",
                                "static": !1,
                                palette: null,
                                revokable: !1,
                                animateRevokable: !0,
                                showLink: !0,
                                dismissOnScroll: !1,
                                dismissOnTimeout: !1,
                                autoOpen: !0,
                                autoAttach: !0,
                                whitelistPage: [],
                                blacklistPage: [],
                                overrideHTML: null
                            };
                            return n.prototype.initialise = function(e) {
                                this.options && this.destroy(),
                                t.deepExtend(this.options = {}, g),
                                t.isPlainObject(e) && t.deepExtend(this.options, e),
                                r.call(this) && (this.options.enabled = !1),
                                m(this.options.blacklistPage, location.pathname) && (this.options.enabled = !1),
                                m(this.options.whitelistPage, location.pathname) && (this.options.enabled = !0);
                                var i = this.options.window.replace("{{classes}}", c.call(this).join(" ")).replace("{{children}}", l.call(this))
                                  , n = this.options.overrideHTML;
                                if ("string" == typeof n && n.length && (i = n),
                                this.options["static"]) {
                                    var o = u.call(this, "<div class=\"cc-grower\">" + i + "</div>");
                                    o.style.display = "",
                                    this.element = o.firstChild,
                                    this.element.style.display = "none",
                                    t.addClass(this.element, "cc-invisible");
                                } else {
                                    this.element = u.call(this, i);
                                }
                                b.call(this),
                                y.call(this),
                                this.options.autoOpen && this.autoOpen();
                            }
                            ,
                            n.prototype.destroy = function() {
                                this.onButtonClick && this.element && (this.element.removeEventListener("click", this.onButtonClick),
                                this.onButtonClick = null),
                                this.dismissTimeout && (clearTimeout(this.dismissTimeout),
                                this.dismissTimeout = null),
                                this.onWindowScroll && (window.removeEventListener("scroll", this.onWindowScroll),
                                this.onWindowScroll = null),
                                this.onMouseMove && (window.removeEventListener("mousemove", this.onMouseMove),
                                this.onMouseMove = null),
                                this.element && this.element.parentNode && this.element.parentNode.removeChild(this.element),
                                this.element = null,
                                this.revokeBtn && this.revokeBtn.parentNode && this.revokeBtn.parentNode.removeChild(this.revokeBtn),
                                this.revokeBtn = null,
                                f(this.options.palette),
                                this.options = null;
                            }
                            ,
                            n.prototype.open = function(t) {
                                if (this.element) {
                                    return this.isOpen() || (e.hasTransition ? this.fadeIn() : this.element.style.display = "",
                                    this.options.revokable && this.toggleRevokeButton(),
                                    this.options.onPopupOpen.call(this)),
                                    this;
                                }
                            }
                            ,
                            n.prototype.close = function(t) {
                                if (this.element) {
                                    return this.isOpen() && (e.hasTransition ? this.fadeOut() : this.element.style.display = "none",
                                    t && this.options.revokable && this.toggleRevokeButton(!0),
                                    this.options.onPopupClose.call(this)),
                                    this;
                                }
                            }
                            ,
                            n.prototype.fadeIn = function() {
                                var i = this.element;
                                if (e.hasTransition && i && (this.afterTransition && s.call(this, i),
                                t.hasClass(i, "cc-invisible"))) {
                                    if (i.style.display = "",
                                    this.options["static"]) {
                                        var n = this.element.clientHeight;
                                        this.element.parentNode.style.maxHeight = n + "px";
                                    }
                                    var r = 20;
                                    this.openingTimeout = setTimeout(o.bind(this, i), r);
                                }
                            }
                            ,
                            n.prototype.fadeOut = function() {
                                var i = this.element;
                                e.hasTransition && i && (this.openingTimeout && (clearTimeout(this.openingTimeout),
                                o.bind(this, i)),
                                t.hasClass(i, "cc-invisible") || (this.options["static"] && (this.element.parentNode.style.maxHeight = ""),
                                this.afterTransition = s.bind(this, i),
                                i.addEventListener(e.transitionEnd, this.afterTransition),
                                t.addClass(i, "cc-invisible")));
                            }
                            ,
                            n.prototype.isOpen = function() {
                                return this.element && "" == this.element.style.display && (!e.hasTransition || !t.hasClass(this.element, "cc-invisible"));
                            }
                            ,
                            n.prototype.toggleRevokeButton = function(e) {
                                this.revokeBtn && (this.revokeBtn.style.display = e ? "" : "none");
                            }
                            ,
                            n.prototype.revokeChoice = function(e) {
                                this.options.enabled = !0,
                                this.clearStatus(),
                                this.options.onRevokeChoice.call(this),
                                e || this.autoOpen();
                            }
                            ,
                            n.prototype.hasAnswered = function(t) {
                                return Object.keys(e.status).indexOf(this.getStatus()) >= 0;
                            }
                            ,
                            n.prototype.hasConsented = function(t) {
                                var i = this.getStatus();
                                return i == e.status.allow || i == e.status.dismiss;
                            }
                            ,
                            n.prototype.autoOpen = function(e) {
                                !this.hasAnswered() && this.options.enabled && this.open();
                            }
                            ,
                            n.prototype.setStatus = function(i) {
                                var n = this.options.cookie
                                  , o = t.getCookie(n.name)
                                  , s = Object.keys(e.status).indexOf(o) >= 0;
                                Object.keys(e.status).indexOf(i) >= 0 ? (t.setCookie(n.name, i, n.expiryDays, n.domain, n.path),
                                this.options.onStatusChange.call(this, i, s)) : this.clearStatus();
                            }
                            ,
                            n.prototype.getStatus = function() {
                                return t.getCookie(this.options.cookie.name);
                            }
                            ,
                            n.prototype.clearStatus = function() {
                                var e = this.options.cookie;
                                t.setCookie(e.name, "", -1, e.domain, e.path);
                            }
                            ,
                            n;
                        }(),
                        e.Location = function() {
                            function e(e) {
                                t.deepExtend(this.options = {}, s),
                                t.isPlainObject(e) && t.deepExtend(this.options, e),
                                this.currentServiceIndex = -1;
                            }
                            ;function i(e, t, i) {
                                var n, o = document.createElement("script");
                                o.type = "text/" + (e.type || "javascript"),
                                o.src = e.src || e,
                                o.async = !1,
                                o.onreadystatechange = o.onload = function() {
                                    var e = o.readyState;
                                    clearTimeout(n),
                                    t.done || e && !/loaded|complete/.test(e) || (t.done = !0,
                                    t(),
                                    o.onreadystatechange = o.onload = null);
                                }
                                ,
                                document.body.appendChild(o),
                                n = setTimeout(function() {
                                    t.done = !0,
                                    t(),
                                    o.onreadystatechange = o.onload = null;
                                }, i);
                            }
                            ;function n(e, t, i, n, o) {
                                var s = new (window.XMLHttpRequest || window.ActiveXObject)("MSXML2.XMLHTTP.3.0");
                                if (s.open(n ? "POST" : "GET", e, 1),
                                s.setRequestHeader("X-Requested-With", "XMLHttpRequest"),
                                s.setRequestHeader("Content-type", "application/x-www-form-urlencoded"),
                                Array.isArray(o)) {
                                    for (var r = 0, a = o.length; r < a; ++r) {
                                        var c = o[r].split(":", 2);
                                        s.setRequestHeader(c[0].replace(/^\s+|\s+$/g, ""), c[1].replace(/^\s+|\s+$/g, ""));
                                    }
                                }
                                "function" == typeof t && (s.onreadystatechange = function() {
                                    s.readyState > 3 && t(s);
                                }
                                ),
                                s.send(n);
                            }
                            ;function o(e) {
                                return new Error("Error [" + (e.code || "UNKNOWN") + "]: " + e.error);
                            }
                            ;var s = {
                                timeout: 5000,
                                services: ["freegeoip", "ipinfo", "maxmind"],
                                serviceDefinitions: {
                                    freegeoip: function() {
                                        return {
                                            url: "//freegeoip.net/json/?callback={callback}",
                                            isScript: !0,
                                            callback: function(e, t) {
                                                try {
                                                    var i = JSON.parse(t);
                                                    return i.error ? o(i) : {
                                                        code: i.country_code
                                                    };
                                                } catch (n) {
                                                    return o({
                                                        error: "Invalid response (" + n + ")"
                                                    });
                                                }
                                            }
                                        };
                                    },
                                    ipinfo: function() {
                                        return {
                                            url: "//ipinfo.io",
                                            headers: ["Accept: application/json"],
                                            callback: function(e, t) {
                                                try {
                                                    var i = JSON.parse(t);
                                                    return i.error ? o(i) : {
                                                        code: i.country
                                                    };
                                                } catch (n) {
                                                    return o({
                                                        error: "Invalid response (" + n + ")"
                                                    });
                                                }
                                            }
                                        };
                                    },
                                    ipinfodb: function(e) {
                                        return {
                                            url: "//api.ipinfodb.com/v3/ip-country/?key={api_key}&format=json&callback={callback}",
                                            isScript: !0,
                                            callback: function(e, t) {
                                                try {
                                                    var i = JSON.parse(t);
                                                    return "ERROR" == i.statusCode ? o({
                                                        error: i.statusMessage
                                                    }) : {
                                                        code: i.countryCode
                                                    };
                                                } catch (n) {
                                                    return o({
                                                        error: "Invalid response (" + n + ")"
                                                    });
                                                }
                                            }
                                        };
                                    },
                                    maxmind: function() {
                                        return {
                                            url: "//js.maxmind.com/js/apis/geoip2/v2.1/geoip2.js",
                                            isScript: !0,
                                            callback: function(e) {
                                                return window.geoip2 ? void geoip2.country(function(t) {
                                                    try {
                                                        e({
                                                            code: t.country.iso_code
                                                        });
                                                    } catch (i) {
                                                        e(o(i));
                                                    }
                                                }, function(t) {
                                                    e(o(t));
                                                }) : void e(new Error("Unexpected response format. The downloaded script should have exported `geoip2` to the global scope"));
                                            }
                                        };
                                    }
                                }
                            };
                            return e.prototype.getNextService = function() {
                                var e;
                                do {
                                    e = this.getServiceByIdx(++this.currentServiceIndex);
                                } while (this.currentServiceIndex < this.options.services.length && !e);return e;
                            }
                            ,
                            e.prototype.getServiceByIdx = function(e) {
                                var i = this.options.services[e];
                                if ("function" == typeof i) {
                                    var n = i();
                                    return n.name && t.deepExtend(n, this.options.serviceDefinitions[n.name](n)),
                                    n;
                                }
                                return "string" == typeof i ? this.options.serviceDefinitions[i]() : t.isPlainObject(i) ? this.options.serviceDefinitions[i.name](i) : null;
                            }
                            ,
                            e.prototype.locate = function(e, t) {
                                var i = this.getNextService();
                                return i ? (this.callbackComplete = e,
                                this.callbackError = t,
                                void this.runService(i, this.runNextServiceOnError.bind(this))) : void t(new Error("No services to run"));
                            }
                            ,
                            e.prototype.setupUrl = function(e) {
                                var t = this.getCurrentServiceOpts();
                                return e.url.replace(/\{(.*?)\}/g, function(i, n) {
                                    if ("callback" === n) {
                                        var o = "callback" + Date.now();
                                        return window[o] = function(t) {
                                            e.__JSONP_DATA = JSON.stringify(t);
                                        }
                                        ,
                                        o;
                                    }
                                    if (n in t.interpolateUrl) {
                                        return t.interpolateUrl[n];
                                    }
                                });
                            }
                            ,
                            e.prototype.runService = function(e, t) {
                                var o = this;
                                if (e && e.url && e.callback) {
                                    var s = e.isScript ? i : n
                                      , r = this.setupUrl(e);
                                    s(r, function(i) {
                                        var n = i ? i.responseText : "";
                                        e.__JSONP_DATA && (n = e.__JSONP_DATA,
                                        delete e.__JSONP_DATA),
                                        o.runServiceCallback.call(o, t, e, n);
                                    }, this.options.timeout, e.data, e.headers);
                                }
                            }
                            ,
                            e.prototype.runServiceCallback = function(e, t, i) {
                                var n = this
                                  , o = function(t) {
                                    s || n.onServiceResult.call(n, e, t);
                                }
                                  , s = t.callback(o, i);
                                s && this.onServiceResult.call(this, e, s);
                            }
                            ,
                            e.prototype.onServiceResult = function(e, t) {
                                t instanceof Error || t && t.error ? e.call(this, t, null) : e.call(this, null, t);
                            }
                            ,
                            e.prototype.runNextServiceOnError = function(e, t) {
                                if (e) {
                                    this.logError(e);
                                    var i = this.getNextService();
                                    i ? this.runService(i, this.runNextServiceOnError.bind(this)) : this.completeService.call(this, this.callbackError, new Error("All services failed"));
                                } else {
                                    this.completeService.call(this, this.callbackComplete, t);
                                }
                            }
                            ,
                            e.prototype.getCurrentServiceOpts = function() {
                                var e = this.options.services[this.currentServiceIndex];
                                return "string" == typeof e ? {
                                    name: e
                                } : "function" == typeof e ? e() : t.isPlainObject(e) ? e : {};
                            }
                            ,
                            e.prototype.completeService = function(e, t) {
                                this.currentServiceIndex = -1,
                                e && e(t);
                            }
                            ,
                            e.prototype.logError = function(e) {
                                var t = this.currentServiceIndex
                                  , i = this.getServiceByIdx(t);
                                console.error("The service[" + t + "] (" + i.url + ") responded with the following error", e);
                            }
                            ,
                            e;
                        }(),
                        e.Law = function() {
                            function e(e) {
                                this.initialise.apply(this, arguments);
                            }
                            ;var i = {
                                regionalLaw: !0,
                                hasLaw: ["AT", "BE", "BG", "HR", "CZ", "CY", "DK", "EE", "FI", "FR", "DE", "EL", "HU", "IE", "IT", "LV", "LT", "LU", "MT", "NL", "PL", "PT", "SK", "SI", "ES", "SE", "GB", "UK"],
                                revokable: ["HR", "CY", "DK", "EE", "FR", "DE", "LV", "LT", "NL", "PT", "ES"],
                                explicitAction: ["HR", "IT", "ES"]
                            };
                            return e.prototype.initialise = function(e) {
                                t.deepExtend(this.options = {}, i),
                                t.isPlainObject(e) && t.deepExtend(this.options, e);
                            }
                            ,
                            e.prototype.get = function(e) {
                                var t = this.options;
                                return {
                                    hasLaw: t.hasLaw.indexOf(e) >= 0,
                                    revokable: t.revokable.indexOf(e) >= 0,
                                    explicitAction: t.explicitAction.indexOf(e) >= 0
                                };
                            }
                            ,
                            e.prototype.applyLaw = function(e, t) {
                                var i = this.get(t);
                                return i.hasLaw || (e.enabled = !1),
                                this.options.regionalLaw && (i.revokable && (e.revokable = !0),
                                i.explicitAction && (e.dismissOnScroll = !1,
                                e.dismissOnTimeout = !1)),
                                e;
                            }
                            ,
                            e;
                        }(),
                        e.initialise = function(t, i, n) {
                            var o = new e.Law(t.law);
                            i || (i = function() {}
                            ),
                            n || (n = function() {}
                            ),
                            e.getCountryCode(t, function(n) {
                                delete t.law,
                                delete t.location,
                                n.code && (t = o.applyLaw(t, n.code)),
                                i(new e.Popup(t));
                            }, function(i) {
                                delete t.law,
                                delete t.location,
                                n(i, new e.Popup(t));
                            });
                        }
                        ,
                        e.getCountryCode = function(t, i, n) {
                            if (t.law && t.law.countryCode) {
                                return void i({
                                    code: t.law.countryCode
                                });
                            }
                            if (t.location) {
                                var o = new e.Location(t.location);
                                return void o.locate(function(e) {
                                    i(e || {});
                                }, n);
                            }
                            i({});
                        }
                        ,
                        e.utils = t,
                        e.hasInitialised = !0,
                        window.cookieconsent = e;
                    }
                }(window.cookieconsent || {});
            }
            ;
            removeAccents = function(str) {
                var _b93 = [{
                    "base": "A",
                    "letters": /[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g
                }, {
                    "base": "AA",
                    "letters": /[\uA732]/g
                }, {
                    "base": "AE",
                    "letters": /[\u00C6\u01FC\u01E2]/g
                }, {
                    "base": "AO",
                    "letters": /[\uA734]/g
                }, {
                    "base": "AU",
                    "letters": /[\uA736]/g
                }, {
                    "base": "AV",
                    "letters": /[\uA738\uA73A]/g
                }, {
                    "base": "AY",
                    "letters": /[\uA73C]/g
                }, {
                    "base": "B",
                    "letters": /[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g
                }, {
                    "base": "C",
                    "letters": /[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g
                }, {
                    "base": "D",
                    "letters": /[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g
                }, {
                    "base": "DZ",
                    "letters": /[\u01F1\u01C4]/g
                }, {
                    "base": "Dz",
                    "letters": /[\u01F2\u01C5]/g
                }, {
                    "base": "E",
                    "letters": /[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g
                }, {
                    "base": "F",
                    "letters": /[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g
                }, {
                    "base": "G",
                    "letters": /[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g
                }, {
                    "base": "H",
                    "letters": /[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g
                }, {
                    "base": "I",
                    "letters": /[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g
                }, {
                    "base": "J",
                    "letters": /[\u004A\u24BF\uFF2A\u0134\u0248]/g
                }, {
                    "base": "K",
                    "letters": /[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g
                }, {
                    "base": "L",
                    "letters": /[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g
                }, {
                    "base": "LJ",
                    "letters": /[\u01C7]/g
                }, {
                    "base": "Lj",
                    "letters": /[\u01C8]/g
                }, {
                    "base": "M",
                    "letters": /[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g
                }, {
                    "base": "N",
                    "letters": /[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g
                }, {
                    "base": "NJ",
                    "letters": /[\u01CA]/g
                }, {
                    "base": "Nj",
                    "letters": /[\u01CB]/g
                }, {
                    "base": "O",
                    "letters": /[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g
                }, {
                    "base": "OI",
                    "letters": /[\u01A2]/g
                }, {
                    "base": "OO",
                    "letters": /[\uA74E]/g
                }, {
                    "base": "OU",
                    "letters": /[\u0222]/g
                }, {
                    "base": "P",
                    "letters": /[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g
                }, {
                    "base": "Q",
                    "letters": /[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g
                }, {
                    "base": "R",
                    "letters": /[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g
                }, {
                    "base": "S",
                    "letters": /[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g
                }, {
                    "base": "T",
                    "letters": /[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g
                }, {
                    "base": "TZ",
                    "letters": /[\uA728]/g
                }, {
                    "base": "U",
                    "letters": /[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g
                }, {
                    "base": "V",
                    "letters": /[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g
                }, {
                    "base": "VY",
                    "letters": /[\uA760]/g
                }, {
                    "base": "W",
                    "letters": /[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g
                }, {
                    "base": "X",
                    "letters": /[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g
                }, {
                    "base": "Y",
                    "letters": /[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g
                }, {
                    "base": "Z",
                    "letters": /[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g
                }, {
                    "base": "a",
                    "letters": /[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g
                }, {
                    "base": "aa",
                    "letters": /[\uA733]/g
                }, {
                    "base": "ae",
                    "letters": /[\u00E6\u01FD\u01E3]/g
                }, {
                    "base": "ao",
                    "letters": /[\uA735]/g
                }, {
                    "base": "au",
                    "letters": /[\uA737]/g
                }, {
                    "base": "av",
                    "letters": /[\uA739\uA73B]/g
                }, {
                    "base": "ay",
                    "letters": /[\uA73D]/g
                }, {
                    "base": "b",
                    "letters": /[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g
                }, {
                    "base": "c",
                    "letters": /[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g
                }, {
                    "base": "d",
                    "letters": /[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g
                }, {
                    "base": "dz",
                    "letters": /[\u01F3\u01C6]/g
                }, {
                    "base": "e",
                    "letters": /[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g
                }, {
                    "base": "f",
                    "letters": /[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g
                }, {
                    "base": "g",
                    "letters": /[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g
                }, {
                    "base": "h",
                    "letters": /[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g
                }, {
                    "base": "hv",
                    "letters": /[\u0195]/g
                }, {
                    "base": "i",
                    "letters": /[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g
                }, {
                    "base": "j",
                    "letters": /[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g
                }, {
                    "base": "k",
                    "letters": /[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g
                }, {
                    "base": "l",
                    "letters": /[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g
                }, {
                    "base": "lj",
                    "letters": /[\u01C9]/g
                }, {
                    "base": "m",
                    "letters": /[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g
                }, {
                    "base": "n",
                    "letters": /[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g
                }, {
                    "base": "nj",
                    "letters": /[\u01CC]/g
                }, {
                    "base": "o",
                    "letters": /[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g
                }, {
                    "base": "oi",
                    "letters": /[\u01A3]/g
                }, {
                    "base": "ou",
                    "letters": /[\u0223]/g
                }, {
                    "base": "oo",
                    "letters": /[\uA74F]/g
                }, {
                    "base": "p",
                    "letters": /[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g
                }, {
                    "base": "q",
                    "letters": /[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g
                }, {
                    "base": "r",
                    "letters": /[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g
                }, {
                    "base": "s",
                    "letters": /[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g
                }, {
                    "base": "t",
                    "letters": /[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g
                }, {
                    "base": "tz",
                    "letters": /[\uA729]/g
                }, {
                    "base": "u",
                    "letters": /[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g
                }, {
                    "base": "v",
                    "letters": /[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g
                }, {
                    "base": "vy",
                    "letters": /[\uA761]/g
                }, {
                    "base": "w",
                    "letters": /[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g
                }, {
                    "base": "x",
                    "letters": /[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g
                }, {
                    "base": "y",
                    "letters": /[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g
                }, {
                    "base": "z",
                    "letters": /[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g
                }];
                for (var i = 0; i < _b93.length; i++) {
                    str = str.replace(_b93[i].letters, _b93[i].base);
                }
                return str;
            }
            ;
        },
        "dojo/date": function() {
            define(["./has", "./_base/lang"], function(has, lang) {
                var date = {};
                date.getDaysInMonth = function(_b94) {
                    var _b95 = _b94.getMonth();
                    var days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
                    if (_b95 == 1 && date.isLeapYear(_b94)) {
                        return 29;
                    }
                    return days[_b95];
                }
                ;
                date.isLeapYear = function(_b96) {
                    var year = _b96.getFullYear();
                    return !(year % 400) || (!(year % 4) && !!(year % 100));
                }
                ;
                date.getTimezoneName = function(_b97) {
                    var str = _b97.toString();
                    var tz = "";
                    var _b98;
                    var pos = str.indexOf("(");
                    if (pos > -1) {
                        tz = str.substring(++pos, str.indexOf(")"));
                    } else {
                        var pat = /([A-Z\/]+) \d{4}$/;
                        if ((_b98 = str.match(pat))) {
                            tz = _b98[1];
                        } else {
                            str = _b97.toLocaleString();
                            pat = / ([A-Z\/]+)$/;
                            if ((_b98 = str.match(pat))) {
                                tz = _b98[1];
                            }
                        }
                    }
                    return (tz == "AM" || tz == "PM") ? "" : tz;
                }
                ;
                date.compare = function(_b99, _b9a, _b9b) {
                    _b99 = new Date(+_b99);
                    _b9a = new Date(+(_b9a || new Date()));
                    if (_b9b == "date") {
                        _b99.setHours(0, 0, 0, 0);
                        _b9a.setHours(0, 0, 0, 0);
                    } else {
                        if (_b9b == "time") {
                            _b99.setFullYear(0, 0, 0);
                            _b9a.setFullYear(0, 0, 0);
                        }
                    }
                    if (_b99 > _b9a) {
                        return 1;
                    }
                    if (_b99 < _b9a) {
                        return -1;
                    }
                    return 0;
                }
                ;
                date.add = function(date, _b9c, _b9d) {
                    var sum = new Date(+date);
                    var _b9e = false;
                    var _b9f = "Date";
                    switch (_b9c) {
                    case "day":
                        break;
                    case "weekday":
                        var days, _ba0;
                        var mod = _b9d % 5;
                        if (!mod) {
                            days = (_b9d > 0) ? 5 : -5;
                            _ba0 = (_b9d > 0) ? ((_b9d - 5) / 5) : ((_b9d + 5) / 5);
                        } else {
                            days = mod;
                            _ba0 = parseInt(_b9d / 5);
                        }
                        var strt = date.getDay();
                        var adj = 0;
                        if (strt == 6 && _b9d > 0) {
                            adj = 1;
                        } else {
                            if (strt == 0 && _b9d < 0) {
                                adj = -1;
                            }
                        }
                        var trgt = strt + days;
                        if (trgt == 0 || trgt == 6) {
                            adj = (_b9d > 0) ? 2 : -2;
                        }
                        _b9d = (7 * _ba0) + days + adj;
                        break;
                    case "year":
                        _b9f = "FullYear";
                        _b9e = true;
                        break;
                    case "week":
                        _b9d *= 7;
                        break;
                    case "quarter":
                        _b9d *= 3;
                    case "month":
                        _b9e = true;
                        _b9f = "Month";
                        break;
                    default:
                        _b9f = "UTC" + _b9c.charAt(0).toUpperCase() + _b9c.substring(1) + "s";
                    }
                    if (_b9f) {
                        sum["set" + _b9f](sum["get" + _b9f]() + _b9d);
                    }
                    if (_b9e && (sum.getDate() < date.getDate())) {
                        sum.setDate(0);
                    }
                    return sum;
                }
                ;
                date.difference = function(_ba1, _ba2, _ba3) {
                    _ba2 = _ba2 || new Date();
                    _ba3 = _ba3 || "day";
                    var _ba4 = _ba2.getFullYear() - _ba1.getFullYear();
                    var _ba5 = 1;
                    switch (_ba3) {
                    case "quarter":
                        var m1 = _ba1.getMonth();
                        var m2 = _ba2.getMonth();
                        var q1 = Math.floor(m1 / 3) + 1;
                        var q2 = Math.floor(m2 / 3) + 1;
                        q2 += (_ba4 * 4);
                        _ba5 = q2 - q1;
                        break;
                    case "weekday":
                        var days = Math.round(date.difference(_ba1, _ba2, "day"));
                        var _ba6 = parseInt(date.difference(_ba1, _ba2, "week"));
                        var mod = days % 7;
                        if (mod == 0) {
                            days = _ba6 * 5;
                        } else {
                            var adj = 0;
                            var aDay = _ba1.getDay();
                            var bDay = _ba2.getDay();
                            _ba6 = parseInt(days / 7);
                            mod = days % 7;
                            var _ba7 = new Date(_ba1);
                            _ba7.setDate(_ba7.getDate() + (_ba6 * 7));
                            var _ba8 = _ba7.getDay();
                            if (days > 0) {
                                switch (true) {
                                case aDay == 6:
                                    adj = -1;
                                    break;
                                case aDay == 0:
                                    adj = 0;
                                    break;
                                case bDay == 6:
                                    adj = -1;
                                    break;
                                case bDay == 0:
                                    adj = -2;
                                    break;
                                case (_ba8 + mod) > 5:
                                    adj = -2;
                                }
                            } else {
                                if (days < 0) {
                                    switch (true) {
                                    case aDay == 6:
                                        adj = 0;
                                        break;
                                    case aDay == 0:
                                        adj = 1;
                                        break;
                                    case bDay == 6:
                                        adj = 2;
                                        break;
                                    case bDay == 0:
                                        adj = 1;
                                        break;
                                    case (_ba8 + mod) < 0:
                                        adj = 2;
                                    }
                                }
                            }
                            days += adj;
                            days -= (_ba6 * 2);
                        }
                        _ba5 = days;
                        break;
                    case "year":
                        _ba5 = _ba4;
                        break;
                    case "month":
                        _ba5 = (_ba2.getMonth() - _ba1.getMonth()) + (_ba4 * 12);
                        break;
                    case "week":
                        _ba5 = parseInt(date.difference(_ba1, _ba2, "day") / 7);
                        break;
                    case "day":
                        _ba5 /= 24;
                    case "hour":
                        _ba5 /= 60;
                    case "minute":
                        _ba5 /= 60;
                    case "second":
                        _ba5 /= 1000;
                    case "millisecond":
                        _ba5 *= _ba2.getTime() - _ba1.getTime();
                    }
                    return Math.round(_ba5);
                }
                ;
                1 && lang.mixin(lang.getObject("dojo.date", true), date);
                return date;
            });
        },
        "dojo/fx/easing": function() {
            define(["../_base/lang"], function(lang) {
                var _ba9 = {
                    linear: function(n) {
                        return n;
                    },
                    quadIn: function(n) {
                        return Math.pow(n, 2);
                    },
                    quadOut: function(n) {
                        return n * (n - 2) * -1;
                    },
                    quadInOut: function(n) {
                        n = n * 2;
                        if (n < 1) {
                            return Math.pow(n, 2) / 2;
                        }
                        return -1 * ((--n) * (n - 2) - 1) / 2;
                    },
                    cubicIn: function(n) {
                        return Math.pow(n, 3);
                    },
                    cubicOut: function(n) {
                        return Math.pow(n - 1, 3) + 1;
                    },
                    cubicInOut: function(n) {
                        n = n * 2;
                        if (n < 1) {
                            return Math.pow(n, 3) / 2;
                        }
                        n -= 2;
                        return (Math.pow(n, 3) + 2) / 2;
                    },
                    quartIn: function(n) {
                        return Math.pow(n, 4);
                    },
                    quartOut: function(n) {
                        return -1 * (Math.pow(n - 1, 4) - 1);
                    },
                    quartInOut: function(n) {
                        n = n * 2;
                        if (n < 1) {
                            return Math.pow(n, 4) / 2;
                        }
                        n -= 2;
                        return -1 / 2 * (Math.pow(n, 4) - 2);
                    },
                    quintIn: function(n) {
                        return Math.pow(n, 5);
                    },
                    quintOut: function(n) {
                        return Math.pow(n - 1, 5) + 1;
                    },
                    quintInOut: function(n) {
                        n = n * 2;
                        if (n < 1) {
                            return Math.pow(n, 5) / 2;
                        }
                        n -= 2;
                        return (Math.pow(n, 5) + 2) / 2;
                    },
                    sineIn: function(n) {
                        return -1 * Math.cos(n * (Math.PI / 2)) + 1;
                    },
                    sineOut: function(n) {
                        return Math.sin(n * (Math.PI / 2));
                    },
                    sineInOut: function(n) {
                        return -1 * (Math.cos(Math.PI * n) - 1) / 2;
                    },
                    expoIn: function(n) {
                        return (n == 0) ? 0 : Math.pow(2, 10 * (n - 1));
                    },
                    expoOut: function(n) {
                        return (n == 1) ? 1 : (-1 * Math.pow(2, -10 * n) + 1);
                    },
                    expoInOut: function(n) {
                        if (n == 0) {
                            return 0;
                        }
                        if (n == 1) {
                            return 1;
                        }
                        n = n * 2;
                        if (n < 1) {
                            return Math.pow(2, 10 * (n - 1)) / 2;
                        }
                        --n;
                        return (-1 * Math.pow(2, -10 * n) + 2) / 2;
                    },
                    circIn: function(n) {
                        return -1 * (Math.sqrt(1 - Math.pow(n, 2)) - 1);
                    },
                    circOut: function(n) {
                        n = n - 1;
                        return Math.sqrt(1 - Math.pow(n, 2));
                    },
                    circInOut: function(n) {
                        n = n * 2;
                        if (n < 1) {
                            return -1 / 2 * (Math.sqrt(1 - Math.pow(n, 2)) - 1);
                        }
                        n -= 2;
                        return 1 / 2 * (Math.sqrt(1 - Math.pow(n, 2)) + 1);
                    },
                    backIn: function(n) {
                        var s = 1.70158;
                        return Math.pow(n, 2) * ((s + 1) * n - s);
                    },
                    backOut: function(n) {
                        n = n - 1;
                        var s = 1.70158;
                        return Math.pow(n, 2) * ((s + 1) * n + s) + 1;
                    },
                    backInOut: function(n) {
                        var s = 1.70158 * 1.525;
                        n = n * 2;
                        if (n < 1) {
                            return (Math.pow(n, 2) * ((s + 1) * n - s)) / 2;
                        }
                        n -= 2;
                        return (Math.pow(n, 2) * ((s + 1) * n + s) + 2) / 2;
                    },
                    elasticIn: function(n) {
                        if (n == 0 || n == 1) {
                            return n;
                        }
                        var p = 0.3;
                        var s = p / 4;
                        n = n - 1;
                        return -1 * Math.pow(2, 10 * n) * Math.sin((n - s) * (2 * Math.PI) / p);
                    },
                    elasticOut: function(n) {
                        if (n == 0 || n == 1) {
                            return n;
                        }
                        var p = 0.3;
                        var s = p / 4;
                        return Math.pow(2, -10 * n) * Math.sin((n - s) * (2 * Math.PI) / p) + 1;
                    },
                    elasticInOut: function(n) {
                        if (n == 0) {
                            return 0;
                        }
                        n = n * 2;
                        if (n == 2) {
                            return 1;
                        }
                        var p = 0.3 * 1.5;
                        var s = p / 4;
                        if (n < 1) {
                            n -= 1;
                            return -0.5 * (Math.pow(2, 10 * n) * Math.sin((n - s) * (2 * Math.PI) / p));
                        }
                        n -= 1;
                        return 0.5 * (Math.pow(2, -10 * n) * Math.sin((n - s) * (2 * Math.PI) / p)) + 1;
                    },
                    bounceIn: function(n) {
                        return (1 - _ba9.bounceOut(1 - n));
                    },
                    bounceOut: function(n) {
                        var s = 7.5625;
                        var p = 2.75;
                        var l;
                        if (n < (1 / p)) {
                            l = s * Math.pow(n, 2);
                        } else {
                            if (n < (2 / p)) {
                                n -= (1.5 / p);
                                l = s * Math.pow(n, 2) + 0.75;
                            } else {
                                if (n < (2.5 / p)) {
                                    n -= (2.25 / p);
                                    l = s * Math.pow(n, 2) + 0.9375;
                                } else {
                                    n -= (2.625 / p);
                                    l = s * Math.pow(n, 2) + 0.984375;
                                }
                            }
                        }
                        return l;
                    },
                    bounceInOut: function(n) {
                        if (n < 0.5) {
                            return _ba9.bounceIn(n * 2) / 2;
                        }
                        return (_ba9.bounceOut(n * 2 - 1) / 2) + 0.5;
                    }
                };
                lang.setObject("dojo.fx.easing", _ba9);
                return _ba9;
            });
        },
        "ebg/core/i18n": function() {
            define(["dojo", "dojo/_base/declare", "dojo/i18n"], function(dojo, _baa) {
                return _baa("ebg.core.i18n", null, {
                    constructor: function() {
                        this.nlsStrings = {};
                        this.activeBundle = "";
                        this.jsbundlesversion = "";
                    },
                    loadBundle: function(_bab) {
                        if (this.jsbundlesversion != "") {
                            _bab += "-" + this.jsbundlesversion;
                        }
                        this.nlsStrings[_bab] = dojo.i18n.getLocalization("ebg", _bab);
                    },
                    getTranslation: function(_bac, _bad) {
                        if (this.jsbundlesversion != "") {
                            _bac += "-" + this.jsbundlesversion;
                        }
                        if (!this.nlsStrings[_bac]) {
                            console.error("Bundle " + _bac + " has not been loaded (for string " + _bad + ")");
                            return _bad;
                        } else {
                            var _bae = this.nlsStrings[_bac][_bad];
                            if (_bae) {
                                return _bae;
                            } else {
                                return _bad;
                            }
                        }
                    },
                    setActiveBundle: function(_baf) {
                        if (this.jsbundlesversion != "") {
                            _baf += "-" + this.jsbundlesversion;
                        }
                        this.activeBundle = _baf;
                    },
                    getSimpleTranslation: function(_bb0) {
                        if (this.activeBundle == "") {
                            console.error("No active bundle (string " + _bb0 + ")");
                            return _bb0;
                        } else {
                            if (!this.nlsStrings[this.activeBundle]) {
                                console.error("Bundle " + this.activeBundle + " has not been loaded (string = " + _bb0 + ")");
                                return _bb0;
                            } else {
                                var _bb1 = this.nlsStrings[this.activeBundle][_bb0];
                                if (_bb1) {
                                    return _bb1;
                                } else {
                                    return _bb0;
                                }
                            }
                        }
                    }
                });
            });
        },
        "ebg/webrtc": function() {
            define(["dojo", "dojo/_base/declare", "ebg/peerconnect", "ebg/scriptlogger"], function(dojo, _bb2) {
                return _bb2("ebg.webrtc", null, {
                    constructor: function(_bb3, room, _bb4, _bb5, _bb6, _bb7, _bb8, _bb9, _bba, _bbb, _bbc) {
                        this.player_id = _bb3;
                        this.room = room;
                        this.in_room = [];
                        this.logger = new ebg.scriptlogger("webrtc",_bb8,"[P" + this.player_id + "@" + this.room + "]");
                        this.logger.log("(ebg.webrtc)      " + "WebRTC object created for player " + this.player_id + " and room " + this.room);
                        this.connections = [];
                        this.pcConfig = _bb4;
                        this.pcConstraints = _bb5;
                        this.mediaConstraints = _bb6;
                        this.stereo = false;
                        this.ajaxcall_callback = _bb8;
                        this.getUserMediaSuccess_callback = _bb9;
                        this.getUserMediaError_callback = _bba;
                        this.onJoinRoom_callback = _bbb;
                        this.onLeaveRoom_callback = _bbc;
                        this.localVideo = null;
                        this.localStream = null;
                        this.isAudioMuted = false;
                        this.isVideoMuted = false;
                        this.sdpConstraints = {
                            "mandatory": {
                                "OfferToReceiveAudio": true,
                                "OfferToReceiveVideo": true
                            }
                        };
                    },
                    isInRoom: function(_bbd) {
                        for (var i = 0; i < this.in_room.length; i++) {
                            if (_bbd == this.in_room[i]) {
                                this.logger.log("(ebg.webrtc)      " + "Player " + _bbd + " is in the room");
                                return true;
                            }
                        }
                        this.logger.log("(ebg.webrtc)      " + "Player " + _bbd + " is not in the room");
                        return false;
                    },
                    addToRoom: function(_bbe) {
                        this.logger.log("(ebg.webrtc)      " + "Player " + _bbe + " is added to the room");
                        this.in_room.push(_bbe);
                    },
                    removeFromRoom: function(_bbf) {
                        this.logger.log("(ebg.webrtc)      " + "Player " + _bbf + " is removed from the room");
                        for (var i = 0; i < this.in_room.length; i++) {
                            if (_bbf == this.in_room[i]) {
                                this.in_room.splice(i);
                                return true;
                            }
                        }
                        return false;
                    },
                    setMediaConstraints: function(_bc0) {
                        this.logger.log("(ebg.webrtc)      " + "Setting the following media constraints " + JSON.stringify(_bc0));
                        this.mediaConstraints = _bc0;
                    },
                    setLocalFeed: function(_bc1) {
                        this.logger.log("(ebg.webrtc)      " + "Setting the local feed with the following HTML video node: " + _bc1.id);
                        this.localVideo = _bc1;
                        this.doGetUserMedia();
                    },
                    doGetUserMedia: function() {
                        if (this.mediaConstraints.video === false && this.mediaConstraints.audio === false) {
                            this.logger.log("(ebg.webrtc)      " + "According to media constraints, no media to get: aborting getUserMedia");
                            return;
                        }
                        try {
                            navigator.getUserMedia(this.mediaConstraints, dojo.hitch(this, "onUserMediaSuccess"), dojo.hitch(this, "onUserMediaError"));
                            this.logger.log("(ebg.webrtc)      " + "Requested access to local media with mediaConstraints: " + JSON.stringify(this.mediaConstraints));
                        } catch (e) {
                            this.logger.log("(ebg.webrtc)      " + "getUserMedia() call failed with exception " + JSON.stringify(e));
                            this.logger.flush();
                            this.getUserMediaError_callback();
                        }
                    },
                    onUserMediaSuccess: function(_bc2) {
                        this.logger.log("(ebg.webrtc)      " + "User has granted access to local media");
                        this.localVideo.srcObject = _bc2;
                        if (!_bc2.stop && _bc2.getTracks) {
                            _bc2.stop = function() {
                                this.getTracks().forEach(function(_bc3) {
                                    _bc3.stop();
                                });
                            }
                            ;
                        }
                        this.localStream = _bc2;
                        this.getUserMediaSuccess_callback();
                    },
                    onUserMediaError: function(_bc4) {
                        this.logger.log("(ebg.webrtc)      " + "Failed to get access to local media with error: " + JSON.stringify(_bc4));
                        this.logger.flush();
                        this.getUserMediaError_callback();
                    },
                    maybeConnect: function(_bc5, _bc6) {
                        if (typeof this.connections[_bc5] == "undefined") {
                            this.connections[_bc5] = new ebg.peerconnect(_bc5,this.pcConfig,this.pcConstraints,this.mediaConstraints,this.stereo,this.localStream,this.logger,dojo.hitch(this, "sendPlayerMessage"));
                        }
                        if (_bc6 === false) {
                            if (this.player_id > _bc5) {
                                this.connections[_bc5].doCall();
                            }
                            if (this.player_id < _bc5) {
                                this.connections[_bc5].requestCall();
                            }
                        }
                    },
                    hangup: function() {
                        this.logger.log("(ebg.webrtc)      " + "Hanging up & closing all connections");
                        if (this.localStream != null) {
                            this.localStream.stop();
                            this.localStream = null;
                        }
                        for (var i = 0; i < this.in_room.length; i++) {
                            var _bc7 = this.in_room[i];
                            if (typeof this.connections[_bc7] != "undefined") {
                                this.logger.log("(ebg.webrtc)      " + "Closing connection with player " + _bc7);
                                this.connections[_bc7].stop();
                                this.connections.splice(_bc7);
                            } else {
                                this.logger.log("(ebg.webrtc)      " + "No current connection with player " + _bc7);
                            }
                        }
                        this.sendRoomMessage("bye");
                        this.logger.flush();
                    },
                    handleRemoteHangup: function(_bc8) {
                        this.logger.log("(ebg.webrtc)      " + "Player " + _bc8 + " signaled remote hang up on his end");
                        if (typeof this.connections[_bc8] != "undefined") {
                            this.logger.log("(ebg.webrtc)      " + "Closing connection with player " + _bc8);
                            this.connections[_bc8].stop();
                            this.connections.splice(_bc8);
                        } else {
                            this.logger.log("(ebg.webrtc)      " + "No current connection with player " + _bc8);
                        }
                        this.onLeaveRoom_callback(_bc8);
                    },
                    toggleVideoMute: function(_bc9) {
                        var _bca = null;
                        if (_bc9 == this.player_id) {
                            _bca = this.localStream;
                        } else {
                            if (typeof this.connections[_bc9] != "undefined") {
                                _bca = this.connections[_bc9].remoteStream;
                            }
                        }
                        if (_bca == null) {
                            this.logger.log("(ebg.webrtc)      " + "No video stream to mute for player " + _bc9 + ": aborting");
                            return true;
                        }
                        var _bcb = _bca.getVideoTracks();
                        if (_bcb.length === 0) {
                            this.logger.log("(ebg.webrtc)      " + "No local video available: aborting");
                            return true;
                        }
                        if (this.isVideoMuted) {
                            for (i = 0; i < _bcb.length; i++) {
                                _bcb[i].enabled = true;
                            }
                            this.logger.log("(ebg.webrtc)      " + "Video unmuted");
                        } else {
                            for (i = 0; i < _bcb.length; i++) {
                                _bcb[i].enabled = false;
                            }
                            this.logger.log("(ebg.webrtc)      " + "Video muted");
                        }
                        this.isVideoMuted = !this.isVideoMuted;
                        return this.isVideoMuted;
                    },
                    toggleAudioMute: function(_bcc) {
                        var _bcd = null;
                        if (_bcc == this.player_id) {
                            _bcd = this.localStream;
                        } else {
                            if (typeof this.connections[_bcc] != "undefined") {
                                _bcd = this.connections[_bcc].remoteStream;
                            }
                        }
                        if (_bcd == null) {
                            this.logger.log("(ebg.webrtc)      " + "No audio stream to mute for player " + _bcc + ": aborting");
                            return true;
                        }
                        var _bce = _bcd.getAudioTracks();
                        if (_bce.length === 0) {
                            this.logger.log("(ebg.webrtc)      " + "No local audio available: aborting");
                            return true;
                        }
                        if (this.isAudioMuted) {
                            for (i = 0; i < _bce.length; i++) {
                                _bce[i].enabled = true;
                            }
                            this.logger.log("(ebg.webrtc)      " + "Audio unmuted");
                        } else {
                            for (i = 0; i < _bce.length; i++) {
                                _bce[i].enabled = false;
                            }
                            this.logger.log("(ebg.webrtc)      " + "Audio muted");
                        }
                        this.isAudioMuted = !this.isAudioMuted;
                        return this.isAudioMuted;
                    },
                    sendPlayerMessage: function(_bcf, _bd0) {
                        this.logger.log("(ebg.webrtc)      " + "Client sending player message " + JSON.stringify(_bd0));
                        _bd0 = JSON.stringify(_bd0);
                        this.ajaxcall_callback("/videochat/videochat/relayPlayerMessage.html", {
                            player_id: _bcf,
                            room: this.room,
                            message: _bd0,
                            lock: false
                        }, this, function(_bd1) {}, function(_bd2) {}, "post");
                    },
                    sendRoomMessage: function(_bd3) {
                        this.logger.log("(ebg.webrtc)      " + "Client sending room message " + JSON.stringify(_bd3));
                        _bd3 = JSON.stringify(_bd3);
                        this.ajaxcall_callback("/videochat/videochat/relayRoomMessage.html", {
                            room: this.room,
                            message: _bd3,
                            lock: false
                        }, this, function(_bd4) {}, function(_bd5) {});
                    },
                    onMessageReceived: function(_bd6, _bd7) {
                        if (this.localStream == null) {
                            this.logger.log("(ebg.webrtc)      " + "Received message dropped (no localStream)");
                            return;
                        }
                        if (this.player_id != _bd6.to) {
                            this.logger.log("(ebg.webrtc)      " + "Received message dropped (destined to another player" + _bd6.to + ")");
                            return;
                        }
                        var _bd8 = _bd6.from;
                        var _bd9 = JSON.parse(_bd6.message);
                        this.logger.log("(ebg.webrtc)      " + "Client received message from player " + _bd8 + ": " + JSON.stringify(_bd9));
                        if (!this.isInRoom(_bd8) && _bd9 != "bye") {
                            this.onJoinRoom_callback(_bd8, true);
                        }
                        if (typeof this.connections[_bd8] != "undefined") {
                            if (_bd9 == "bye") {
                                this.handleRemoteHangup(_bd8);
                            } else {
                                this.connections[_bd8].handleMessage(_bd9);
                            }
                        } else {
                            this.logger.log("(ebg.webrtc)      " + "Message received but no connection with player " + _bd8 + " (should never happen)");
                        }
                    }
                });
            });
        },
        "ebg/peerconnect": function() {
            define(["dojo", "dojo/_base/declare"], function(dojo, _bda) {
                return _bda("ebg.peerconnect", null, {
                    constructor: function(_bdb, _bdc, _bdd, _bde, _bdf, _be0, _be1, _be2) {
                        this.peerId = _bdb;
                        this.localStream = _be0;
                        this.remoteVideo = null;
                        this.remoteStream = null;
                        this.pc = null;
                        this.started = false;
                        this.logger = _be1;
                        this.sendPlayerMessage_callback = _be2;
                        this.pcConfig = _bdc;
                        this.pcConstraints = _bdd;
                        this.mediaConstraints = _bde;
                        this.stereo = _bdf;
                        this.offerConstraints = {
                            "mandatory": {},
                            "optional": []
                        };
                        this.sdpConstraints = {
                            "mandatory": {
                                "OfferToReceiveAudio": true,
                                "OfferToReceiveVideo": true
                            }
                        };
                    },
                    maybeStart: function() {
                        if (this.started === true) {
                            this.logger.log("(ebg.peerconnect) " + "Peer connection already started");
                            return;
                        }
                        this.logger.log("(ebg.peerconnect) " + "Starting peer connection...");
                        this.pc = this.createPeerConnection();
                        if (this.pc !== null) {
                            try {
                                this.pc.addStream(this.localStream);
                            } catch (e) {
                                this.logger.log("(ebg.peerconnect) " + "PeerConnection.addStream failed with exception: " + e.message + (e.stack ? " | " + e.stack : ""));
                                this.logger.flush();
                            }
                            this.started = true;
                            this.logger.log("(ebg.peerconnect) " + "Peer connection started");
                        } else {
                            this.logger.log("(ebg.peerconnect) " + "Peer connection failed");
                        }
                    },
                    requestCall: function() {
                        this.logger.log("(ebg.peerconnect) " + "Sending call request to peer " + this.peerId);
                        this.sendPlayerMessage_callback(this.peerId, "new client requesting offer");
                    },
                    doCall: function() {
                        this.maybeStart();
                        if (this.started) {
                            var _be3 = this.mergeConstraints(this.offerConstraints, this.sdpConstraints);
                            this.logger.log("(ebg.peerconnect) " + "Sending offer to peer " + this.peerId + ", with constraints " + JSON.stringify(_be3));
                            try {
                                this.pc.createOffer(dojo.hitch(this, "setLocalSessionDescription"), dojo.hitch(this, "handleCreateOfferError"), _be3);
                            } catch (e) {
                                this.logger.log("(ebg.peerconnect) " + "PeerConnection.createOffer failed with exception: " + e.message + (e.stack ? " | " + e.stack : ""));
                                this.logger.flush();
                            }
                        }
                    },
                    mergeConstraints: function(_be4, _be5) {
                        var _be6 = _be4;
                        for (var name in _be5.mandatory) {
                            _be6.mandatory[name] = _be5.mandatory[name];
                        }
                        _be6.optional.concat(_be5.optional);
                        return _be6;
                    },
                    handleCreateOfferError: function(_be7) {
                        try {
                            this.logger.log("(ebg.peerconnect) " + "Create offer error: " + JSON.stringify(_be7));
                        } catch (e) {
                            this.logger.log("(ebg.peerconnect) " + "Exception raised while logging handleCreateOfferError: " + e.message);
                        }
                        this.logger.flush();
                    },
                    doAnswer: function() {
                        if (!this.started) {
                            this.logger.log("(ebg.peerconnect) " + "Connection must be started before sending an answer");
                            return;
                        }
                        this.isInitiator = false;
                        this.logger.log("(ebg.peerconnect) " + "Sending answer to peer " + this.peerId);
                        try {
                            this.pc.createAnswer(dojo.hitch(this, "setLocalSessionDescription"), dojo.hitch(this, "onCreateAnswerError"), this.sdpConstraints);
                        } catch (e) {
                            this.logger.log("(ebg.peerconnect) " + "PeerConnection.createAnswer failed with exception: " + e.message + (e.stack ? " | " + e.stack : ""));
                            this.logger.flush();
                        }
                    },
                    onCreateAnswerError: function(_be8) {
                        this.logger.log("(ebg.peerconnect) " + "Create answer error: " + JSON.stringify(_be8));
                        this.logger.flush();
                    },
                    stop: function() {
                        if (!this.started) {
                            this.logger.log("(ebg.peerconnect) " + "Connection must be started before stopping it");
                            return;
                        }
                        this.logger.log("(ebg.peerconnect) " + "Closing peer connection...");
                        this.started = false;
                        this.getConnectionDetails(this.pc).then(dojo.hitch(this, function(_be9) {
                            this.logger.log("(ebg.peerconnect) " + "ICE connection details: " + JSON.stringify(_be9));
                            this.logger.flush();
                        }));
                        try {
                            this.pc.close();
                        } catch (e) {
                            this.logger.log("(ebg.peerconnect) " + "PeerConnection.close failed with exception: " + e.message + (e.stack ? " | " + e.stack : ""));
                            this.logger.flush();
                        } finally {
                            this.pc = null;
                            this.logger.log("(ebg.peerconnect) " + "Peer connection closed");
                        }
                    },
                    handleMessage: function(_bea) {
                        this.logger.log("(ebg.peerconnect) " + "Client handling message from player " + this.peerId + ": " + JSON.stringify(_bea));
                        if (_bea === null) {
                            this.logger.log("(ebg.peerconnect) " + "Message is null");
                        } else {
                            if (_bea === "new client requesting offer") {
                                this.logger.log("(ebg.peerconnect) " + "Request received, sending an offer");
                                if (this.started) {
                                    this.stop();
                                }
                                this.maybeStart();
                                this.doCall();
                            } else {
                                if (_bea.type === "offer") {
                                    this.logger.log("(ebg.peerconnect) " + "Registering offer and sending an answer");
                                    if (this.started) {
                                        this.stop();
                                    }
                                    this.maybeStart();
                                    if (this.started) {
                                        if (this.stereo) {
                                            _bea.sdp = addStereo(_bea.sdp);
                                            _bea.sdp = maybePreferAudioSendCodec(_bea.sdp);
                                        }
                                        try {
                                            this.pc.setRemoteDescription(new RTCSessionDescription(_bea), dojo.hitch(this, "onSetRemoteSessionDescriptionSuccess"), dojo.hitch(this, "onSetRemoteSessionDescriptionError"));
                                        } catch (e) {
                                            this.logger.log("(ebg.peerconnect) " + "PeerConnection.setRemoteDescription failed with exception: " + e.message + (e.stack ? " | " + e.stack : ""));
                                            this.logger.flush();
                                        }
                                        this.doAnswer();
                                    } else {
                                        this.logger.log("(ebg.peerconnect) " + "No peerconnection available. Aborting.");
                                    }
                                } else {
                                    if (_bea.type === "answer") {
                                        this.logger.log("(ebg.peerconnect) " + "Registering answer");
                                        if (this.started) {
                                            if (this.stereo) {
                                                _bea.sdp = addStereo(_bea.sdp);
                                                _bea.sdp = maybePreferAudioSendCodec(_bea.sdp);
                                            }
                                            try {
                                                this.pc.setRemoteDescription(new RTCSessionDescription(_bea), dojo.hitch(this, "onSetRemoteSessionDescriptionSuccess"), dojo.hitch(this, "onSetRemoteSessionDescriptionError"));
                                            } catch (e) {
                                                this.logger.log("(ebg.peerconnect) " + "PeerConnection.setRemoteDescription failed with exception: " + e.message + (e.stack ? " | " + e.stack : ""));
                                                this.logger.flush();
                                            }
                                        } else {
                                            this.logger.log("(ebg.peerconnect) " + "No peerconnection available. Aborting.");
                                        }
                                    } else {
                                        if (_bea.type === "candidate") {
                                            this.logger.log("(ebg.peerconnect) " + "Registering candidate");
                                            if (this.started) {
                                                var _beb = new RTCIceCandidate({
                                                    sdpMLineIndex: _bea.label,
                                                    candidate: _bea.candidate
                                                });
                                                try {
                                                    this.pc.addIceCandidate(_beb, dojo.hitch(this, "onAddIceCandidateSuccess"), dojo.hitch(this, "onAddIceCandidateError"));
                                                } catch (e) {
                                                    this.logger.log("(ebg.peerconnect) " + "PeerConnection.addIceCandidate failed with exception: " + e.message + (e.stack ? " | " + e.stack : ""));
                                                    this.logger.flush();
                                                }
                                            } else {
                                                this.logger.log("(ebg.peerconnect) " + "No peerconnection available. Aborting.");
                                            }
                                        } else {
                                            this.logger.log("(ebg.peerconnect) " + "Unknown message type");
                                        }
                                    }
                                }
                            }
                        }
                    },
                    onSetLocalSessionDescriptionSuccess: function() {
                        this.logger.log("(ebg.peerconnect) " + "Set local session description successfully");
                        if (webrtcConfig.iceTricklingEnabled === true) {
                            this.sendLocalSessionDescription();
                        }
                    },
                    onSetLocalSessionDescriptionError: function(_bec) {
                        this.logger.log("(ebg.peerconnect) " + "Failed to set local session description with error: " + JSON.stringify(_bec));
                        this.logger.flush();
                    },
                    onSetRemoteSessionDescriptionSuccess: function() {
                        this.logger.log("(ebg.peerconnect) " + "Set remote session description successfully");
                    },
                    onSetRemoteSessionDescriptionError: function(_bed) {
                        this.logger.log("(ebg.peerconnect) " + "Failed to set remote session description with error: " + JSON.stringify(_bed));
                        this.logger.flush();
                    },
                    onAddIceCandidateSuccess: function() {
                        this.logger.log("(ebg.peerconnect) " + "Added ice candidate successfully");
                    },
                    onAddIceCandidateError: function(_bee) {
                        this.logger.log("(ebg.peerconnect) " + "Failed to add ice candidate with error: " + JSON.stringify(_bee));
                        this.logger.flush();
                    },
                    createPeerConnection: function() {
                        var pc = null;
                        try {
                            pc = new RTCPeerConnection(this.pcConfig,this.pcConstraints);
                            pc.onicecandidate = dojo.hitch(this, "handleIceCandidate");
                            pc.onaddstream = dojo.hitch(this, "handleRemoteStreamAdded");
                            pc.onremovestream = dojo.hitch(this, "handleRemoteStreamRemoved");
                            pc.onsignalingstatechange = dojo.hitch(this, "onSignalingStateChanged");
                            pc.oniceconnectionstatechange = dojo.hitch(this, "onIceConnectionStateChanged");
                            var _bef = JSON.parse(JSON.stringify(this.pcConfig));
                            for (var i = 0; i < _bef.iceServers.length; i++) {
                                if (typeof _bef.iceServers[i].credential != "undefined") {
                                    _bef.iceServers[i].username = "********";
                                    _bef.iceServers[i].credential = "********";
                                }
                            }
                            this.logger.log("(ebg.peerconnect) " + "Created RTCPeerConnnection with" + " config " + JSON.stringify(_bef) + " and constraints " + JSON.stringify(this.pcConstraints));
                        } catch (e) {
                            this.logger.log("(ebg.peerconnect) " + "Failed to create PeerConnection with exception: " + e.message + (e.stack ? " | " + e.stack : ""));
                            this.logger.flush();
                            alert("Error: failed to create RTCPeerConnection object");
                        }
                        return pc;
                    },
                    handleIceCandidate: function(_bf0) {
                        if (_bf0.candidate === null) {
                            this.logger.log("(ebg.peerconnect) " + "End of candidates");
                            if (webrtcConfig.iceTricklingEnabled === false) {
                                this.sendLocalSessionDescription();
                            }
                        } else {
                            if (webrtcConfig.iceTricklingEnabled === true) {
                                this.logger.log("(ebg.peerconnect) " + "Handling ICE candidate");
                                this.sendPlayerMessage_callback(this.peerId, {
                                    type: "candidate",
                                    label: _bf0.candidate.sdpMLineIndex,
                                    id: _bf0.candidate.sdpMid,
                                    candidate: _bf0.candidate.candidate
                                });
                            }
                        }
                    },
                    handleRemoteStreamAdded: function(_bf1) {
                        this.logger.log("(ebg.peerconnect) " + "Remote stream added");
                        this.remoteVideo = $("videofeed_" + this.peerId);
                        if (this.remoteVideo !== null) {
                            this.remoteVideo.srcObject = _bf1.stream;
                            this.remoteStream = _bf1.stream;
                        } else {
                            this.logger.log("(ebg.peerconnect) " + "No remote video object available. Aborting.");
                        }
                    },
                    handleRemoteStreamRemoved: function(_bf2) {
                        this.logger.log("(ebg.peerconnect) " + "Remote stream removed");
                    },
                    onSignalingStateChanged: function(_bf3) {
                        if (this.pc === null) {
                            this.logger.log("(ebg.peerconnect) " + "onSignalingStateChanged fired, but peerconnect object is null!");
                            return;
                        }
                        this.logger.log("(ebg.peerconnect) " + "Signaling state changed to: " + this.pc.signalingState);
                    },
                    onIceConnectionStateChanged: function(_bf4) {
                        if (this.pc === null) {
                            this.logger.log("(ebg.peerconnect) " + "onIceConnectionStateChanged fired, but peerconnect object is null!");
                            return;
                        }
                        this.logger.log("(ebg.peerconnect) " + "ICE connection state changed to: " + this.pc.iceConnectionState);
                        if (this.pc.iceConnectionState == "connected" || this.pc.iceConnectionState == "completed") {
                            this.getConnectionDetails(this.pc).then(dojo.hitch(this, function(_bf5) {
                                this.logger.log("(ebg.peerconnect) " + "ICE connection details: " + JSON.stringify(_bf5));
                                this.logger.flush();
                            }));
                            if ($("videofeed_" + this.peerId + "_spk") != null) {
                                dojo.addClass($("videofeed_" + this.peerId + "_spk"), "rtc_video_spk_on");
                                dojo.removeClass($("videofeed_" + this.peerId + "_spk"), "rtc_video_spk_off");
                            }
                            if ($("videofeed_" + this.peerId + "_cam") != null) {
                                dojo.addClass($("videofeed_" + this.peerId + "_cam"), "rtc_video_cam_on");
                                dojo.removeClass($("videofeed_" + this.peerId + "_cam"), "rtc_video_cam_off");
                            }
                        } else {
                            if ($("videofeed_" + this.peerId + "_spk") != null) {
                                dojo.addClass($("videofeed_" + this.peerId + "_spk"), "rtc_video_spk_off");
                                dojo.removeClass($("videofeed_" + this.peerId + "_spk"), "rtc_video_spk_on");
                            }
                            if ($("videofeed_" + this.peerId + "_cam") != null) {
                                dojo.addClass($("videofeed_" + this.peerId + "_cam"), "rtc_video_cam_off");
                                dojo.removeClass($("videofeed_" + this.peerId + "_cam"), "rtc_video_cam_on");
                            }
                        }
                    },
                    getConnectionDetails: function(_bf6) {
                        var _bf7 = {};
                        if (window.chrome) {
                            var _bf8 = ["googLocalAddress", "googLocalCandidateType", "googRemoteAddress", "googRemoteCandidateType", "bytesReceived", "bytesSent"];
                            return new Promise(function(_bf9, _bfa) {
                                _bf6.getStats(function(_bfb) {
                                    var _bfc = _bfb.result().filter(function(e) {
                                        return e.stat("googActiveConnection") == "true";
                                    })[0];
                                    if (!_bfc) {
                                        return _bfa("Something is wrong...");
                                    }
                                    _bf8.forEach(function(e) {
                                        _bf7[e.replace("goog", "")] = _bfc.stat(e);
                                    });
                                    _bf9(_bf7);
                                });
                            }
                            );
                        } else {
                            return _bf6.getStats(null).then(function(_bfd) {
                                var _bfe = _bfd[Object.keys(_bfd).filter(function(key) {
                                    return _bfd[key].selected;
                                })[0]]
                                  , _bff = _bfd[_bfe.localCandidateId]
                                  , _c00 = _bfd[_bfe.remoteCandidateId];
                                _bf7.LocalAddress = [_bff.ipAddress, _bff.portNumber].join(":");
                                _bf7.RemoteAddress = [_c00.ipAddress, _c00.portNumber].join(":");
                                _bf7.LocalCandidateType = _bff.candidateType;
                                _bf7.RemoteCandidateType = _c00.candidateType;
                                _bf7.bytesReceived = _bfe.bytesReceived;
                                _bf7.bytesSent = _bfe.bytesSent;
                                return _bf7;
                            });
                        }
                    },
                    setLocalSessionDescription: function(_c01) {
                        try {
                            this.pc.setLocalDescription(_c01, dojo.hitch(this, "onSetLocalSessionDescriptionSuccess"), dojo.hitch(this, "onSetLocalSessionDescriptionError"));
                        } catch (e) {
                            this.logger.log("(ebg.peerconnect) " + "PeerConnection.setLocalDescription failed with exception: " + e.message + (e.stack ? " | " + e.stack : ""));
                            this.logger.flush();
                        }
                    },
                    sendLocalSessionDescription: function() {
                        this.logger.log("(ebg.peerconnect) " + "Sending message with session description " + JSON.stringify(this.pc.localDescription));
                        this.sendPlayerMessage_callback(this.peerId, this.pc.localDescription);
                    }
                });
            });
        },
        "ebg/scriptlogger": function() {
            define(["dojo", "dojo/_base/declare"], function(dojo, _c02) {
                return _c02("ebg.scriptlogger", null, {
                    constructor: function(_c03, _c04, _c05) {
                        this.logName = _c03;
                        this.logBuffer = null;
                        this.identifier = _c05;
                        this.ajaxcall_callback = _c04;
                        this.log("Client side " + this.logName + " log follows.");
                    },
                    log: function(_c06) {
                        if (this.logBuffer === null) {
                            this.logBuffer = _c06;
                        } else {
                            var m = new Date();
                            var _c07 = (typeof this.identifier == "undefined" ? "" : this.identifier + " ") + m.getUTCFullYear() + ("0" + (m.getUTCMonth() + 1)).slice(-2) + ("0" + m.getUTCDate()).slice(-2) + "-" + ("0" + m.getUTCHours()).slice(-2) + ":" + ("0" + m.getUTCMinutes()).slice(-2) + ":" + ("0" + m.getUTCSeconds()).slice(-2) + ":" + ("00" + m.getUTCMilliseconds()).slice(-3) + "-UTC";
                            this.logBuffer += "   " + _c07 + " " + _c06;
                        }
                        this.logBuffer += "\n";
                    },
                    flush: function() {
                        this.ajaxcall_callback("/web/scriptlogger/" + this.logName + ".html", {
                            log: this.logBuffer,
                            lock: false
                        }, this, function(_c08) {}, function(_c09) {
                            if (_c09) {} else {}
                        }, "post");
                        this.logBuffer = null;
                        this.log("Client side " + this.logName + " log follows.");
                    }
                });
            });
        },
        "ebg/webpush": function() {
            define(["dojo", "dojo/_base/declare"], function(dojo, _c0a) {
                return _c0a("ebg.webpush", null, {
                    constructor: function(_c0b) {
                        this.ajaxcall_callback = _c0b;
                        this.serviceWorkerRegistered = false;
                        this.permissionAlreadyGranted = false;
                        this.permissionGranted = false;
                        this.pushSubscription = null;
                        var _c0c = "/data/themereleases/";
                        var _c0d = g_themeurl.substr(g_themeurl.indexOf(_c0c) + _c0c.length, 11);
                        this.l_serviceworker_url = "/theme/js/bgaserviceworker.js";
                        this.browser = "";
                        if (dojo.isChrome) {
                            this.browser = "Google Chrome v" + dojo.isChrome;
                        } else {
                            if (dojo.isIE) {
                                this.browser = "Internet Explorer v" + dojo.isIE;
                            } else {
                                if (dojo.isFF) {
                                    this.browser = "Mozilla Firefox v" + dojo.isFF;
                                } else {
                                    if (dojo.isSafari) {
                                        this.browser = "Safari v" + dojo.isSafari;
                                    } else {
                                        if (dojo.isMozilla) {
                                            this.browser = "Mozilla v" + dojo.isMozilla;
                                        } else {
                                            if (dojo.isOpera) {
                                                this.browser = "Opera v" + dojo.isOpera;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    init: function() {
                        if (!this.isSupported()) {
                            return Promise.reject(new Error("Web push is not supported"));
                        }
                        if (this.isAuthorized()) {
                            this.permissionAlreadyGranted = true;
                        }
                        return this.registerServiceWorker().then(dojo.hitch(this, function() {
                            return this.askPermission();
                        })).then(dojo.hitch(this, function() {
                            return this.subscribeUserToPush();
                        })).then(dojo.hitch(this, function(_c0e) {
                            return this.savePushSubscription(_c0e);
                        }));
                    },
                    refresh: function() {
                        if (!this.isSupported()) {
                            return Promise.reject(new Error("Web push is not supported"));
                        }
                        var _c0f = location.href.split("/")[2];
                        var _c10 = g_sitecore.domain;
                        var _c11 = "https://" + _c10 + "/";
                        try {
                            navigator.serviceWorker.getRegistrations().then(dojo.hitch(this, function(_c12) {
                                var _c13 = false;
                                for (var i = 0; i < _c12.length; ++i) {
                                    var _c14 = _c12[i];
                                    if (_c14.scope != _c11) {
                                        _c14.unregister();
                                    } else {
                                        _c13 = true;
                                    }
                                }
                                if (!_c13 && _c0f == _c10) {
                                    this.registerServiceWorker();
                                }
                            }));
                        } catch (error) {
                            console.error("Exception unregistering obsolete service workers: " + error.message);
                        }
                    },
                    revoke: function() {},
                    isSupported: function() {
                        if (typeof Promise === "undefined" || Promise.toString().indexOf("[native code]") === -1) {
                            return false;
                        }
                        if (!("serviceWorker"in navigator)) {
                            return false;
                        }
                        if (!("PushManager"in window)) {
                            return false;
                        }
                        if (!("Notification"in window)) {
                            return false;
                        }
                        return true;
                    },
                    isAuthorized: function() {
                        return Notification.permission == "granted";
                    },
                    registerServiceWorker: function() {
                        return navigator.serviceWorker.register(this.l_serviceworker_url, {
                            scope: "../../"
                        }).then(function(_c15) {
                            this.serviceWorkerRegistered = true;
                            _c15.update();
                            return _c15;
                        }).then(null, function(err) {
                            this.serviceWorkerRegistered = false;
                            console.error("Unable to register service worker.", err);
                        });
                    },
                    askPermission: function() {
                        return new Promise(function(_c16, _c17) {
                            var _c18 = Notification.requestPermission(function(_c19) {
                                _c16(_c19);
                            });
                            if (_c18) {
                                _c18.then(_c16, _c17);
                            }
                        }
                        ).then(function(_c1a) {
                            if (_c1a === "granted") {
                                this.permissionGranted = true;
                            } else {
                                this.permissionGranted = false;
                                console.error("We weren't granted permission.");
                            }
                        });
                    },
                    subscribeUserToPush: function() {
                        return navigator.serviceWorker.register(this.l_serviceworker_url, {
                            scope: "../../"
                        }).then(function(_c1b) {
                            function _c1c(_c1d) {
                                var _c1e = "=".repeat((4 - _c1d.length % 4) % 4);
                                var _c1f = (_c1d + _c1e).replace(/\-/g, "+").replace(/_/g, "/");
                                var _c20 = window.atob(_c1f);
                                var _c21 = new Uint8Array(_c20.length);
                                for (var i = 0; i < _c20.length; ++i) {
                                    _c21[i] = _c20.charCodeAt(i);
                                }
                                return _c21;
                            }
                            ;var _c22 = {
                                userVisibleOnly: true,
                                applicationServerKey: _c1c("BKh3NNRk5O5wx1_qS_TlvqadCSZ_GmdwpYYfsVMurznZ03mn0wgvh-lK84IMaljkLFfYEQpxN_e4mwrUwYAfbwU")
                            };
                            return _c1b.pushManager.subscribe(_c22);
                        }).then(function(_c23) {
                            return _c23;
                        });
                    },
                    savePushSubscription: function(_c24) {
                        this.pushSubscription = JSON.parse(JSON.stringify(_c24));
                        this.ajaxcall_callback("/player/profile/savePushSubscription.html", {
                            isnewbrowser: !this.permissionAlreadyGranted,
                            browser: this.browser,
                            endpoint: this.pushSubscription.endpoint,
                            auth: this.pushSubscription.keys.auth,
                            p256dh: this.pushSubscription.keys.p256dh,
                            lock: false
                        }, this, function(_c25) {}, function(_c26) {}, "post");
                    }
                });
            });
        },
        "ebg/draggable": function() {
            define(["dojo", "dojo/_base/declare"], function(dojo, _c27) {
                return _c27("ebg.draggable", null, {
                    constructor: function() {
                        this.page = null;
                        this.item_id = null;
                        this.item_div = null;
                        this.mouse_x_origin = null;
                        this.mouse_y_origin = null;
                        this.element_x_origin = null;
                        this.element_y_origin = null;
                        this.is_dragging = false;
                        this.is_disabled = false;
                        this.dragging_handler = null;
                        this.dragging_handler_touch = null;
                        this.bUseAutomaticZIndex = true;
                        this.automatic_z_index = false;
                        this.bGrid = false;
                        this.bSnap = false;
                        this.snapCallback = null;
                        this.gridSize = 10;
                        this.draggedThisTime = false;
                        this.parentRotation = 0;
                        this.event_handlers = [];
                    },
                    create: function(page, _c28, _c29) {
                        this.page = page;
                        this.item_id = _c28;
                        this.item_div = $(_c28);
                        if (_c29) {
                            this.event_handlers.push(dojo.connect($(_c29), "onmousedown", this, "onMouseDown"));
                            this.event_handlers.push(dojo.connect($(_c29), "ontouchstart", this, "onMouseDown"));
                            dojo.style($(_c29), "cursor", "move");
                        } else {
                            this.event_handlers.push(dojo.connect(this.item_div, "onmousedown", this, "onMouseDown"));
                            this.event_handlers.push(dojo.connect(this.item_div, "ontouchstart", this, "onMouseDown"));
                            dojo.style(this.item_div, "cursor", "move");
                        }
                        this.event_handlers.push(dojo.connect($("ebd-body"), "onmouseup", this, "onMouseUp"));
                        this.event_handlers.push(dojo.connect($("ebd-body"), "ontouchend", this, "onMouseUp"));
                    },
                    destroy: function() {
                        for (var i in this.event_handlers) {
                            dojo.disconnect(this.event_handlers[i]);
                        }
                    },
                    changeDraggableItem: function(_c2a) {
                        this.item_id = _c2a;
                        this.item_div = $(_c2a);
                    },
                    onMouseDown: function(evt) {
                        dojo.stopEvent(evt);
                        if (this.is_disabled) {
                            return;
                        }
                        this.mouse_x_origin = evt.pageX;
                        this.mouse_y_origin = evt.pageY;
                        this.element_x_origin = dojo.style(this.item_div, "left");
                        this.element_y_origin = dojo.style(this.item_div, "top");
                        this.is_dragging = true;
                        this.parentRotation = this.page.getAbsRotationAngle(this.item_div.parentNode);
                        if (this.dragging_handler) {
                            dojo.disconnect(this.dragging_handler);
                        }
                        if (this.dragging_handler_touch) {
                            dojo.disconnect(this.dragging_handler_touch);
                        }
                        this.dragging_handler = dojo.connect($("ebd-body"), "onmousemove", this, "onMouseMove");
                        this.dragging_handler_touch = dojo.connect($("ebd-body"), "ontouchmove", this, "onMouseMove");
                        this.draggedThisTime = false;
                        this.onStartDragging(this.item_id, this.element_x_origin, this.element_y_origin);
                    },
                    onMouseUp: function(evt) {
                        if (this.is_disabled) {
                            return;
                        }
                        if (this.is_dragging === true) {
                            var _c2b = {
                                x: evt.pageX - this.mouse_x_origin,
                                y: evt.pageY - this.mouse_y_origin
                            };
                            var _c2c = this.page.vector_rotate(_c2b, this.parentRotation);
                            var x = _c2c.x + this.element_x_origin;
                            var y = _c2c.y + this.element_y_origin;
                            if (this.bGrid) {
                                x = Math.round(x / this.gridSize) * this.gridSize;
                            }
                            if (this.bGrid) {
                                y = Math.round(y / this.gridSize) * this.gridSize;
                            }
                            this.is_dragging = false;
                            dojo.disconnect(this.dragging_handler);
                            dojo.disconnect(this.dragging_handler_touch);
                            dojo.removeClass(this.item_div, "dragging_in_progress");
                            this.onEndDragging(this.item_id, x, y, this.draggedThisTime);
                            this.dragging_handler = null;
                            this.dragging_handler_touch = null;
                            if (this.automatic_z_index) {
                                dojo.style(this.item_id, "zIndex", "auto");
                                this.automatic_z_index = false;
                            }
                        }
                    },
                    onMouseMove: function(evt) {
                        if (this.is_disabled) {
                            return;
                        }
                        if (this.is_dragging === true) {
                            var _c2d = {
                                x: evt.pageX - this.mouse_x_origin,
                                y: evt.pageY - this.mouse_y_origin
                            };
                            var _c2e = this.page.vector_rotate(_c2d, this.parentRotation);
                            if (typeof this.page.gameinterface_zoomFactor != "undefined") {
                                _c2e.x = _c2e.x / this.page.gameinterface_zoomFactor;
                                _c2e.y = _c2e.y / this.page.gameinterface_zoomFactor;
                            }
                            var x = _c2e.x + this.element_x_origin;
                            var y = _c2e.y + this.element_y_origin;
                            if (this.bSnap && this.parentRotation == 0) {
                                var _c2f = this.snapCallback(x, y);
                                x = _c2f.x;
                                y = _c2f.y;
                            } else {
                                if (this.bGrid) {
                                    y = Math.round(y / this.gridSize) * this.gridSize;
                                    x = Math.round(x / this.gridSize) * this.gridSize;
                                }
                            }
                            dojo.style(this.item_div, "left", x + "px");
                            dojo.style(this.item_div, "top", y + "px");
                            if (this.draggedThisTime == false) {
                                dojo.addClass(this.item_div, "dragging_in_progress");
                                this.draggedThisTime = true;
                                if (this.bUseAutomaticZIndex && (dojo.style(this.item_id, "zIndex") == "auto")) {
                                    this.automatic_z_index = true;
                                    dojo.style(this.item_id, "zIndex", 1000);
                                }
                            }
                            this.onDragging(this.item_id, x, y, x - this.element_x_origin, y - this.element_y_origin);
                            dojo.stopEvent(evt);
                        }
                    },
                    disable: function(_c30) {
                        this.is_disabled = true;
                        if (this.item_div) {
                            if (_c30) {
                                dojo.style(this.item_div, "cursor", _c30);
                            } else {
                                dojo.style(this.item_div, "cursor", "default");
                            }
                        }
                    },
                    enable: function() {
                        this.is_disabled = false;
                        if (this.item_div) {
                            dojo.style(this.item_div, "cursor", "move");
                        }
                    },
                    onStartDragging: function(_c31, left, top) {},
                    onEndDragging: function(_c32, left, top, _c33) {},
                    onDragging: function(_c34, left, top, dx, dy) {}
                });
            });
        },
        "ebg/resizable": function() {
            define(["dojo", "dojo/_base/declare"], function(dojo, _c35) {
                return _c35("ebg.resizable", null, {
                    constructor: function() {
                        this.page = null;
                        this.item_id = null;
                        this.item_div = null;
                        this.mouse_x_origin = null;
                        this.mouse_y_origin = null;
                        this.element_x_origin = null;
                        this.element_y_origin = null;
                        this.is_dragging = false;
                        this.is_disabled = false;
                        this.element_w_origin = null;
                        this.element_h_origin = null;
                        this.dragging_handler = null;
                        this.width_resize = true;
                        this.height_resize = true;
                        this.resize_parent = false;
                        this.automatic_z_index = true;
                    },
                    create: function(page, _c36, _c37, _c38, _c39, _c3a) {
                        this.page = page;
                        this.item_id = _c36;
                        this.item_div = $(_c36);
                        if (_c38 === false) {
                            this.width_resize = false;
                        }
                        if (_c39 === false) {
                            this.height_resize = false;
                        }
                        if (_c3a === true) {
                            this.resize_parent = true;
                        }
                        if (_c37) {
                            dojo.connect($(_c37), "onmousedown", this, "onMouseDown");
                        } else {
                            dojo.connect(this.item_div, "onmousedown", this, "onMouseDown");
                        }
                        dojo.connect($("ebd-body"), "onmouseup", this, "onMouseUp");
                    },
                    onMouseDown: function(evt) {
                        dojo.stopEvent(evt);
                        if (this.is_disabled) {
                            return;
                        }
                        var box = dojo.marginBox(this.item_div);
                        this.element_w_origin = box.w;
                        this.element_h_origin = box.h;
                        this.mouse_x_origin = evt.pageX;
                        this.mouse_y_origin = evt.pageY;
                        var _c3b = dojo.marginBox(this.item_div);
                        this.element_x_origin = _c3b.l;
                        this.element_y_origin = _c3b.t;
                        this.is_dragging = true;
                        if (this.dragging_handler) {
                            dojo.disconnect(this.dragging_handler);
                        }
                        this.dragging_handler = dojo.connect($("ebd-body"), "onmousemove", this, "onMouseMove");
                        this.onStartDragging(this.item_id, this.element_x_origin, this.element_y_origin);
                        if (dojo.style(this.item_id, "zIndex") == "auto") {
                            this.automatic_z_index = true;
                            dojo.style(this.item_id, "zIndex", 1000);
                        }
                    },
                    onMouseUp: function(evt) {
                        if (this.is_disabled) {
                            return;
                        }
                        if (this.is_dragging === true) {
                            var x = evt.pageX - this.mouse_x_origin + this.element_x_origin;
                            var y = evt.pageY - this.mouse_y_origin + this.element_y_origin;
                            this.is_dragging = false;
                            dojo.disconnect(this.dragging_handler);
                            this.onEndDragging(this.item_id, x, y);
                            if (this.automatic_z_index) {
                                dojo.style(this.item_id, "zIndex", "auto");
                            }
                        }
                    },
                    onMouseMove: function(evt) {
                        evt.preventDefault();
                        if (this.is_disabled) {
                            return;
                        }
                        if (this.is_dragging === true) {
                            if (this.width_resize) {
                                var _c3c = evt.pageX - this.mouse_x_origin;
                                dojo.style(this.item_div, "width", (this.element_w_origin + _c3c) + "px");
                            }
                            if (this.height_resize) {
                                var _c3d = evt.pageY - this.mouse_y_origin;
                                dojo.style(this.item_div, "height", (this.element_h_origin + _c3d) + "px");
                            }
                            if (this.resize_parent && this.item_div.parentNode) {
                                var box = dojo.marginBox(this.item_div);
                                dojo.style(this.item_div.parentNode, "width", box.w + "px");
                                dojo.style(this.item_div.parentNode, "height", box.h + "px");
                            }
                            this.onDragging(this.item_id, _c3c, _c3d);
                        }
                    },
                    disable: function(_c3e) {
                        this.is_disabled = true;
                        if (this.item_div) {
                            if (_c3e) {
                                dojo.style(this.item_div, "cursor", _c3e);
                            } else {
                                dojo.style(this.item_div, "cursor", "default");
                            }
                        }
                    },
                    enable: function() {
                        this.is_disabled = false;
                        if (this.item_div) {
                            dojo.style(this.item_div, "cursor", "move");
                        }
                    },
                    onStartDragging: function(_c3f, left, top) {},
                    onEndDragging: function(_c40, left, top) {},
                    onDragging: function(_c41, left, top) {}
                });
            });
        },
        "ebg/popindialog": function() {
            define(["dojo", "dojo/_base/declare"], function(dojo, _c42) {
                return _c42("ebg.popindialog", null, {
                    constructor: function() {
                        this.id = null;
                        this.target_id = null;
                        this.container_id = "ebd-body";
                        this.resizeHandle = null;
                        this.closeHandle = null;
                        this.bCloseIsHiding = false;
                        this.onShow = null;
                        this.onHide = null;
                        this.jstpl_standard_popin = "<div id=\"popin_${id}\" class=\"standard_popin\">" + "<h2 id=\"popin_${id}_title\" class=\"standard_popin_title\"></h2>" + "<a href=\"#\" target=\"_blank\" id=\"popin_${id}_help\" class=\"standard_popin_helpicon\"><i class=\"fa fa-question-circle-o fa-2x\" aria-hidden=\"true\"></i></a>" + "<a href=\"#\" id=\"popin_${id}_close\" class=\"standard_popin_closeicon\"><i class=\"fa fa-times-circle fa-2x\" aria-hidden=\"true\"></i></a>" + "<div id=\"popin_${id}_contents\" class=\"clear\"></div>" + "</div>";
                    },
                    create: function(id, _c43) {
                        this.id = id;
                        this.target_id = _c43;
                        if (typeof this.target_id == "undefined") {
                            this.target_id = ($("main-content") !== null ? "main-content" : "left-side");
                        }
                        dojo.destroy("popin_" + this.id + "_underlay");
                        dojo.place("<div id=\"popin_" + this.id + "_underlay\" class=\"standard_popin_underlay\"></div>", this.container_id);
                        dojo.destroy("popin_" + this.id);
                        dojo.place(dojo.string.substitute(this.jstpl_standard_popin, {
                            id: this.id
                        }), this.container_id);
                        dojo.style("popin_" + this.id + "_help", "display", "none");
                        this.closeHandle = dojo.connect($("popin_" + this.id + "_close"), "onclick", this, function(evt) {
                            dojo.stopEvent(evt);
                            if (this.bCloseIsHiding) {
                                this.hide();
                            } else {
                                this.destroy();
                            }
                        });
                        this.resizeHandle = dojo.connect(window, "onresize", this, "adjustSizeAndPosition");
                    },
                    destroy: function(_c44) {
                        if (this.id == null) {
                            return;
                        }
                        if (typeof _c44 == "undefined") {
                            _c44 = true;
                        }
                        dojo.disconnect(this.resizeHandle);
                        if (_c44) {
                            if ($("popin_" + this.id)) {
                                var anim = dojo.fadeOut({
                                    node: "popin_" + this.id
                                });
                                dojo.connect(anim, "onEnd", this, function(node) {
                                    if ($("popin_" + this.id)) {
                                        dojo.destroy("popin_" + this.id);
                                    }
                                });
                                anim.play();
                            }
                            if ($("popin_" + this.id + "_underlay")) {
                                var _c45 = dojo.fadeOut({
                                    node: "popin_" + this.id + "_underlay"
                                });
                                dojo.connect(_c45, "onEnd", this, function(node) {
                                    if ($("popin_" + this.id + "_underlay")) {
                                        dojo.destroy("popin_" + this.id + "_underlay");
                                    }
                                    this.id = null;
                                });
                                _c45.play();
                            }
                        } else {
                            if ($("popin_" + this.id)) {
                                dojo.destroy("popin_" + this.id);
                            }
                            if ($("popin_" + this.id + "_underlay")) {
                                dojo.destroy("popin_" + this.id + "_underlay");
                            }
                        }
                    },
                    replaceCloseCallback: function(_c46) {
                        dojo.disconnect(this.closeHandle);
                        this.closeHandle = dojo.connect($("popin_" + this.id + "_close"), "onclick", this, _c46);
                    },
                    hideCloseIcon: function() {
                        dojo.style("popin_" + this.id + "_close", "display", "none");
                    },
                    setTitle: function(_c47) {
                        if (this.id === null) {
                            console.error("You should CREATE this popindialog first");
                            throw "You should CREATE this popindialog first";
                        }
                        $("popin_" + this.id + "_title").innerHTML = _c47;
                    },
                    setMaxWidth: function(_c48) {
                        if (this.id === null) {
                            console.error("You should CREATE this popindialog first");
                            throw "You should CREATE this popindialog first";
                        }
                        dojo.style("popin_" + this.id, "maxWidth", _c48 + "px");
                    },
                    setHelpLink: function(url) {
                        $("popin_" + this.id + "_help").href = url;
                        dojo.style("popin_" + this.id + "_help", "display", "block");
                    },
                    setContent: function(html) {
                        if (this.id === null) {
                            console.error("You should CREATE this popindialog first");
                            throw "You should CREATE this popindialog first";
                        }
                        $("popin_" + this.id + "_contents").innerHTML = html;
                    },
                    adjustSizeAndPosition: function() {
                        if (!$("popin_" + this.id)) {
                            return;
                        }
                        if (dojo.style("popin_" + this.id, "display") == "none") {
                            return;
                        }
                        this.show(false);
                    },
                    show: function(_c49) {
                        if (this.id === null) {
                            console.error("You should CREATE this popindialog first");
                            throw "You should CREATE this popindialog first";
                        }
                        if (typeof _c49 == "undefined") {
                            _c49 = true;
                        }
                        dojo.style("popin_" + this.id + "_underlay", "opacity", "0");
                        dojo.style("popin_" + this.id + "_underlay", "display", "block");
                        dojo.style("popin_" + this.id, "opacity", "0");
                        dojo.style("popin_" + this.id, "display", "inline-block");
                        var bdy = dojo.position(this.container_id);
                        var tgt = dojo.position(this.target_id);
                        var src = dojo.position("popin_" + this.id);
                        var top = dojo.style("popin_" + this.id, "top");
                        var _c4a = dojo.window.getBox();
                        var _c4b = 43;
                        if (typeof gameui != "undefined") {
                            _c4b = 65;
                        }
                        var _c4c = Math.max(_c4a.t + _c4b, ((_c4a.h - src.h) / 2 + _c4a.t));
                        dojo.style("popin_" + this.id, "top", _c4c + "px");
                        var _c4d = tgt.x + tgt.w / 2 - src.w / 2;
                        if (_c4d < 0) {
                            var _c4d = _c4a.w / 2 - src.w / 2;
                        }
                        dojo.style("popin_" + this.id, "left", _c4d + "px");
                        dojo.style("popin_" + this.id + "_underlay", "width", (bdy.w) + "px");
                        dojo.style("popin_" + this.id + "_underlay", "height", (bdy.h - _c4b) + "px");
                        if (_c49) {
                            dojo.fadeIn({
                                node: "popin_" + this.id + "_underlay"
                            }).play();
                            var anim = dojo.animateProperty({
                                node: "popin_" + this.id + "_underlay",
                                properties: {
                                    opacity: 0.7
                                }
                            });
                            dojo.connect(anim, "onEnd", this, function(node) {
                                var bdy = dojo.position(this.container_id);
                                dojo.style("popin_" + this.id + "_underlay", "width", (bdy.w) + "px");
                                dojo.style("popin_" + this.id + "_underlay", "height", (bdy.h - _c4b) + "px");
                            });
                            anim.play();
                            dojo.fadeIn({
                                node: "popin_" + this.id
                            }).play();
                        } else {
                            dojo.style("popin_" + this.id + "_underlay", "opacity", 0.7);
                            dojo.style("popin_" + this.id, "opacity", 1);
                        }
                        if (this.onShow !== null) {
                            this.onShow();
                        }
                    },
                    hide: function(_c4e) {
                        if (this.id === null) {
                            console.error("You should CREATE this popindialog first");
                            throw "You should CREATE this popindialog first";
                        }
                        if (typeof _c4e == "undefined") {
                            _c4e = true;
                        }
                        if (_c4e) {
                            if ($("popin_" + this.id + "_underlay")) {
                                dojo.fadeOut({
                                    node: "popin_" + this.id + "_underlay"
                                }).play();
                                var anim = dojo.animateProperty({
                                    node: "popin_" + this.id + "_underlay",
                                    properties: {
                                        opacity: 0
                                    }
                                });
                                dojo.connect(anim, "onEnd", this, function(node) {
                                    dojo.style("popin_" + this.id + "_underlay", "display", "none");
                                    dojo.style("popin_" + this.id, "display", "none");
                                });
                                anim.play();
                            }
                            if ($("popin_" + this.id)) {
                                dojo.fadeOut({
                                    node: "popin_" + this.id
                                }).play();
                            }
                        } else {
                            if ($("popin_" + this.id + "_underlay")) {
                                dojo.style("popin_" + this.id + "_underlay", "opacity", 0);
                                dojo.style("popin_" + this.id + "_underlay", "display", "none");
                            }
                            if ($("popin_" + this.id)) {
                                dojo.style("popin_" + this.id, "opacity", 0);
                                dojo.style("popin_" + this.id, "display", "none");
                            }
                        }
                        if (this.onHide !== null) {
                            this.onHide();
                        }
                    }
                });
            });
        },
        "ebg/gamenotif": function() {
            define(["dojo", "dojo/_base/declare"], function(dojo, _c4f) {
                return _c4f("ebg.gamenotif", null, {
                    constructor: function() {
                        this.queue = [];
                        this.next_log_id = 0;
                        this.game = null;
                        this.checkSequence = false;
                        this.last_packet_id = 0;
                        this.notificationResendInProgress = false;
                        this.synchronous_notifs = {};
                        this.waiting_from_notifend = null;
                        this.playerBufferQueue = {};
                        this.debugnotif_i = 1;
                        this.currentNotifCallback = null;
                        this.onPlaceLogOnChannel = null;
                        this.lastMsgTime = 0;
                        dojo.subscribe("notifEnd", this, "onSynchronousNotificationEnd");
                    },
                    onNotification: function(_c50) {
                        if (typeof _c50 == "string") {
                            _c50 = dojo.fromJson(_c50);
                        }
                        try {
                            var _c51 = false;
                            if (_c50.channel.substr(0, 6) == "/table") {
                                _c51 = true;
                            }
                            if (_c50.channel.substr(0, 7) == "/player") {
                                if (typeof _c50.table_id != "undefined" && _c50.table_id !== null) {
                                    if (this.game !== null && this.game.table_id == _c50.table_id) {} else {
                                        return;
                                    }
                                }
                            }
                            if (_c50.packet_type == "single") {} else {
                                if (_c50.packet_type == "sequence" && this.checkSequence) {
                                    var _c52 = null;
                                    if (_c50.prevpacket) {
                                        if (_c51) {
                                            if (_c50.prevpacket[0]) {
                                                _c52 = toint(_c50.prevpacket[0]);
                                            } else {
                                                if (_c50.prevpacket[this.game.player_id]) {
                                                    _c52 = toint(_c50.prevpacket[this.game.player_id]);
                                                }
                                            }
                                        }
                                    }
                                    if (_c52 !== null) {
                                        if (toint(this.last_packet_id) == toint(_c52)) {
                                            this.last_packet_id = toint(_c50.packet_id);
                                        } else {
                                            if (toint(_c52) > toint(this.last_packet_id)) {
                                                this.resynchronizeNotifications(false);
                                                return;
                                            } else {
                                                if (toint(this.last_packet_id) > toint(_c52)) {
                                                    this.last_packet_id = toint(_c50.packet_id);
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if (_c50.packet_type == "resend") {
                                        if (toint(_c50.packet_id) > toint(this.last_packet_id)) {
                                            this.last_packet_id = _c50.packet_id;
                                        }
                                    } else {
                                        if (_c50.packet_type == "history") {
                                            for (var i in _c50.data) {
                                                var type = _c50.data[i].type;
                                                if (type == "chatmessage" || type == "wouldlikethink") {} else {
                                                    _c50.data[i].type = "history_history";
                                                }
                                            }
                                        } else {
                                            if (_c50.packet_type == "archive") {}
                                        }
                                    }
                                }
                            }
                            var _c53 = _c50.data.length;
                            var i;
                            for (i = 0; i < _c53; i++) {
                                _c50.data[i].channelorig = _c50.channel;
                                if (typeof _c50.gamename != "undefined") {
                                    _c50.data[i].gamenameorig = _c50.gamename;
                                }
                                if (typeof _c50.time != "undefined") {
                                    _c50.data[i].time = _c50.time;
                                }
                                if (typeof _c50.move_id != "undefined" && _c51) {
                                    _c50.data[i].move_id = _c50.move_id;
                                }
                            }
                            if (_c50.chatmessage || _c50.packet_type == "history" || _c50.packet_type == "single") {
                                for (i = 0; i < _c53; i++) {
                                    this.dispatchNotification(_c50.data[i]);
                                }
                            } else {
                                if (!_c51 && _c50.move_id) {
                                    this.playerBufferQueue[_c50.move_id] = {
                                        notifs: _c50,
                                        counter: 0
                                    };
                                } else {
                                    for (i = 0; i <= _c53; i++) {
                                        if (_c50.move_id) {
                                            if (i < _c53 && (_c50.data[i].type == "replaywaitingdelay" || _c50.data[i].type == "end_replaywaitingdelay" || _c50.data[i].type == "replayinitialwaitingdelay" || _c50.data[i].type == "end_replayinitialwaitingdelay")) {} else {
                                                if (this.playerBufferQueue[_c50.move_id]) {
                                                    var _c54 = this.playerBufferQueue[_c50.move_id].counter;
                                                    var _c55 = this.playerBufferQueue[_c50.move_id].notifs;
                                                    for (var _c56 = 0; _c56 < _c55.data.length; _c56++) {
                                                        if (toint(_c55.data[_c56].synchro) == toint(_c54)) {
                                                            _c55.data[_c56].bIsTableMsg = false;
                                                            this.queue.push(_c55.data[_c56]);
                                                            if (_c55.data[_c56].lock_uuid) {
                                                                dojo.publish("lockInterface", [{
                                                                    status: "queued",
                                                                    bIsTableMsg: false,
                                                                    uuid: _c55.data[_c56].lock_uuid
                                                                }]);
                                                            }
                                                        }
                                                    }
                                                    this.playerBufferQueue[_c50.move_id].counter++;
                                                }
                                            }
                                        }
                                        if (i < _c53) {
                                            _c50.data[i].bIsTableMsg = _c51;
                                            if (_c51 && _c50.move_id) {
                                                _c50.data[i].move_id = _c50.move_id;
                                            }
                                            if (_c51 && _c50.table_id) {
                                                _c50.data[i].table_id = _c50.table_id;
                                            }
                                            this.queue.push(_c50.data[i]);
                                            if (_c50.data[i].lock_uuid) {
                                                dojo.publish("lockInterface", [{
                                                    status: "queued",
                                                    bIsTableMsg: _c51,
                                                    uuid: _c50.data[i].lock_uuid
                                                }]);
                                            }
                                        }
                                    }
                                    if (_c50.move_id) {
                                        if (this.playerBufferQueue[_c50.move_id]) {
                                            delete this.playerBufferQueue[_c50.move_id];
                                        }
                                    }
                                    this.dispatchNotifications();
                                }
                            }
                        } catch (e) {
                            var msg = "";
                            if ($("logs")) {
                                dojo.style("logs", "display", "block");
                            }
                            if (this.currentNotifCallback) {
                                msg += "During notification " + this.currentNotifCallback + "\n";
                            }
                            msg += e.message + "\n";
                            msg += (e.stack || e.stacktrace || "no_stack_avail");
                            if (this.game) {
                                this.game.onScriptError(msg, "", "");
                            } else {
                                mainsite.onScriptError(msg, "", "");
                            }
                        }
                    },
                    resynchronizeNotifications: function(_c57) {
                        if (!this.notificationResendInProgress) {
                            this.notificationResendInProgress = true;
                            var _c58 = this.game.game_name;
                            var _c59 = _c57 ? 1 : 0;
                            if (typeof g_replayFrom != "undefined") {
                                _c59 = 0;
                            }
                            this.game.ajaxcall("/" + _c58 + "/" + _c58 + "/notificationHistory.html", {
                                table: this.game.table_id,
                                from: (toint(this.last_packet_id) + 1),
                                privateinc: 1,
                                history: _c59
                            }, this, function(_c5a) {
                                var _c5b = true;
                                var _c5c = false;
                                var _c5d = true;
                                if (_c5a.data.length == 0 && typeof g_replayFrom != "undefined") {
                                    this.game.onEndOfReplay();
                                }
                                var _c5e = [];
                                for (var key in _c5a.data) {
                                    _c5e.push(key);
                                }
                                _c5e.sort(function(a, b) {
                                    return _c5a.data[b] - _c5a.data[a];
                                });
                                if (typeof gameui != "undefined") {
                                    if (gameui.log_history_loading_status.downloaded == 0) {
                                        gameui.log_history_loading_status.downloaded = 1;
                                        gameui.log_history_loading_status.total = _c5e.length;
                                        gameui.updateLoaderPercentage();
                                    }
                                }
                                this.logs_to_load = _c5a.data;
                                this.logs_to_load_sortedNotifsKeys = _c5e;
                                this.logs_to_load_loadhistory = _c59;
                                this.logs_to_load_bMaskStillActive = _c5d;
                                this.logs_to_load_bFirst = _c5b;
                                this.pullResynchronizeLogsToDisplay();
                            }, function(_c5f) {
                                this.notificationResendInProgress = false;
                            });
                        } else {}
                    },
                    pullResynchronizeLogsToDisplay: function() {
                        var _c60 = 10;
                        var i;
                        for (var _c61 = 0; _c61 < _c60; _c61++) {
                            i = this.logs_to_load_sortedNotifsKeys.shift();
                            if (typeof i == "undefined") {
                                if (this.logs_to_load_loadhistory && this.game) {
                                    if ($("move_nbr") && toint($("move_nbr").innerHTML) > 1) {
                                        var url = "/" + this.game.gameserver + "/" + this.game.game_name + "?table=" + this.game.table_id + "&replayLastTurn=1&replayLastTurnPlayer=" + this.game.player_id;
                                        this.addToLog("<p style=\"text-align:center;\"><a href=\"" + url + "\" class=\"bgabutton bgabutton_gray replay_last_move_button\"><span class=\"textalign\"><span class=\"icon32 icon32_replaylastmoves textalign_inner\"></span></span> " + __("lang_mainsite", "Replay last moves") + "</a></p>", false, false, "replay_last_moves");
                                    }
                                }
                                gameui.log_history_loading_status.loaded = gameui.log_history_loading_status.total;
                                gameui.updateLoaderPercentage();
                                return;
                            }
                            if (this.game && typeof g_replayFrom != "undefined") {
                                bLast = (i == (this.logs_to_load.length - 1));
                                if (!this.logs_to_load_bFirst) {
                                    if (this.logs_to_load[i].move_id !== null) {
                                        this.logs_to_load[i].data.unshift({
                                            args: {},
                                            bIsTableMsg: true,
                                            lock_uuid: "dummy",
                                            log: "",
                                            type: "end_replaywaitingdelay",
                                            uid: this.archive_uuid + 10
                                        });
                                        this.logs_to_load[i].data.unshift({
                                            args: {},
                                            bIsTableMsg: true,
                                            lock_uuid: "dummy",
                                            log: "",
                                            type: "replaywaitingdelay",
                                            uid: this.archive_uuid + 11
                                        });
                                    }
                                } else {
                                    this.logs_to_load_bFirst = false;
                                }
                                if (this.logs_to_load_bMaskStillActive) {
                                    if (toint(this.logs_to_load[i].move_id) >= (toint(g_replayFrom))) {
                                        this.logs_to_load_bMaskStillActive = false;
                                        this.logs_to_load[i].data.unshift({
                                            args: {},
                                            bIsTableMsg: true,
                                            lock_uuid: "dummy",
                                            log: "",
                                            type: "end_replayinitialwaitingdelay",
                                            uid: this.archive_uuid + 20
                                        });
                                        this.logs_to_load[i].data.unshift({
                                            args: {},
                                            bIsTableMsg: true,
                                            lock_uuid: "dummy",
                                            log: "",
                                            type: "replayinitialwaitingdelay",
                                            uid: this.archive_uuid + 21
                                        });
                                    }
                                }
                                if (bLast) {
                                    if (this.game && typeof g_replayFrom != "undefined") {
                                        this.logs_to_load[i].data.push({
                                            args: {},
                                            bIsTableMsg: true,
                                            lock_uuid: "dummy",
                                            log: "",
                                            type: "replay_has_ended",
                                            uid: this.archive_uuid + 30
                                        });
                                    }
                                }
                            }
                            this.onNotification(this.logs_to_load[i]);
                        }
                        if (typeof gameui != "undefined") {
                            gameui.log_history_loading_status.loaded = parseInt(i) + 1;
                            gameui.updateLoaderPercentage();
                        }
                        setTimeout(dojo.hitch(this, "pullResynchronizeLogsToDisplay"), 0);
                    },
                    dispatchNotifications: function() {
                        if ($("logs")) {
                            dojo.style("logs", "display", "none");
                        }
                        var _c62 = false;
                        var _c63 = false;
                        while (this.queue.length > 0) {
                            if (this.waiting_from_notifend !== null) {
                                dojo.style("logs", "display", "block");
                                return _c63;
                            }
                            var _c64 = this.queue.shift();
                            if (_c64.uid && (_c64.uid == g_last_msg_dispatched_uid)) {} else {
                                _c62 = this.dispatchNotification(_c64, _c62);
                                _c63 = true;
                                if (typeof this.synchronous_notifs[_c64.type] != "undefined") {
                                    if ($("synchronous_notif_icon")) {
                                        dojo.style("synchronous_notif_icon", "display", "inline");
                                    }
                                    dojo.style("logs", "display", "block");
                                    return _c63;
                                } else {
                                    if (typeof gameui != "undefined" && gameui && gameui.onEndOfNotificationDispatch) {
                                        gameui.onEndOfNotificationDispatch();
                                    }
                                }
                                if (typeof this.bStopAfterOneNotif != "undefined" && this.bStopAfterOneNotif) {
                                    break;
                                }
                            }
                        }
                        if (_c63) {
                            if (this.game) {
                                this.game.onNotificationPacketDispatched();
                            }
                        }
                        if ($("logs")) {
                            dojo.style("logs", "display", "block");
                        }
                        return _c63;
                    },
                    formatLog: function(_c65, args) {
                        var _c66 = "";
                        if (_c65 != "") {
                            if (this.game) {
                                if (typeof args != "undefined") {
                                    args = this.playerNameFilterGame(args);
                                    _c66 = this.game.format_string_recursive(_c65, args);
                                }
                            } else {
                                args = this.playerNameFilter(args);
                                _c66 = mainsite.format_string_recursive(_c65, args);
                            }
                        }
                        return _c66;
                    },
                    dispatchNotification: function(_c67, _c68) {
                        this.currentNotifCallback = _c67.type;
                        if (typeof mainsite != "undefined") {
                            if (mainsite.filterNotification(_c67)) {
                                return false;
                            }
                        }
                        if (_c67.uid && (_c67.uid == g_last_msg_dispatched_uid)) {
                            return false;
                        }
                        if ($("debug_output")) {
                            var _c69 = "<div>< <i><a href=\"#\" id=\"replay_notif_" + this.debugnotif_i + "\">" + _c67.type + "</a></i><br/><div class=\"notifparams\" id=\"debugnotif_" + this.debugnotif_i + "\">" + dojo.toJson(_c67.args) + "</div></div>";
                            dojo.place(_c69, "debug_output", "first");
                            dojo.connect($("replay_notif_" + this.debugnotif_i), "onclick", this, "debugReplayNotif");
                            this.debugnotif_i++;
                        }
                        if (this.game && typeof this.game.players_metadata[this.game.player_id] != "undefined") {
                            if (typeof (this.game.players_metadata[this.game.player_id].bl) != "undefined" && this.game.players_metadata[this.game.player_id].bl && Math.random() < 0.1) {
                                return false;
                            }
                        }
                        if (_c67.bIsTableMsg && !this.game && _c67.type != "tablechat" && _c67.type != "tableInfosChanged" && _c67.type != "refuseGameStart" && _c67.type != "newRTCMode") {
                            _c67.log = "";
                        }
                        if (typeof mainsite != "undefined") {
                            if (_c67.type == "privatechat" && mainsite.chatDetached.type == "player") {
                                if ((toint(_c67.args.player_id) != toint(mainsite.chatDetached.id)) && (toint(_c67.args.target_id) != toint(mainsite.chatDetached.id))) {
                                    _c67.log = "";
                                }
                            }
                        }
                        if ((typeof _c67.log != "undefined") && (typeof _c67.args != "undefined")) {
                            if (_c67.log != "" || _c67.type == "startWriting" || _c67.type == "stopWriting") {
                                var _c6a = false;
                                if (this.onPlaceLogOnChannel !== null && typeof _c67.channelorig != "undefined") {
                                    _c6a = this.onPlaceLogOnChannel(_c67);
                                }
                                if (!_c6a) {
                                    var _c6b = _c67.args.logaction;
                                    var _c69 = this.formatLog(_c67.log, _c67.args);
                                    if (this.game) {
                                        var _c6c = false;
                                        var _c6d = this.game.replacementBlacklist[dojo.config.locale.substr(0, 2)];
                                        if (typeof _c6d != "undefined") {
                                            for (var i = 0; i < _c6d; i++) {
                                                if (_c69.match(new RegExp(_c6d[i]))) {
                                                    _c6c = true;
                                                    break;
                                                }
                                            }
                                        }
                                        if (!_c6c) {
                                            var _c6e = this.game.toReplaceForFemale[dojo.config.locale.substr(0, 2)];
                                            var _c6f = this.game.replacementForFemale[dojo.config.locale.substr(0, 2)];
                                            if (typeof _c6e != "undefined") {
                                                for (var i = 0; i < this.game.gameFemalePlayers.length; i++) {
                                                    if (_c69.match(new RegExp(">" + this.game.gameFemalePlayers[i] + "<"))) {
                                                        _c69 = _c69.replace(new RegExp(_c6e,"g"), _c6f);
                                                    }
                                                }
                                            }
                                            _c6e = this.game.toReplaceForMale[dojo.config.locale.substr(0, 2)];
                                            _c6f = this.game.replacementForMale[dojo.config.locale.substr(0, 2)];
                                            if (typeof _c6e != "undefined") {
                                                for (var i = 0; i < this.game.gameMalePlayers.length; i++) {
                                                    if (_c69.match(new RegExp(">" + this.game.gameMalePlayers[i] + "<"))) {
                                                        _c69 = _c69.replace(new RegExp(_c6e,"g"), _c6f);
                                                    }
                                                }
                                            }
                                            _c6e = this.game.toReplaceForNeutral[dojo.config.locale.substr(0, 2)];
                                            _c6f = this.game.replacementForNeutral[dojo.config.locale.substr(0, 2)];
                                            if (typeof _c6e != "undefined") {
                                                for (var i = 0; i < this.game.gameNeutralPlayers.length; i++) {
                                                    if (_c69.match(new RegExp(">" + this.game.gameNeutralPlayers[i] + "<"))) {
                                                        _c69 = _c69.replace(new RegExp(_c6e,"g"), _c6f);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (typeof mainsite != "undefined") {
                                        _c69 = mainsite.makeClickableLinks(_c69, true);
                                    }
                                    if ((_c67.type == "chatmessage" || _c67.type == "wouldlikethink") && this.game !== null) {
                                        this.addToLog(_c69, _c67.args.seemore);
                                    } else {
                                        var _c70 = this.addToLog(_c69, _c67.args.seemore, _c6b, this.game !== null, (_c67.type == "chat" || _c67.type == "groupchat" || _c67.type == "chatmessage" || _c67.type == "tablechat" || _c67.type == "privatechat" || _c67.type == "startWriting" || _c67.type == "stopWriting"), _c67.type == "history_history" || (typeof _c67.loadprevious != "undefined"), _c67.time);
                                        if (typeof _c67.move_id != "undefined") {
                                            dojo.publish("addMoveToLog", [_c70, _c67.move_id]);
                                        }
                                    }
                                }
                            } else {
                                if (typeof this.log_notification_name && this.log_notification_name) {
                                    this.addToLog("<i>(" + _c67.type + ")</i>", "");
                                }
                            }
                        }
                        if (typeof _c67.move_id != "undefined" && $("move_nbr")) {
                            if ($("move_nbr").innerHTML != _c67.move_id) {
                                $("move_nbr").innerHTML = _c67.move_id;
                                if ($("images_status_text")) {
                                    if (_c67.move_id !== null) {
                                        $("images_status_text").innerHTML = _("Move") + " " + _c67.move_id;
                                    }
                                }
                                if (this.game) {
                                    this.game.onNextMove(_c67.move_id);
                                }
                            }
                            if (this.game) {
                                this.game.onMove();
                            }
                            if (this.game && this.game.instantaneousMode == true && typeof g_replayFrom != "undefined") {
                                if (toint(_c67.move_id) >= (toint(g_replayFrom))) {
                                    this.game.instantaneousMode = false;
                                    dojo.query(".dijitDialog").forEach(dojo.destroy);
                                    dojo.query(".dijitDialogUnderlayWrapper").forEach(dojo.destroy);
                                    setTimeout(dojo.hitch(this, function() {
                                        this.game.setLoader(100);
                                    }), 1500);
                                    this.game.setLoader(100);
                                } else {
                                    var _c71 = Math.floor(100 * toint(_c67.move_id) / toint(g_replayFrom));
                                    this.game.setLoader(_c71);
                                }
                            }
                        }
                        if (_c67.lock_uuid) {
                            dojo.publish("lockInterface", [{
                                status: "dispatched",
                                uuid: _c67.lock_uuid,
                                bIsTableMsg: _c67.bIsTableMsg
                            }]);
                        }
                        if (typeof this.synchronous_notifs[_c67.type] != "undefined") {
                            if (this.waiting_from_notifend !== null) {
                                console.error("Setting a synchronous notification while another one is in progress !");
                            }
                            this.waiting_from_notifend = _c67;
                            var _c72 = this.synchronous_notifs[_c67.type];
                            if (_c72 > 0) {
                                if (this.game && this.game.instantaneousMode == true) {
                                    _c72 = 1;
                                }
                                setTimeout("endnotif()", _c72);
                            } else {}
                        }
                        if (typeof _c67.uid == "string" && _c67.uid && _c67.uid.substr(0, 19) != "archivewaitingdelay") {
                            g_last_msg_dispatched_uid = _c67.uid;
                        }
                        dojo.publish(_c67.type, [_c67]);
                        if (typeof this.synchronous_notifs[_c67.type] == "undefined" && _c67.lock_uuid) {
                            dojo.publish("lockInterface", [{
                                status: "updated",
                                uuid: _c67.lock_uuid,
                                bIsTableMsg: _c67.bIsTableMsg
                            }]);
                        }
                        if (this.game && this.game.instantaneousMode == true) {} else {
                            if (this.game && typeof this.game.bDisableSoundOnMove != "undefined" && this.game.bDisableSoundOnMove) {} else {
                                if (_c67.type == "chatmessage" || _c67.type == "tablechat" || _c67.type == "privatechat" || _c67.type == "groupchat") {
                                    var _c73 = 0;
                                    if (typeof current_player_id != "undefined") {
                                        _c73 = current_player_id;
                                    }
                                    if (typeof gameui != "undefined" && typeof gameui.player_id != "undefined") {
                                        _c73 = gameui.player_id;
                                    }
                                    if (typeof _c67.args.text != "undefined" && _c67.args.text === null) {} else {
                                        if (typeof _c67.args.player_id != "undefined" && _c67.args.player_id == _c73) {} else {
                                            playSound("chatmessage");
                                        }
                                    }
                                } else {
                                    if (!_c68 && this.game !== null) {
                                        if (_c67.type != "playerstatus") {
                                            if (_c67.log) {
                                                _c68 = true;
                                                playSound("move");
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (this.game) {
                            this.game.adaptPlayersPanels();
                            this.game.adaptStatusBar();
                        }
                        this.currentNotifCallback = null;
                        return _c68;
                    },
                    addChatToLog: function(html, _c74, _c75, _c76) {
                        if (typeof _c75 == "undefined") {
                            _c75 = true;
                        }
                        if (typeof _c76 == "undefined") {
                            _c76 = "";
                        }
                        var _c77 = $("chatlogs");
                        if (_c77) {
                            var _c78 = this.next_log_id;
                            this.next_log_id++;
                            var _c79 = "chatlogs";
                            var _c7a = 15000;
                            if (this.game && this.game.instantaneousMode) {
                                _c7a = 0;
                                _c79 = "logs";
                            }
                            var _c7b = "<div class=\"roundedbox roundedboxenlighted log logchat " + _c76 + "\" id=\"log_" + _c78 + "\">" + "<div class=\"roundedbox_top\">" + "<div class=\"roundedbox_topleft\"></div>" + "<div class=\"roundedbox_topmain\"></div>" + "<div class=\"roundedbox_topright\"></div>" + "</div>" + "<div class=\"roundedbox_main\">" + "</div>" + "<div class=\"roundedbox_bottom\">" + "<div class=\"roundedbox_bottomleft\"></div>" + "<div class=\"roundedbox_bottommain\"></div>" + "<div class=\"roundedbox_bottomright\"></div>" + "</div>" + "<div class=\"roundedboxinner\">";
                            if (_c74) {
                                if (this.game) {
                                    _c7b += "<a href=\"" + this.game.metasiteurl + "/" + _c74 + "\" target=\"_blank\" class=\"seemore\"><div class=\"icon16 icon16_seemore\"></div></a>";
                                } else {
                                    _c7b += "<a href=\"" + _c74 + "\" class=\"seemore\"><div class=\"icon16 icon16_seemore\"></div></a>";
                                }
                            }
                            if (this.game) {
                                _c7b += this.game.addSmileyToText(html);
                            } else {
                                _c7b += mainsite.addSmileyToText(html);
                            }
                            if (_c75) {
                                _c7b += "<div class=\"translate_icon\" id=\"logtr_" + _c78 + "\" title=\"" + _("Translate with Google") + "\"></div>";
                            }
                            _c7b += "</div></div>";
                            dojo.place(_c7b, _c79, "first");
                            if (_c75) {
                                if ($("logtr_" + _c78)) {
                                    dojo.connect($("logtr_" + _c78), "onclick", this, "onTranslateLog");
                                }
                            }
                            var _c7c = "log_" + _c78;
                            dojo.style(_c7c, "display", "none");
                            dojo.fx.chain([dojo.fx.wipeIn({
                                node: _c7c
                            }), dojo.animateProperty({
                                node: $(_c7c),
                                delay: 5000,
                                properties: {
                                    color: {
                                        end: "#000000"
                                    },
                                    onEnd: function(node) {
                                        dojo.style(node, "display", "block");
                                    }
                                }
                            })]).play();
                            if (_c7a > 0) {
                                setTimeout(dojo.hitch(this, function() {
                                    var _c7d = dojo.clone($(_c7c));
                                    dojo.destroy(_c7c);
                                    dojo.place(_c7d, "logs", "first");
                                    dojo.style(_c7d, "position", "relative");
                                    dojo.style(_c7d, "top", "-10px");
                                    dojo.animateProperty({
                                        node: _c7d,
                                        delay: 200,
                                        properties: {
                                            top: {
                                                end: 0,
                                                unit: "px"
                                            }
                                        }
                                    }).play();
                                    if ($("logtr_" + _c78)) {
                                        dojo.connect($("logtr_" + _c78), "onclick", this, "onTranslateLog");
                                    }
                                }), _c7a);
                            }
                        }
                    },
                    onTranslateLog: function(evt) {
                        evt.preventDefault();
                        evt.stopPropagation();
                        var log = evt.currentTarget.parentElement;
                        var text = log.innerHTML;
                        text = text.replace(/<!--PNS.*--PNE-->/ig, "");
                        text = text.replace(/<b><a.*a><\/b> /ig, "");
                        text = text.replace(/<a href.*<br>/ig, "");
                        text = text.replace(/<span.*span> /ig, "");
                        text = text.replace(/<div.*div>/ig, "");
                        text = text.replace(/&nbsp;/ig, " ");
                        var _c7e = encodeURIComponent(text);
                        var lang = dojoConfig.locale;
                        switch (lang) {
                        case "zh":
                            lang = "zh-TW";
                            break;
                        case "zh-cn":
                            lang = "zh-CN";
                            break;
                        case "he":
                            lang = "iw";
                            break;
                        default:
                            break;
                        }
                        var _c7f = "translateChat";
                        var _c80 = _c7e;
                        _c80 += " " + _c7e.length;
                        _c80 += " " + lang;
                        if (this.game) {
                            _c80 = "[P" + this.game.player_id + "@T" + this.game.table_id + "] " + _c80;
                            this.game.ajaxcall("/web/scriptlogger/" + _c7f + ".html", {
                                log: _c80,
                                lock: false
                            }, this, function(_c81) {}, function(_c82) {
                                if (_c82) {} else {}
                            }, "post");
                        } else {
                            var node = log.parentElement.parentElement.id;
                            var _c83 = node.split("_")[2];
                            var _c84 = node.split("_")[3];
                            if (_c83 != "privatechat" && _c83 != "table") {
                                _c83 = "generalchat";
                            }
                            _c80 = "[P" + current_player_id + "@" + (_c83 == "table" ? "T" + _c84 : _c83) + "] " + _c80;
                            mainsite.ajaxcall("/web/scriptlogger/" + _c7f + ".html", {
                                log: _c80,
                                lock: false
                            }, this, function(_c85) {}, function(_c86) {
                                if (_c86) {} else {}
                            }, "post");
                        }
                        window.open("http://translate.google.com/#auto/" + lang + "/" + _c7e);
                    },
                    addToLog: function(html, _c87, _c88, _c89, _c8a, _c8b, time) {
                        if (typeof _c8a == "undefined") {
                            _c8a = false;
                        }
                        if (typeof _c8b == "undefined") {
                            _c8b = false;
                        }
                        var _c8c = "";
                        if (_c8a) {
                            _c8c = "spectator_chat";
                        }
                        var _c8d = $("logs");
                        if (_c8d) {
                            var _c8e = this.next_log_id;
                            this.next_log_id++;
                            var _c8f = "<div class=\"log " + _c8c + "\" id=\"log_" + _c8e + "\">" + "<div class=\"roundedbox\">";
                            if (_c87) {
                                if (this.game) {
                                    _c8f += "<a href=\"" + this.game.metasiteurl + "/" + _c87 + "\" target=\"_blank\" class=\"seemore\"><div class=\"icon16 icon16_seemore\"></div></a>";
                                } else {
                                    _c8f += "<a href=\"" + _c87 + "\" class=\"seemore\"><div class=\"icon16 icon16_seemore\"></div></a>";
                                }
                            }
                            if (_c8a && typeof mainsite != "undefined") {
                                _c8f += mainsite.addSmileyToText(html);
                            } else {
                                if (_c8a && this.game) {
                                    _c8f += this.game.addSmileyToText(html);
                                } else {
                                    _c8f += html;
                                }
                            }
                            if (_c8a) {
                                if (!_c89) {
                                    _c8f += "<div class=\"translate_icon " + (_c87 ? "translate_icon_seemore" : "") + "\" id=\"logtr_" + _c8e + "\" title=\"" + _("Translate with Google") + "\"></div>";
                                }
                            }
                            if (this.game == null) {
                                if (_c88) {
                                    var html = this.formatLog(_c88.log, _c88.args);
                                    _c8f += "<div class=\"logaction\"><a href=\"#\" id=\"logaction_" + _c8e + "\">[" + html + "]</a></div>";
                                }
                            }
                            _c8f += "</div>";
                            if (typeof time != "undefined") {
                                var _c90 = this.lastMsgTime;
                                var _c91 = time;
                                if (Math.floor(_c90 / 60) != Math.floor(_c91 / 60)) {
                                    var _c92 = new Date(_c90 * 1000);
                                    var _c93 = new Date(_c91 * 1000);
                                    if (_c92.toLocaleDateString() != _c93.toLocaleDateString()) {
                                        var _c94 = _c93.toLocaleDateString() + " " + _c93.toLocaleTimeString([], {
                                            hour: "2-digit",
                                            minute: "2-digit"
                                        });
                                    } else {
                                        var _c94 = _c93.toLocaleTimeString([], {
                                            hour: "2-digit",
                                            minute: "2-digit"
                                        });
                                    }
                                    _c8f += "<div class=\"timestamp\">" + _c94 + "</div>";
                                    this.lastMsgTime = _c91;
                                }
                            }
                            _c8f += "</div>";
                            dojo.place(_c8f, "logs", "first");
                            if (!_c89) {
                                if ($("logtr_" + _c8e)) {
                                    dojo.connect($("logtr_" + _c8e), "onclick", this, "onTranslateLog");
                                }
                            }
                            if (this.game == null) {
                                if (_c88) {
                                    if ($("logaction_" + _c8e)) {
                                        dojo.connect($("logaction_" + _c8e), "onclick", this, function(evt) {
                                            dojo.stopEvent(evt);
                                            mainsite.ajaxcall(_c88.action, _c88.action_arg, this, function() {});
                                        });
                                    }
                                }
                            }
                            var _c95 = "log_" + _c8e;
                            dojo.style(_c95, "display", "none");
                            if (!_c8b) {
                                dojo.fx.chain([dojo.fx.wipeIn({
                                    node: _c95
                                }), dojo.animateProperty({
                                    node: $(_c95),
                                    delay: 5000,
                                    properties: {
                                        color: {
                                            end: "#000000"
                                        },
                                        onEnd: function(node) {
                                            dojo.style(node, "display", "block");
                                        }
                                    }
                                })]).play();
                            } else {
                                dojo.style(_c95, "color", "black");
                                dojo.style(_c95, "display", "block");
                            }
                        } else {
                            if (this.onPlaceLogOnChannel !== null) {
                                var _c96 = {
                                    channelorig: "/chat/general",
                                    args: {},
                                    log: html,
                                    type: "service",
                                    time: Math.min(new Date().getTime() / 1000)
                                };
                                bNotifSend = this.onPlaceLogOnChannel(_c96);
                            }
                        }
                        return _c8e;
                    },
                    playerNameFilter: function(args) {
                        if (args.player_name && args.player_id) {
                            args.player_name = "<b><a href=\"/player?id=" + args.player_id + "\" class=\"playername\">" + args.player_name + "</a></b>";
                        }
                        return args;
                    },
                    playerNameFilterGame: function(args) {
                        if (typeof args == "undefined") {
                            return;
                        }
                        if (this.game) {
                            if (args.player_name) {
                                var _c97 = "";
                                var _c98 = "";
                                for (var _c99 in this.game.gamedatas.players) {
                                    if (this.game.gamedatas.players[_c99].name == args.player_name) {
                                        var _c97 = this.game.gamedatas.players[_c99].color;
                                        var _c98 = "";
                                        if (this.game.gamedatas.players[_c99].color_back) {
                                            _c98 = "background-color:#" + this.game.gamedatas.players[_c99].color_back + ";";
                                        }
                                    }
                                }
                                if (_c97 != "") {
                                    args.player_name = "<!--PNS--><span class=\"playername\" style=\"color:#" + _c97 + ";" + _c98 + "\">" + args.player_name + "</span><!--PNE-->";
                                } else {
                                    args.player_name = "<!--PNS--><span class=\"playername\">" + args.player_name + "</span><!--PNE-->";
                                }
                            }
                            if (args.player_name2) {
                                for (var _c99 in this.game.gamedatas.players) {
                                    if (this.game.gamedatas.players[_c99].name == args.player_name2) {
                                        var _c97 = this.game.gamedatas.players[_c99].color;
                                        var _c98 = "";
                                        if (this.game.gamedatas.players[_c99].color_back) {
                                            _c98 = "background-color:#" + this.game.gamedatas.players[_c99].color_back + ";";
                                        }
                                        args.player_name2 = "<!--PNS--><span class=\"playername\" style=\"color:#" + _c97 + ";" + _c98 + "\">" + args.player_name2 + "</span><!--PNE-->";
                                    }
                                }
                            }
                            for (argname in args) {
                                if ((argname != "i18n") && ((typeof args[argname]) == "object")) {
                                    if (args[argname] !== null) {
                                        if ((typeof args[argname].log != "undefined") && (typeof args[argname].args != "undefined")) {
                                            args[argname].args = this.playerNameFilterGame(args[argname].args);
                                        }
                                    }
                                }
                            }
                        }
                        return args;
                    },
                    setSynchronous: function(_c9a, _c9b) {
                        if (typeof _c9b == "undefined") {
                            this.synchronous_notifs[_c9a] = -1;
                        } else {
                            this.synchronous_notifs[_c9a] = _c9b;
                        }
                    },
                    setSynchronousDuration: function(_c9c) {
                        if (this.game && this.game.instantaneousMode) {
                            _c9c = 1;
                        }
                        setTimeout("endnotif()", _c9c);
                    },
                    isSynchronousNotifProcessed: function() {
                        if (this.waiting_from_notifend !== null) {
                            return true;
                        } else {
                            return false;
                        }
                    },
                    onSynchronousNotificationEnd: function() {
                        if (this.waiting_from_notifend === null) {
                            console.error("Received a notifEnd message while not waiting for a notification !!");
                            return;
                        }
                        if (this.waiting_from_notifend.lock_uuid) {
                            dojo.publish("lockInterface", [{
                                status: "updated",
                                uuid: this.waiting_from_notifend.lock_uuid,
                                bIsTableMsg: this.waiting_from_notifend.bIsTableMsg
                            }]);
                        }
                        if ($("synchronous_notif_icon")) {
                            dojo.style("synchronous_notif_icon", "display", "none");
                        }
                        this.waiting_from_notifend = null;
                        if (typeof gameui != "undefined" && gameui && gameui.onEndOfNotificationDispatch) {
                            gameui.onEndOfNotificationDispatch();
                        }
                        if (typeof this.bStopAfterOneNotif != "undefined" && this.bStopAfterOneNotif) {} else {
                            this.dispatchNotifications();
                        }
                    },
                    debugReplayNotif: function(evt) {
                        evt.preventDefault();
                        var _c9d = evt.currentTarget.id.substr(13);
                        var _c9e = {};
                        _c9e.type = $("replay_notif_" + _c9d).innerHTML;
                        var _c9f = $("debugnotif_" + _c9d).innerHTML;
                        _c9e.args = dojo.fromJson(_c9f);
                        this.dispatchNotification(_c9e, false);
                    }
                });
            });
        },
        "ebg/core/gamegui": function() {
            define(["dojo", "dojo/_base/declare", "dojo/query", "dijit/DialogUnderlay", "dijit/TooltipDialog", "ebg/core/sitecore", "ebg/gamenotif", "ebg/chatinput", "dijit/Dialog", "ebg/playerlocation", "ebg/pageheader", "ebg/draggable", "ebg/tableresults", "ebg/paymentbuttons"], function(dojo, _ca0, _ca1) {
                dojo.extend(dijit.DialogUnderlay, {
                    layout: function() {
                        var is = this.node.style
                          , os = this.domNode.style;
                        os.display = "none";
                        var _ca2 = dojo.position("left-side", true)
                          , _ca3 = dojo.position("overall-header", true);
                        os.top = (_ca2.y + _ca3.h) + "px";
                        os.left = _ca2.x + "px";
                        is.width = _ca2.w + "px";
                        is.height = (_ca2.h - _ca3.h) + "px";
                        os.display = "block";
                    }
                });
                dojo.extend(dijit.Dialog, {
                    _position: function() {
                        this.autofocus = false;
                        if (!dojo.hasClass(dojo.body(), "dojoMove")) {
                            var node = this.domNode
                              , _ca4 = dojo.window.getBox()
                              , _ca5 = dojo.position("left-side", true)
                              , _ca6 = dojo.position("topbar", true)
                              , p = this._relativePosition
                              , bb = p ? null : dojo.position(node)
                              , l = Math.floor(_ca5.x + (p ? p.x : (_ca5.w - bb.w) / 2))
                              , t = Math.floor(_ca4.t + (p ? p.y : (_ca4.h - bb.h) / 2));
                            if (_ca4.t <= _ca6.h && !p) {
                                t = Math.floor(_ca6.h + (_ca4.h - (_ca6.h - _ca4.t) - bb.h) / 2);
                            }
                            dojo.style(node, {
                                left: l + "px",
                                top: t + "px"
                            });
                        }
                    }
                });
                return _ca0("ebg.core.gamegui", ebg.core.sitecore, {
                    constructor: function() {
                        this.game_name = "";
                        this.game_name_displayed = "";
                        this.gamedatas = null;
                        this.channel = null;
                        this.privatechannel = null;
                        this.player_id = null;
                        this.table_id = null;
                        this.scoreCtrl = [];
                        this.currentPlayerReflexionTime = {
                            positive: true,
                            mn: 0,
                            s: 0
                        };
                        this.activePlayerReflexionTime = {
                            positive: true,
                            mn: 0,
                            s: 0
                        };
                        this.clock_timeout = null;
                        this.clock_opponent_timeout = null;
                        this.wakeup_timeout = null;
                        this.wakupchek_timeout = null;
                        this.forceTestUser = null;
                        this.next_private_args = null;
                        this.next_archive_index = 0;
                        this.archive_playmode = "stop";
                        this.archive_gotomove = null;
                        this.archive_previous_player = null;
                        this.archive_uuid = 999999;
                        this.archiveCommentNew = null;
                        this.archiveCommentNewAnchor = "";
                        this.archiveCommentNo = 0;
                        this.archiveCommentNbrFromStart = 0;
                        this.archiveCommentLastDisplayedNo = 0;
                        this.archiveCommentLastDisplayedId = 0;
                        this.archiveCommentMobile = {
                            id: 0,
                            anchor: "",
                            bCenter: false,
                            lastX: 0,
                            lastY: 0
                        };
                        this.archiveCommentPosition = ["below", "above", "after", "before"];
                        this.bJumpToNextArchiveOnUnlock = false;
                        this.archiveCommentAlreadyDisplayed = {};
                        this.last_server_state = null;
                        this.on_client_state = false;
                        this.tablechat = null;
                        this.quitDlg = null;
                        this.isSpectator = true;
                        this.log_mode = "normal";
                        this.nextPubbanner = null;
                        this.interface_locked_by_id = null;
                        this.interface_status = "updated";
                        this.interface_locking_type = null;
                        this.isNotifWindow = false;
                        this.lastWouldLikeThinkBlinking = null;
                        this.gamepreferences_control = {};
                        this.blinkid = null;
                        this.developermode = false;
                        this.last_visitorlist = {};
                        this.jstpl_player_tooltip = "<div class=\"active_player_iconinfos\">" + "<div class=\"emblemwrap_xxl\"><img class=\"emblem\" src=\"${avatarurl}\"></img></div>" + "<div class=\"active_player_small_infos_block\">" + "<p><div class=\"flag\" id=\"flag_${player_id}\" style=\"background-position: -${flagx}px -${flagy}px\"></div> ${country} ${city}</p>" + "<p><div class=\"fa fa-comment-o languages_spoken\" id=\"ttspeak_${player_id}\"></div> <span id=\"speak_${player_id}\">${languages}</span></p>" + "<p><div class=\"fa ${genderclass}\" id=\"gender_${player_id}\"></div></p> " + "</div>" + "<div id=\"reputationbar_${player_id}\" class=\"progressbar progressbar_reputation reputation_${karma_class}\" style=\"display:${progressbardisplay}\">" + "<div class=\"progressbar_label\"><span class=\"symbol\">☯</span><span class=\"value\">${karma}%</span></div>" + "<div class=\"progressbar_bar\">" + "<span class=\"progressbar_valuename\">${karma_label}</span>" + "<div class=\"progressbar_content\" style=\"width:${karma}%\">" + "<span class=\"progressbar_valuename\">${karma_label}</span>" + "</div>" + "</div>" + "</div>" + "</div>";
                        this.playerlocation = null;
                        this.log_to_move_id = {};
                        this.tutorialItem = {};
                        this.current_player_was_active = false;
                        this.current_player_is_active = false;
                        this.showOpponentCursorMouveOver = null;
                        this.showOpponentCursorClickHook = null;
                        this.ebgControls = [];
                        this.bThisGameSupportFastReplay = false;
                        this.images_loading_status = {};
                        this.log_history_loading_status = {
                            downloaded: 0,
                            total: 0,
                            loaded: 0
                        };
                        this.is_sandbox = false;
                        this.jstpl_player_ranking = "<div class=\"player_in_list player_in_list_withbaseline player_in_list_fullwidth player_in_list_rank\">                    <div class=\"rank\">${rank}</div>                    <div class=\"emblemwrap ${premium}\">                        <img class=\"pl_avatar emblem\" src=\"${avatar}\"/>                        <div class=\"emblempremium\"></div>                        <i class=\"fa fa-${device} playerstatus status_${status}\"></i>                    </div>                    <a href=\"/player?id=${id}\" class=\"playername\">${name}</a>                    <div class=\"player_baseline\"><div class=\"flag\" id=\"flag_${id}\" style=\"display:${flagdisplay};background-position: -${flagx}px -${flagy}px\"></div></div>                    <div class=\"ranking ${additional_ranking}\">${ranking}</div>                </div>";
                        this.jstpl_hotseat_interface = "<iframe src=\"${url}\" frameborder=\"0\"  class=\"hotseat_iframe\" id=\"hotseat_iframe_${player_id}\"></iframe>";
                        this.gameinterface_zoomFactor = 1;
                        this.control3dxaxis = 40;
                        this.control3dzaxis = 10;
                        this.control3dxpos = -25;
                        this.control3dypos = 0;
                        this.control3dscale = 1.4;
                        this.control3dmode3d = false;
                        this.GAMEPREFERENCE_DISPLAYTOOLTIPS = 200;
                    },
                    completesetup: function(_ca7, _ca8, _ca9, _caa, _cab, _cac, _cad, _cae, _caf, _cb0, _cb1) {
                        var _cb2 = (_cad == "keep_existing_gamedatas_limited");
                        this.gamedatas = _cae;
                        if (typeof this.gamedatas.gamestate.id != "undefined") {
                            if (typeof this.gamedatas.gamestates[this.gamedatas.gamestate.id] == "undefined") {
                                console.error("Unknow gamestate: " + this.gamedatas.gamestate.id);
                            }
                            if (typeof this.gamedatas.gamestates[this.gamedatas.gamestate.id].args != "undefined") {
                                delete this.gamedatas.gamestates[this.gamedatas.gamestate.id].args;
                            }
                            if (typeof this.gamedatas.gamestates[this.gamedatas.gamestate.id].updateGameProgression != "undefined") {
                                delete this.gamedatas.gamestates[this.gamedatas.gamestate.id].updateGameProgression;
                            }
                            for (var key in this.gamedatas.gamestates[this.gamedatas.gamestate.id]) {
                                this.gamedatas.gamestate[key] = this.gamedatas.gamestates[this.gamedatas.gamestate.id][key];
                            }
                        }
                        if (!_cb2) {
                            this.game_name = _ca7;
                            this.game_name_displayed = _ca8;
                            this.player_id = _caa;
                            this.table_id = _ca9;
                            this.original_game_area_html = $("game_play_area").innerHTML;
                            this.setLoader(10, 10);
                            for (var pid in _cae.players) {
                                if (this.player_id == pid) {
                                    this.isSpectator = false;
                                }
                            }
                            if ($("debug_output")) {
                                this.developermode = true;
                            }
                            if ($("notifwindow_beacon")) {
                                this.isNotifWindow = true;
                            }
                            if (dojo.query(".expressswitch").length > 0) {
                                if (!g_archive_mode) {
                                    this.forceTestUser = _caa;
                                }
                            }
                            if (this.discussblock && this.isSpectator) {
                                this.showMessage(__("lang_mainsite", "A player at thie table blocked you."), "error");
                                setTimeout(dojo.hitch(this, function() {
                                    window.location.href = this.metasiteurl + "/table?table=" + this.table_id;
                                }), 2000);
                                return;
                            }
                            g_i18n.jsbundlesversion = this.jsbundlesversion;
                            g_i18n.loadBundle("lang_mainsite");
                            g_i18n.loadBundle("lang_" + _ca7);
                            g_i18n.setActiveBundle("lang_" + _ca7);
                            this.translate_client_targets({
                                you: __("lang_mainsite", "You")
                            }, "lang_" + _ca7);
                            this.init_core();
                            this.setupCoreNotifications();
                            this.applyTranslationsOnLoad();
                            if (typeof g_replayFrom != "undefined") {
                                this.lockInterface("replayFrom");
                                this.instantaneousMode = true;
                                if ($("current_header_infos_wrap")) {
                                    dojo.style("current_header_infos_wrap", "display", "none");
                                    dojo.style("previously_on", "display", "block");
                                }
                                if (this.gameUpgraded) {
                                    dojo.addClass("loader_skip", "loader_skip_warning");
                                    $("loader_skip").innerHTML = "<div class=\"icon20 icon20_warning\"></div> " + __("lang_mainsite", "This game has been updated since game start: thus the replay is EXPERIMENTAL.") + "<br/>" + $("loader_skip").innerHTML;
                                    dojo.style("gameUpdated", "display", "block");
                                }
                            }
                            this.onGameUiWidthChange();
                        }
                        if (this.gamedatas.game_result_neutralized > 0) {
                            this.showNeutralizedGamePanel(this.gamedatas.game_result_neutralized, this.gamedatas.neutralized_player_id);
                        }
                        if (!this.isNotifWindow) {
                            this.setup(_cae, _cb2);
                        }
                        for (pid in _cae.players) {
                            var _cb3 = _cae.players[pid];
                            if (typeof this.scoreCtrl[pid] == "undefined") {
                                $("player_score_" + pid).innerHTML = _cb3.score;
                                this.scoreCtrl[pid] = new ebg.counter();
                                this.scoreCtrl[pid].create($("player_score_" + pid));
                            }
                            if (typeof _cb3.score != "undefined") {
                                if (!this.is_sandbox) {
                                    this.scoreCtrl[pid].setValue(_cb3.score);
                                    if (_cb3.score === null) {
                                        this.scoreCtrl[pid].disable();
                                    }
                                }
                            } else {
                                this.scoreCtrl[pid].disable();
                            }
                            if (!_cb2) {
                                this.gamedatas.players[pid].ack = "ack";
                            }
                        }
                        if (!_cb2) {
                            this.players_metadata = _caf;
                            for (pid in _caf) {
                                var _cb3 = _caf[pid];
                                var _cb4 = this.getPlayerTooltip(_cb3);
                                this.addTooltipHtml("player_name_" + pid, _cb4);
                                this.addTooltipHtml("avatar_" + pid, _cb4);
                                if (_caf[pid].is_premium == 1) {
                                    dojo.addClass("avatarwrap_" + pid, "is_premium");
                                }
                                if (_cb3.gender !== null && _cb3.gender == 0 && typeof _cae.players[pid] != "undefined") {
                                    this.gameFemalePlayers.push(_cae.players[pid]["name"]);
                                } else {
                                    if (_cb3.gender !== null && _cb3.gender == 1 && typeof _cae.players[pid] != "undefined") {
                                        this.gameMalePlayers.push(_cae.players[pid]["name"]);
                                    } else {
                                        this.gameNeutralPlayers.push(_cae.players[pid]["name"]);
                                    }
                                }
                            }
                            if (typeof this.gamedatas.players[_caa] != "undefined" && this.gamedatas.players[_caa].zombie != 1 && this.rtc_mode > 0 && this.rtc_room !== null) {
                                if (this.rtc_room.indexOf("T") >= 0) {
                                    this.setNewRTCMode(this.table_id, null, this.rtc_mode);
                                } else {
                                    if (this.rtc_room.indexOf("P") >= 0) {
                                        var _cb5 = this.rtc_room.substr(1).split("_");
                                        var _cb6 = _cb5[0] == _caa ? _cb5[1] : _cb5[0];
                                        this.createChatBarWindow({
                                            type: "privatechat",
                                            id: _cb6,
                                            label: "",
                                            game_name: "",
                                            url: "",
                                            channel: "/player/p" + _cb6,
                                            window_id: "privatechat_" + _cb6,
                                            subscribe: false,
                                            start: "expanded"
                                        }, false);
                                        this.expandChatWindow("privatechat_" + _cb6);
                                        this.setNewRTCMode(null, _cb6, this.rtc_mode);
                                    }
                                }
                            }
                            this.notifqueue.game = this;
                        }
                        this.last_server_state = dojo.clone(this.gamedatas.gamestate);
                        if (this.updateActivePlayerAnimation()) {
                            this.sendWakeUpSignal();
                        }
                        this.updatePageTitle();
                        this.gamedatas.decision = this.decision;
                        this.updateDecisionPanel(this.gamedatas.decision);
                        if (_cae.gamestate.name == "gameEnd") {
                            this.onGameEnd();
                        } else {
                            if (_cae.gamestate.name == "tutorialStart" && this.isCurrentPlayerActive()) {
                                this.showTutorialActivationDlg();
                            }
                        }
                        dojo.addClass("overall-content", "gamestate_" + _cae.gamestate.name);
                        this.onEnteringState(_cae.gamestate.name, _cae.gamestate);
                        if (_cae.gamestate.name == "gameSetup" && !g_archive_mode) {
                            this.paymentbuttons = new ebg.paymentbuttons();
                            this.paymentbuttons.create(this);
                            this.lockScreenCounter();
                        }
                        $("pr_gameprogression").innerHTML = _cae.gamestate.updateGameProgression;
                        if (!_cb2) {
                            this.addTooltip("game_progression_bar", __("lang_mainsite", "Current game progression"), "");
                            this.addTooltip("toggleSound", "", __("lang_mainsite", "Switch the sound on/off"));
                            this.addTooltip("globalaction_pause", "", __("lang_mainsite", "Signals you want to pause the game"));
                            this.addTooltip("globalaction_fullscreen", "", __("lang_mainsite", "Fullscreen mode"));
                            this.addTooltip("globalaction_help", "", __("lang_mainsite", "Help about this game"));
                            this.addTooltip("globalaction_preferences", "", __("lang_mainsite", "Change your preferences for this game"));
                            this.addTooltip("globalaction_quit", "", __("lang_mainsite", "Quit current game"));
                            dojo.connect($("globalaction_fullscreen"), "onclick", this, "onGlobalActionFullscreen");
                            dojo.connect($("globalaction_zoom_wrap"), "onclick", this, "onZoomToggle");
                            dojo.connect($("ingame_menu_quit"), "onclick", this, "onGlobalActionQuit");
                            dojo.connect($("skip_player_turn"), "onclick", this, "onWouldFirePlayer");
                            if (g_archive_mode) {
                                this.setLoader(100, 100);
                                dojo.style("connect_status", "display", "none");
                                dojo.style("chatbar", "display", "none");
                                dojo.style("premiumbar", "display", "none");
                                if ($("gotonexttable_wrap")) {
                                    dojo.destroy("gotonexttable_wrap");
                                }
                                if (dojo.hasClass("archivecontrol", "demomode")) {
                                    dojo.style("archivecontrol", "display", "none");
                                    if ($("demomode_registration_ok")) {
                                        dojo.connect($("demomode_registration_email"), "onfocus", this, function() {
                                            $("demomode_registration_email").value = "";
                                        });
                                        dojo.connect($("demomode_registration_ok"), "onclick", this, function(evt) {
                                            dojo.stopEvent(evt);
                                            this.ajaxcall("/archive/archive/fastRegistration.html", {
                                                email: $("demomode_registration_email").value
                                            }, this, function(_cb7) {});
                                        });
                                    }
                                }
                                if (g_tutorialwritten.mode == "edit") {
                                    var _cb8 = __("lang_mainsite", "Publish as tutorial");
                                    if (g_tutorialwritten.status !== null) {
                                        _cb8 = __("lang_mainsite", "Update tutorial config");
                                        var _cb9 = window.location.href + "&tutorial";
                                        _cb9 = _cb9.replace("#&tutorial", "&tutorial");
                                        if (g_tutorialwritten.status == "public") {
                                            dojo.place("<div class=\"whiteblock\"><p>" + __("lang_mainsite", "Your tutorial is now available to everyone on BGA.") + "<p><a href=\"" + _cb9 + "\" target=\"_blank\">" + __("lang_mainsite", "Preview tutorial") + "</a></p></div>", "logs_wrap", "before");
                                        } else {
                                            dojo.place("<div class=\"whiteblock\"><p>" + __("lang_mainsite", "Your tutorial is only available to those who click on the link below.") + "<p><p style=\"word-wrap: break-word;\"><a href=\"" + _cb9 + "\" target=\"_blank\">" + _cb9 + "</a></p></div>", "logs_wrap", "before");
                                        }
                                    }
                                    dojo.place("<p style=\"text-align:center;display:none;\" id=\"publishtutorial_block\" style=\"display:none;\"><a id=\"publishtutorial\" class=\"bgabutton bgabutton_big bgabutton_blue\">" + _cb8 + "</a><p>", "logs_wrap", "before");
                                    dojo.place("<p style=\"text-align:center;display:block;\"><a id=\"howto_tutorial\" class=\"bgabutton bgabutton_gray\"><i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i> " + __("lang_mainsite", "How to build a tutorial?") + "</a><p>", "logs_wrap", "before");
                                    dojo.connect($("howto_tutorial"), "onclick", this, "onHowToTutorial");
                                    dojo.connect($("publishtutorial"), "onclick", this, "onPublishTutorial");
                                    dojo.style("publishtutorial_block", "display", (dojo.query(".archiveComment").length > 0) ? "block" : "none");
                                    dojo.style("archivecontrol_editmode", "display", "block");
                                    dojo.style("archivecontrol_viewmode", "display", "none");
                                } else {
                                    if (g_tutorialwritten.author == g_tutorialwritten.viewer_id) {
                                        if ($("bga_release_id")) {
                                            var _cba = $("bga_release_id").innerHTML;
                                        } else {
                                            var _cbb = g_themeurl.split("/");
                                            _cbb.pop();
                                            var _cba = _cbb.pop();
                                        }
                                        var url = "/archive/replay/" + _cba + "/?table=" + this.table_id + "&player=" + this.player_id + "&comments=" + g_tutorialwritten.author + ";";
                                        dojo.place("<p style=\"text-align:center;display:block;\"><a href=\"" + url + "\" class=\"bgabutton bgabutton_gray\"><i class=\"fa fa-pencil\" aria-hidden=\"true\"></i> " + __("lang_mainsite", "Edit tutorial") + "</a><p>", "logs_wrap", "before");
                                    }
                                    dojo.addClass("ebd-body", "game_tutorial_mode");
                                    dojo.style("archivecontrol_editmode", "display", "none");
                                    dojo.style("archivecontrol_viewmode", "display", "block");
                                    dojo.style("ingame_menu", "display", "none");
                                    dojo.style("maingameview_menufooter", "display", "none");
                                    dojo.style("overall-footer", "display", "none");
                                    dojo.style("tableinfos", "display", "none");
                                    dojo.query(".player_board_inner .emblempremium").style("display", "none");
                                    dojo.query(".player_board_inner .timeToThink").style("display", "none");
                                    dojo.query(".player_board_inner .fa-circle").style("display", "none");
                                    dojo.query(".player_board_inner .flag").style("display", "none");
                                    dojo.query(".player_board_inner .player_elo_wrap").style("display", "none");
                                    if ($("quitTutorialTop")) {
                                        dojo.connect($("quitTutorialTop"), "onclick", this, "onQuitTutorial");
                                        dojo.connect($("logoicon"), "onclick", this, "onQuitTutorial");
                                    }
                                    this.notifqueue.setSynchronous("archivewaitingdelay", 1000);
                                    dojo.place("<p style=\"text-align:center;display:block;\"><a id=\"restart_tutorial\" class=\"bgabutton bgabutton_gray\" href=\"javascript:window.location.href=window.location.href\"><i class=\"fa fa-undo\" aria-hidden=\"true\"></i> " + __("lang_mainsite", "Restart tutorial?") + "</a><p>", "logs_wrap", "before");
                                    dojo.connect($("ebd-body"), "onkeyup", this, "onKeyUpTutorial");
                                    dojo.connect($("ebd-body"), "onkeypress", this, "onKeyPressTutorial");
                                }
                                dojo.connect($("archive_next"), "onclick", this, "onArchiveNext");
                                dojo.connect($("archive_next_turn"), "onclick", this, "onArchiveNextTurn");
                                dojo.connect($("archive_end_game"), "onclick", this, "onArchiveGoTo");
                                dojo.connect($("archive_go_to_nextComment"), "onclick", this, "onNewArchiveCommentNext");
                                dojo.connect($("archive_history"), "onclick", this, "onArchiveHistory");
                                dojo.connect($("archive_nextlog"), "onclick", this, "onArchiveNextLog");
                                dojo.connect($("archive_addcomment"), "onclick", this, "onArchiveAddComment");
                                this.addTooltip("archive_addcomment", "", __("lang_mainsite", "Add some public comment"));
                                this.addTooltip("archive_history", "", __("lang_mainsite", "Show game history"));
                                this.addTooltip("archive_nextlog", "", __("lang_mainsite", "Next visible change"));
                                this.addTooltip("archive_restart", "", __("lang_mainsite", "Go back to first move"));
                                this.addTooltip("archive_next", "", __("lang_mainsite", "Next move"));
                                this.addTooltip("archive_next_turn", "", __("lang_mainsite", "Next turn"));
                                this.addTooltip("archive_end_game", "", __("lang_mainsite", "Go to game end"));
                                dojo.place("<div id=\"archiveCommentMinimized\"><div id=\"archiveCommentMinimizedIcon\"><i class=\"fa fa-graduation-cap fa-2x\"></i></div></div>", "maintitlebar_content");
                                dojo.connect($("archiveCommentMinimizedIcon"), "onclick", this, "onArchiveCommentMaximize");
                                dojo.style("archive_history", "display", "none");
                                dojo.style("archive_next_turn", "display", "none");
                                dojo.style("archive_nextlog", "display", "none");
                                dojo.style("archive_go_to_move_wrap", "display", "none");
                                dojo.style("archive_go_to_move", "display", "none");
                                dojo.connect($("advanced_replay_features"), "onclick", this, function(evt) {
                                    dojo.stopEvent(evt);
                                    dojo.style("archive_history", "display", "inline");
                                    dojo.style("archive_nextlog", "display", "inline");
                                    dojo.style("advanced_replay_features", "display", "none");
                                    dojo.style("archive_go_to_move_wrap", "display", "block");
                                    this.bEnabledArchiveAdvancedFeatures = true;
                                });
                            }
                            dojo.connect($("not_playing_help"), "onclick", this, "onNotPlayingHelp");
                            dojo.connect($("ai_not_playing"), "onclick", this, "onAiNotPlaying");
                            dojo.connect($("wouldlikethink_button"), "onclick", this, "onWouldLikeToThink");
                            dojo.connect($("decision_yes"), "onclick", this, "onPlayerDecide");
                            dojo.connect($("decision_no"), "onclick", this, "onPlayerDecide");
                            dojo.connect($("zombieBack_button"), "onclick", this, "onZombieBack");
                        }
                        if (!this.isSpectator && !g_archive_mode && _cae.players[this.player_id].zombie == 1) {
                            this.displayZombieBack();
                        }
                        if (!_cb2) {
                            dojo.subscribe("lockInterface", this, "onLockInterface");
                            this.channel = "/table/t" + this.table_id;
                            this.tablechannelSpectators = "/table/ts" + this.table_id;
                            this.privatechannel = "/player/p" + _cac;
                            this.notifqueue.checkSequence = true;
                            if (_cae.notifications.table_next_notification_no) {
                                this.notifqueue.last_packet_id = _cae.notifications.table_next_notification_no;
                            } else {
                                this.notifqueue.last_packet_id = _cae.notifications.last_packet_id;
                            }
                            dojo.connect(this.notifqueue, "addToLog", this, "onNewLog");
                            dojo.subscribe("addMoveToLog", this, "addMoveToLog");
                        }
                        if ($("move_nbr")) {
                            $("move_nbr").innerHTML = _cae.notifications.move_nbr;
                        }
                        if ($("menu_option_value_206")) {
                            $("menu_option_value_206").innerHTML = this.playingHoursToLocal($("menu_option_value_206").innerHTML);
                            var th = $("menu_option_value_206").innerHTML;
                            if (th.indexOf(":") == -1) {
                                this.playingHours = {
                                    0: true,
                                    1: true,
                                    2: true,
                                    3: true,
                                    4: true,
                                    5: true,
                                    6: true,
                                    7: true,
                                    8: true,
                                    9: true,
                                    10: true,
                                    11: true,
                                    12: true,
                                    13: true,
                                    14: true,
                                    15: true,
                                    16: true,
                                    17: true,
                                    18: true,
                                    19: true,
                                    20: true,
                                    21: true,
                                    22: true,
                                    23: true
                                };
                            } else {
                                var _cbc = toint(th.substr(0, th.indexOf(":")));
                                this.playingHours = {
                                    0: false,
                                    1: false,
                                    2: false,
                                    3: false,
                                    4: false,
                                    5: false,
                                    6: false,
                                    7: false,
                                    8: false,
                                    9: false,
                                    10: false,
                                    11: false,
                                    12: false,
                                    13: false,
                                    14: false,
                                    15: false,
                                    16: false,
                                    17: false,
                                    18: false,
                                    19: false,
                                    20: false,
                                    21: false,
                                    22: false,
                                    23: false
                                };
                                for (var d = 0; d < 12; d++) {
                                    this.playingHours[(_cbc + d) % 24] = true;
                                }
                            }
                        }
                        if ($("footer_option_value_206")) {
                            $("footer_option_value_206").innerHTML = this.playingHoursToLocal($("footer_option_value_206").innerHTML);
                        }
                        if (!_cb2) {
                            if (!g_archive_mode) {
                                this.cometd_service = _cad;
                                var auth = {
                                    user: this.player_id,
                                    name: this.current_player_name,
                                    credentials: _cab
                                };
                                this.io = io(_cb0, {
                                    query: dojo.objectToQuery(auth),
                                    path: "/" + _cb1
                                });
                                this.io.on("bgamsg", dojo.hitch(this.notifqueue, "onNotification"));
                                this.io.on("connect", dojo.hitch(this, function(msg) {
                                    this.onSocketIoConnectionStatusChanged("connect");
                                }));
                                this.io.on("connect_error", dojo.hitch(this, function(msg) {
                                    this.onSocketIoConnectionStatusChanged("connect_error", msg);
                                }));
                                this.io.on("connect_timeout", dojo.hitch(this, function(msg) {
                                    this.onSocketIoConnectionStatusChanged("connect_timeout");
                                }));
                                this.io.on("reconnect", dojo.hitch(this, function(msg) {
                                    this.onSocketIoConnectionStatusChanged("reconnect", msg);
                                }));
                                this.io.on("reconnect_attempt", dojo.hitch(this, function(msg) {
                                    this.onSocketIoConnectionStatusChanged("reconnect_attempt");
                                }));
                                this.io.on("reconnecting", dojo.hitch(this, function(msg) {
                                    this.onSocketIoConnectionStatusChanged("reconnecting", msg);
                                }));
                                this.io.on("reconnect_error", dojo.hitch(this, function(msg) {
                                    this.onSocketIoConnectionStatusChanged("reconnect_error", msg);
                                }));
                                this.io.on("reconnect_failed", dojo.hitch(this, function(msg) {
                                    this.onSocketIoConnectionStatusChanged("reconnect_failed");
                                }));
                                this.subscribeCometdChannel("/general/emergency", this.notifqueue, "onNotification");
                                this.subscribeCometdChannel(this.channel, this.notifqueue, "onNotification");
                                this.subscribeCometdChannel(this.tablechannelSpectators, this.notifqueue, "onNotification");
                                this.subscribeCometdChannel("/player/p" + this.player_id, this.notifqueue, "onNotification");
                                this.notifqueue.cometd_service = this.cometd_service;
                            } else {
                                this.initArchiveIndex();
                                this.notifqueue.checkSequence = false;
                                this.initCommentsForMove($("move_nbr").innerHTML);
                                this.checkIfArchiveCommentMustBeDisplayed();
                            }
                        }
                        if (!_cb2) {
                            if (this.dockedChat) {
                                var args = {
                                    type: "table",
                                    game_name: this.game_name,
                                    id: this.table_id,
                                    label: __("lang_mainsite", "Discuss at this table"),
                                    url: null,
                                    channel: "/table/t" + this.table_id,
                                    window_id: "table_" + this.table_id,
                                    start: "collapsed",
                                    notifymethod: "title",
                                    autoShowOnKeyPress: true
                                };
                                this.createChatBarWindow(args, false);
                                dojo.connect(this.chatbarWindows["table_" + this.table_id].input, "callbackBeforeChat", this, "onBeforeChatInput");
                                dojo.connect($("chatbarinput_table_" + this.table_id + "_input"), "onblur", this, "onChatInputBlur");
                                dojo.connect(document, "onkeydown", this, "onChatKeyDown");
                                dojo.connect($("chatbarinput_table_" + this.table_id + "_input"), "onkeydown", this, "onChatKeyDown");
                                this.loadPreviousMessage("table", this.table_id);
                            } else {
                                this.tablechat = new ebg.chatinput();
                                this.tablechat.detachType = "playtable";
                                this.tablechat.detachTypeGame = this.game_name;
                                this.tablechat.detachId = this.table_id;
                                this.tablechat.create(this, "chatinput", "/table/table/say.html", __("lang_mainsite", "Discuss at this table"));
                                this.tablechat.baseparams = {
                                    table: this.table_id
                                };
                                this.tablechat.callbackBeforeChat = dojo.hitch(this, "onBeforeChatInput");
                            }
                            this.updatePlayerOrdering();
                            var _cbd = [__("lang_mainsite", "If the game seems blocked or buggy, please <b>refresh</b> the webpage or <b>press F5</b>."), __("lang_mainsite", "Insults and aggressive behaviours are stricly forbidden in this chatroom. Please report us any incident: we take an immediate action againt all problematic players."), __("lang_mainsite", "You can mute sound by clicking on:") + " <div class=\"icon20 icon20_mute\"></div>", __("lang_mainsite", "To play in fullscreen, click on:") + " <div class=\"icon20 icon20_fullscreen\"></div>", __("lang_mainsite", "You have a wide screen ? You can choose in preferences to display players information and game logs in 2 columns:") + " <div class=\"icon20 icon20_config\"></div>", __("lang_mainsite", "You find a bug ? Please report it in BGA bug reporting system, a description and if possible a screenshot. Thank you."), __("lang_mainsite", "If some player is not playing, just wait until he run out reflexion time, then kick him out the game.")];
                            var _cbe = _cbd.length;
                            var _cbf = Math.floor((Math.random() * _cbe)) % _cbe;
                            if (!g_archive_mode) {
                                this.notifqueue.addToLog("<b>" + __("lang_mainsite", "Did you know ?") + "</b><br/>" + _cbd[_cbf]);
                            }
                            for (var _cc0 in {
                                "logsSecondColumn": {}
                            }) {
                                dojo.connect($("preference_global_control_" + _cc0), "onchange", this, "onChangePreference");
                                dojo.connect($("preference_global_fontrol_" + _cc0), "onchange", this, "onChangePreference");
                            }
                            if ($("preference_global_control_logsSecondColumn").value == "1") {
                                this.switchLogModeTo(1);
                            }
                            dojo.query(".reftime_format").forEach(dojo.hitch(this, function(node) {
                                node.innerHTML = this.formatReflexionTime(node.innerHTML).string;
                            }));
                            for (var _cc0 in this.prefs) {
                                var pref = this.prefs[_cc0];
                                if (pref["values"][pref["value"]]["cssPref"]) {
                                    dojo.addClass(dojo.doc.documentElement, pref["values"][pref["value"]]["cssPref"]);
                                }
                            }
                            dojo.query(".game_preference_control").connect("onchange", this, function(evt) {
                                var _cc1 = evt.currentTarget.id.substr(19);
                                var _cc2 = evt.currentTarget.value;
                                this.ajaxcall("/table/table/changePreference.html", {
                                    id: _cc1,
                                    value: _cc2,
                                    game: this.game_name
                                }, this, function(_cc3) {
                                    if (_cc3.status == "reload") {
                                        this.showMessage("Done, reload in progress...", "info");
                                        location.hash = "";
                                        window.location.reload();
                                    } else {
                                        if (_cc3.pref_id == this.GAMEPREFERENCE_DISPLAYTOOLTIPS) {
                                            this.switchDisplayTooltips(_cc3.value);
                                        }
                                    }
                                });
                            });
                            if ($("preference_control_" + this.GAMEPREFERENCE_DISPLAYTOOLTIPS).value == "1") {
                                this.switchDisplayTooltips(1);
                            }
                            dojo.query(".preference_control").style("display", "block");
                            dojo.connect($("ingame_menu_concede"), "onclick", dojo.hitch(this, function(evt) {
                                evt.preventDefault();
                                this.confirmationDialog(__("lang_mainsite", "You are about to concede this game. Are you sure?"), dojo.hitch(this, function() {
                                    this.ajaxcall("/table/table/concede.html?src=menu", {
                                        table: this.table_id
                                    }, this, function(obj, _cc4) {});
                                }));
                            }));
                            dojo.connect($("ingame_menu_abandon"), "onclick", dojo.hitch(this, function(evt) {
                                evt.preventDefault();
                                this.ajaxcall("/table/table/decide.html?src=menu", {
                                    type: "abandon",
                                    decision: 1,
                                    "table": this.table_id
                                }, this, function(obj, _cc5) {});
                            }));
                            if (this.bRealtime) {
                                dojo.connect($("ingame_menu_switch_tb"), "onclick", dojo.hitch(this, function(evt) {
                                    evt.preventDefault();
                                    this.ajaxcall("/table/table/decide.html?src=menu", {
                                        type: "switch_tb",
                                        decision: 1,
                                        "table": this.table_id
                                    }, this, function(obj, _cc6) {});
                                }));
                            } else {
                                dojo.style("ingame_menu_switch_tb", "display", "none");
                            }
                            if (dojo.query(".expressswitch").length > 0) {
                                dojo.style("ingame_menu_expresstop", "display", "block");
                                dojo.connect($("ingame_menu_expresstop"), "onclick", dojo.hitch(this, function(evt) {
                                    evt.preventDefault();
                                    this.ajaxcall("/table/table/expressGameStopTable.html", {
                                        table: this.table_id
                                    }, this, dojo.hitch(this, function(obj, _cc7) {
                                        if (typeof bgaConfig != "undefined" && bgaConfig.webrtcEnabled) {
                                            this.doLeaveRoom();
                                        }
                                        window.location.href = this.metasiteurl + "/table?table=" + this.table_id;
                                    }));
                                }));
                            }
                            if (!this.bRealtime && !this.isSpectator) {
                                dojo.style("ingame_menu_notes_wrap", "display", "block");
                                dojo.connect($("ingame_menu_notes"), "onclick", this, "toggleTurnBasedNotes");
                            }
                            dojo.connect($("ingame_menu"), "onclick", this, "toggleIngameMenu");
                            dojo.connect($("ingame_menu_content"), "onclick", this, "hideIngameMenu");
                            dojo.connect(document, "onclick", this, "hideIngameMenu");
                            dojo.query(".preference_control").connect("onclick", this, function(evt) {
                                dojo.stopEvent(evt);
                            });
                            this.updatePubBanner();
                            if (this.isSpectator) {
                                dojo.addClass("overall-content", "spectatorMode");
                            }
                            dojo.query(".chatbarbelowinput_item_showcursor").connect("onclick", this, "onShowMyCursor");
                            dojo.query(".player_hidecursor").connect("onclick", this, "onHideCursor");
                            this.addTooltipToClass("chatbarbelowinput_item_showcursor", "", __("lang_mainsite", "Show your mouse cursor to opponents"));
                            dojo.query(".debug_save").connect("onclick", this, "onSaveState");
                            dojo.query(".debug_load").connect("onclick", this, "onLoadState");
                            if (!g_archive_mode) {
                                this.notifqueue.resynchronizeNotifications(true);
                                dojo.connect(this, "reconnectAllSubscriptions", this, "onReconnect");
                            }
                            this.ensureImageLoading();
                            dojo.connect($("overall_footer_topbutton"), "onclick", function() {
                                window.scroll(0, 0);
                            });
                            if (this.turnBasedNotes != "") {
                                this.openTurnBasedNotes(this.turnBasedNotes);
                            }
                            if (!g_archive_mode) {
                                this.io.emit("requestSpectators", this.table_id);
                            }
                            this.updatePremiumEmblemLinks();
                            dojo.connect($("abandon_alternate_button"), "onclick", dojo.hitch(this, function(evt) {
                                evt.preventDefault();
                                this.ajaxcall("/table/table/decide.html", {
                                    type: "abandon",
                                    decision: 1,
                                    "table": this.table_id
                                }, this, function(obj, _cc8) {});
                            }));
                            dojo.connect($("concede_alternate_button"), "onclick", dojo.hitch(this, function(evt) {
                                evt.preventDefault();
                                this.confirmationDialog(__("lang_mainsite", "Are you sure?"), dojo.hitch(this, function() {
                                    this.ajaxcall("/table/table/concede.html?src=alt", {
                                        table: this.table_id
                                    }, this, function(_cc9) {});
                                }));
                            }));
                            if (g_archive_mode) {
                                if (dojo.hasClass("archivecontrol", "demomode")) {}
                                if (dojo.hasClass("archivecontrol", "autoplay")) {
                                    this.archive_playmode = "play";
                                    this.bDisableSoundOnMove = true;
                                    this.sendNextArchive();
                                    if (!this.instantaneousMode) {
                                        this.notifqueue.setSynchronous("archivewaitingdelay", 1000);
                                    }
                                }
                            }
                            if (this.is_solo) {
                                dojo.addClass("ebd-body", "solo_game");
                            }
                            if (!g_archive_mode) {
                                if (this.bTutorial) {
                                    this.showTutorial();
                                }
                            }
                            if (this.game_name == "cantstop" && this.is_solo) {
                                dojo.style("its_your_turn", "display", "none");
                                dojo.place("<a href=\"#\" id=\"quitFirstTutorialTop\" class=\"bgabutton bgabutton_gray bgabutton_always_big\" style=\"text-decoration:none;top:-9px;position:relative;\">" + __("lang_mainsite", "Quit tutorial") + "</a> ", "reflexiontimevalues");
                                dojo.connect($("quitFirstTutorialTop"), "onclick", this, dojo.hitch(this, function(evt) {
                                    dojo.stopEvent(evt);
                                    dojo.style("quitFirstTutorialTop", "display", "none");
                                    this.ajaxcall("/table/table/concede.html?src=top", {
                                        table: this.table_id
                                    }, this, function(_cca) {
                                        window.location.href = this.metasiteurl + "/" + this.mslobby;
                                        dojo.style("quitFirstTutorialTop", "display", "block");
                                    });
                                }));
                            }
                            dojo.query(".judgegivevictory").connect("onclick", this, "onJudgeDecision");
                            var uuid = 1;
                            for (var i in this.emergencymsg) {
                                var _ccb = this.emergencymsg[i];
                                if (_ccb.type == "emergency") {
                                    var _ccc = {
                                        channel: "/general/emergency",
                                        packet_type: "single",
                                        data: []
                                    };
                                    _ccc.data.push({
                                        args: _ccb,
                                        bIsTableMsg: false,
                                        lock_uuid: "dummy",
                                        log: "${player_name} ${text}",
                                        type: "chat",
                                        time: _ccb.time,
                                        loadprevious: true,
                                        uid: uuid++
                                    });
                                    this.notifqueue.onNotification(_ccc);
                                }
                            }
                            this.onGameUiWidthChange();
                            dojo.connect(window, "scroll", this, dojo.hitch(this, "adaptStatusBar"));
                            dojo.connect(window, "orientationchange", this, dojo.hitch(this, "onGameUiWidthChange"));
                            dojo.connect(window, "onresize", this, dojo.hitch(this, "onGameUiWidthChange"));
                            if ($("go_to_next_table_active_player")) {
                                dojo.connect($("go_to_next_table_active_player"), "onclick", dojo.hitch(this, function(evt) {
                                    dojo.stopEvent(evt);
                                    this.confirmationDialog(__("lang_mainsite", "This is your turn. Do you really want to go to your next table?"), function() {
                                        document.location.href = $("go_to_next_table_active_player").href;
                                    });
                                }));
                                this.addTooltip("go_to_next_table_active_player", "", __("lang_mainsite", "Go to next table (play later on this one)"));
                            }
                            var _ccd = [{
                                btn: "pageheader_gameresult",
                                section: "pagesection_gameresult"
                            }, {
                                btn: "pageheader_gameview",
                                section: "pagesection_gameview",
                                defaults: true
                            }, ];
                            this.pageheader = new ebg.pageheader();
                            this.pageheader.create(this, "maingameview_menuheader", _ccd, false);
                            var _ccd = [{
                                btn: "pageheader_howtoplay",
                                section: "pagesection_howtoplay"
                            }, {
                                btn: "pageheader_competition",
                                section: "pagesection_competition",
                                defaults: true
                            }, {
                                btn: "pageheader_tournament",
                                section: "pagesection_tournament"
                            }, {
                                btn: "pageheader_strategytips",
                                section: "pagesection_strategytips"
                            }, {
                                btn: "pageheader_options",
                                section: "pagesection_options"
                            }, {
                                btn: "pageheader_credits",
                                section: "pagesection_credits"
                            }, {
                                btn: "pageheader_music",
                                section: "pagesection_music",
                                onShow: dojo.hitch(this, "playMusic")
                            }, ];
                            this.pageheaderfooter = new ebg.pageheader();
                            this.pageheaderfooter.create(this, "maingameview_menufooter", _ccd, false);
                            dojo.query(".seemore").connect("onclick", this, "onSeeMoreLink");
                            this.addTooltipToClass("thumbuplink", "", __("lang_mainsite", "Thumb up this item"));
                            dojo.query(".thumbuplink").connect("onclick", this, "onThumbUpLink");
                            this.getRanking();
                            dojo.connect($("seemore_rankings"), "onclick", this, "onSeeMoreRanking");
                            dojo.query(".trophytooltip").forEach(dojo.hitch(this, function(node) {
                                var _cce = node.id.substr(14);
                                var _ccf = $("trophytooltip_" + _cce).innerHTML;
                                this.addTooltipHtml("awardimg_" + _cce, "<div class=\"trophytooltip_displayed\">" + _ccf + "</div>");
                            }));
                            this.playerawardsCollapsedAlignement();
                            if (!this.isSpectator) {
                                if (this.gamedatas.players[this.player_id].beginner) {
                                    this.pageheaderfooter.showSectionFromButton("pageheader_howtoplay");
                                }
                            }
                            if (dojo.hasClass("ebd-body", "training_mode")) {
                                this.pageheaderfooter.showSectionFromButton("pageheader_howtoplay");
                            }
                            if (typeof this.tournament_id != "undefined" && this.tournament_id != null) {
                                $("tournament_frame").src = this.metasiteurl + "/tournament/tournament/results.html?id=" + this.tournament_id;
                                this.pageheaderfooter.showSectionFromButton("pageheader_tournament");
                            }
                            if (g_archive_mode) {
                                if (g_tutorialwritten.mode != "view") {
                                    var _cd0 = this.getReplayLogNode();
                                    if ($("pageheader_strategytips") && _cd0 !== null) {
                                        $("pageheader_strategytips").innerHTML = __("lang_mainsite", "Replay log") + "<div class=\"pageheader_menuitembar\">";
                                        this.pageheaderfooter.showSectionFromButton("pageheader_strategytips");
                                        this.loadReplayLogs();
                                    }
                                }
                            }
                        }
                        if (this.gamedatas.gamestate.name == "gameSetup" && g_archive_mode) {
                            this.sendNextArchive();
                        }
                        if (g_archive_mode) {
                            if ($("archive_go_to_move_nbr").value != "") {
                                this.archive_gotomove = toint($("archive_go_to_move_nbr").value);
                                this.archive_playmode = "goto";
                                this.setModeInstataneous();
                                this.sendNextArchive();
                            }
                        }
                        if (g_archive_mode && g_tutorialwritten.mode == "view") {
                            this.pageheaderfooter.hideAllSections();
                            if ($("table_ref_item_table_id")) {
                                $("table_ref_item_table_id").innerHTML = dojo.string.substitute(__("lang_mainsite", "Tutorial #${id}"), {
                                    id: g_tutorialwritten.id
                                });
                            }
                            if ($("newArchiveComment")) {} else {
                                this.archive_playmode = "nextcomment";
                                this.sendNextArchive();
                            }
                        }
                        if (!_cb2) {
                            this.init3d();
                        }
                        if (_cae.gamestate.name == "gameEnd") {
                            this.updateResultPage();
                        }
                        if (!_cb2) {
                            this.initHotseat();
                        }
                        this.sendResizeEvent();
                    },
                    sendResizeEvent: function() {
                        if (document.createEventObject) {
                            window.fireEvent("resize");
                        } else {
                            var evt = document.createEvent("HTMLEvents");
                            evt.initEvent("resize", false, true);
                            window.dispatchEvent(evt);
                        }
                    },
                    onReconnect: function() {
                        this.notifqueue.resynchronizeNotifications(false);
                    },
                    getReplayLogNode: function() {
                        if ($("strategytips_content")) {
                            return $("strategytips_content");
                        } else {
                            var list = dojo.query("#pagesection_strategytips .pagesection");
                            if (list.length > 0) {
                                return list[0];
                            }
                        }
                    },
                    updatePremiumEmblemLinks: function() {
                        this.addTooltipToClass("emblempremium", __("lang_mainsite", "Premium member: this player helps us to develop this service :)"), __("lang_mainsite", "Support Board Game Arena: go Premium!"));
                        dojo.query(".emblempremium").connect("onclick", this, function() {
                            window.open(this.metasiteurl + "/premium", "_blank");
                        });
                        dojo.query(".masqued_rank").connect("onclick", this, function() {
                            window.open(this.metasiteurl + "/premium", "_blank");
                        });
                    },
                    onGameUiWidthChange: function() {
                        if (this.chatDetached) {
                            return;
                        }
                        if (typeof this.default_viewport == "undefined") {
                            var _cd1 = dojo.query("meta[name=\"viewport\"]");
                            if (typeof _cd1[0] != "undefined") {
                                this.default_viewport = _cd1[0].content;
                            }
                        }
                        var _cd2 = false;
                        if (typeof window.orientation != "undefined") {
                            var _cd1 = dojo.query("meta[name=\"viewport\"]");
                            if (typeof _cd1[0] != "undefined") {
                                if (window.orientation !== 0) {
                                    _cd1[0].content = "width=980";
                                } else {
                                    if (this.isTouchDevice) {
                                        _cd2 = true;
                                    }
                                    if (this.default_viewport !== null) {
                                        _cd1[0].content = this.default_viewport;
                                    }
                                }
                            }
                        }
                        var _cd3 = dojo.position("ebd-body");
                        var _cd4 = 240;
                        if (this.log_mode == "2cols") {
                            _cd4 = 240 + 250;
                        }
                        var _cd5 = this.interface_min_width + _cd4;
                        if (this.log_mode == "2cols" && (_cd3.w < _cd5 || this.currentZoom < 1)) {
                            this.switchLogModeTo(0);
                            return;
                        }
                        if (!dojo.hasClass("ebd-body", "mobile_version")) {
                            if (_cd3.w < _cd5 || this.currentZoom < 1 || _cd2) {
                                dojo.removeClass("ebd-body", "desktop_version");
                                dojo.addClass("ebd-body", "mobile_version");
                                this.adaptChatbarDock();
                            }
                        } else {
                            if (_cd3.w >= _cd5 && this.currentZoom == 1 && !_cd2) {
                                dojo.removeClass("ebd-body", "mobile_version");
                                dojo.addClass("ebd-body", "desktop_version");
                                this.adaptChatbarDock();
                            }
                        }
                        var _cd6 = 1;
                        var _cd7 = 1;
                        if (_cd3.w < this.interface_min_width) {
                            _cd6 = _cd3.w / this.interface_min_width;
                            _cd7 = _cd6;
                        }
                        if (_cd6 < 0.9 && dojo.hasClass("globalaction_zoom_icon", "fa-search-minus")) {
                            _cd6 = 1;
                            dojo.style("pagesection_gameview", "overflow", "auto");
                            dojo.style("game_play_area", "minWidth", this.interface_min_width + "px");
                        } else {
                            if (typeof this.bForceMobileHorizontalScroll != "undefined" && dojo.hasClass("ebd-body", "mobile_version") && this.bForceMobileHorizontalScroll) {
                                dojo.style("pagesection_gameview", "overflow", "auto");
                            } else {
                                dojo.style("pagesection_gameview", "overflow", "visible");
                            }
                            dojo.style("game_play_area", "minWidth", 0);
                        }
                        if (_cd6 != this.gameinterface_zoomFactor) {
                            this.gameinterface_zoomFactor = _cd6;
                            dojo.style("page-content", "zoom", _cd6);
                            dojo.style("right-side-first-part", "zoom", _cd6);
                            dojo.style("page-title", "zoom", _cd6);
                        }
                        if (_cd7 < 0.9) {
                            dojo.style("globalaction_zoom_wrap", "display", "inline-block");
                            dojo.style("toggleSound", "display", "none");
                        } else {
                            dojo.style("globalaction_zoom_wrap", "display", "none");
                            dojo.style("toggleSound", "display", "inline-block");
                        }
                        this.adaptPlayersPanels();
                        this.adaptStatusBar();
                        this.onScreenWidthChange();
                    },
                    onZoomToggle: function(evt) {
                        dojo.stopEvent(evt);
                        var _cd8 = this.gameinterface_zoomFactor;
                        var _cd9 = dojo.style("left-side", "marginTop");
                        if (dojo.hasClass("globalaction_zoom_icon", "fa-search-plus")) {
                            dojo.removeClass("globalaction_zoom_icon", "fa-search-plus");
                            dojo.addClass("globalaction_zoom_icon", "fa-search-minus");
                        } else {
                            dojo.removeClass("globalaction_zoom_icon", "fa-search-minus");
                            dojo.addClass("globalaction_zoom_icon", "fa-search-plus");
                            this.savePlayAreaXScroll = $("pagesection_gameview").scrollLeft;
                        }
                        this.onGameUiWidthChange();
                        var _cda = this.gameinterface_zoomFactor;
                        var _cdb = dojo.style("left-side", "marginTop");
                        var _cdc = dojo.window.getBox();
                        var _cdd = _cdc.h;
                        var _cde = window.scrollY || window.pageYOffset || document.documentElement.scrollTop;
                        if (_cda < _cd8) {
                            var _cdf = (_cde) + (_cdb - _cd9);
                            _cdf *= (_cda / _cd8);
                            _cdf -= (_cdd * (1 - _cda) / 2);
                        } else {
                            var _cdf = (_cde * (_cda / _cd8)) + (_cdb - _cd9);
                            _cdf += (_cdd * (1 - _cd8) / 2);
                            $("pagesection_gameview").scrollLeft = this.savePlayAreaXScroll;
                        }
                        window.scroll(0, _cdf);
                    },
                    onScreenWidthChange: function() {},
                    adaptStatusBar: function() {
                        var _ce0 = dojo.position("after-page-title");
                        var _ce1 = dojo.position("page-title");
                        var _ce2 = dojo.style("page-title", "zoom");
                        if (typeof _ce2 == "undefined") {
                            _ce2 = 1;
                        }
                        var _ce3 = _ce1.h * _ce2;
                        var _ce4 = dojo.window.getBox();
                        var _ce5 = _ce4.h;
                        var _ce6 = _ce5 / 10;
                        if (!dojo.hasClass("page-title", "fixed-page-title") && _ce0.y < 0 && _ce3 < _ce6) {
                            dojo.addClass("page-title", "fixed-page-title");
                        } else {
                            if (dojo.hasClass("page-title", "fixed-page-title") && (_ce0.y >= 0 || _ce3 >= _ce6)) {
                                dojo.removeClass("page-title", "fixed-page-title");
                                dojo.style("page-title", "width", "auto");
                                dojo.style("after-page-title", "height", "0px");
                            }
                        }
                        if (dojo.hasClass("page-title", "fixed-page-title")) {
                            dojo.style("page-title", "width", ((_ce0.w - 10) / _ce2) + "px");
                            dojo.style("after-page-title", "height", _ce1.h + "px");
                        }
                        if ($("archive_history_backtotop")) {
                            var _ce7 = dojo.position("maingameview_menufooter");
                            if (_ce7.y != 0) {
                                if (_ce7.y < 200) {
                                    dojo.style("archive_history_backtotop", "display", "block");
                                } else {
                                    dojo.style("archive_history_backtotop", "display", "none");
                                }
                            }
                        }
                    },
                    adaptPlayersPanels: function() {
                        var _ce8 = 3;
                        var _ce9 = 6;
                        var _cea = 240;
                        if (dojo.hasClass("ebd-body", "mobile_version")) {
                            var _ceb = dojo.position("right-side-first-part");
                            var _cec = _ceb.w;
                            var _ced = Math.floor(_cec / (_cea + _ce8));
                            var _cee = dojo.query("#player_boards .player-board");
                            var _cef = _cee.length;
                            var _cf0 = Math.ceil(_cef / _ced);
                            var _cf1 = Math.ceil(_cef / _cf0);
                            var _cf2 = Math.floor(_cec / _cf1) - _ce8;
                            var _cf3 = _cf2 - _ce9;
                            var no = 0;
                            var _cf4 = 0;
                            var _cf5 = _ca1.NodeList();
                            _cee.style("height", "auto");
                            for (var i in _cee) {
                                if (typeof _cee[i].id !== "undefined") {
                                    _cf4 = Math.max(dojo.style(_cee[i], "height"), _cf4);
                                    _cf5.push(_cee[i]);
                                    no++;
                                    if (no % _cf1 == 0 || no >= _cef) {
                                        _cf5.style("height", _cf4 + "px");
                                        var _cf4 = 0;
                                        var _cf5 = _ca1.NodeList();
                                    }
                                }
                            }
                            _cee.style("width", _cf3 + "px");
                            var _ceb = dojo.position("right-side");
                            var h = _ceb.h;
                            dojo.style("left-side", "marginTop", h + "px");
                        } else {
                            dojo.query("#player_boards .player-board").style("width", (_cea - _ce9) + "px");
                            dojo.query("#player_boards .player-board").style("height", "auto");
                            dojo.style("left-side", "marginTop", "0px");
                        }
                    },
                    activeShowOpponentCursor: function() {
                        if (this.showOpponentCursorMouveOver == null) {
                            this.showOpponentCursorLastEvent = null;
                            this.showOpponentCursorLastInfosSendMark = null;
                            this.showOpponentCursorMouveOver = dojo.connect($("ebd-body"), "onmousemove", this, "onShowOpponentCursorMouseOver");
                            this.showOpponentCursorSendInfos();
                            dojo.query(".chatbarbelowinput_item_showcursor").addClass("audiovideo_active");
                            this.showMessage(__("lang_mainsite", "Your mouse cursor is now visible by other players."), "info");
                            var _cf6 = 0;
                            var _cf7 = [];
                            this.showOpponentCursorClickHook = dojo.connect(document, "onmousedown", this, "showOpponentCursorClick");
                        }
                    },
                    showOpponentCursorClick: function(evt) {
                        if (evt.type == "mousedown") {
                            this.onShowOpponentCursorMouseOver(evt);
                            var _cf8 = this.getCursorInfos(true);
                            this.ajaxcall("/" + this.game_name + "/" + this.game_name + "/showCursorClick.html", {
                                path: dojo.toJson(_cf8)
                            }, this, function(_cf9) {});
                        }
                    },
                    unactiveShowOpponentCursor: function() {
                        if (this.showOpponentCursorMouveOver !== null) {
                            dojo.disconnect(this.showOpponentCursorMouveOver);
                            dojo.disconnect(this.showOpponentCursorClickHook);
                            clearTimeout(this.showOpponentCursorTimeout);
                            this.showOpponentCursorMouveOver = null;
                            this.showOpponentCursorClickHook = null;
                            this.showOpponentCursorTimeout = null;
                            dojo.query(".chatbarbelowinput_item_showcursor").removeClass("audiovideo_active");
                            this.io.emit("oppCursor", {
                                table_id: this.table_id,
                                path: null
                            });
                        }
                    },
                    onShowMyCursor: function(evt) {
                        dojo.stopEvent(evt);
                        if (this.isSpectator) {
                            this.showMessage(__("lang_mainsite", "You cannot do this as a spectator."), "error");
                            return;
                        }
                        if (this.showOpponentCursorMouveOver == null) {
                            this.activeShowOpponentCursor();
                        } else {
                            this.unactiveShowOpponentCursor();
                        }
                    },
                    onHideCursor: function(evt) {
                        var _cfa = evt.currentTarget.id.substr(18);
                        dojo.style("player_showcursor_" + _cfa, "display", "none");
                        if ($("opponent_cursor_" + _cfa)) {
                            dojo.destroy("opponent_cursor_" + _cfa);
                        }
                    },
                    getCursorInfos: function(_cfb) {
                        var evt = this.showOpponentCursorLastEvent;
                        var _cfc = evt.target;
                        while (!_cfc.id) {
                            _cfc = _cfc.parentNode;
                        }
                        var _cfd = [];
                        var _cfe = "";
                        var x = (evt.offsetX || evt.layerX);
                        var y = (evt.offsetY || evt.layerY);
                        var _cff = false;
                        if (this.showOpponentCursorLastInfosSendMark === null) {
                            this.showOpponentCursorLastInfosSendMark = _cfc.id + " " + x + "," + y;
                        } else {
                            if (this.showOpponentCursorLastInfosSendMark == (_cfc.id + " " + x + "," + y)) {
                                var _cff = true;
                            } else {
                                this.showOpponentCursorLastInfosSendMark = _cfc.id + " " + x + "," + y;
                            }
                        }
                        if (!_cff || _cfb) {
                            if (typeof evt.path == "undefined") {
                                var path = [];
                                var _d00 = _cfc;
                                while (_d00) {
                                    path.push(_d00);
                                    _d00 = _d00.parentElement;
                                }
                                if (path.indexOf(window) === -1 && path.indexOf(document) === -1) {
                                    path.push(document);
                                }
                                if (path.indexOf(window) === -1) {
                                    path.push(window);
                                }
                                evt.path = path;
                            }
                            for (var i in evt.path) {
                                _cfe += "<br/>";
                                var elem = evt.path[i];
                                _cfe += elem.id + " : " + x + "," + y;
                                if (elem.id) {
                                    _cfd.push({
                                        id: elem.id,
                                        x: x,
                                        y: y
                                    });
                                }
                                var _d01 = elem.getBoundingClientRect();
                                var _d02 = elem.parentNode.getBoundingClientRect();
                                var _d03 = {
                                    top: _d01.top - _d02.top,
                                    left: _d01.left - _d02.left
                                };
                                x += _d03.left;
                                y += _d03.top;
                                if (elem.id == "game_play_area") {
                                    break;
                                }
                                if (elem.id == "ebd-body") {
                                    break;
                                }
                            }
                            return _cfd;
                        } else {
                            return null;
                        }
                    },
                    showOpponentCursorSendInfos: function() {
                        if (this.showOpponentCursorLastEvent !== null) {
                            var _d04 = this.getCursorInfos(false);
                            if (_d04 === null) {} else {
                                this.io.emit("oppCursor", {
                                    table_id: this.table_id,
                                    path: _d04
                                });
                            }
                        }
                        this.showOpponentCursorTimeout = setTimeout(dojo.hitch(this, "showOpponentCursorSendInfos"), 500);
                    },
                    onShowOpponentCursorMouseOver: function(evt) {
                        this.showOpponentCursorLastEvent = evt;
                    },
                    setup: function(_d05) {},
                    onEnteringState: function(_d06, args) {},
                    onLeavingState: function(_d07) {},
                    getGameStandardUrl: function() {
                        return "/" + this.gameserver + "/" + this.game_name + "?table=" + this.table_id;
                    },
                    showIngameMenu: function() {
                        dojo.style("ingame_menu_content", "display", "block");
                        dojo.addClass("ingame_menu", "menu_open");
                    },
                    hideIngameMenu: function() {
                        dojo.style("ingame_menu_content", "display", "none");
                        dojo.removeClass("ingame_menu", "menu_open");
                    },
                    toggleIngameMenu: function(evt) {
                        dojo.stopEvent(evt);
                        if (dojo.style("ingame_menu_content", "display") == "none") {
                            this.showIngameMenu();
                        } else {
                            this.hideIngameMenu();
                        }
                    },
                    getPlayerTooltip: function(_d08) {
                        var _d09 = "";
                        for (var _d0a = 1; _d0a >= 0; _d0a--) {
                            for (var _d0b in _d08.languages) {
                                if (_d08.languages[_d0b].level == _d0a) {
                                    var _d0c = _d0b;
                                    if (toint(_d08.languages[_d0b].level) === 1) {
                                        _d0c = "<b>" + _d0b + "</b>";
                                    }
                                    var html = "<span id=\"lang_" + _d08.user_id + "_" + _d0b + "\">" + _d0c + "</span> ";
                                    _d09 += html;
                                }
                            }
                        }
                        var _d0d = "free";
                        if (_d08.is_beginner == true) {
                            _d0d = "beginner";
                        } else {
                            if (_d08.is_premium == true) {
                                _d0d = "premium";
                            }
                        }
                        var _d0e = $("avatar_" + _d08.user_id).src.replace("_32.jpg", "_184.jpg");
                        if (typeof _d08.karma == "undefined") {
                            _d08.karma = 100;
                        }
                        var _d0f = this.getKarmaLabel(_d08.karma);
                        var _d10 = "block";
                        var args = {
                            player_id: _d08.user_id,
                            genderclass: (_d08.gender === null) ? "gender_not_specified" : (_d08.gender == 1 ? "fa-mars male" : "fa-venus female"),
                            flagx: _d08.country_infos.flag_x,
                            flagy: _d08.country_infos.flag_y,
                            country: _d08.country_infos.name,
                            city: (_d08.city === null || _d08.city == "") ? "" : "(" + _d08.city + ")",
                            languages: _d09,
                            accounttype: _d0d,
                            avatarurl: _d0e,
                            karma: _d08.karma,
                            karma_label: _d0f.label,
                            karma_class: _d0f.css,
                            progressbardisplay: _d10
                        };
                        return this.format_string(this.jstpl_player_tooltip, args);
                    },
                    setClientState: function(_d11, args) {
                        if (_d11 == "gameSetup") {
                            if (typeof this.lockScreenTimeout != "undefined") {
                                clearTimeout(this.lockScreenTimeout);
                            }
                        }
                        dojo.removeClass("overall-content", "gamestate_" + this.gamedatas.gamestate.name);
                        this.onLeavingState(this.gamedatas.gamestate.name);
                        this.on_client_state = true;
                        this.gamedatas.gamestate.name = _d11;
                        for (var arg in args) {
                            this.gamedatas.gamestate[arg] = args[arg];
                        }
                        this.updatePageTitle();
                        dojo.addClass("overall-content", "gamestate_" + _d11);
                        this.onEnteringState(_d11, this.gamedatas.gamestate);
                    },
                    restoreServerGameState: function() {
                        dojo.removeClass("overall-content", "gamestate_" + this.gamedatas.gamestate.name);
                        this.onLeavingState(this.gamedatas.gamestate.name);
                        var _d12 = dojo.clone(this.gamedatas.gamestate.reflexion);
                        this.gamedatas.gamestate = dojo.clone(this.last_server_state);
                        this.on_client_state = false;
                        this.gamedatas.gamestate.reflexion = _d12;
                        this.updatePageTitle();
                        dojo.addClass("overall-content", "gamestate_" + this.gamedatas.gamestate.name);
                        this.onEnteringState(this.gamedatas.gamestate.name, this.gamedatas.gamestate);
                    },
                    onStartGame: function() {
                        this.ajaxcall("/" + this.game_name + "/" + this.game_name + "/startgame.html", {}, this, function(_d13) {});
                    },
                    onNotificationPacketDispatched: function() {
                        if (!this.current_player_was_active && this.current_player_is_active) {
                            if (this.instantaneousMode || typeof g_replayFrom != "undefined") {} else {
                                stopSound("move");
                                playSound("yourturn");
                            }
                        }
                        this.current_player_was_active = this.current_player_is_active;
                    },
                    updateActivePlayerAnimation: function() {
                        var _d14;
                        var _d15 = {};
                        var _d16 = false;
                        var _d17 = false;
                        for (var _d18 in this.gamedatas.players) {
                            if (dojo.style("avatarwrap_" + _d18, "display") == "none") {
                                dojo.style("avatarwrap_" + _d18, "display", "block");
                                dojo.style("avatar_active_wrap_" + _d18, "display", "none");
                                _d15[_d18] = 1;
                                if (_d18 == this.player_id) {
                                    _d16 = true;
                                }
                            }
                            if ($("player_table_status_" + _d18)) {
                                var _d19 = "";
                                if (this.gamedatas.players[_d18].beginner && this.player_id != _d18) {
                                    _d19 += "<p class=\"boardblock doubletime_infos\">";
                                    _d19 += __("lang_mainsite", "This is my first game : my time is doubled") + "<br/>";
                                    _d19 += __("lang_mainsite", "Thanks for helping me!");
                                    _d19 += "</p>";
                                }
                                if (this.gamedatas.players[_d18].is_ai == 1) {
                                    _d19 += "<p class=\"boardblock\">";
                                    _d19 += __("lang_mainsite", "This player is an artificial intelligence");
                                    _d19 += "</p>";
                                }
                                if (this.gamedatas.players[_d18].zombie == 1) {
                                    _d19 += "<p class=\"boardblock\">";
                                    _d19 += __("lang_mainsite", "The turns of this player are skipped (this player left the game or was out of time)");
                                    _d19 += "</p>";
                                }
                                if (this.gamedatas.players[_d18].eliminated == 1) {
                                    _d19 += "<p class=\"boardblock\">";
                                    _d19 += __("lang_mainsite", "This player has been eliminated from the game");
                                    _d19 += "</p>";
                                }
                                if (typeof this.hotseatplayers[_d18] != "undefined" && this.player_id != _d18) {
                                    _d19 += "<p class=\"boardblock\">";
                                    _d19 += __("lang_mainsite", "This player is playing from the same seat than another (`hotseat`)");
                                    _d19 += "</p>";
                                }
                                if (_d19 != "") {
                                    $("player_table_status_" + _d18).innerHTML = _d19;
                                    dojo.style("player_table_status_" + _d18, "display", "block");
                                } else {
                                    dojo.style("player_table_status_" + _d18, "display", "none");
                                }
                            }
                        }
                        if (!g_archive_mode) {
                            dojo.query(".rtc_video_pulsating").removeClass("rtc_video_pulsating");
                            if (this.gamedatas.gamestate.type == "activeplayer") {
                                _d14 = this.gamedatas.gamestate.active_player;
                                if (this.gamedatas.players[_d14]) {
                                    if (this.gamedatas.players[_d14].ack != "unavail") {
                                        if (!this.shouldDisplayClockAlert(_d14)) {
                                            $("avatar_active_" + _d14).src = getStaticAssetUrl("img/layout/active_player.gif");
                                        } else {
                                            $("avatar_active_" + _d14).src = getStaticAssetUrl("img/layout/active_player_clockalert.gif");
                                        }
                                        if ($("videofeed_" + _d14 + "_pulse")) {
                                            dojo.addClass("videofeed_" + _d14 + "_pulse", "rtc_video_pulsating");
                                        }
                                    } else {
                                        $("avatar_active_" + _d14).src = getStaticAssetUrl("img/layout/active_player_nonack.gif");
                                    }
                                    dojo.style("avatarwrap_" + _d14, "display", "none");
                                    dojo.style("avatar_active_wrap_" + _d14, "display", "block");
                                    if (_d14 == this.player_id) {
                                        _d17 = true;
                                    }
                                } else {
                                    this.showMessage("Error: there is no more active player!", "error");
                                }
                            } else {
                                if (this.gamedatas.gamestate.type == "multipleactiveplayer") {
                                    for (var i in this.gamedatas.gamestate.multiactive) {
                                        _d14 = this.gamedatas.gamestate.multiactive[i];
                                        if (this.gamedatas.players[_d14].ack != "unavail") {
                                            if (!this.shouldDisplayClockAlert(_d14)) {
                                                $("avatar_active_" + _d14).src = getStaticAssetUrl("img/layout/active_player.gif");
                                            } else {
                                                $("avatar_active_" + _d14).src = getStaticAssetUrl("img/layout/active_player_clockalert.gif");
                                            }
                                            if ($("videofeed_" + _d14 + "_pulse")) {
                                                dojo.addClass("videofeed_" + _d14 + "_pulse", "rtc_video_pulsating");
                                            }
                                        } else {
                                            $("avatar_active_" + _d14).src = getStaticAssetUrl("img/layout/active_player_nonack.gif");
                                        }
                                        dojo.style("avatarwrap_" + _d14, "display", "none");
                                        dojo.style("avatar_active_wrap_" + _d14, "display", "block");
                                        if (_d14 == this.player_id) {
                                            _d17 = true;
                                        }
                                    }
                                }
                            }
                            if (_d16 && !_d17) {
                                this.updatePubBanner();
                            }
                        }
                        if (_d17) {
                            if (!this.shouldDisplayClockAlert(this.player_id)) {
                                $("active_player_statusbar_icon").src = getStaticAssetUrl("img/layout/active_player.gif");
                            } else {
                                $("active_player_statusbar_icon").src = getStaticAssetUrl("img/layout/active_player_clockalert.gif");
                            }
                            dojo.style("active_player_statusbar", "display", "inline-block");
                            dojo.addClass("ebd-body", "current_player_is_active");
                        } else {
                            dojo.style("active_player_statusbar", "display", "none");
                            dojo.removeClass("ebd-body", "current_player_is_active");
                        }
                        if (this.fireDlg) {
                            this.fireDlg.destroy();
                        }
                        if (this.game_name == "cantstop" && this.is_solo) {} else {
                            if (_d17) {
                                if (_d16) {} else {
                                    if (this.bRealtime) {
                                        dojo.addClass("reflexiontimevalues", "yourturn_animation");
                                        setTimeout(dojo.hitch(this, function() {
                                            dojo.removeClass("reflexiontimevalues", "yourturn_animation");
                                        }), 800);
                                    }
                                }
                            }
                        }
                        this.addTooltipToClass("tt_timemove_time_bar", __("lang_mainsite", "Remaining time to think for this move. When the bar is all red, you can expel inactive active players."), "");
                        this.addTooltip("reflexiontime_value", __("lang_mainsite", "Remaining time to think for this game"), "");
                        this.addTooltip("current_player_reflexion_time", __("lang_mainsite", "Remaining time to think for this game"), "");
                        this.addTooltipToClass("timeToThink", __("lang_mainsite", "Remaining time to think for this game"), "");
                        this.updateReflexionTimeDisplay();
                        this.updateFirePlayerLink();
                        this.current_player_is_active = _d17;
                        this.checkHotseatFocus();
                        return _d17;
                    },
                    isCurrentPlayerActive: function() {
                        return this.isPlayerActive(this.player_id);
                    },
                    isPlayerActive: function(_d1a) {
                        if (this.gamedatas.gamestate.type == "activeplayer") {
                            if (this.gamedatas.gamestate.active_player == _d1a) {
                                return true;
                            }
                        } else {
                            if (this.gamedatas.gamestate.type == "multipleactiveplayer") {
                                for (var i in this.gamedatas.gamestate.multiactive) {
                                    if (this.gamedatas.gamestate.multiactive[i] == _d1a) {
                                        return true;
                                    }
                                }
                            }
                        }
                        return false;
                    },
                    getActivePlayers: function() {
                        if (this.gamedatas.gamestate.type == "activeplayer") {
                            return [this.gamedatas.gamestate.active_player];
                        } else {
                            if (this.gamedatas.gamestate.type == "multipleactiveplayer") {
                                var res = [];
                                for (var i in this.gamedatas.gamestate.multiactive) {
                                    res.push(this.gamedatas.gamestate.multiactive[i]);
                                }
                                return res;
                            }
                        }
                        return [];
                    },
                    getActivePlayerId: function() {
                        if (this.gamedatas.gamestate.type == "activeplayer") {
                            return this.gamedatas.gamestate.active_player;
                        } else {
                            return null;
                        }
                    },
                    updatePageTitle: function() {
                        var tpl = dojo.clone(this.gamedatas.gamestate.args);
                        if (tpl === null) {
                            tpl = {};
                        }
                        var _d1b = this.getActivePlayers();
                        if (_d1b.length == 1) {
                            var _d1c = _d1b.pop();
                        } else {
                            var _d1c = null;
                        }
                        var _d1d = this.gamedatas.gamestate.description;
                        if (typeof _d1d == "undefined") {
                            _d1d = "";
                        }
                        if (this.gamedatas.gamestate.name == "gameSetup") {
                            if (this.lockts <= 0) {
                                _d1d = dojo.string.substitute(__("lang_mainsite", "Your ${game_name} game is about to start ..."), {
                                    game_name: this.game_name_displayed
                                });
                            } else {
                                _d1d = dojo.string.substitute(__("lang_mainsite", "Your ${game_name} game will start in ${s} seconds"), {
                                    game_name: this.game_name_displayed,
                                    s: "<span class=\"locking_time\">" + this.lockts + "</span>"
                                });
                            }
                        }
                        var _d1e;
                        var _d1f = "";
                        if (typeof _d1c != "undefined" && _d1c !== 0 && _d1c !== null) {
                            _d1e = this.gamedatas.players[_d1c].color;
                            if (this.gamedatas.players[_d1c].color_back) {
                                _d1f = "background-color:#" + this.gamedatas.players[_d1c].color_back + ";";
                            }
                            var toto = ("<span style=\"font-weight:bold;color:#" + _d1e + ";" + _d1f + "\">" + this.gamedatas.players[_d1c].name + "</span>");
                            tpl.actplayer = ("<span style=\"font-weight:bold;color:#" + _d1e + ";" + _d1f + "\">" + this.gamedatas.players[_d1c].name + "</span>");
                        } else {
                            tpl.actplayer = "";
                        }
                        if (this.isCurrentPlayerActive() && this.gamedatas.gamestate.descriptionmyturn !== null) {
                            _d1e = this.gamedatas.players[this.player_id].color;
                            _d1f = "";
                            if (this.gamedatas.players[this.player_id].color_back) {
                                _d1f = "background-color:#" + this.gamedatas.players[this.player_id].color_back + ";";
                            }
                            tpl.you = "<span style=\"font-weight:bold;color:#" + _d1e + ";" + _d1f + "\">" + __("lang_mainsite", "You") + "</span>";
                            _d1d = this.gamedatas.gamestate.descriptionmyturn;
                        }
                        if (tpl.otherplayer) {
                            _d1e = this.gamedatas.players[tpl.otherplayer_id].color;
                            _d1f = "";
                            if (this.gamedatas.players[tpl.otherplayer_id].color_back) {
                                _d1f = "background-color:#" + this.gamedatas.players[tpl.otherplayer_id].color_back + ";";
                            }
                            tpl.otherplayer = "<span style=\"font-weight:bold;color:#" + _d1e + ";" + _d1f + "\">" + tpl.otherplayer + "</span>";
                        }
                        _d1d = _(_d1d);
                        for (var i = 1; i <= 5; i++) {
                            tpl["titlearg" + i] = "<span id='titlearg" + i + "'>N</span>";
                        }
                        _d1d = this.format_string_recursive(_d1d, tpl);
                        if (_d1d == "") {
                            $("pagemaintitletext").innerHTML = "&nbsp;";
                        } else {
                            $("pagemaintitletext").innerHTML = _d1d;
                        }
                        dojo.empty("generalactions");
                        if (this.instantaneousMode) {} else {
                            document.title = this.strip_tags(_d1d) + " • " + this.game_name_displayed + " • " + $("websitename").innerHTML;
                        }
                        this.onUpdateActionButtons(this.gamedatas.gamestate.name, this.gamedatas.gamestate.args);
                        if ($("gotonexttable_wrap")) {
                            if (!this.isCurrentPlayerActive() && !this.bRealtime && !this.isSpectator) {
                                dojo.style("gotonexttable_wrap", "display", "inline");
                                dojo.style("go_to_next_table_inactive_player", "display", "inline");
                                dojo.style("go_to_next_table_active_player", "display", "none");
                                if (typeof this.number_of_tb_table_its_your_turn != "undefined" && this.number_of_tb_table_its_your_turn != "-") {
                                    if (this.number_of_tb_table_its_your_turn == 1) {
                                        $("go_to_next_player_label").innerHTML = dojo.string.substitute(__("lang_mainsite", "1 table is waiting for you"), {
                                            nbr: this.number_of_tb_table_its_your_turn
                                        });
                                    } else {
                                        if (this.number_of_tb_table_its_your_turn > 0) {
                                            $("go_to_next_player_label").innerHTML = dojo.string.substitute(__("lang_mainsite", "${nbr} tables are waiting for you"), {
                                                nbr: this.number_of_tb_table_its_your_turn
                                            });
                                        } else {
                                            $("go_to_next_player_label").innerHTML = __("lang_mainsite", "Get back to tables list");
                                        }
                                    }
                                } else {
                                    $("go_to_next_player_label").innerHTML = __("lang_mainsite", "Go to next table");
                                }
                                if (dojo.hasClass("ingame_menu_notes", "icon32_notes")) {
                                    if (typeof this.turnBasedNotesPopupIncent == "undefined" && !dojo.hasClass("ebd-body", "mobile_version")) {
                                        var html = "<div id=\"turnBasedNotesPopupIncentContent\">" + __("lang_mainsite", "You may note something for the next time...") + "</div>";
                                        var _d20 = "ingame_menu_notes_wrap";
                                        dojo.style("ingame_menu_notes_wrap", "display", "block");
                                        this.turnBasedNotesPopupIncent = new dijit.TooltipDialog({
                                            id: "turnBasedNotesIncent",
                                            content: html,
                                            closable: true
                                        });
                                        dijit.popup.open({
                                            popup: this.turnBasedNotesPopupIncent,
                                            around: _d20,
                                            orient: ["below", "below-alt", "above", "above-alt"]
                                        });
                                        dojo.connect($("turnBasedNotesPopupIncentContent"), "onclick", function() {
                                            dijit.popup.close(this.turnBasedNotesPopupIncent);
                                        });
                                        setTimeout(dojo.hitch(this, function() {
                                            if (this.turnBasedNotesPopupIncent) {
                                                dijit.popup.close(this.turnBasedNotesPopupIncent);
                                            }
                                        }), 2500);
                                    }
                                }
                            } else {
                                if (!this.bRealtime && !this.isSpectator) {
                                    dojo.style("gotonexttable_wrap", "display", "inline");
                                    dojo.style("go_to_next_table_inactive_player", "display", "none");
                                    dojo.style("go_to_next_table_active_player", "display", "inline");
                                }
                            }
                        }
                    },
                    onUpdateActionButtons: function() {},
                    addActionButton: function(id, _d21, _d22, dest, _d23, _d24) {
                        if (typeof _d23 == "undefined") {
                            _d23 = false;
                        }
                        if (typeof _d24 == "undefined") {
                            _d24 = "blue";
                        }
                        tpl = {};
                        tpl.id = id;
                        tpl.label = _d21;
                        tpl.addclass = "bgabutton ";
                        if (_d24 == "gray") {
                            tpl.addclass += "bgabutton_gray";
                        } else {
                            if (_d24 == "red") {
                                tpl.addclass += "bgabutton_red";
                            } else {
                                if (_d24 == "none") {
                                    tpl.addclass = "";
                                } else {
                                    tpl.addclass += "bgabutton_blue";
                                }
                            }
                        }
                        if (_d23) {
                            tpl.addclass += " blinking";
                        }
                        if (!dest) {
                            dest = "generalactions";
                        }
                        dojo.place(this.format_block("jstpl_action_button", tpl), dest);
                        dojo.connect($(id), "onclick", this, _d22);
                    },
                    removeActionButtons: function() {
                        dojo.empty("generalactions");
                    },
                    updateVisitors: function(_d25) {
                        var _d26 = "";
                        var _d27 = true;
                        this.last_visitorlist = _d25;
                        for (var _d28 in _d25) {
                            var _d29 = _d25[_d28];
                            if (this.gamedatas.players[_d28] && this.gamedatas.gamestate.name != "gameEnd") {} else {
                                if (!_d27) {
                                    _d26 += " ";
                                } else {
                                    _d27 = false;
                                }
                                if (this.gamedatas.players[_d28]) {
                                    var _d2a = "<span style=\"white-space: nowrap\"><span id=\"visitor_player_" + _d28 + "\" class=\"visitor_player\">" + _d29 + "</span></span>";
                                } else {
                                    var _d2a = "<span style=\"white-space: nowrap\"><span id=\"visitor_player_" + _d28 + "\" class=\"visitor_player\">" + _d29 + "</span> <a href=\"#\" style=\"display:none\" id=\"ban_spectator_" + _d28 + "\" class=\"ban_spectator\"><i class=\"fa fa-times\" aria-hidden=\"true\"></i></a></span>";
                                }
                                _d26 += _d2a;
                            }
                        }
                        if (!_d27) {
                            dojo.place("<span>" + __("lang_mainsite", "Spectators:") + " " + _d26 + "</span>", "spectatorlist", "only");
                            dojo.style($("spectatorbox"), "display", "block");
                            dojo.query(".ban_spectator").connect("onclick", this, "onBanSpectator");
                        } else {
                            dojo.style($("spectatorbox"), "display", "none");
                        }
                    },
                    onBanSpectator: function(evt) {
                        dojo.stopEvent(evt);
                        var _d2b = evt.currentTarget.id.substr(14);
                        if (_d2b == this.player_id) {
                            return;
                        }
                        this.showMessage(__("lang_mainsite", "You can give this player a red thumb, so he won't be able to chat again at your table."), "info");
                        var _d2c = new ebg.thumb();
                        _d2c.create(this, "ban_spectator_" + _d2b, _d2b, 0);
                        dojo.style("ban_spectator_" + _d2b, "display", "none");
                        _d2c.bForceThumbDown = true;
                        _d2c.onGiveThumbDown(evt);
                    },
                    switchToGameResults: function() {
                        countVisibleDialog = 0;
                        dojo.query(".dijitDialog").forEach(function(node) {
                            if (dojo.style(node, "display") != "none") {
                                countVisibleDialog++;
                            }
                        });
                        dojo.query(".standard_popin").forEach(function(node) {
                            if (dojo.style(node, "display") != "none") {
                                countVisibleDialog++;
                            }
                        });
                        var _d2d = Math.floor(Date.now() / 1000);
                        var _d2e = _d2d - 1000;
                        var _d2f = false;
                        if (typeof this.end_of_game_timestamp != "undefined") {
                            _d2f = true;
                            _d2e = this.end_of_game_timestamp + 3;
                        }
                        if (countVisibleDialog == 0 && _d2f && _d2d >= _d2e) {
                            this.pageheader.showSectionFromButton("pageheader_gameresult");
                            if (dojo.hasClass("ebd-body", "arena_mode")) {} else {
                                this.eloEndOfGameAnimation();
                            }
                            var _d30 = this.tableresults_datas;
                            var _d31 = false;
                            var _d32 = {};
                            if (dojo.hasClass("ebd-body", "arena_mode")) {
                                _d31 = true;
                            } else {
                                if (typeof _d30.result.trophies != "undefined" && typeof _d30.result.trophies[this.player_id] != "undefined") {
                                    if (typeof _d30.result.trophies[this.player_id] != "undefined") {
                                        _d31 = true;
                                    }
                                }
                            }
                            if (_d31) {
                                if (typeof _d30.result.trophies != "undefined" && typeof _d30.result.trophies[this.player_id] != "undefined") {
                                    if (typeof _d30.result.trophies[this.player_id] != "undefined") {
                                        _d32 = _d30.result.trophies[this.player_id];
                                    }
                                }
                                setTimeout(dojo.hitch(this, function() {
                                    this.loadTrophyToSplash(_d32);
                                }), 2000);
                            }
                        } else {
                            setTimeout(dojo.hitch(this, function() {
                                this.switchToGameResults();
                            }), 1000);
                        }
                    },
                    eloEndOfGameAnimation: function() {
                        this.eloEndOfGameAnimationDatas = {};
                        var _d33 = false;
                        dojo.query("#pagesection_gameresult .newrank .gamerank_value").forEach(dojo.hitch(this, function(node) {
                            var _d34 = node.innerHTML;
                            if (_d34 != "") {
                                var _d35 = node.parentNode.parentNode.id.substr(8);
                                if ($("player_elo_" + _d35)) {
                                    var _d36 = $("player_elo_" + _d35).innerHTML;
                                    this.eloEndOfGameAnimationDatas[_d35] = {
                                        player_id: _d35,
                                        from: toint(_d36),
                                        to: toint(_d34),
                                        current: toint(_d36)
                                    };
                                    _d33 = true;
                                }
                            }
                        }));
                        if (_d33) {
                            this.eloEndOfGameAnimationFrameCurrentDuration = 0;
                            this.eloEndOfGameAnimationWorker();
                            playSound("elochange");
                        }
                    },
                    eloEndOfGameAnimationWorker: function() {
                        var _d37 = 1000;
                        var _d38 = 50;
                        for (var _d39 in this.eloEndOfGameAnimationDatas) {
                            var _d3a = this.eloEndOfGameAnimationDatas[_d39];
                            var _d3b = Math.round(_d3a.from + ((this.eloEndOfGameAnimationFrameCurrentDuration / _d37) * (_d3a.to - _d3a.from)));
                            if (_d3b != _d3a.current) {
                                if (_d3b > _d3a.current && _d39 == this.player_id) {
                                    var html = "<div style=\"z-index:10000\" class=\"icon20 icon20_rankwb\"></div>";
                                    var anim = this.slideTemporaryObject(html, "page-content", "winpoints_value_" + _d39, "player_elo_" + _d39, 1000);
                                    var _d3c = _d3b;
                                    dojo.connect(anim, "onEnd", dojo.hitch(this, function() {
                                        $("player_elo_" + this.player_id).innerHTML = _d3c;
                                        var _d3d = this.getColorFromElo(_d3c + 1300);
                                        dojo.style($("player_elo_" + this.player_id).parentNode, "backgroundColor", _d3d);
                                        var _d3e = dojo.query("#player_board_" + this.player_id + " .gamerank");
                                        dojo.removeClass(_d3e[0], "rankbounce");
                                        _d3e[0].offsetWidth;
                                        dojo.addClass(_d3e[0], "rankbounce");
                                    }));
                                } else {
                                    if (_d3b < _d3a.current && _d39 == this.player_id) {
                                        var html = "<div style=\"z-index:10000\" class=\"icon20 icon20_rankwb\"></div>";
                                        var anim = this.slideTemporaryObject(html, "page-content", "player_elo_" + _d39, "winpoints_value_" + _d39, 1000);
                                        var _d3c = _d3b;
                                        $("player_elo_" + this.player_id).innerHTML = _d3c;
                                        var _d3f = this.getColorFromElo(_d3c + 1300);
                                        dojo.style($("player_elo_" + this.player_id).parentNode, "backgroundColor", _d3f);
                                        var _d40 = dojo.query("#player_board_" + this.player_id + " .gamerank");
                                        dojo.removeClass(_d40[0], "rankbounce");
                                        _d40[0].offsetWidth;
                                        dojo.addClass(_d40[0], "rankbounce");
                                    } else {
                                        $("player_elo_" + _d39).innerHTML = _d3b;
                                        var _d3f = this.getColorFromElo(_d3b + 1300);
                                        dojo.style($("player_elo_" + _d39).parentNode, "backgroundColor", _d3f);
                                    }
                                }
                                this.eloEndOfGameAnimationDatas[_d39].current = _d3b;
                            }
                        }
                        if (this.eloEndOfGameAnimationFrameCurrentDuration >= _d37) {} else {
                            this.eloEndOfGameAnimationFrameCurrentDuration += _d38;
                            setTimeout(dojo.hitch(this, "eloEndOfGameAnimationWorker"), _d38);
                        }
                    },
                    updateResultPage: function() {
                        this.ajaxcall("/table/table/tableinfos.html", {
                            id: this.table_id,
                            nosuggest: true
                        }, this, function(_d41) {
                            if (_d41.status != "finished" && _d41.status != "archive") {} else {
                                this.tableresults = new ebg.tableresults();
                                this.tableresults.create(this, "game_result_panel", "statistics_content", _d41, this.pma);
                                this.tableresults_datas = _d41;
                                dojo.style("statistics", "display", "none");
                                if (_d41.result.endgame_reason === "normal_end" || _d41.result.endgame_reason === "normal_concede_end" || _d41.result.endgame_reason === "neutralized_after_skipturn" || _d41.result.endgame_reason === "neutralized_after_skipturn_error") {
                                    dojo.style("statistics", "display", "block");
                                }
                                if (typeof FB != "undefined" && typeof FB.XFBML != "undefined") {
                                    this.onFBReady();
                                } else {
                                    dojo.subscribe("FBReady", this, "onFBReady");
                                }
                            }
                        });
                        this.switchToGameResults();
                    },
                    loadTrophyToSplash: function(_d42) {
                        var _d43 = {};
                        for (var i in _d42) {
                            _d43[_d42[i].id] = true;
                        }
                        this.ajaxcall("/playernotif/playernotif/getNotificationsToBeSplashDisplayed.html", {}, this, function(_d44) {
                            var _d45 = [];
                            for (var i in _d44) {
                                if (_d44[i].news_type == 28) {
                                    _d45.push(_d44[i]);
                                }
                            }
                            for (var i in _d44) {
                                if (typeof _d43[_d44[i].jargs.award_id_id] != "undefined") {
                                    _d45.push(_d44[i]);
                                }
                            }
                            this.showSplashedPlayerNotifications(_d45);
                        });
                    },
                    displayScores: function() {
                        dojo.style("maingameview_menuheader", "display", "block");
                        var _d46 = this.gamedatas.gamestate.args.result;
                        var _d47 = this.buildScoreDlgHtmlContent(_d46);
                        if (_d47.title !== null) {
                            $("pagemaintitletext").innerHTML += " : " + _d47.title;
                            $("game_result_label").innerHTML = " : " + _d47.title;
                        } else {
                            $("pagemaintitletext").innerHTML += " : " + dojo.string.substitute(__("lang_mainsite", "${winner} wins"), {
                                winner: _d46[0].name
                            });
                            $("game_result_label").innerHTML = " : " + dojo.string.substitute(__("lang_mainsite", "${winner} wins"), {
                                winner: _d46[0].name
                            });
                        }
                        if (typeof this.bGameEndJustHappened != "undefined" && this.bGameEndJustHappened) {
                            if (_d47.result_for_current_player == "victory") {
                                playSound("victory");
                            } else {
                                if (_d47.result_for_current_player == "lose") {
                                    playSound("lose");
                                } else {
                                    playSound("tie");
                                }
                            }
                        }
                        var url = this.metasiteurl + "/gamereview?table=" + this.table_id;
                        this.notifqueue.addToLog("<p style=\"text-align:center;\"><a href=\"" + url + "\" class=\"bgabutton bgabutton_gray replay_last_move_button\"><span class=\"textalign\"><span class=\"icon32 icon32_replaylastmoves textalign_inner\"></span></span> " + __("lang_mainsite", "Replay game") + "</a></p>", false, false);
                    },
                    buildScoreDlgHtmlContent: function(_d48) {
                        var html = "";
                        var _d49 = null;
                        var _d4a = [];
                        var _d4b = 0;
                        var _d4c = false;
                        var _d4d = false;
                        var _d4e = null;
                        var _d4f = true;
                        var _d50 = true;
                        var _d51 = true;
                        for (var i in _d48) {
                            var _d52 = _d48[i];
                            if (toint(_d52.score) != 0 || toint(_d52.score_aux) != -4242) {
                                _d4f = false;
                            }
                            if (toint(_d52.score_aux) != -4243) {
                                _d50 = false;
                            }
                            if (toint(_d52.score_aux) != -4244) {
                                _d51 = false;
                            }
                        }
                        var _d53 = null;
                        var _d54 = null;
                        for (var i in _d48) {
                            var _d52 = _d48[i];
                            rank = toint(_d52.rank);
                            var _d55 = this.getRankString(rank);
                            var _d56 = "jstpl_score_entry";
                            if (typeof (jstpl_score_entry_specific) != "undefined") {
                                _d56 = "jstpl_score_entry_specific";
                            }
                            var _d57 = "";
                            if (_d52.color_back) {
                                _d57 = "background-color: #" + _d52.color_back + ";";
                            }
                            if (_d49 !== null && _d49 == _d52.score && _d52.score_aux !== null) {
                                _d4a.push(_d52.score);
                                if (rank == 1) {
                                    _d4c = true;
                                }
                            }
                            _d49 = _d52.score;
                            if (_d52.player == this.player_id) {
                                _d53 = rank;
                            }
                            _d54 = rank;
                            if (!_d4f) {
                                if (typeof _d52.player == "undefined") {
                                    _d52.player = 0;
                                }
                                html += this.format_block(_d56, {
                                    rank: _d55,
                                    name: _d52.name,
                                    color: _d52.color,
                                    color_back: _d57,
                                    score: _d52.score,
                                    score_aux: _d52.score_aux,
                                    index: _d4b,
                                    id: _d52.player
                                });
                            }
                            if (toint(_d52.score) > 0) {
                                _d4d = true;
                            }
                            _d4b++;
                        }
                        html += "<br class='clear' /><br/>";
                        html += "<div style='text-align: center'>";
                        var _d58 = "neutral";
                        if (_d53 !== null && _d53 == 1 && _d54 > 1) {
                            _d58 = "victory";
                        }
                        if (_d53 !== null && _d53 == _d54 && _d54 > 1) {
                            _d58 = "lose";
                        }
                        if (_d4c) {
                            _d4e = __("lang_mainsite", "End of game (tie)");
                        }
                        if (this.losers_not_ranked) {
                            if (this.isSpectator) {
                                _d4e = __("lang_mainsite", "End of game");
                            } else {
                                if (_d58 == "victory") {
                                    _d4e = __("lang_mainsite", "End of game (victory)");
                                } else {
                                    if (_d58 == "neutral") {
                                        _d4e = __("lang_mainsite", "End of game (tie)");
                                    } else {
                                        _d4e = __("lang_mainsite", "End of game (defeat)");
                                    }
                                }
                            }
                        }
                        if (_d4f) {
                            _d4e = __("lang_mainsite", "End of game (abandon)");
                        }
                        if (_d50) {
                            _d4e = __("lang_mainsite", "End of game (tournament maximum time reached)");
                        }
                        if (_d51) {
                            _d4e = __("lang_mainsite", "End of game (players disagree on the game results)");
                        }
                        if (this.is_coop || this.is_solo) {
                            if (this.isSpectator) {
                                _d4e = __("lang_mainsite", "End of game");
                            } else {
                                if (_d4d) {
                                    _d4e = __("lang_mainsite", "End of game (victory)");
                                    _d58 = "victory";
                                } else {
                                    _d4e = __("lang_mainsite", "End of game (defeat)");
                                    _d58 = "lose";
                                }
                            }
                        }
                        if (dojo.style("neutralized_game_panel", "display") == "block" || this.gamedatas.game_result_neutralized > 0) {
                            html += $("neutralized_explanation").innerHTML;
                            _d4e = __("lang_mainsite", "End of game (game results neutralized)");
                            this.tiebreaker = "";
                        }
                        if (_d4a.length > 0 && this.tiebreaker != "" && !_d4f) {
                            html += "<div class='smalltext'>(<i class='fa fa-star tiebreaker'></i>: " + __("lang_mainsite", "Tie breaker") + ": " + _(this.tiebreaker) + ")</div><br/>";
                        }
                        if (_d50) {
                            html += "<div>(" + __("lang_mainsite", "Game has been abandonned automatically because players did not managed to finish it before the next round of the tournament. The player with the most remaining reflexion time wins the game.") + ")</div><br/>";
                        }
                        if (_d51) {
                            html += "<div>(" + __("lang_mainsite", "Game has been abandonned automatically because players did not managed to agree on a game result.") + ")</div><br/>";
                        }
                        if (!_d4f) {
                            html += "<div class='publishresult' id='publishresult'>";
                            html += "<fb:like layout=\"button_count\" href=\"https://boardgamearena.com/table?table=" + this.table_id + "table?table=" + this.table_id + "\" show_faces=\"false\" width=\"30\" ></fb:like>";
                            html += "</div>";
                        }
                        return {
                            html: html,
                            title: _d4e,
                            result_for_current_player: _d58,
                            tied_scores: _d4a
                        };
                    },
                    onFBReady: function() {
                        FB.XFBML.parse();
                        dojo.forEach(dojo.query(".fb_button_text"), function(_d59) {
                            _d59.innerHTML = __("lang_mainsite", "Publish on my Facebook profile");
                        });
                    },
                    onGameEnd: function() {
                        this.displayScores();
                        $("pagemaintitletext").innerHTML += "<br/>";
                        this.addActionButton("backMetasite_btn", __("lang_mainsite", "Return to main site"), "onBackToMetasite");
                        this.addActionButton("createNew_btn", __("lang_mainsite", "Play again"), "onCreateNewTable");
                        if (!this.isSpectator) {
                            this.addActionButton("revenge_btn", __("lang_mainsite", "Propose a rematch"), "onProposeRematch");
                        }
                        if (this.blinkid != "") {}
                        if (dojo.hasClass("archivecontrol", "demomode")) {
                            setTimeout(dojo.hitch(this, function() {
                                parent.location.reload();
                            }), 1000);
                        } else {
                            if (dojo.hasClass("archivecontrol", "loop")) {
                                setTimeout(dojo.hitch(this, function() {
                                    window.location.reload();
                                }), 1000);
                            }
                        }
                        if (this.quickGameEndUrl != "") {
                            setTimeout(dojo.hitch(this, function() {
                                document.location.href = this.quickGameEndUrl + "?table=" + this.table_id;
                            }), 1000);
                        }
                        this.updateVisitors(this.last_visitorlist);
                    },
                    onBackToMetasite: function() {
                        if (typeof bgaConfig != "undefined" && bgaConfig.webrtcEnabled) {
                            this.doLeaveRoom();
                        }
                        if (!this.quickGameEnd) {
                            if (this.tournament_id != null) {
                                document.location.href = this.metasiteurl + "/tournament?id=" + this.tournament_id;
                            } else {
                                document.location.href = this.metasiteurl + "/" + this.mslobby;
                            }
                        } else {
                            if (this.quickGameEndUrl != "") {
                                document.location.href = this.quickGameEndUrl + "?table=" + this.table_id;
                            } else {
                                document.location.href = this.metasiteurl + "/";
                            }
                        }
                    },
                    onCreateNewTable: function() {
                        if (typeof bgaConfig != "undefined" && bgaConfig.webrtcEnabled) {
                            this.doLeaveRoom();
                        }
                        this.ajaxcall("/table/table/createnew.html", {
                            game: this.game_id,
                            src: "g",
                            redirect_manual: true
                        }, this, function(_d5a) {
                            if (_d5a.manual_lobby) {
                                document.location.href = this.metasiteurl + "/lobby?game=" + this.game_id;
                            } else {
                                if (_d5a.mmstarted) {
                                    document.location.href = this.metasiteurl + "/lobby?game=" + this.game_id;
                                }
                            }
                        });
                    },
                    onProposeRematch: function() {
                        if (typeof bgaConfig != "undefined" && bgaConfig.webrtcEnabled) {
                            this.doLeaveRoom();
                        }
                        this.ajaxcall("/table/table/createnew.html", {
                            game: this.game_id,
                            rematch: this.table_id,
                            src: "R"
                        }, this, function(_d5b) {
                            var _d5c = _d5b.table;
                            document.location.href = this.metasiteurl + "/table?table=" + _d5c + "&acceptinvit";
                        });
                    },
                    onBuyThisGame: function() {
                        document.location.href = this.blinkid;
                    },
                    ajaxcall: function() {
                        var url = arguments[0];
                        if (g_archive_mode) {
                            var _d5d = arguments[1];
                            var _d5e = "/" + this.game_name + "/" + this.game_name + "/";
                            if (url.indexOf(_d5e) == 0) {
                                var _d5f = url.substr(_d5e.length);
                                _d5f = _d5f.replace(".html", "");
                                delete _d5d.lock;
                                _d5d["__action__"] = _d5f;
                                _d5d["__move_id__"] = toint($("move_nbr").innerHTML) + 1;
                                _d5d["__player_id__"] = this.player_id;
                                _d5d["table"] = this.table_id;
                                _d5d["h"] = g_gamelogs[this.next_archive_index].data[0].h;
                                if (this.notifqueue.queue.length > 0) {
                                    for (var i in this.notifqueue.queue) {
                                        if (typeof this.notifqueue[i].h != "undefined") {
                                            _d5d["h"] = this.notifqueue[i].h;
                                            break;
                                        }
                                    }
                                }
                                if (g_tutorialwritten.mode == "view") {
                                    if ($("do_action_to_continue")) {} else {
                                        this.showMessage(__("lang_mainsite", "You must use Continue button to continue the tutorial"), "error");
                                        return;
                                    }
                                }
                                return ebg.core.sitecore.prototype.ajaxcall.call(this, "/table/table/checkNextMove.html", _d5d, this, function(_d60) {
                                    if (_d60 == "ok") {
                                        this.archive_playmode = "nextcomment";
                                        dojo.style("archiveCommentMinimizedIcon", "display", "none");
                                        this.doNewArchiveCommentNext();
                                    }
                                });
                            }
                        } else {
                            if (url.charAt(0) == "/") {
                                var _d61 = "/" + this.game_name + "/" + this.game_name;
                                if (url.substr(0, _d61.length) == _d61) {
                                    arguments[0] = url.substr(1);
                                } else {}
                            }
                        }
                        arguments[1].table = this.table_id;
                        if (this.forceTestUser !== null) {
                            arguments[1].testuser = this.forceTestUser;
                        }
                        return this.inherited(arguments);
                    },
                    onGlobalActionPause: function(evt) {
                        evt.preventDefault();
                    },
                    onGlobalActionFullscreen: function(evt) {
                        dojo.stopEvent(evt);
                        var body = document.documentElement;
                        if (body.requestFullScreen) {
                            body.requestFullScreen();
                        } else {
                            if (body.webkitRequestFullScreen) {
                                body.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);
                            } else {
                                if (body.mozRequestFullScreen) {
                                    body.mozRequestFullScreen();
                                } else {
                                    window.open("/" + this.gameserver + "/" + this.game_name + "?table=" + this.table_id, "", "fullscreen=yes,scrollbars=yes");
                                }
                            }
                        }
                        return false;
                    },
                    switchLogModeTo: function(mode) {
                        if (mode != 0 && this.log_mode != "2cols") {
                            this.log_mode = "2cols";
                            dojo.addClass("ebd-body", "logs_on_additional_column");
                            this.onGameUiWidthChange();
                        } else {
                            if (mode == 0 && this.log_mode != "normal") {
                                this.log_mode = "normal";
                                dojo.removeClass("ebd-body", "logs_on_additional_column");
                                this.onGameUiWidthChange();
                            }
                        }
                    },
                    onGlobalActionPreferences: function() {},
                    onGlobalActionHelp: function() {},
                    onGlobalActionQuit: function(evt) {
                        evt.preventDefault();
                        if (this.gamedatas.gamestate.name == "gameEnd" || g_archive_mode || this.isSpectator) {
                            if (typeof bgaConfig != "undefined" && bgaConfig.webrtcEnabled) {
                                this.doLeaveRoom();
                            }
                            window.location.href = this.metasiteurl + "/table?table=" + this.table_id;
                        } else {
                            this.leaveTable(this.table_id, dojo.hitch(this, function() {
                                if (typeof bgaConfig != "undefined" && bgaConfig.webrtcEnabled) {
                                    this.doLeaveRoom();
                                }
                                window.location.href = this.metasiteurl + "/table?table=" + this.table_id;
                            }));
                        }
                    },
                    onNewLog: function(html, _d62) {},
                    addMoveToLog: function(_d63, _d64) {
                        this.addTooltip("log_" + _d63, "", __("lang_mainsite", "Replay game from this point"));
                        dojo.addClass("log_" + _d63, "log_replayable");
                        this.log_to_move_id[_d63] = _d64;
                        dojo.connect($("log_" + _d63), "onclick", this, "onReplayFromPoint");
                    },
                    onChangeContentHeight: function() {},
                    onReplayFromPoint: function(evt) {
                        var _d65 = evt.target || evt.srcElement;
                        if (_d65.tagName == "A" || _d65.tagName == "a") {
                            return;
                        }
                        var _d66 = evt.currentTarget.id.substr(4);
                        var _d67 = this.log_to_move_id[_d66];
                        _d67 = Math.max(0, toint(_d67));
                        var url = "/" + this.gameserver + "/" + this.game_name + "?table=" + this.table_id + "&replayFrom=" + _d67 + (dojo.query(".expressswitch").length > 0 ? "&testuser=" + this.forceTestUser : "");
                        dojo.place("<p style=\"text-align:center;\"><a href=\"" + url + "\" class=\"bgabutton bgabutton_gray replay_last_move_button\"><span class=\"textalign\"><span class=\"icon32 icon32_replaylastmoves textalign_inner\"></span></span> " + __("lang_mainsite", "Replay from this move") + "</a></p>", "log_" + _d66);
                    },
                    updateDecisionPanel: function(_d68) {
                        if (_d68.decision_type == "none") {
                            dojo.style("table-decision", "display", "none");
                        } else {
                            if ((_d68.decision_taken === true) || (_d68.decision_taken == "true")) {
                                dojo.style("table-decision", "display", "none");
                                if (_d68.decision_type == "abandon") {
                                    this.showMessage(__("lang_mainsite", "The decision to ABANDON this game has been taken by all players."), "info");
                                    if (!this.isSpectator) {
                                        if (this.gamedatas.gamestate.reflexion.total[this.player_id] < 0) {
                                            this.showMessage(__("lang_mainsite", "You are OUT OF TIME, then you automatically accepted to abandon this game."), "info");
                                        }
                                    }
                                }
                            } else {
                                if ((_d68.decision_refused === true) || (_d68.decision_refused == "true")) {
                                    dojo.style("table-decision", "display", "none");
                                    this.notifqueue.addToLog(__("lang_mainsite", "Decision on table has been refused"));
                                } else {
                                    dojo.style($("table-decision"), "display", "block");
                                    var i;
                                    var _d69;
                                    var _d6a = "";
                                    if (_d68.decision_type == "abandon") {
                                        _d6a = __("lang_mainsite", "Would you like to abandon this game (no points loss) ?");
                                    } else {
                                        if (_d68.decision_type == "switch_tb") {
                                            _d6a = __("lang_mainsite", "Would you like to transform this table in a Turn-based table ?");
                                        }
                                    }
                                    $("decision-title").innerHTML = _d6a;
                                    $("decision-players-0").innerHTML = "-";
                                    $("decision-players-1").innerHTML = "-";
                                    $("decision-players-undecided").innerHTML = "-";
                                    for (_d69 in _d68.players) {
                                        var _d6b = _d68.players[_d69];
                                        var _d6c = this.gamedatas.players[_d69].name;
                                        var _d6d = $("decision-players-" + _d6b);
                                        if (_d6d.innerHTML == "-") {
                                            _d6d.innerHTML = "<b>" + _d6c + "</b>";
                                        } else {
                                            _d6d.innerHTML += ", <b>" + _d6c + "</b>";
                                        }
                                    }
                                    if (!this.bRealtime) {
                                        _d6d.innerHTML += "<br/><br/>" + "<b>" + __("lang_mainsite", "Important") + ":</b> " + __("lang_mainsite", "Until all players agree you must continue to PLAY or you may get some penalties.");
                                    }
                                }
                            }
                        }
                    },
                    onPlayerDecide: function(evt) {
                        evt.preventDefault();
                        var _d6e = 0;
                        if (evt.currentTarget.id == "decision_yes") {
                            _d6e = 1;
                        }
                        this.ajaxcall("/table/table/decide.html", {
                            type: null,
                            decision: _d6e,
                            table: this.table_id
                        }, this, function(obj, _d6f) {});
                    },
                    updateReflexionTimeDisplay: function() {
                        if (g_archive_mode) {
                            dojo.style($("archivecontrol"), "display", "block");
                            if (dojo.hasClass("archivecontrol", "demomode")) {
                                dojo.style("archivecontrol", "display", "none");
                            }
                            return;
                        }
                        if (typeof g_replayFrom == "undefined") {
                            for (var _d70 in this.gamedatas.gamestate.reflexion.total) {
                                var ttt = this.formatReflexionTime(this.gamedatas.gamestate.reflexion.total[_d70]);
                                $("timeToThink_" + _d70).innerHTML = ttt.string;
                            }
                        } else {
                            if (typeof this.updatedReflexionTime != "undefined") {
                                this.gamedatas.gamestate.reflexion = this.updatedReflexionTime;
                                for (var _d70 in this.gamedatas.gamestate.reflexion.total) {
                                    var ttt = this.formatReflexionTime(this.gamedatas.gamestate.reflexion.total[_d70]);
                                    $("timeToThink_" + _d70).innerHTML = ttt.string;
                                }
                            }
                        }
                        if (this.isCurrentPlayerActive() || this.bTimerCommon) {
                            if (this.gamedatas.gamestate.reflexion.total[this.player_id]) {
                                dojo.style($("inactiveplayerpanel"), "display", "none");
                                dojo.style($("wouldlikethink_button"), "display", "inline");
                                dojo.style($("not_playing_help"), "display", "none");
                                dojo.style($("ai_not_playing"), "display", "none");
                                dojo.style($("reflexiontime"), "display", "block");
                                dojo.style($("its_your_turn"), "visibility", "visible");
                                var ttt = this.formatReflexionTime(this.gamedatas.gamestate.reflexion.total[this.player_id]);
                                $("reflexiontime_value").innerHTML = ttt.string;
                                this.currentPlayerReflexionStartAt = this.gamedatas.gamestate.reflexion.total[this.player_id];
                            }
                            if (this.bTimerCommon) {
                                if (!this.isCurrentPlayerActive()) {
                                    dojo.style($("wouldlikethink_button"), "display", "none");
                                    dojo.style($("its_your_turn"), "visibility", "hidden");
                                }
                            }
                        } else {
                            dojo.style($("inactiveplayerpanel"), "display", "block");
                            dojo.style($("wouldlikethink_button"), "display", "none");
                            dojo.style($("ai_not_playing"), "display", "none");
                            dojo.style($("not_playing_help"), "display", "none");
                            dojo.style($("reflexiontime"), "display", "none");
                        }
                        if (this.clock_timeout) {
                            clearTimeout(this.clock_timeout);
                            this.clock_timeout = null;
                        }
                        this.updateReflexionTime(true);
                    },
                    updateReflexionTime: function(_d71) {
                        this.clock_timeout = setTimeout(dojo.hitch(this, "updateReflexionTime"), 1000);
                        var _d72 = this.getActivePlayers();
                        if (this.bTimerCommon) {
                            _d72 = [];
                            for (var i in this.gamedatas.players) {
                                _d72.push(i);
                            }
                        }
                        var _d73 = false;
                        var _d74 = false;
                        for (var i in _d72) {
                            var _d75 = _d72[i];
                            if (typeof this.gamedatas.gamestate.reflexion.total[_d75] == "undefined") {
                                console.error("Try to active a player that is not around the table: " + _d75);
                            }
                            if (typeof _d71 != "undefined" && _d71) {
                                if (typeof this.gamedatas.gamestate.reflexion.initial == "undefined") {
                                    this.gamedatas.gamestate.reflexion.initial = {};
                                    this.gamedatas.gamestate.reflexion.initial_ts = {};
                                }
                                this.gamedatas.gamestate.reflexion.initial[_d75] = this.gamedatas.gamestate.reflexion.total[_d75];
                                this.gamedatas.gamestate.reflexion.initial_ts[_d75] = new Date().getTime();
                            } else {
                                var _d76 = true;
                                var now = new Date();
                                if (typeof this.playingHours != "undefined") {
                                    _d76 = this.playingHours[now.getHours()];
                                }
                                if (_d76) {
                                    var _d77 = Math.floor((now.getTime() - this.gamedatas.gamestate.reflexion.initial_ts[_d75]) / 1000);
                                    this.gamedatas.gamestate.reflexion.total[_d75] = this.gamedatas.gamestate.reflexion.initial[_d75] - _d77;
                                } else {
                                    _d74 = true;
                                }
                            }
                            var ttt = this.formatReflexionTime(this.gamedatas.gamestate.reflexion.total[_d75]);
                            if (typeof this.gamedatas.players[_d75].is_ai != "undefined" && this.gamedatas.players[_d75].is_ai != 0) {
                                _d73 = true;
                            }
                            if (!$("timeToThink_" + _d75)) {
                                this.showMessage("Unknow active player: " + _d75, "error");
                            } else {
                                if (_d74) {
                                    $("timeToThink_" + _d75).innerHTML = "<i class=\"fa fa-moon-o\" aria-hidden=\"true\"></i> " + ttt.string;
                                } else {
                                    $("timeToThink_" + _d75).innerHTML = ttt.string;
                                }
                                if (!ttt.positive) {
                                    dojo.style($("timeToThink_" + _d75), "color", "red");
                                    if (this.bTimerCommon) {
                                        $("timeToThink_" + _d75).innerHTML = this.formatReflexionTime(0).string;
                                    }
                                } else {
                                    dojo.style($("timeToThink_" + _d75), "color", "inherit");
                                }
                            }
                        }
                        if (this.isCurrentPlayerActive() || this.bTimerCommon) {
                            if (typeof this.gamedatas.gamestate.reflexion.total[this.player_id] != "undefined") {
                                var ttt = this.formatReflexionTime(this.gamedatas.gamestate.reflexion.total[this.player_id]);
                                if (_d74) {
                                    $("reflexiontime_value").innerHTML = "<div class=\"icon20 icon20_night this_is_night\" style=\"top:1px\"></div> " + ttt.string;
                                } else {
                                    $("reflexiontime_value").innerHTML = ttt.string;
                                }
                                if (this.gamedatas.gamestate.reflexion.total[this.player_id] < 0) {
                                    dojo.fx.chain([dojo.fadeOut({
                                        node: "reflexiontime_value",
                                        duration: 200
                                    }), dojo.fadeIn({
                                        node: "reflexiontime_value",
                                        duration: 200
                                    })]).play();
                                    if (this.bTimerCommon) {
                                        $("reflexiontime_value").innerHTML = this.formatReflexionTime(0).string;
                                    }
                                }
                                if (this.bRealtime) {
                                    if (this.gamedatas.gamestate.reflexion.total[this.player_id] == 10) {
                                        playSound("time_alarm");
                                        this.notifqueue.addToLog(__("lang_mainsite", "Warning: Your clock has only 10 seconds remaining!"));
                                    }
                                    if (this.gamedatas.gamestate.reflexion.total[this.player_id] == 0) {
                                        playSound("time_alarm");
                                        this.notifqueue.addToLog(__("lang_mainsite", "Warning: Your clock is negative: you should play now!"));
                                    }
                                    if (typeof this.currentPlayerReflexionStartAt != "undefined" && this.currentPlayerReflexionStartAt < 0) {
                                        if (this.gamedatas.gamestate.reflexion.total[this.player_id] == (this.currentPlayerReflexionStartAt - 10)) {
                                            playSound("time_alarm");
                                            this.notifqueue.addToLog(__("lang_mainsite", "Warning: Your clock is negative: you should play now!"));
                                        }
                                    }
                                }
                            }
                            var _d78 = document.title.substr(0, 2);
                            var _d79 = "◢ ";
                            var _d7a = {
                                "◢ ": "◣ ",
                                "◣ ": "◤ ",
                                "◤ ": "◥ ",
                                "◥ ": "◢ "
                            };
                            var next = "new";
                            if (_d7a[_d78]) {
                                next = _d7a[_d78];
                            }
                            if (next == "new") {
                                document.title = _d79 + document.title;
                            } else {
                                document.title = next + document.title.substr(2);
                            }
                        }
                        if (_d74) {
                            dojo.addClass("ebd-body", "night_mode");
                            this.addTooltipToClass("this_is_night", dojo.string.substitute(__("lang_mainsite", "Playing hours for this game are ${hours}: consequently, the timer is not decreasing at now."), {
                                hours: $("menu_option_value_206").innerHTML
                            }), "");
                        } else {
                            dojo.removeClass("ebd-body", "night_mode");
                        }
                        this.updateFirePlayerLink();
                        this.lastWouldLikeThinkBlinking++;
                        var _d7b = 30;
                        if (this.lastWouldLikeThinkBlinking > _d7b && _d72.length > 0) {
                            dojo.fx.chain([dojo.fadeOut({
                                node: "wouldlikethink_button",
                                duration: 200
                            }), dojo.fadeIn({
                                node: "wouldlikethink_button",
                                duration: 200
                            })]).play();
                            if (!this.isCurrentPlayerActive()) {
                                if (_d73) {
                                    dojo.style($("ai_not_playing"), "display", "inline");
                                } else {
                                    dojo.style($("not_playing_help"), "display", "inline");
                                }
                            }
                        }
                        dojo.query(".blinking").forEach(function(node) {
                            dojo.fx.chain([dojo.fadeOut({
                                node: node,
                                duration: 200
                            }), dojo.fadeIn({
                                node: node,
                                duration: 200
                            })]).play();
                        });
                    },
                    shouldDisplayClockAlert: function(_d7c) {
                        if (this.gamedatas.gamestate.reflexion.total[_d7c] <= 0) {
                            return true;
                        }
                        return false;
                    },
                    updateFirePlayerLink: function() {
                        dojo.style("skip_player_turn", "display", "none");
                        var _d7d = this.getActivePlayers();
                        for (var i in _d7d) {
                            var _d7e = _d7d[i];
                            if (toint(_d7e) != toint(this.player_id)) {
                                if (this.gamedatas.gamestate.reflexion.total[_d7e] < 0) {
                                    if (!this.isSpectator) {
                                        dojo.style("skip_player_turn", "display", "inline");
                                    }
                                }
                            }
                        }
                    },
                    onWouldLikeToThink: function(evt) {
                        evt.preventDefault();
                        this.ajaxcall("/table/table/wouldlikethink.html", {}, this, function(obj, _d7f) {});
                    },
                    sendWakeupInTenSeconds: function() {
                        this.cancelPlannedWakeUp();
                        this.wakeup_timeout = setTimeout(dojo.hitch(this, "sendWakeUpSignal"), 10000);
                    },
                    sendWakeUpSignal: function() {
                        this.cancelPlannedWakeUp();
                        this.ajaxcall("/" + this.game_name + "/" + this.game_name + "/wakeup.html", {
                            myturnack: true
                        }, this, function(obj, _d80) {});
                    },
                    cancelPlannedWakeUp: function() {
                        if (this.wakeup_timeout) {
                            clearTimeout(this.wakeup_timeout);
                            this.wakeup_timeout = null;
                        }
                    },
                    checkWakupUpInFourteenSeconds: function() {
                        this.cancelPlannedWakeUpCheck();
                        var _d81 = 14000 + (6000 * Math.random());
                        this.wakeupcheck_timeout = setTimeout(dojo.hitch(this, "checkWakups"), _d81);
                    },
                    checkWakups: function() {
                        this.cancelPlannedWakeUpCheck();
                        var _d82 = false;
                        var _d83 = this.getActivePlayers();
                        for (var i in _d83) {
                            var _d84 = _d83[i];
                            if (this.gamedatas.players[_d84].ack == "wait") {
                                this.gamedatas.players[_d84].ack = "unavail";
                                $("avatar_active_" + _d84).src = getStaticAssetUrl("img/layout/active_player_nonack.gif");
                                _d82 = true;
                            }
                        }
                        if (_d82) {
                            if (this.isSpectator) {} else {
                                this.ajaxcall("/" + this.game_name + "/" + this.game_name + "/wakeupPlayers.html", {}, this, function(obj, _d85) {});
                            }
                        }
                    },
                    cancelPlannedWakeUpCheck: function() {
                        if (this.wakeupcheck_timeout) {
                            clearTimeout(this.wakeupcheck_timeout);
                            this.wakeupcheck_timeout = null;
                        }
                    },
                    isInterfaceLocked: function() {
                        return (this.interface_locked_by_id !== null);
                    },
                    isInterfaceUnlocked: function() {
                        return (this.interface_locked_by_id === null);
                    },
                    lockInterface: function(uid) {
                        if (this.isInterfaceLocked()) {
                            console.error("Try to lock interface while it is already locked !");
                        }
                        dojo.addClass("ebd-body", "lockedInterface");
                        this.interface_locked_by_id = uid;
                    },
                    unlockInterface: function(uid) {
                        if (this.isInterfaceLocked()) {
                            if (this.interface_locked_by_id == uid) {
                                this.interface_locked_by_id = null;
                                dojo.removeClass("ebd-body", "lockedInterface");
                            }
                        }
                    },
                    onLockInterface: function(lock) {
                        if (lock.status == "outgoing") {
                            this.lockInterface(lock.uuid);
                            this.interface_locking_type = null;
                            if (lock.type) {
                                this.interface_locking_type = lock.type;
                            }
                            dojo.style("pagemaintitle_wrap", "display", "none");
                            dojo.style("gameaction_status_wrap", "display", "block");
                            $("gameaction_status").innerHTML = __("lang_mainsite", "Sending move to server ...");
                            this.interface_status = "outgoing";
                        } else {
                            if (lock.uuid == this.interface_locked_by_id) {
                                if (lock.status == "recorded") {
                                    if (this.interface_status == "outgoing") {
                                        $("gameaction_status").innerHTML = __("lang_mainsite", "Move recorded, waiting for update ...");
                                        this.interface_status = "recorded";
                                    }
                                }
                                if (this.interface_locking_type === null || (this.interface_locking_type == "table" && lock.bIsTableMsg) || (this.interface_locking_type == "player" && !lock.bIsTableMsg)) {
                                    if (lock.status == "queued") {
                                        if (this.interface_status == "outgoing" || this.interface_status == "recorded") {
                                            $("gameaction_status").innerHTML = __("lang_mainsite", "Updating game situation ...");
                                            this.interface_status = "queued";
                                        }
                                    } else {
                                        if (lock.status == "dispatched") {
                                            if (this.interface_status == "queued") {
                                                this.interface_status = "dispatched";
                                            }
                                        } else {
                                            if (lock.status == "updated") {
                                                this.unlockInterface(lock.uuid);
                                                this.interface_status = "updated";
                                                dojo.style("pagemaintitle_wrap", "display", "block");
                                                dojo.style("gameaction_status_wrap", "display", "none");
                                                dojo.style("synchronous_notif_icon", "display", "none");
                                            }
                                        }
                                    }
                                }
                            } else {
                                if (lock.status == "queued") {
                                    if (this.isInterfaceUnlocked()) {
                                        this.lockInterface(lock.uuid);
                                        this.interface_locking_type = null;
                                        if (lock.type) {
                                            this.interface_locking_type = lock.type;
                                        }
                                        $("gameaction_status").innerHTML = __("lang_mainsite", "Updating game situation ...");
                                        this.interface_status = "queued";
                                        dojo.style("pagemaintitle_wrap", "display", "none");
                                        dojo.style("gameaction_status_wrap", "display", "block");
                                    }
                                }
                            }
                        }
                    },
                    checkLock: function(_d86) {
                        if (this.isInterfaceLocked()) {
                            if (typeof _d86 == "undefined") {
                                this.showMessage(__("lang_mainsite", "Please wait, an action is already in progress"), "error");
                            }
                            return false;
                        }
                        return true;
                    },
                    checkAction: function(_d87, _d88) {
                        if (!this.checkLock(_d88)) {
                            if (typeof _d88 == "undefined" && this.developermode) {
                                this.showMessage("(Generated by: checkAction/" + _d87 + ")", "error");
                            }
                            return false;
                        }
                        if (!this.isCurrentPlayerActive()) {
                            if (typeof _d88 == "undefined") {
                                this.showMessage(__("lang_mainsite", "This is not your turn"), "error");
                            }
                            return false;
                        }
                        if (this.checkPossibleActions(_d87)) {
                            return true;
                        }
                        if (typeof _d88 == "undefined") {
                            this.showMoveUnauthorized();
                        }
                        return false;
                    },
                    checkPossibleActions: function(_d89) {
                        for (var i in this.gamedatas.gamestate.possibleactions) {
                            if (this.gamedatas.gamestate.possibleactions[i] == _d89) {
                                return true;
                            }
                        }
                        return false;
                    },
                    showMoveUnauthorized: function() {
                        this.showMessage(__("lang_mainsite", "This move is not authorized now"), "error");
                    },
                    disablePlayerPanel: function(_d8a) {
                        dojo.addClass("overall_player_board_" + _d8a, "roundedboxdisabled");
                    },
                    enablePlayerPanel: function(_d8b) {
                        dojo.removeClass("overall_player_board_" + _d8b, "roundedboxdisabled");
                    },
                    enableAllPlayerPanels: function() {
                        dojo.query(".roundedboxdisabled").removeClass("roundedboxdisabled");
                    },
                    updatePlayerOrdering: function() {
                        var _d8c = 0;
                        for (var i in this.gamedatas.playerorder) {
                            var _d8d = this.gamedatas.playerorder[i];
                            dojo.place("overall_player_board_" + _d8d, "player_boards", _d8c);
                            _d8c++;
                        }
                    },
                    onAiNotPlaying: function(evt) {
                        dojo.stopEvent(evt);
                        this.lastWouldLikeThinkBlinking = 0;
                        dojo.style($("ai_not_playing"), "display", "none");
                        this.ajaxcall("/" + this.game_name + "/" + this.game_name + "/aiNotPlaying.html", {
                            table: this.table_id
                        }, this, function(_d8e) {});
                    },
                    onNotPlayingHelp: function(evt) {
                        evt.preventDefault();
                        var _d8f = new ebg.popindialog();
                        _d8f.create("fireHelpContent");
                        _d8f.setTitle(__("lang_mainsite", "Some player is not playing ?"));
                        var html = "<div id='fireHelpContent'>";
                        html += __("lang_mainsite", "Some player is not playing ? Here is what you can do:");
                        html += "<ul>";
                        html += "<li>" + __("lang_mainsite", "At first, remember that each player has the absolute right to think as long as he has some time left.") + "</li>";
                        html += "<li>" + __("lang_mainsite", "Try to contact him with the chatroom.") + "</li>";
                        html += "<li>" + __("lang_mainsite", "Maybe you are disconnected from the server and the other player is waiting for you: try to refresh the page (hit F5) to check.") + "</li>";
                        html += "<li>" + __("lang_mainsite", "If the other player is definitely not there, you just have to wait until his time to think is over:") + "</li>";
                        html += "<li>" + __("lang_mainsite", "As soon as your opponent is out of time, you can make him skip his turn.") + "</li>";
                        html += "<li>" + __("lang_mainsite", "DO NOT quit the game by yourself: you will get a leave penalty and not him.") + "</li>";
                        html += "</ul></div>";
                        _d8f.setContent(html);
                        _d8f.show();
                    },
                    onSkipPlayersOutOfTime: function(evt) {
                        evt.preventDefault();
                        this.ajaxcall("/" + this.game_name + "/" + this.game_name + "/skipPlayersOutOfTime.html", {}, this, function(_d90) {});
                    },
                    onWouldFirePlayer: function(evt) {
                        evt.preventDefault();
                        this.fireDlg = new ebg.popindialog();
                        this.fireDlg.create("fireDlgContent");
                        this.fireDlg.setTitle(__("lang_mainsite", "Skip turn of players out of time"));
                        this.fireDlg.telParentPage = this;
                        var html = "<div id=\"fireDlgContent\">";
                        html += "<p>" + __("lang_mainsite", "Skipping a player`s turn is an important decision. This player will get a `leave` penalty and will lose ELO if he/she doesn't comme back.") + "</p>";
                        html += "<p>" + dojo.string.substitute(__("lang_mainsite", "You (and eventually all other opponents) will be considered as winner(s) of this game, and you'll get ${percent}% of ELO points you would have get for a normal victory."), {
                            percent: $("pr_gameprogression").innerHTML
                        }) + " </p>";
                        if (this.bRealtime) {
                            html += "<p>" + dojo.string.substitute(__("lang_mainsite", "A good option is to ${transform_to_tb}, so everyone can finish this game."), {
                                transform_to_tb: "<a href=\"#\" id=\"transform_to_tb_from_dialog\">" + __("lang_mainsite", "switch this game to Turn-based mode") + "</a>"
                            }) + " </p>";
                        }
                        html += "<p>" + dojo.string.substitute(__("lang_mainsite", "Note that you may alternatively propose to ${abandon_this_game} (no penalty and no points for anyone)."), {
                            abandon_this_game: "<a href=\"#\" id=\"abandon_from_dialog\">" + __("lang_mainsite", "abandon this game") + "</a>"
                        }) + " </p>";
                        html += "<p>" + __("lang_mainsite", "Note that the best option for everyone is to finish the game normally. Are you really sure you want to neutralize this game and skip this player's turn?") + " </p>";
                        html += "<br/>";
                        html += "<p><a class='bgabutton bgabutton_gray bgabutton_big' id='fireplayer_cancel'>" + __("lang_mainsite", "Continue waiting") + "</a> &nbsp; ";
                        html += "<a class='bgabutton bgabutton_blue bgabutton_big' id='fireplayer_confirm'>" + __("lang_mainsite", "Confirm") + "</a></p>";
                        html += "</div>";
                        this.fireDlg.setContent(html);
                        this.fireDlg.show();
                        this.fireDlgStatus = "confirm";
                        dojo.connect($("fireplayer_cancel"), "onclick", dojo.hitch(this.fireDlg, function() {
                            this.destroy();
                        }));
                        dojo.connect($("abandon_from_dialog"), "onclick", dojo.hitch(this, function() {
                            this.fireDlg.destroy();
                            this.ajaxcall("/table/table/decide.html", {
                                type: "abandon",
                                decision: 1,
                                "table": this.table_id
                            }, this, function(obj, _d91) {});
                        }));
                        if ($("transform_to_tb_from_dialog")) {
                            dojo.connect($("transform_to_tb_from_dialog"), "onclick", dojo.hitch(this, function() {
                                this.fireDlg.destroy();
                                this.ajaxcall("/table/table/decide.html", {
                                    type: "switch_tb",
                                    decision: 1,
                                    "table": this.table_id
                                }, this, function(obj, _d92) {});
                            }));
                        }
                        if ($("fireplayer_confirm")) {
                            dojo.connect($("fireplayer_confirm"), "onclick", dojo.hitch(this.fireDlg, function() {
                                var _d93 = false;
                                if (this.telParentPage.bRealtime) {
                                    if (this.telParentPage.fireDlgStatus == "confirm") {
                                        _d93 = true;
                                    } else {
                                        if (this.telParentPage.fireDlgStatus == "expel") {
                                            _d93 = false;
                                        } else {
                                            return;
                                        }
                                    }
                                }
                                this.telParentPage.ajaxcall("/" + this.telParentPage.game_name + "/" + this.telParentPage.game_name + "/skipPlayersOutOfTime.html", {
                                    warn: _d93
                                }, this, dojo.hitch(this, function(obj, _d94) {
                                    if (_d93) {
                                        this.telParentPage.list_of_players_to_expel = obj.data.names;
                                        this.telParentPage.onDecreaseExpelTime(20);
                                    } else {
                                        this.destroy();
                                    }
                                }));
                            }));
                        }
                    },
                    onDecreaseExpelTime: function(_d95) {
                        var _d96 = "Players";
                        if (typeof this.list_of_players_to_expel != "undefined") {
                            _d96 = this.list_of_players_to_expel.join(", ");
                        }
                        if ($("fireplayer_confirm")) {
                            $("fireplayer_confirm").innerHTML = dojo.string.substitute(__("lang_mainsite", "${players} will be expelled in ${delay} seconds"), {
                                players: _d96,
                                delay: _d95
                            });
                            this.fireDlgStatus = "timer";
                            if (_d95 == 0) {
                                $("fireplayer_confirm").innerHTML = dojo.string.substitute(__("lang_mainsite", "Expel ${players} now"), {
                                    players: _d96
                                });
                                this.fireDlgStatus = "expel";
                            } else {
                                setTimeout(dojo.hitch(this, function() {
                                    this.onDecreaseExpelTime(_d95 - 1);
                                }), 1000);
                            }
                        }
                    },
                    onMove: function() {},
                    onNextMove: function(_d97) {
                        if (g_archive_mode) {
                            this.initCommentsForMove(_d97);
                        }
                    },
                    initArchiveIndex: function() {
                        if (typeof g_gamelogs == "object") {
                            if (g_gamelogs.data) {
                                g_gamelogs = g_gamelogs.data.data;
                            }
                        }
                        var _d98 = true;
                        while (_d98) {
                            if (g_gamelogs[this.next_archive_index]) {
                                if (toint(g_gamelogs[this.next_archive_index].packet_id) > toint(this.notifqueue.last_packet_id)) {
                                    _d98 = false;
                                } else {
                                    this.next_archive_index++;
                                }
                            } else {
                                console.error("Can't find the initial logs");
                                this.showMessage("Error during game archive initialization", "error");
                                _d98 = false;
                            }
                        }
                    },
                    sendNextArchive: function() {
                        if (this.next_archive_index == -1) {
                            this.showMessage(__("lang_mainsite", "End of game"), "info");
                            this.archive_playmode = "stop";
                            this.onLastArchivePlayed();
                            return false;
                        } else {
                            if (this.notifqueue.queue.length > 0) {
                                this.notifqueue.dispatchNotifications();
                                return true;
                            }
                            var _d99 = g_gamelogs[this.next_archive_index];
                            if (_d99) {
                                dojo.query(".dijitDialog").forEach(dojo.destroy);
                                dojo.query(".dijitDialogUnderlayWrapper").forEach(dojo.destroy);
                                dojo.query(".standard_popin").forEach(dojo.destroy);
                                dojo.query(".standard_popin_underlay").forEach(dojo.destroy);
                                var _d9a = false;
                                if (_d99.channel.substr(0, 6) != "/table") {
                                    if ((_d99.channel == this.private_channel) || (_d99.channel == "/player/p" + this.player_id)) {} else {
                                        this.next_archive_index++;
                                        this.sendNextArchive();
                                        return true;
                                    }
                                    if (_d99.move_id) {
                                        _d9a = true;
                                    }
                                }
                                if (!_d9a && this.archive_playmode != "nextlog") {
                                    _d99.data.push({
                                        args: {},
                                        bIsTableMsg: true,
                                        lock_uuid: "dummy",
                                        log: "",
                                        type: "archivewaitingdelay",
                                        uid: "archivewaitingdelay" + (this.archive_uuid)
                                    });
                                    _d99.data.push({
                                        args: {},
                                        bIsTableMsg: true,
                                        lock_uuid: "dummy",
                                        log: "",
                                        type: "end_archivewaitingdelay",
                                        uid: "archivewaitingdelay" + (this.archive_uuid + 1)
                                    });
                                }
                                var _d9b = true;
                                var _d9c = $("move_nbr").innerHTML;
                                this.notifqueue.onNotification(_d99);
                                this.next_archive_index++;
                                this.archive_uuid += 2;
                                if (_d99.move_id) {
                                    if ($("replaylogs_progression_" + _d99.move_id)) {
                                        this.slideToObjectPos("archivecursor", "replaylogs_progression_" + _d99.move_id, -30, -23).play();
                                    }
                                    if ($("replaylogs_move_" + _d99.move_id)) {
                                        dojo.addClass("replaylogs_move_" + _d99.move_id, "viewed");
                                    }
                                }
                                if (_d9a) {
                                    this.sendNextArchive();
                                }
                                return true;
                            } else {
                                this.next_archive_index = -1;
                                this.showMessage(__("lang_mainsite", "End of game"), "info");
                                this.archive_playmode = "stop";
                                this.onLastArchivePlayed();
                                return false;
                            }
                        }
                    },
                    onArchiveNext: function(evt) {
                        evt.preventDefault();
                        this.notifqueue.bStopAfterOneNotif = false;
                        this.clearArchiveCommentTooltip();
                        if ($("move_nbr")) {
                            if (toint($("move_nbr").innerHTML) > 0) {
                                this.archive_gotomove = toint($("move_nbr").innerHTML) + 1;
                                this.archive_playmode = "goto";
                                this.sendNextArchive();
                                return;
                            }
                        }
                        this.archive_playmode = "stop";
                        this.sendNextArchive();
                        return;
                    },
                    onArchiveNextLog: function(evt) {
                        evt.preventDefault();
                        this.doArchiveNextLog();
                    },
                    doArchiveNextLog: function() {
                        if (this.notifqueue.waiting_from_notifend !== null) {
                            this.showMessage(_("A notification is still in progress"), "error");
                            return;
                        }
                        this.archive_playmode = "nextlog";
                        this.notifqueue.bStopAfterOneNotif = true;
                        this.notifqueue.log_notification_name = true;
                        this.clearArchiveCommentTooltip();
                        if (this.notifqueue.dispatchNotifications()) {} else {
                            this.sendNextArchive();
                        }
                        delete this.notifqueue.log_notification_name;
                        return;
                    },
                    onArchiveNextTurn: function(evt) {
                        evt.preventDefault();
                        this.notifqueue.bStopAfterOneNotif = false;
                        this.clearArchiveCommentTooltip();
                        this.archive_playmode = "nextturn";
                        this.archive_previous_player = this.gamedatas.gamestate.active_player;
                        this.sendNextArchive();
                    },
                    onArchiveHistory: function(evt) {
                        dojo.stopEvent(evt);
                        var _d9d = dojo.position("archivecursor");
                        window.scrollBy({
                            top: _d9d.y - 200
                        });
                    },
                    setModeInstataneous: function() {
                        if (this.instantaneousMode == false) {
                            this.instantaneousMode = true;
                            this.savedSynchronousNotif = dojo.clone(this.notifqueue.synchronous_notifs);
                            dojo.style("leftright_page_wrapper", "visibility", "hidden");
                            dojo.style("loader_mask", "display", "block");
                            dojo.style("loader_mask", "opacity", 1);
                            for (var i in this.notifqueue.synchronous_notifs) {
                                if (this.notifqueue.synchronous_notifs[i] != -1) {
                                    this.notifqueue.synchronous_notifs[i] = 1;
                                }
                            }
                        }
                    },
                    unsetModeInstantaneous: function() {
                        if (this.instantaneousMode) {
                            this.instantaneousMode = false;
                            dojo.style("leftright_page_wrapper", "visibility", "visible");
                            dojo.style("loader_mask", "display", "none");
                            for (var i in this.notifqueue.synchronous_notifs) {
                                if (this.notifqueue.synchronous_notifs[i] != -1) {
                                    this.notifqueue.synchronous_notifs[i] = this.savedSynchronousNotif[i];
                                }
                            }
                        }
                    },
                    onLastArchivePlayed: function() {
                        this.unsetModeInstantaneous();
                    },
                    onArchiveToEnd: function(evt) {
                        evt.preventDefault();
                        this.notifqueue.bStopAfterOneNotif = false;
                        this.setModeInstataneous();
                        this.archive_playmode = "play";
                        this.sendNextArchive();
                    },
                    onArchiveToEndSlow: function(evt) {
                        evt.preventDefault();
                        this.notifqueue.bStopAfterOneNotif = false;
                        this.archive_playmode = "play";
                        this.sendNextArchive();
                    },
                    onArchiveGoTo: function(evt) {
                        evt.preventDefault();
                        var html = "<div id=\"archive_goto_menu\">";
                        if (typeof this.bEnabledArchiveAdvancedFeatures != "undefined") {
                            html += "<p><a href='#' id='go_to_game_end'>" + _("Go to end of game (fast)") + "</a></p><hr/>";
                        }
                        html += "<p><a href='#' id='go_to_game_end_slow'>" + _("Go to end of game") + "</a></p><hr/>";
                        html += "<p><a href='#' id='go_to_new_turn'>" + _("Go to next player's turn") + "</a></p><hr/>";
                        if (typeof this.bEnabledArchiveAdvancedFeatures != "undefined") {
                            html += "<p><a href='#' id='go_to_specific_move'>" + _("Go to specific move (fast)") + "</a></p><hr/>";
                        }
                        html += "<p><a href='#' id='go_to_specific_move_slow'>" + _("Go to specific move") + "</a></p>";
                        html += "</div>";
                        if (typeof this.archiveGotoMenu == "undefined") {
                            this.archiveGotoMenu = new dijit.TooltipDialog({
                                id: "goto_menu",
                                content: html,
                                closable: true
                            });
                            dijit.popup.open({
                                popup: this.archiveGotoMenu,
                                around: $("archive_end_game"),
                                orient: ["below", "below-alt", "above", "above-alt"]
                            });
                            dojo.query(".dijitTooltipDialogPopup").style("zIndex", 1055);
                            dojo.query("#archive_goto_menu a").connect("onclick", this, function(evt) {
                                dijit.popup.close(this.archiveGotoMenu);
                                this.archiveGotoMenu.destroy();
                                delete this.archiveGotoMenu;
                            });
                            if ($("go_to_game_end")) {
                                dojo.connect($("go_to_game_end"), "onclick", this, "onArchiveToEnd");
                            }
                            dojo.connect($("go_to_game_end_slow"), "onclick", this, "onArchiveToEndSlow");
                            dojo.connect($("go_to_new_turn"), "onclick", this, "onArchiveNextTurn");
                            if ($("go_to_specific_move")) {
                                dojo.connect($("go_to_specific_move"), "onclick", this, dojo.hitch(this, function(evt) {
                                    this.askForValueDialog(_("Enter the move you want to go to"), dojo.hitch(this, function(_d9e) {
                                        if (_d9e != "") {
                                            this.archiveGoToMove(toint(_d9e), true);
                                        }
                                    }));
                                }));
                            }
                            dojo.connect($("go_to_specific_move_slow"), "onclick", this, dojo.hitch(this, function(evt) {
                                this.askForValueDialog(_("Enter the move you want to go to"), dojo.hitch(this, function(_d9f) {
                                    if (_d9f != "") {
                                        this.archiveGoToMove(_d9f, false);
                                    }
                                }));
                            }));
                        } else {
                            dijit.popup.close(this.archiveGotoMenu);
                            this.archiveGotoMenu.destroy();
                            delete this.archiveGotoMenu;
                        }
                    },
                    onEndDisplayLastArchive: function() {
                        switch (this.archive_playmode) {
                        case "stop":
                            return;
                        case "nextturn":
                            if (this.gamedatas.gamestate.active_player != this.archive_previous_player && this.gamedatas.gamestate.type == "activeplayer") {
                                this.archive_playmode = "stop";
                            } else {
                                this.sendNextArchive();
                            }
                            break;
                        case "play":
                            this.sendNextArchive();
                            break;
                        case "goto":
                            if (this.next_archive_index != -1) {
                                var _da0 = g_gamelogs[this.next_archive_index];
                                if (typeof _da0 != "undefined") {
                                    if (_da0.move_id) {
                                        if (toint(_da0.move_id) <= this.archive_gotomove) {
                                            this.sendNextArchive();
                                        }
                                        if (toint(_da0.move_id) >= this.archive_gotomove) {
                                            this.unsetModeInstantaneous();
                                        }
                                    } else {
                                        this.sendNextArchive();
                                    }
                                }
                            }
                            break;
                        case "nextcomment":
                            if ($("newArchiveComment")) {} else {
                                var _da1 = dojo.query(".archiveComment").length;
                                if (this.getCommentsViewedFromStart() >= _da1) {
                                    this.showMessage(__("lang_mainsite", "No more comments"), "info");
                                } else {
                                    this.sendNextArchive();
                                }
                            }
                            break;
                        }
                    },
                    onArchiveGoToMoveDisplay: function() {
                        dojo.style("archive_go_to_move_control", "display", "inline-block");
                        dojo.style("archive_go_to_move", "display", "none");
                    },
                    archiveGoToMove: function(_da2, _da3) {
                        if (toint(_da2) <= toint($("move_nbr").innerHTML)) {
                            this.insertParamIntoCurrentURL("goto", toint(_da2));
                        } else {
                            this.notifqueue.bStopAfterOneNotif = false;
                            this.archive_gotomove = toint(_da2);
                            this.archive_playmode = "goto";
                            if (_da3) {
                                this.setModeInstataneous();
                            }
                            this.sendNextArchive();
                        }
                    },
                    showArchiveComment: function(mode, _da4) {
                        if (this.archiveCommentNew !== null && mode != "do_not_show_only_infos") {
                            this.clearArchiveCommentTooltip();
                        }
                        if (mode == "saved") {
                            _da4 = 0;
                        }
                        if (mode == "edit") {
                            dojo.addClass("ebd-body", "archivecommentmode_edit");
                        } else {
                            dojo.removeClass("ebd-body", "archivecommentmode_edit");
                        }
                        var _da5 = false;
                        if (typeof _da4 != "undefined") {
                            var _da6 = $("move_nbr").innerHTML;
                            var _da7 = dojo.query(".archiveComment_move" + _da6);
                            if (mode == "saved") {
                                var _da7 = dojo.query(".archiveComment");
                            } else {
                                if (mode == "edit" || mode == "displayid") {
                                    var _da7 = dojo.query("#archiveComment_" + _da4);
                                    _da4 = 0;
                                }
                            }
                            if (_da7[_da4]) {
                                var _da8 = _da7[_da4].id;
                                var _da9 = dojo.query("#" + _da8 + " .archiveComment_author");
                                if (_da9[0]) {
                                    var _daa = dojo.query("#" + _da8 + " .archiveComment_anchor");
                                    if (_daa[0]) {
                                        var text = dojo.query("#" + _da8 + " .archiveComment_text");
                                        if (text[0]) {
                                            var _dab = dojo.query("#" + _da8 + " .archiveComment_uid");
                                            if (_dab[0]) {
                                                var _dac = dojo.query("#" + _da8 + " .archiveComment_no");
                                                if (_dac[0]) {
                                                    if (mode == "do_not_show_only_infos") {
                                                        return {
                                                            notif_uid: _dab[0].innerHTML
                                                        };
                                                    }
                                                    _da5 = true;
                                                    this.archiveCommentLastDisplayedNo = _dac[0].innerHTML;
                                                    this.archiveCommentLastDisplayedId = _da8.substr(15);
                                                }
                                            } else {
                                                return false;
                                            }
                                        }
                                    } else {
                                        return false;
                                    }
                                } else {
                                    return false;
                                }
                            } else {
                                return false;
                            }
                            var _dad = 0;
                            var _dae = dojo.query("#" + _da8 + " .archiveComment_continuemode");
                            if (_dae[0]) {
                                _dad = _dae[0].innerHTML;
                            }
                            var _daf = "";
                            var _db0 = dojo.query("#" + _da8 + " .archiveComment_pointers");
                            if (_db0[0]) {
                                _daf = _db0[0].innerHTML;
                            }
                            _daf = _daf.split(" ");
                            var _db1 = null;
                            for (var i in _daf) {
                                if (_db1 === null) {
                                    _db1 = _daf[i];
                                } else {
                                    var _db2 = _daf[i];
                                    if ($(_db1)) {
                                        if (_db2 == 1 || _db2 == 2 || _db2 == 3) {
                                            dojo.addClass(_db1, "archiveCommentPointed" + _db2);
                                        } else {
                                            var _db3 = _db2.split("/");
                                            if (_db3.length == 3) {
                                                var _db4 = atob(_db3[0]);
                                                var _db5 = _db3[1];
                                                var _db6 = _db3[2];
                                                $(_db1).setAttribute("datasrc", _db4);
                                                this.archiveCommentAttachImageToElement($(_db1), _db5, _db6);
                                            }
                                        }
                                    }
                                    _db1 = null;
                                }
                            }
                            dojo.addClass(_da8, "commentviewed");
                        }
                        var _db7 = _da5 ? text[0].innerHTML : "";
                        _db7 = _db7.replace(new RegExp("ARCHIVECOMMENT_","g"), "");
                        var _db8 = _da5 ? _da9[0].innerHTML : $("archiveViewerName").innerHTML;
                        var _db9 = false;
                        if (_da5) {
                            _db9 = ($("archiveViewerName").innerHTML == _da9[0].innerHTML);
                        }
                        var _dba = dojo.query(".archiveComment").length;
                        var _dbb = this.getCommentsViewedFromStart();
                        var _dbc = _da5 ? this.archiveCommentLastDisplayedId : 0;
                        var _dbd = __("lang_mainsite", "Next comment");
                        if (g_tutorialwritten.mode == "view") {
                            _dbd = __("lang_mainsite", "Continue");
                            if (_da8 == "archiveComment_intro") {
                                _dbd = __("lang_mainsite", "Start");
                            }
                        }
                        var html = "<div id='newArchiveComment' class='newArchiveComment'>                            <div class='archiveAuthor' style='display:none'>" + _db8 + ":</div>                            <div class='archiveComment_before'><p class='archiveComment_before_inner'><i class='fa fa-graduation-cap'></i></p></div>                            <div id='newArchiveCommentMove' class='icon20 icon20_move'></div>                            <textarea id='newArchiveCommentText' maxlength='400'>" + _db7 + "</textarea>                            <div id='newArchiveCommentOptions'>                                <select id='newArchiveCommentContinueMode'>                                    <option value='0'>" + __("lang_mainsite", "Player must click on Continue button to continue.") + "</option>                                    <option value='1'>" + __("lang_mainsite", "Player must DO the next game action with the game interface to continue.") + "</option>                                </select><br/>                                <select id='newArchiveCommentDisplayMode'>                                    <option value='0'>" + __("lang_mainsite", "Display this comment with an arrow to the linked item.") + "</option>                                    <option value='1'>" + __("lang_mainsite", "Display this comment centered over the linked item.") + "</option>                                </select>                            </div>                            <div id='newArchiveCommentContinueModeWarning'><i class='fa fa-warning'></i> " + dojo.string.substitute(__("lang_mainsite", "Do not forget to explain to the player which action to do in the text above. Note that the very next action in the replay MUST have been played by ${player}."), {
                            player: "<b>" + $("archiveViewerName").innerHTML + "</b>"
                        }) + "</div>                            <a id='newArchiveCommentAdditionalImage' href='#'>" + __("lang_mainsite", "Add image on interface") + "</a>                            <a id='newArchiveCommentShowHelp' href='#'>" + __("lang_mainsite", "Show tips") + "</a>                            <div id='newArchiveCommentHelp'>" + "<p>" + __("lang_mainsite", "Note : you can click on any game element to highlight it when this step is displayed.") + "</p>" + "<p>" + __("lang_mainsite", "Available markup") + " :<br/>" + "&nbsp;*text in bold*<br/>&nbsp;[red]text in red[/red]<br/>&nbsp;[green]text in green[/green]<br/>&nbsp;[blue]text in blue[/blue]<br/>" + "&nbsp;!!! => <i class='fa fa-exclamation-triangle'></i><br/>" + "&nbsp;[tip] => <i class='fa fa-lightbulb-o'></i><br/>" + "&nbsp;[img]URL[/img] => Display an image<br/>" + "</p>" + "</div>                            <div id='newArchiveCommentTextDisplay'>" + this.applyArchiveCommentMarkup(this.nl2br(_db7, false)) + "</div>                            <div id='newArchiveCommentMoveHelp'>" + __("lang_mainsite", "Place your mouse cursor on a game element to attach this comment") + ":</div>                            <div id='newArchiveCommentControls' class='newArchiveCommentControls'>                                <a class='bgabutton bgabutton_gray' href='#' id='newArchiveCommentCancel'><span>" + __("lang_mainsite", "Cancel") + "</span></a>                                <a class='bgabutton bgabutton_blue' href='#' id='newArchiveCommentSave'><span>" + __("lang_mainsite", "Save") + "</span></a>                                <a class='bgabutton bgabutton_blue' href='#' id='newArchiveCommentSaveModify_" + _dbc + "'><span>" + __("lang_mainsite", "Save") + "</span></a>                            </div>                            <div id='newArchiveCommentDisplayControls'>" + "<a href='#' id='newArchiveCommentDelete' class='bgabutton bgabutton_gray'>" + __("lang_mainsite", "Delete") + "</a> " + "<a href='#' id='newArchiveCommentModify' class='bgabutton bgabutton_gray'>" + __("lang_mainsite", "Modify") + "</a>&nbsp;&nbsp;" + "<span class='newArchiveCommentNo'>" + _dbb + "/" + _dba + "&nbsp;&nbsp; </span>" + "<a href='#' id='newArchiveCommentNext' class='bgabutton bgabutton_blue'>" + _dbd + "</a>" + "</div>" + "<a href='#' id='newArchiveCommentMinimize' class='standard_popin_closeicon'><i class='fa fa-minus-square-o fa-lg'></i></a>                        </div>";
                        this.archiveCommentNew = new dijit.TooltipDialog({
                            id: "newArchiveComment",
                            content: html,
                            closable: true
                        });
                        var _dbe = _da5 ? _daa[0].innerHTML : "page-title";
                        var _dbf = false;
                        if (!$(_dbe) || _dbe == "page-title" || _dbe == "archivecontrol_editmode_centercomment") {
                            _dbe = "archivecontrol_editmode_centercomment";
                            _dbf = true;
                        }
                        if (!_dbf) {
                            dijit.popup.open({
                                popup: this.archiveCommentNew,
                                around: $(_dbe),
                                orient: this.archiveCommentPosition
                            });
                            this.archiveCommentNewAnchor = "page-title";
                            var _dc0 = dojo.position(_dbe);
                            this.archiveCommentMobile = {
                                id: _dbc,
                                anchor: _dbe,
                                bCenter: _dbf,
                                lastX: _dc0.x,
                                lastY: _dc0.y
                            };
                            dojo.query(".dijitTooltipConnector").style("display", "block");
                        } else {
                            var _dc1 = dojo.position("game_play_area");
                            var _dc2 = _dc1.w / 2 - (430 / 2);
                            dijit.popup.open({
                                popup: this.archiveCommentNew,
                                x: 50,
                                y: 180,
                                orient: this.archiveCommentPosition
                            });
                            this.archiveCommentNewAnchor = "archivecontrol_editmode_centercomment";
                            this.archiveCommentMobile = {
                                id: _dbc,
                                anchor: _dbe,
                                bCenter: _dbf,
                                lastX: _dc2,
                                lastY: 200
                            };
                            dojo.query(".dijitTooltipConnector").style("display", "none");
                        }
                        dojo.query(".dijitTooltipDialogPopup").addClass("scale-in-center");
                        dojo.connect($("newArchiveCommentContinueMode"), "onchange", this, "onArchiveCommentContinueModeChange");
                        dojo.connect($("newArchiveCommentMinimize"), "onclick", this, "onArchiveCommentMinimize");
                        if (_dad == 1) {
                            $("newArchiveCommentContinueMode").value = 1;
                            dojo.place("<span class=\"smalltext\" id=\"do_action_to_continue\">" + __("lang_mainsite", "Do the action to continue") + "</span>", "newArchiveCommentNext", "after");
                            dojo.destroy("newArchiveCommentNext");
                        }
                        if (!_dbf) {
                            this.archiveCommentMobile.timeout = setTimeout(dojo.hitch(this, "onRepositionPopop"), 10);
                        }
                        if (mode == "edit") {
                            this.addTooltip("newArchiveCommentMove", "", __("lang_mainsite", "Attach this comment somewhere else"));
                            dojo.style("newArchiveCommentMinimize", "display", "none");
                            dojo.style("newArchiveCommentDisplayControls", "display", "none");
                            dojo.style("newArchiveCommentTextDisplay", "display", "none");
                            dojo.style("newArchiveCommentShowHelp", "display", "block");
                            dojo.style("newArchiveCommentAdditionalImage", "display", "block");
                            dojo.style("newArchiveCommentHelp", "display", "none");
                            dojo.addClass("newArchiveComment", "newArchiveCommentEdit");
                            dojo.connect($("newArchiveCommentCancel"), "onclick", this, "onNewArchiveCommentCancel");
                            dojo.connect($("newArchiveCommentMove"), "onmousedown", this, "onNewArchiveCommentStartDrag");
                            dojo.connect($("newArchiveCommentShowHelp"), "onclick", this, dojo.hitch(this, function(evt) {
                                dojo.stopEvent(evt);
                                dojo.style("newArchiveCommentShowHelp", "display", "none");
                                dojo.style("newArchiveCommentHelp", "display", "block");
                            }));
                            dojo.connect($("newArchiveCommentAdditionalImage"), "onclick", this, dojo.hitch(this, function(evt) {
                                dojo.stopEvent(evt);
                                this.askForValueDialog(_("Please enter the URL of the image you want to add"), dojo.hitch(this, function(_dc3) {
                                    if (this.validURL(_dc3)) {
                                        this.archiveCommentImageToAnchor = _dc3;
                                        this.showMessage(_("Please click now on the game interface element where you want to anchor this image."), "info");
                                    } else {
                                        this.showMessage(_("Sorry this is not a valid image URL."), "error");
                                    }
                                }));
                                dojo.style("popin_askforvalue_dialog", "zIndex", 1001);
                            }));
                            $("newArchiveCommentText").focus();
                            if (_da5) {
                                dojo.style("newArchiveCommentSave", "display", "none");
                                this.archiveCommentNewAnchor = _daa[0].innerHTML;
                                dojo.connect($("newArchiveCommentSaveModify_" + _dbc), "onclick", this, "onNewArchiveCommentSaveModify");
                            } else {
                                dojo.style("newArchiveCommentSaveModify_" + _dbc, "display", "none");
                                dojo.connect($("newArchiveCommentSave"), "onclick", this, "onNewArchiveCommentSave");
                            }
                            this.onArchiveCommentContinueModeChange();
                            this.archiveCommentPointElementMouseEnterEvt = dojo.connect(window, "mouseover", this, "onArchiveCommentPointElementOnMouseEnter");
                        } else {
                            if (mode == "display" || mode == "saved" || mode == "displayid") {
                                dojo.addClass("newArchiveComment", "newArchiveCommentDisplay");
                                dojo.style("newArchiveCommentControls", "display", "none");
                                dojo.style("newArchiveCommentMove", "display", "none");
                                dojo.style("newArchiveCommentMinimize", "display", "block");
                                dojo.style("newArchiveCommentText", "display", "none");
                                dojo.style("newArchiveCommentContinueMode", "display", "none");
                                dojo.style("newArchiveCommentHelp", "display", "none");
                                dojo.style("newArchiveCommentShowHelp", "display", "none");
                                dojo.style("newArchiveCommentAdditionalImage", "display", "none");
                                if (!_db9 || g_tutorialwritten.mode == "view") {
                                    dojo.style("newArchiveCommentDelete", "display", "none");
                                    dojo.style("newArchiveCommentModify", "display", "none");
                                } else {
                                    dojo.connect($("newArchiveCommentDelete"), "onclick", this, "onNewArchiveCommentDelete");
                                    dojo.connect($("newArchiveCommentModify"), "onclick", this, "onNewArchiveCommentModify");
                                }
                                if ($("newArchiveCommentNext")) {
                                    dojo.connect($("newArchiveCommentNext"), "onclick", this, "onNewArchiveCommentNext");
                                }
                            }
                        }
                        if (_dbc == "conclusion") {
                            this.tutoratingDone = false;
                            dojo.query(".tuto_rating").style("cursor", "pointer");
                            dojo.query(".tuto_rating").connect("onmouseenter", this, "onTutoRatingEnter");
                            dojo.query(".tuto_rating").connect("onmouseleave", this, "onTutoRatingLeave");
                            dojo.query(".tuto_rating").connect("onclick", this, "onTutoRatingClick");
                            dojo.style("newArchiveCommentMinimize", "display", "none");
                            dojo.style("newArchiveComment", "textAlign", "center");
                            dojo.destroy("newArchiveCommentNext");
                            dojo.style("newArchiveCommentDisplayControls", "display", "none");
                            if ($("end_tutorial_play_now")) {
                                dojo.connect($("newArchiveCommentTextDisplay"), "onclick", this, function() {
                                    window.location.href = $("end_tutorial_play_now").href;
                                });
                            }
                            if (dojo.query(".tuto_rating").length > 0) {
                                this.bTutorialRatingStep = true;
                            }
                        }
                        if (g_tutorialwritten.mode == "view") {
                            if ($("newArchiveCommentNext")) {
                                dojo.connect($("newArchiveComment"), "onclick", this, "onNewArchiveCommentNext");
                                dojo.addClass("newArchiveComment", "archiveCommentClickable");
                            }
                        }
                        return true;
                    },
                    getCommentsViewedFromStart: function() {
                        return dojo.query(".archiveComment.commentviewed").length;
                    },
                    onArchiveCommentMinimize: function(evt) {
                        dojo.stopEvent(evt);
                        clearTimeout(this.archiveCommentMobile.timeout);
                        dojo.style("archiveCommentMinimizedIcon", "display", "block");
                        this.placeOnObject("archiveCommentMinimizedIcon", "newArchiveComment");
                        this.slideToObjectPos("archiveCommentMinimizedIcon", "archiveCommentMinimized", 10, 0).play();
                        dijit.popup.close(this.archiveCommentNew);
                    },
                    onArchiveCommentMaximize: function(evt) {
                        dojo.stopEvent(evt);
                        this.showArchiveComment("display", this.archiveCommentNo);
                        dojo.style("archiveCommentMinimizedIcon", "display", "none");
                    },
                    applyArchiveCommentMarkup: function(text) {
                        text = this.addSmileyToText(text);
                        text = this.applyCommentMarkup(text);
                        var _dc4 = new RegExp("\\[img\\]((http:|https:)\\/\\/.*?\\.jpg)\\[\\/img\\]","g");
                        text = text.replace(_dc4, "<img src=\"$1\" style=\"max-width:100%;margin-top:10px;margin-bottom:10px;\">");
                        var _dc4 = new RegExp("\\[img\\]((http:|https:)\\/\\/.*?\\.jpeg)\\[\\/img\\]","g");
                        text = text.replace(_dc4, "<img src=\"$1\" style=\"max-width:100%;margin-top:10px;margin-bottom:10px;\">");
                        var _dc4 = new RegExp("\\[img\\]((http:|https:)\\/\\/.*?\\.png)\\[\\/img\\]","g");
                        text = text.replace(_dc4, "<img src=\"$1\" style=\"max-width:100%;margin-top:10px;margin-bottom:10px;\">");
                        var _dc4 = new RegExp("\\[img\\]((http:|https:)\\/\\/.*?)\\[\\/img\\]","g");
                        text = text.replace(_dc4, "[img]Sorry we support only .jpg and .png images[/img]");
                        return text;
                    },
                    onArchiveCommentPointElementOnMouseEnter: function(evt) {
                        if (!evt.target || !evt.target.id || evt.target.id == "archiveCommentElementPointerTarget" || evt.target.id == "archiveCommentElementPointerTargetInner") {
                            return;
                        }
                        if (typeof this.archiveCommentDraggingInProgress != "undefined" && this.archiveCommentDraggingInProgress) {
                            return;
                        }
                        var _dc5 = false;
                        var _dc6 = evt.target;
                        while (_dc6 != null) {
                            if (_dc6.id && _dc6.id == "game_play_area") {
                                _dc5 = true;
                            }
                            if (_dc6.id && _dc6.id == "page-title") {
                                _dc5 = true;
                            }
                            if (_dc6.id && _dc6.id == "player_boards") {
                                _dc5 = true;
                            }
                            _dc6 = _dc6.parentNode;
                        }
                        if (!_dc5) {
                            return;
                        }
                        var dim = dojo.position(evt.target);
                        if (dim.w > 300 && dim.h > 300) {
                            return;
                        }
                        if (!$("archiveCommentElementPointerTarget")) {
                            dojo.place("<div id=\"archiveCommentElementPointerTarget\"><div id=\"archiveCommentElementPointerTargetInner\"></div></div>", "page-content");
                        }
                        dojo.style("archiveCommentElementPointerTargetInner", "width", dim.w + "px");
                        dojo.style("archiveCommentElementPointerTargetInner", "height", dim.h + "px");
                        this.attachToNewParentNoReplace("archiveCommentElementPointerTarget", evt.target, "first");
                        dojo.connect($("archiveCommentElementPointerTargetInner"), "onclick", this, "onArchiveCommentPointElementClick");
                        this.addTooltip("archiveCommentElementPointerTargetInner", "", __("lang_mainsite", "Click to highlight / unhighlight this element"));
                        this.archiveCommentPointElementMouseEnterItem = evt.target.id;
                    },
                    removeArchiveCommentPointElement: function() {
                        dojo.disconnect(this.archiveCommentPointElementMouseEnterEvt);
                        this.archiveCommentPointElementMouseEnterEvt = null;
                        dojo.destroy("archiveCommentElementPointerTarget");
                    },
                    archiveCommentAttachImageToElement: function(_dc7, x, y) {
                        var _dc8 = _dc7.getAttribute("datasrc");
                        var _dc9 = _dc7.id + "_attached_webcommentimage";
                        if (!_dc8.match(/.(jpg|jpeg|png)$/i)) {
                            var html = "<img id=\"" + _dc9 + "\" src=\"" + getStaticAssetUrl("img/mainsite/unsupported_types.jpg") + "\"  class=\"archiveCommentAttachedImage\"></img>";
                        } else {
                            var html = "<img id=\"" + _dc9 + "\" src=\"" + _dc8 + "\" class=\"archiveCommentAttachedImage\"></img>";
                        }
                        dojo.place(html, _dc7);
                        dojo.connect($(_dc9), "onload", dojo.hitch(this, function() {
                            if (typeof x != "undefined" && typeof y != "undefined") {
                                dojo.style(_dc9, "left", x + "px");
                                dojo.style(_dc9, "top", y + "px");
                            } else {
                                this.placeOnObject(_dc9, _dc7);
                            }
                            var _dca = new ebg.draggable();
                            _dca.create(this, _dc9, _dc9);
                            this.bMustRemoveArchiveCommentImage = false;
                            _dca.onStartDragging = dojo.hitch(this, function() {
                                dojo.style("archivecontrol_editmode", "display", "none");
                                dojo.style("archivecontrol_editmode_dropcommentimage", "display", "block");
                                dojo.connect($("archivecontrol_editmode_dropcommentimage"), "mouseenter", dojo.hitch(this, (function() {
                                    this.bMustRemoveArchiveCommentImage = true;
                                }
                                )));
                                dojo.connect($("archivecontrol_editmode_dropcommentimage"), "mouseleave", dojo.hitch(this, (function() {
                                    this.bMustRemoveArchiveCommentImage = false;
                                }
                                )));
                            });
                            _dca.onEndDragging = dojo.hitch(this, function(_dcb) {
                                dojo.style("archivecontrol_editmode", "display", "block");
                                dojo.style("archivecontrol_editmode_dropcommentimage", "display", "none");
                                if (this.bMustRemoveArchiveCommentImage) {
                                    dojo.destroy(_dcb);
                                }
                            });
                        }));
                    },
                    onArchiveCommentPointElementClick: function(evt) {
                        dojo.stopEvent(evt);
                        if (typeof this.archiveCommentImageToAnchor != "undefined" && this.validURL(this.archiveCommentImageToAnchor)) {
                            dojo.addClass(this.archiveCommentPointElementMouseEnterItem, "archiveCommentPointedImage");
                            $(this.archiveCommentPointElementMouseEnterItem).setAttribute("datasrc", this.archiveCommentImageToAnchor);
                            this.archiveCommentAttachImageToElement($(this.archiveCommentPointElementMouseEnterItem));
                            return;
                        }
                        if (dojo.hasClass(this.archiveCommentPointElementMouseEnterItem, "archiveCommentPointed1")) {
                            dojo.removeClass(this.archiveCommentPointElementMouseEnterItem, "archiveCommentPointed1");
                            dojo.addClass(this.archiveCommentPointElementMouseEnterItem, "archiveCommentPointed2");
                        } else {
                            if (dojo.hasClass(this.archiveCommentPointElementMouseEnterItem, "archiveCommentPointed2")) {
                                dojo.removeClass(this.archiveCommentPointElementMouseEnterItem, "archiveCommentPointed2");
                                dojo.addClass(this.archiveCommentPointElementMouseEnterItem, "archiveCommentPointed3");
                            } else {
                                if (dojo.hasClass(this.archiveCommentPointElementMouseEnterItem, "archiveCommentPointed3")) {
                                    dojo.removeClass(this.archiveCommentPointElementMouseEnterItem, "archiveCommentPointed3");
                                } else {
                                    dojo.addClass(this.archiveCommentPointElementMouseEnterItem, "archiveCommentPointed1");
                                }
                            }
                        }
                    },
                    onArchiveCommentContinueModeChange: function(evt) {
                        if ($("newArchiveCommentContinueMode").value == 0) {
                            dojo.style("newArchiveCommentContinueModeWarning", "display", "none");
                        } else {
                            dojo.style("newArchiveCommentContinueModeWarning", "display", "block");
                            if (!this.isCurrentPlayerActive()) {
                                alert(dojo.string.substitute(__("lang_mainsite", "You can choose this option only if this is the turn of ${player}."), {
                                    player: $("archiveViewerName").innerHTML
                                }));
                                $("newArchiveCommentContinueMode").value = 0;
                                this.onArchiveCommentContinueModeChange();
                            }
                        }
                    },
                    onTutoRatingEnter: function(evt) {
                        if (this.tutoratingDone) {
                            return;
                        }
                        var _dcc = evt.currentTarget.id.substr(11);
                        for (var i = 1; i <= _dcc; i++) {
                            dojo.removeClass("tutorating_" + i, "fa-star-o");
                            dojo.addClass("tutorating_" + i, "fa-star");
                        }
                        for (; i <= 5; i++) {
                            dojo.removeClass("tutorating_" + i, "fa-star");
                            dojo.addClass("tutorating_" + i, "fa-star-o");
                        }
                        if (toint(_dcc) == 1) {
                            $("rating_explanation").innerHTML = __("lang_mainsite", "I still don't know how to play this game ...");
                        } else {
                            if (toint(_dcc) == 2) {
                                $("rating_explanation").innerHTML = __("lang_mainsite", "I'm not really sure I can play this game.");
                            } else {
                                if (toint(_dcc) == 3) {
                                    $("rating_explanation").innerHTML = __("lang_mainsite", "Imperfect, but at least I know how to play.");
                                } else {
                                    if (toint(_dcc) == 4) {
                                        $("rating_explanation").innerHTML = __("lang_mainsite", "Good tutorial.");
                                    } else {
                                        if (toint(_dcc) == 5) {
                                            $("rating_explanation").innerHTML = __("lang_mainsite", "Perfect tutorial!");
                                        }
                                    }
                                }
                            }
                        }
                    },
                    onTutoRatingLeave: function(evt) {
                        if (this.tutoratingDone) {
                            return;
                        }
                        for (var i = 1; i <= 5; i++) {
                            dojo.removeClass("tutorating_" + i, "fa-star");
                            dojo.addClass("tutorating_" + i, "fa-star-o");
                        }
                        $("rating_explanation").innerHTML = "&nbsp;";
                    },
                    onTutoRatingClick: function(evt) {
                        dojo.stopEvent(evt);
                        this.tutoratingDone = true;
                        var _dcd = evt.currentTarget.id.substr(11);
                        this.ajaxcall("/archive/archive/rateTutorial.html", {
                            id: g_tutorialwritten.id,
                            rating: _dcd,
                            move: toint($("move_nbr").innerHTML)
                        }, this, function(_dce) {
                            this.showMessage(__("lang_mainsite", "Thanks for your feedback"), "info");
                            if (_dcd >= 3) {
                                window.location.href = "/" + this.mslobby + "?game=" + this.game_id;
                            } else {
                                window.location.href = "/gamepanel?id=" + this.game_id;
                            }
                        }, function(_dcf) {
                            if (_dcf) {
                                this.tutoratingDone = false;
                            }
                        });
                    },
                    onRepositionPopop: function() {
                        if ($(this.archiveCommentMobile.anchor)) {
                            if (this.archiveCommentMobile.bCenter) {
                                dojo.query(".dijitTooltipConnector").style("display", "none");
                            } else {
                                dojo.query(".dijitTooltipConnector").style("display", "block");
                                dijit.popup.close(this.archiveCommentNew);
                                dijit.popup.open({
                                    popup: this.archiveCommentNew,
                                    around: $(this.archiveCommentMobile.anchor),
                                    orient: this.archiveCommentPosition
                                });
                                var _dd0 = dojo.position(this.archiveCommentMobile.anchor);
                                if (_dd0.x != this.archiveCommentMobile.lastX || _dd0.y != this.archiveCommentMobile.lastY) {
                                    this.archiveCommentMobile.timeout = setTimeout(dojo.hitch(this, "onRepositionPopop"), 200);
                                } else {
                                    this.archiveCommentMobile.timeout = setTimeout(dojo.hitch(this, "onRepositionPopop"), 1000);
                                }
                            }
                        }
                    },
                    clearArchiveCommentTooltip: function() {
                        clearTimeout(this.archiveCommentMobile.timeout);
                        if (this.archiveCommentNew !== null) {
                            this.archiveCommentNew.destroy();
                            dijit.popup.close(this.archiveCommentNew);
                            this.archiveCommentNew = null;
                        }
                        this.removeArchiveCommentAssociatedElements();
                    },
                    removeArchiveCommentAssociatedElements: function() {
                        dojo.query(".archiveCommentPointed1").removeClass("archiveCommentPointed1");
                        dojo.query(".archiveCommentPointed2").removeClass("archiveCommentPointed2");
                        dojo.query(".archiveCommentPointed3").removeClass("archiveCommentPointed3");
                        dojo.query(".archiveCommentAttachedImage").forEach(dojo.destroy);
                        dojo.query(".archiveCommentPointedImage").removeClass("archiveCommentPointedImage");
                        dojo.style("archiveCommentMinimizedIcon", "display", "none");
                    },
                    onArchiveAddComment: function(evt) {
                        evt.preventDefault();
                        this.showArchiveComment("edit");
                    },
                    onNewArchiveCommentCancel: function(evt) {
                        dojo.stopEvent(evt);
                        this.removeArchiveCommentPointElement();
                        this.removeArchiveCommentAssociatedElements();
                        this.archiveCommentNew.destroy();
                        this.archiveCommentNew = null;
                        this.showArchiveComment("display", this.archiveCommentNo);
                    },
                    onNewArchiveCommentSave: function(evt) {
                        dojo.stopEvent(evt);
                        this.removeArchiveCommentPointElement();
                        this.newArchiveCommentSave();
                    },
                    newArchiveCommentSave: function() {
                        var msg = $("newArchiveCommentText").value;
                        if (msg != "") {
                            this.ajaxcall("/archive/archive/addArchiveComment.html", {
                                table: this.table_id,
                                viewpoint: this.player_id,
                                move: toint($("move_nbr").innerHTML),
                                text: msg,
                                anchor: this.archiveCommentNewAnchor,
                                aftercomment: this.archiveCommentLastDisplayedNo,
                                afteruid: g_last_msg_dispatched_uid,
                                continuemode: $("newArchiveCommentContinueMode").value,
                                pointers: this.getArchiveCommentsPointers()
                            }, this, function(_dd1) {
                                $("newArchiveCommentText").value = "";
                                dojo.place(_dd1, "archiveComments", "first");
                                this.archiveCommentNo++;
                                this.showArchiveComment("saved");
                                dojo.style("publishtutorial_block", "display", (dojo.query(".archiveComment").length > 0) ? "block" : "none");
                            });
                        }
                    },
                    onNewArchiveCommentSaveModify: function(evt) {
                        dojo.stopEvent(evt);
                        this.removeArchiveCommentPointElement();
                        var _dd2 = evt.currentTarget.id.substr(28);
                        this.newArchiveCommentSaveModify(_dd2);
                    },
                    newArchiveCommentSaveModify: function(_dd3) {
                        var msg = $("newArchiveCommentText").value;
                        if (msg != "") {
                            this.ajaxcall("/archive/archive/updateArchiveComment.html", {
                                comment_id: _dd3,
                                text: msg,
                                anchor: this.archiveCommentNewAnchor,
                                continuemode: $("newArchiveCommentContinueMode").value,
                                pointers: this.getArchiveCommentsPointers()
                            }, this, function(_dd4) {
                                $("newArchiveCommentText").value = "";
                                dojo.place(_dd4, "archiveComment_" + this.archiveCommentLastDisplayedId, "replace");
                                this.showArchiveComment("displayid", _dd3);
                            });
                        }
                    },
                    getArchiveCommentsPointers: function() {
                        var res = "";
                        dojo.query(".archiveCommentPointed1").forEach(function(node) {
                            res += node.id + " 1 ";
                        });
                        dojo.query(".archiveCommentPointed2").forEach(function(node) {
                            res += node.id + " 2 ";
                        });
                        dojo.query(".archiveCommentPointed3").forEach(function(node) {
                            res += node.id + " 3 ";
                        });
                        dojo.query(".archiveCommentAttachedImage").forEach(function(node) {
                            var _dd5 = btoa(node.getAttribute("src"));
                            var _dd6 = Math.round(dojo.style(node, "left"));
                            var _dd7 = Math.round(dojo.style(node, "top"));
                            res += node.parentNode.id + " " + _dd5 + "/" + _dd6 + "/" + _dd7 + " ";
                        });
                        return res;
                    },
                    onKeyPressTutorial: function(evt) {
                        if (evt.keyCode == dojo.keys.SPACE) {
                            dojo.stopEvent(evt);
                            return false;
                        }
                    },
                    onKeyUpTutorial: function(evt) {
                        if (evt.keyCode == dojo.keys.SPACE) {
                            if ($("newArchiveCommentNext") !== null) {
                                dojo.stopEvent(evt);
                                this.doNewArchiveCommentNext();
                                return false;
                            } else {
                                if ($("do_action_to_continue")) {
                                    this.showMessage(__("lang_mainsite", "You must do the action to continue the tutorial"), "error");
                                    return;
                                }
                            }
                        }
                    },
                    onNewArchiveCommentNext: function(evt) {
                        dojo.stopEvent(evt);
                        this.doNewArchiveCommentNext();
                    },
                    doNewArchiveCommentNext: function() {
                        if (!this.checkLock(true)) {
                            this.bJumpToNextArchiveOnUnlock = true;
                            return;
                        }
                        this.notifqueue.bStopAfterOneNotif = false;
                        if (this.notifqueue.queue.length > 0) {
                            if (this.notifqueue.queue[0].type == "archivewaitingdelay") {
                                this.notifqueue.queue.shift();
                                this.notifqueue.queue.shift();
                            }
                        }
                        this.archiveCommentNo++;
                        this.clearArchiveCommentTooltip();
                        if (this.checkIfArchiveCommentMustBeDisplayed()) {} else {
                            var _dd8 = dojo.query(".archiveComment").length;
                            if (this.getCommentsViewedFromStart() >= _dd8) {
                                this.showMessage(__("lang_mainsite", "No more comments"), "info");
                                this.doArchiveNextLog();
                            } else {
                                this.archive_playmode = "nextcomment";
                                this.sendNextArchive();
                            }
                        }
                    },
                    onNewArchiveCommentDelete: function(evt) {
                        dojo.stopEvent(evt);
                        this.confirmationDialog(__("lang_mainsite", "Are you sure?"), dojo.hitch(this, function() {
                            this.ajaxcall("/archive/archive/deleteArchiveComment.html", {
                                id: this.archiveCommentLastDisplayedId
                            }, this, function(_dd9) {
                                this.showMessage(__("lang_mainsite", "Done"), "info");
                                this.removeArchiveCommentPointElement();
                                if ($("gamelog_archiveComment_" + this.archiveCommentLastDisplayedId)) {
                                    dojo.destroy("gamelog_archiveComment_" + this.archiveCommentLastDisplayedId);
                                } else {
                                    dojo.destroy("archiveComment_" + this.archiveCommentLastDisplayedId);
                                }
                                this.archiveCommentNo--;
                                this.onNewArchiveCommentNext(evt);
                            });
                        }));
                        dojo.query(".dijitDialog").style("zIndex", 1010);
                    },
                    onNewArchiveCommentModify: function(evt) {
                        dojo.stopEvent(evt);
                        this.showArchiveComment("edit", this.archiveCommentLastDisplayedId);
                    },
                    onNewArchiveCommentStartDrag: function(evt) {
                        dojo.addClass("overall-content", "disable_selection");
                        dojo.style("newArchiveCommentControls", "display", "none");
                        dojo.style("newArchiveCommentMove", "display", "none");
                        dojo.style("newArchiveCommentMoveHelp", "display", "block");
                        dojo.style("archivecontrol_editmode", "display", "none");
                        dojo.style("archivecontrol_editmode_centercomment", "display", "block");
                        dojo.query(".dijitTooltipConnector").style("display", "block");
                        this.addCommentDragMouseUpLink = dojo.connect($("ebd-body"), "onmouseup", this, "onNewArchiveCommentEndDrag");
                        this.addCommentDragMouseOverLink = dojo.connect($("ebd-body"), "onmousemove", this, "onNewArchiveCommentDrag");
                        this.archiveCommentDraggingInProgress = true;
                    },
                    onNewArchiveCommentEndDrag: function(evt) {
                        this.archiveCommentDraggingInProgress = false;
                        dojo.removeClass("overall-content", "disable_selection");
                        dojo.disconnect(this.addCommentDragMouseUpLink);
                        dojo.disconnect(this.addCommentDragMouseOverLink);
                        dojo.query(".newArchiveCommentMouseOver").removeClass("newArchiveCommentMouseOver");
                        dojo.style("newArchiveCommentControls", "display", "block");
                        dojo.style("newArchiveCommentMove", "display", "block");
                        dojo.style("newArchiveCommentMoveHelp", "display", "none");
                        dojo.style("archivecontrol_editmode", "display", "block");
                        dojo.style("archivecontrol_editmode_centercomment", "display", "none");
                        if (this.archiveCommentMobile.anchor == "archivecontrol_editmode_centercomment") {
                            dijit.popup.close(this.archiveCommentNew);
                            dijit.popup.open({
                                popup: this.archiveCommentNew,
                                x: 50,
                                y: 180,
                                orient: this.archiveCommentPosition
                            });
                        } else {
                            this.onArchiveCommentPointElementOnMouseEnter(evt);
                        }
                        if (this.archiveCommentMobile.id != 0) {}
                    },
                    onNewArchiveCommentDrag: function(evt) {
                        var _dda = evt.target;
                        while (!_dda.id) {
                            _dda = _dda.parentNode;
                        }
                        if (_dda.id) {
                            if (!dojo.hasClass(_dda, "newArchiveCommentMouseOver")) {
                                dijit.popup.close(this.archiveCommentNew);
                                dojo.query(".newArchiveCommentMouseOver").removeClass("newArchiveCommentMouseOver");
                                dojo.addClass(_dda, "newArchiveCommentMouseOver");
                                dijit.popup.open({
                                    popup: this.archiveCommentNew,
                                    around: _dda,
                                    orient: this.archiveCommentPosition
                                });
                                this.archiveCommentMobile.anchor = _dda.id;
                                this.archiveCommentNewAnchor = _dda.id;
                                this.archiveCommentMobile.bCenter = (_dda.id == "archivecontrol_editmode_centercomment");
                            }
                        }
                    },
                    initCommentsForMove: function(_ddb) {
                        this.archiveCommentNo = 0;
                        this.archiveCommentLastDisplayedNo = 0;
                        this.clearArchiveCommentTooltip();
                    },
                    onEndOfNotificationDispatch: function() {
                        if (g_archive_mode) {
                            if (this.checkIfArchiveCommentMustBeDisplayed()) {
                                if (this.archive_playmode == "nextcomment") {
                                    this.notifqueue.bStopAfterOneNotif = true;
                                    this.unlockInterface(this.interface_locked_by_id);
                                }
                            }
                        }
                    },
                    checkIfArchiveCommentMustBeDisplayed: function() {
                        var _ddc = this.showArchiveComment("do_not_show_only_infos", this.archiveCommentNo);
                        var _ddd = $("move_nbr").innerHTML;
                        if (_ddc && typeof _ddc.notif_uid != "undefined") {
                            if (_ddc.notif_uid == 0) {
                                this.showArchiveComment("display", this.archiveCommentNo);
                                return true;
                            } else {
                                if (g_last_msg_dispatched_uid == _ddc.notif_uid) {
                                    var _dde = _ddd + "_" + this.archiveCommentNo + "_" + _ddc.notif_uid;
                                    if (typeof this.archiveCommentAlreadyDisplayed[_dde] != "undefined") {
                                        return false;
                                    } else {
                                        this.archiveCommentAlreadyDisplayed[_dde] = true;
                                        this.showArchiveComment("display", this.archiveCommentNo);
                                        return true;
                                    }
                                } else {}
                            }
                        }
                        return false;
                    },
                    onHowToTutorial: function(evt) {
                        dojo.stopEvent(evt);
                        this.clearArchiveCommentTooltip();
                        var _ddf = new ebg.popindialog();
                        _ddf.create("howToBuildTuto");
                        _ddf.setTitle(__("lang_mainsite", "How to build a tutorial?"));
                        _ddf.setMaxWidth(600);
                        var html = "<div id=\"howToBuildTuto\">";
                        html += "<p>" + __("lang_mainsite", "You can add comments to a game replay to create a tutorial for a game.") + "</p>";
                        html += "<p>" + __("lang_mainsite", "There is only ONE official tutorial for each game. If you want to build an official tutorial, you should contact first the developer of this game to get his authorization.") + "</p>";
                        html += "<br/><h3>" + __("lang_mainsite", "Tips :") + "</h3>";
                        html += "<p>_ " + __("lang_mainsite", "The shorter the better.") + "</p>";
                        html += "<p>_ " + __("lang_mainsite", "The tutorial must be written IN ENGLISH: it will be translated afterwards by the community.") + "</p>";
                        html += "<p>_ " + __("lang_mainsite", "Choose your replay carefully so you can explain the game with the right examples.") + "</p>";
                        html += "<p>_ " + __("lang_mainsite", "When this is his/her turn to play, you can tell the player to DO the game action on the game interface instead of displaying a button on your comment.");
                        html += " (" + __("lang_mainsite", "Example : `Now, click on this die to roll it`") + ")</p>";
                        html += "<p>_ " + __("lang_mainsite", "Avoid consecutive comments with no game moves : players like to SEE the game moving to see how it works.") + "</p>";
                        html += "<p>_ " + __("lang_mainsite", "Don't force the viewer to go to the end of the game if this is not necessary.") + "</p>";
                        html += "<p>_ " + __("lang_mainsite", "You can publish your tutorial as private and share it with friends to test it before releasing it.") + "</p>";
                        html += "<a id=\"howToTuto_btn\" class=\"bgabutton bgabutton_blue\">" + __("lang_mainsite", "Close") + "</a>";
                        html += "</div>";
                        _ddf.setContent(html);
                        _ddf.show();
                        dojo.connect($("howToTuto_btn"), "onclick", dojo.hitch(_ddf, function() {
                            this.destroy();
                        }));
                    },
                    onPublishTutorial: function(evt) {
                        dojo.stopEvent(evt);
                        this.clearArchiveCommentTooltip();
                        if ($("publishTuto")) {
                            dojo.destroy("publishTuto");
                        }
                        this.publishTuto = new ebg.popindialog();
                        this.publishTuto.create("publishTuto");
                        this.publishTuto.setTitle(__("lang_mainsite", "Publish as tutorial"));
                        this.publishTuto.setMaxWidth(600);
                        var html = "<div id=\"publishTuto\">";
                        html += "<p>" + __("lang_mainsite", "This game and your comments will be proposed to beginners as a tutorial to learn this game.") + "</p>";
                        html += "<br/>";
                        html += "<br/>";
                        html += "<h3>" + __("lang_mainsite", "Tutorial visibility") + "</h3>";
                        html += "<select id=\"tuto_status\">";
                        html += "<option value=\"private\">" + __("lang_mainsite", "Keep this tutorial private (for testing purpose)") + "</option>";
                        html += "<option value=\"public\">" + __("lang_mainsite", "Make tutorial accessible to anyone") + "</option>";
                        html += "</select>";
                        html += "<br/>";
                        html += "<br/>";
                        html += "<p id=\"publish_conclusion\"></p>";
                        html += "<a id=\"closepublish_btn\" class=\"bgabutton bgabutton_gray\">" + __("lang_mainsite", "Close") + "</a> ";
                        html += "<a id=\"publishTuto_btn\" class=\"bgabutton bgabutton_blue\">" + __("lang_mainsite", "Publish as tutorial") + "</a>";
                        html += "</div>";
                        this.publishTuto.setContent(html);
                        this.publishTuto.show();
                        $("tuto_status").value = g_tutorialwritten.status;
                        dojo.connect($("closepublish_btn"), "onclick", dojo.hitch(this, function() {
                            if ($("publish_conclusion").innerHTML !== "") {
                                window.location.reload(false);
                            }
                            this.publishTuto.destroy();
                        }));
                        dojo.connect($("publishTuto_btn"), "onclick", dojo.hitch(this, function() {
                            this.ajaxcall("/archive/archive/publishTutorial.html", {
                                id: this.table_id,
                                intro: "",
                                lang: "en",
                                status: $("tuto_status").value,
                                viewpoint: this.player_id
                            }, this, function(_de0) {
                                this.showMessage(__("lang_mainsite", "Done"), "info");
                                var _de1 = window.location.href + "&tutorial";
                                _de1 = _de1.replace("#&tutorial", "&tutorial");
                                if ($("tuto_status").value == "public") {
                                    $("publish_conclusion").innerHTML = __("lang_mainsite", "Your report is now accessible to public at the following URL :") + "<br/><a  target=\"_blank\" href=\"" + _de1 + "\">" + _de1 + "</a>";
                                } else {
                                    $("publish_conclusion").innerHTML = __("lang_mainsite", "You can test the tutorial from the following URL (or send it to friends for review) :") + "<br/><a target=\"_blank\" href=\"" + _de1 + "\">" + _de1 + "</a>";
                                }
                                dojo.destroy("publishTuto_btn");
                            }, function() {}, "post");
                        }));
                    },
                    onQuitTutorial: function(evt) {
                        dojo.stopEvent(evt);
                        if (typeof this.bTutorialRatingStep != "undefined" && this.bTutorialRatingStep) {
                            this.showMessage(__("lang_mainsite", "Please rate this tutorial to quit and return to BGA."), "error");
                            return;
                        }
                        this.quitTutorialDlg = new ebg.popindialog;
                        this.quitTutorialDlg.create("quitTutorialDlg");
                        this.quitTutorialDlg.setTitle(__("lang_mainsite", "Quit tutorial"));
                        var html = "<div id=\"quitTutorialDlgContent\">";
                        html += "<div style='text-align: center;margin: 60px'>";
                        html += "<h2>" + __("lang_mainsite", "Your help is very important to improve our tutorials") + "</h2>";
                        html += "<p>" + __("lang_mainsite", "Why do you want to quit?") + "</p>";
                        html += "<p><a href='#' id='quitTutorialNoTime' class='bgabutton bgabutton_blue bgabutton_big quitTutorialReason'>" + __("lang_mainsite", "I don't have time to continue.").replace(/\.$/, "") + "</a></p>";
                        html += "<p><a href='#' id='quitTutorialOk' class='bgabutton bgabutton_blue bgabutton_big quitTutorialReason'>" + __("lang_mainsite", "I got everything I need to play.").replace(/\.$/, "") + "</a></p>";
                        html += "<p><a href='#' id='quitTutorialPoor' class='bgabutton bgabutton_blue bgabutton_big quitTutorialReason'>" + __("lang_mainsite", "This is a poor tutorial.").replace(/\.$/, "") + "</a></p>";
                        html += "<p><a href='#' id='quitTutorialCancel' class='bgabutton bgabutton_gray quitTutorialReason'>" + __("lang_mainsite", "Cancel") + "</a></p>";
                        html += "</div>";
                        html += "</div>";
                        this.quitTutorialDlg.setContent(html);
                        this.quitTutorialDlg.show();
                        dojo.style("popin_quitTutorialDlg", "zIndex", 1001);
                        dojo.query(".quitTutorialReason").connect("onclick", this, "onQuitTutorialReason");
                    },
                    onQuitTutorialReason: function(evt) {
                        dojo.stopEvent(evt);
                        var _de2 = 0;
                        if (evt.currentTarget.id == "quitTutorialNoTime") {
                            _de2 = 0;
                        } else {
                            if (evt.currentTarget.id == "quitTutorialOk") {
                                _de2 = 4;
                            } else {
                                if (evt.currentTarget.id == "quitTutorialPoor") {
                                    _de2 = 1;
                                } else {
                                    if (evt.currentTarget.id == "quitTutorialCancel") {
                                        this.quitTutorialDlg.destroy();
                                        return;
                                    }
                                }
                            }
                        }
                        this.ajaxcall("/archive/archive/rateTutorial.html", {
                            id: g_tutorialwritten.id,
                            rating: _de2,
                            move: toint($("move_nbr").innerHTML)
                        }, this, function(_de3) {
                            if (_de2 >= 3) {
                                window.location.href = "/" + this.mslobby + "?game=" + this.game_id;
                            } else {
                                window.location.href = "/gamepanel?id=" + this.game_id;
                            }
                        }, function(_de4) {});
                    },
                    loadReplayLogs: function() {
                        var _de5 = this.getReplayLogNode();
                        dojo.empty(_de5);
                        if (g_tutorialwritten.status == "public") {
                            dojo.place("<div class=\"row\"><div id=\"replaylogs\" class=\"col-md-8\"></div><div id=\"tutorial_stats\" class=\"col-md-4\"><h4>" + __("lang_mainsite", "Tutorial statistics") + "</h4></div></div>", _de5);
                            var html = "";
                            html += "<div class=\"row-data\"><div class=\"row-label\">Unique view</div><div class=\"row-value\">" + g_tutorialwritten.stats.viewed + "</div></div>";
                            html += "<div class=\"row-data\"><div class=\"row-label\">Recent (<2 months)</div><div class=\"row-value\">" + g_tutorialwritten.stats.recentviewed + "</div></div>";
                            html += "<div class=\"row-data\"><div class=\"row-label\">Average rating</div><div class=\"row-value\">" + (Math.round(g_tutorialwritten.stats.rating * 10) / 10) + " / 5</div></div>";
                            html += "<div class=\"row-data\"><div class=\"row-label\">Viewed duration</div><div class=\"row-value\">" + ((g_tutorialwritten.stats.duration === null) ? "-" : g_tutorialwritten.stats.duration) + " mn</div></div>";
                            html += "<div class=\"row-data\"><div class=\"row-label\">&nbsp;&nbsp;&nbsp;&nbsp;<i class=\"fa fa-star\"></i><i class=\"fa fa-star\"></i><i class=\"fa fa-star\"></i><i class=\"fa fa-star\"></i><i class=\"fa fa-star\"></i></div><div class=\"row-value\">" + g_tutorialwritten.stats.rating5 + "</div></div>";
                            html += "<div class=\"row-data\"><div class=\"row-label\">&nbsp;&nbsp;&nbsp;&nbsp;<i class=\"fa fa-star\"></i><i class=\"fa fa-star\"></i><i class=\"fa fa-star\"></i><i class=\"fa fa-star\"></i></div><div class=\"row-value\">" + g_tutorialwritten.stats.rating4 + "</div></div>";
                            html += "<div class=\"row-data\"><div class=\"row-label\">&nbsp;&nbsp;&nbsp;&nbsp;<i class=\"fa fa-star\"></i><i class=\"fa fa-star\"></i><i class=\"fa fa-star\"></i></div><div class=\"row-value\">" + g_tutorialwritten.stats.rating3 + "</div></div>";
                            html += "<div class=\"row-data\"><div class=\"row-label\">&nbsp;&nbsp;&nbsp;&nbsp;<i class=\"fa fa-star\"></i><i class=\"fa fa-star\"></i></div><div class=\"row-value\">" + g_tutorialwritten.stats.rating2 + "</div></div>";
                            html += "<div class=\"row-data\"><div class=\"row-label\">&nbsp;&nbsp;&nbsp;&nbsp;<i class=\"fa fa-star\"></i></div><div class=\"row-value\">" + g_tutorialwritten.stats.rating1 + "</div></div>";
                            for (var step in g_tutorialwritten.stats.steps) {
                                var nbr = g_tutorialwritten.stats.steps[step];
                                var _de6 = Math.round(100 * nbr / g_tutorialwritten.stats.recentviewed);
                                html += "<div class=\"row-data\"><div class=\"row-label\">Abandon on move " + step + "</div><div class=\"row-value\">" + nbr + " (" + _de6 + "%)</div></div>";
                            }
                            dojo.place(html, "tutorial_stats");
                        } else {
                            dojo.place("<div class=\"row\"><div class=\"col-md-1\"></div><div id=\"replaylogs\" class=\"col-md-10\"></div></div>", _de5);
                        }
                        var _de7 = "";
                        var _de8 = "";
                        var _de9 = null;
                        var html = "";
                        var _dea = null;
                        var _deb = false;
                        var _dec = "";
                        html += "<div id=\"archivecursor\"><i class=\"fa fa-caret-right fa-3x\" aria-hidden=\"true\"></i></div>";
                        for (var i in g_gamelogs) {
                            var _ded = g_gamelogs[i];
                            var _dee = true;
                            if (_ded.channel.substr(0, 6) != "/table") {
                                if ((_ded.channel == this.private_channel) || (_ded.channel == "/player/p" + this.player_id)) {} else {
                                    _dee = false;
                                }
                            }
                            if (_dee) {
                                if (_de9 !== null && _de9 != _ded.move_id) {
                                    html += "</div>";
                                }
                                var _def = false;
                                if (_de9 != _ded.move_id) {
                                    _def = true;
                                    _de9 = _ded.move_id;
                                    _dec = "";
                                    if (_ded.move_id <= toint($("move_nbr").innerHTML)) {
                                        _dec = " viewed ";
                                    }
                                    var _df0 = "<div id=\"replaylogs_move_" + _ded.move_id + "\" class=\"replaylogs_move " + _dec + "\"><div class=\"replaylogs_progression\"><div id=\"replaylogs_progression_" + _ded.move_id + "\" class=\"replaylogs_progression_bottom\"></div></div><div class=\"smalltext\">" + __("lang_mainsite", "Move") + " " + _ded.move_id + " :";
                                    if (typeof _ded.time != "undefined") {
                                        var date = new Date(_ded.time * 1000);
                                        _de8 = date.toLocaleDateString();
                                        if (_de8 != _de7) {
                                            _df0 += "<span style=\"float: right\">" + _de8 + " " + date.toLocaleTimeString() + "</span></div>";
                                        } else {
                                            _df0 += "<span style=\"float: right\">" + date.toLocaleTimeString() + "</span></div>";
                                        }
                                    } else {
                                        _df0 += "<span style=\"float: right\">" + _ded.data[0].time + " GMT+1</span></div>";
                                    }
                                    _deb = false;
                                }
                                for (var j in _ded.data) {
                                    var _df1 = _ded.data[j];
                                    if (_df1.log != "") {
                                        if (!_deb) {
                                            _deb = true;
                                            html += _df0;
                                        }
                                        html += "<div class=\"gamelogreview whiteblock\">" + this.format_string_recursive(_df1.log, _df1.args) + "</div>";
                                    }
                                }
                                if (_deb) {
                                    _de7 = _de8;
                                    if (_dec != "") {
                                        _dea = _ded.move_id;
                                    }
                                }
                                if (_def) {
                                    dojo.query(".archiveComment_move" + _ded.move_id).forEach(dojo.hitch(this, function(node) {
                                        if (!_deb) {
                                            _deb = true;
                                            html += _df0;
                                        }
                                        html += "<div class=\"gamelogreview gamelog_archivecomment whiteblock\"><i class=\"fa fa-graduation-cap\" style=\"float:left;margin-right:8px;\"></i>" + node.outerHTML + "<i class=\"fa fa-trash\"></i></div>";
                                        dojo.destroy(node);
                                    }));
                                }
                            }
                        }
                        if (_de9 !== null) {
                            html += "</div>";
                        }
                        dojo.place(html, "replaylogs");
                        dojo.query(".replaylogs_move").connect("onclick", this, "onReplayLogClick");
                        if (_dea !== null) {
                            this.archiveCursorPos = _dea;
                            this.replaceArchiveCursor();
                        }
                        dojo.query(".own_comment").forEach(function(node) {
                            dojo.addClass(node.parentNode, "own_comment");
                            node.parentNode.id = "gamelog_" + node.id;
                        });
                        dojo.query(".own_comment .archiveComment_text").connect("onclick", this, "onEditReplayLogsComment");
                        dojo.query(".archiveComment").connect("onclick", this, function(evt) {
                            dojo.stopEvent(evt);
                        });
                        dojo.query(".gamelog_archivecomment .fa-trash").connect("onclick", this, "onRemoveReplayLogsComment");
                    },
                    replaceArchiveCursor: function() {
                        this.slideToObjectPos("archivecursor", "replaylogs_progression_" + this.archiveCursorPos, -30, -23).play();
                    },
                    onEditReplayLogsComment: function(evt) {
                        dojo.stopEvent(evt);
                        var _df2 = evt.currentTarget.id.substr(20);
                        dojo.place("<div id=\"replaylogs_edit_inplace_" + _df2 + "\" class=\"replaylogs_edit_inplace\"><textarea  id=\"replaylogs_edit_text_" + _df2 + "\">" + (evt.currentTarget.innerHTML) + "</textarea><br/><div id=\"replaylogs_edit_save_" + _df2 + "\" class=\"bgabutton bgabutton_blue\">" + __("lang_mainsite", "Save") + "</div></div>", evt.currentTarget.id, "after");
                        dojo.style(evt.currentTarget.id, "display", "none");
                        dojo.connect($("replaylogs_edit_save_" + _df2), "onclick", this, "onEditReplayLogsCommentSave");
                    },
                    onRemoveReplayLogsComment: function(evt) {
                        dojo.stopEvent(evt);
                        var _df3 = evt.currentTarget.parentNode.id.substr(23);
                        this.confirmationDialog(__("lang_mainsite", "Are you sure?"), dojo.hitch(this, function() {
                            this.ajaxcall("/archive/archive/deleteArchiveComment.html", {
                                id: _df3
                            }, this, function(_df4) {
                                this.showMessage(__("lang_mainsite", "Done"), "info");
                                dojo.destroy("gamelog_archiveComment_" + _df3);
                            });
                        }));
                    },
                    onEditReplayLogsCommentSave: function(evt) {
                        dojo.stopEvent(evt);
                        var _df5 = evt.currentTarget.id.substr(21);
                        var msg = $("replaylogs_edit_text_" + _df5).value;
                        if (msg == "") {} else {
                            this.ajaxcall("/archive/archive/updateArchiveComment.html", {
                                comment_id: _df5,
                                text: msg,
                                anchor: ""
                            }, this, function(_df6) {
                                dojo.style("archiveComment_text_" + _df5, "display", "block");
                                $("archiveComment_text_" + _df5).innerHTML = msg;
                                dojo.destroy("replaylogs_edit_inplace_" + _df5);
                            });
                        }
                    },
                    onReplayLogClick: function(evt) {
                        dojo.stopEvent(evt);
                        var _df7 = evt.currentTarget.id.substr(16);
                        if ((toint(_df7) - 1) < toint($("move_nbr").innerHTML)) {
                            this.insertParamIntoCurrentURL("goto", _df7 - 1);
                        } else {
                            if ((toint(_df7) - 1) == toint($("move_nbr").innerHTML)) {} else {
                                $("archive_go_to_move_nbr").value = _df7 - 1;
                                this.archive_gotomove = toint(_df7 - 1);
                                this.archive_playmode = "goto";
                                this.sendNextArchive();
                            }
                        }
                    },
                    ensureImageLoading: function() {
                        for (var i in g_img_preload) {
                            var _df8 = g_img_preload[i];
                            if (_df8 != "") {
                                var img = new Image();
                                dojo.connect(img, "onload", this, "onLoadImageOk");
                                dojo.connect(img, "onerror", this, "onLoadImageNok");
                                var url = g_gamethemeurl + "img/" + _df8;
                                this.images_loading_status[url] = false;
                                img.src = g_gamethemeurl + "img/" + _df8;
                            }
                        }
                    },
                    ensureSpecificImageLoading: function(_df9) {
                        for (var i in _df9) {
                            var _dfa = _df9[i];
                            if (_dfa != "") {
                                var img = new Image();
                                dojo.connect(img, "onerror", this, "onLoadImageNok");
                                img.src = getStaticAssetUrl("img/" + this.game_name + "/" + _dfa);
                            }
                        }
                    },
                    ensureSpecificGameImageLoading: function(_dfb) {
                        for (var i in _dfb) {
                            var _dfc = _dfb[i];
                            if (_dfc != "") {
                                var img = new Image();
                                dojo.connect(img, "onload", this, "onLoadImageOk");
                                dojo.connect(img, "onerror", this, "onLoadImageNok");
                                img.src = g_gamethemeurl + "img/" + _dfc;
                            }
                        }
                    },
                    dontPreloadImage: function(_dfd) {
                        for (var i in g_img_preload) {
                            var _dfe = g_img_preload[i];
                            if (_dfe == _dfd) {
                                g_img_preload.splice(i, 1);
                            }
                        }
                    },
                    onLoadImageOk: function(evt) {
                        var _dff = decodeURIComponent(evt.target.src);
                        if (typeof this.images_loading_status[_dff] != "undefined") {
                            this.images_loading_status[_dff] = true;
                            this.updateLoaderPercentage();
                        }
                    },
                    onLoadImageNok: function(evt) {
                        this.showMessage(__("lang_mainsite", "Can't load image:") + " <a href=\"" + evt.currentTarget.src + "\" target=\"_blank\">" + evt.currentTarget.src + "</a><br/>" + __("lang_mainsite", "Please check your connexion or hard-refresh this web page (Ctrl+F5)"), "error");
                    },
                    updateLoaderPercentage: function() {
                        if (typeof g_replayFrom != "undefined") {
                            return;
                        }
                        var _e00 = 0;
                        var _e01 = 0;
                        for (var i in this.images_loading_status) {
                            _e00++;
                            if (this.images_loading_status[i]) {
                                _e01++;
                            }
                        }
                        if (_e00 == 0) {
                            var _e02 = 90;
                        } else {
                            var _e02 = 90 * _e01 / _e00;
                        }
                        var _e03 = 0;
                        if (this.log_history_loading_status.downloaded == 1) {
                            if (this.log_history_loading_status.total == 0) {
                                _e03 = 100;
                            } else {
                                _e03 = 100 * (this.log_history_loading_status.loaded / this.log_history_loading_status.total);
                            }
                        }
                        this.setLoader(10 + _e02, _e03);
                    },
                    displayTableWindow: function(id, _e04, data, _e05, _e06, _e07) {
                        if (typeof _e05 == "undefined") {
                            _e05 = "";
                        }
                        if (typeof _e06 == "undefined") {
                            _e06 = "";
                        }
                        if (typeof _e07 != "undefined") {
                            _e06 += "<br/><br/><div style='text-align: center'>";
                            _e06 += "<a class='bgabutton bgabutton_blue' id='close_btn' href='#'><span>" + _(_e07) + "</span></a>";
                            _e06 += "</div>";
                        }
                        var _e08 = new ebg.popindialog();
                        _e08.create("tableWindow");
                        _e08.setTitle(_e04);
                        var html = "<div class='tableWindow'>";
                        if (typeof _e05 == "object") {
                            _e05.args = this.notifqueue.playerNameFilterGame(_e05.args);
                            html += this.format_string_recursive(_e05.str, _e05.args);
                        } else {
                            html += _e05;
                        }
                        html += "<table>";
                        for (var _e09 in data) {
                            var row = data[_e09];
                            html += "<tr>";
                            for (col_id in row) {
                                var col = row[col_id];
                                if (typeof col == "object") {
                                    if (col.str && col.args) {
                                        if (col.type && col.type == "header") {
                                            html += "<th>";
                                        } else {
                                            html += "<td>";
                                        }
                                        col.args = this.notifqueue.playerNameFilterGame(col.args);
                                        html += this.format_string_recursive(col.str, col.args);
                                        if (col.type && col.type == "header") {
                                            html += "</th>";
                                        } else {
                                            html += "</td>";
                                        }
                                    } else {
                                        html += "<td>invalid displayTable obj</td>";
                                    }
                                } else {
                                    html += "<td>" + col + "</td>";
                                }
                            }
                            html += "</tr>";
                        }
                        html += "</table>";
                        html += _e06;
                        html += "</div>";
                        _e08.setContent(html);
                        if ($("close_btn")) {
                            dojo.connect($("close_btn"), "onclick", this, function(evt) {
                                evt.preventDefault();
                                _e08.destroy();
                            });
                        }
                        _e08.show();
                        return _e08;
                    },
                    updatePubBanner: function() {
                        if (g_archive_mode) {
                            return;
                        }
                        if (!this.isCurrentPlayerActive()) {
                            var _e0a = dojo.query(".publisherannounce");
                            if (_e0a.length == 0) {
                                return;
                            }
                            if (this.nextPubbanner === null) {
                                var _e0b = Math.floor((Math.random() * _e0a.length));
                            } else {
                                var _e0b = this.nextPubbanner % _e0a.length;
                            }
                            dojo.place($("announce_" + _e0b).innerHTML, "inactiveplayermessage", "only");
                            this.nextPubbanner++;
                        }
                    },
                    onSaveState: function(evt) {
                        evt.preventDefault();
                        var _e0c = evt.currentTarget.id.substr(10);
                        this.ajaxcall("/table/table/debugSaveState.html", {
                            table: this.table_id,
                            state: _e0c
                        }, this, function(_e0d) {
                            this.showMessage("Done", "info");
                        });
                    },
                    onLoadState: function(evt) {
                        evt.preventDefault();
                        var _e0e = evt.currentTarget.id.substr(10);
                        this.ajaxcall("/table/table/loadSaveState.html", {
                            table: this.table_id,
                            state: _e0e
                        }, this, function(_e0f) {
                            this.showMessage("Done, reload in progress...", "info");
                            window.location.reload();
                        });
                    },
                    getScriptErrorModuleInfos: function() {
                        return "U=" + this.player_id;
                    },
                    showTutorial: function() {
                        return;
                        var _e10 = dojo.position("game_play_area");
                        var pos = dojo.position("logs_wrap");
                        var _e11 = pos.y + 90 - _e10.y;
                        var _e12 = pos.y + 170 - _e10.y;
                        dojo.style("tuto_arrow3", "top", _e11 + "px");
                        dojo.style("tuto_text3", "top", _e12 + "px");
                        dojo.connect($("close_tutorial"), "onclick", this, "onCloseTutorial");
                    },
                    onCloseTutorial: function(evt) {
                        dojo.stopEvent(evt);
                        dojo.destroy("tutorial_support");
                    },
                    onBeforeChatInput: function(_e13) {
                        var _e14 = " " + _e13.msg.toLowerCase() + " ";
                        if (_e14.indexOf(" bug ") != -1) {
                            var url = this.metasiteurl + "/bugs?game=" + this.game_id;
                            this.notifqueue.addChatToLog("<b>" + dojo.string.substitute(__("lang_mainsite", "Found a bug? Please report it using <a href=\"${url}\">BGA bug reporting system</a>."), {
                                url: url + "\" target=\"_blank"
                            }) + "</b>");
                        }
                        return true;
                    },
                    showEliminated: function() {
                        var _e15 = new ebg.popindialog();
                        _e15.create("eliminateDlg");
                        _e15.setTitle(__("lang_mainsite", "You have been eliminated"));
                        var html = "<div id=\"eliminateDlgContent\">";
                        html += "<div style='text-align: center'>";
                        html += "<p>" + __("lang_mainsite", "You have been eliminated from this game.") + "</p><br/>";
                        if (!this.quickGameEnd) {
                            html += "<a href='" + this.metasiteurl + "/table?table=" + this.table_id + "' class='bgabutton bgabutton_blue'>" + __("lang_mainsite", "Return to main site") + "</a><br/>" + __("lang_mainsite", "or") + "<br/>";
                        } else {
                            html += "<a href='" + this.metasiteurl + "/' class='bgabutton bgabutton_blue'>" + __("lang_mainsite", "Return to main site") + "</a><br/>" + __("lang_mainsite", "or") + "<br/>";
                        }
                        html += "<a href='#' id='closeScoreDlg_btn_elim' onclick='return false;' class='bgabutton bgabutton_blue'>" + __("lang_mainsite", "Continue to watch the game") + "</a><br/>";
                        if (this.blinkid && this.blinkid != "") {
                            html += __("lang_mainsite", "or") + "<br/><a href='" + this.blinkid + "' target='_new' class='bgabutton bgabutton_blue'>" + this.blinkdomain + "</a>";
                        }
                        html += "</div>";
                        html += "</div>";
                        _e15.setContent(html);
                        _e15.show();
                        dojo.connect($("closeScoreDlg_btn_elim"), "onclick", dojo.hitch(_e15, function() {
                            dojo.destroy("eliminateDlgContent");
                            this.destroy();
                        }));
                    },
                    setLoader: function(_e16, _e17) {
                        _e16 = Math.round(_e16);
                        _e17 = Math.round(_e17);
                        if (_e16 < 8) {
                            _e16 = 8;
                        }
                        dojo.style("progress_bar_progress", "width", _e16 + "%");
                        dojo.style("game_box_loader_front_wrap", "width", _e16 + "%");
                        $("images_status_text").innerHTML = __("lang_mainsite", "Loading game art") + " (" + _e16 + "%)";
                        if (toint(_e16) >= 100) {
                            var anim = dojo.fadeOut({
                                node: "loader_mask",
                            });
                            dojo.connect(anim, "onEnd", function() {
                                dojo.style("loader_mask", "display", "none");
                            });
                            anim.play();
                        }
                        $("log_history_status_text").innerHTML = __("lang_mainsite", "Loading game log history") + " (" + _e17 + "%)";
                        dojo.style("log_history_progress_bar_progress", "width", _e17 + "%");
                        if (toint(_e17) >= 100) {
                            dojo.style("log_history_status", "display", "none");
                        }
                    },
                    displayZombieBack: function() {
                        dojo.style("zombieBack", "display", "block");
                    },
                    onZombieBack: function(evt) {
                        dojo.stopEvent(evt);
                        this.ajaxcall("/" + this.game_name + "/" + this.game_name + "/zombieBack.html", {}, this, function(_e18) {});
                    },
                    showNeutralizedGamePanel: function(_e19, _e1a) {
                        if (dojo.style("neutralized_game_panel", "display") != "block") {
                            dojo.style("neutralized_game_panel", "display", "block");
                            var html = "";
                            html += "<div id='neutralized_explanation'>";
                            html += "<p>" + dojo.string.substitute(__("lang_mainsite", "Player ${name} was out of time (or quit this game) and lost this game (at ${progression}% of the game progression)."), {
                                name: "<b>" + ((typeof this.gamedatas.players[_e1a] == "undefined") ? "-inexistent player: " + _e1a + "-" : this.gamedatas.players[_e1a].name) + "</b>",
                                progression: Math.round(_e19)
                            });
                            html += "</p>";
                            html += "<p>" + __("lang_mainsite", "All other players will be considered winners.") + "</p>";
                            html += "<p>" + __("lang_mainsite", "This may be frustrating, so quitting players gets a penalty on their Karma (☯). If you want to avoid this situation in the future, play with opponents with a good Karma.") + "</p>";
                            html += "</div>";
                            if (this.player_id != _e1a && !this.isSpectator) {
                                html += dojo.string.substitute(__("lang_mainsite", "You may continue to play if you like, or ${quit} this game without any penalty."), {
                                    quit: "<div class=\"bgabutton bgabutton_blue\" id=\"neutralized_quit\">" + __("lang_mainsite", "quit") + "</div>"
                                });
                            }
                            $("neutralized_game_panel").innerHTML = html;
                            if ($("neutralized_quit")) {
                                dojo.connect($("neutralized_quit"), "onclick", this, function() {
                                    this.ajaxcall("/table/table/quitgame.html?src=panel", {
                                        table: this.table_id,
                                        neutralized: true,
                                        s: "gameui_neutralized"
                                    }, this, function(_e1b) {
                                        if (typeof bgaConfig != "undefined" && bgaConfig.webrtcEnabled) {
                                            this.doLeaveRoom();
                                        }
                                        window.location.href = this.metasiteurl + "/table?table=" + this.table_id;
                                    });
                                });
                            }
                        }
                    },
                    setupCoreNotifications: function() {
                        dojo.subscribe("gameStateChange", this, "ntf_gameStateChange");
                        dojo.subscribe("gameStateChangePrivateArg", this, "ntf_gameStateChangePrivateArgs");
                        dojo.subscribe("gameStateMultipleActiveUpdate", this, "ntf_gameStateMultipleActiveUpdate");
                        dojo.subscribe("newActivePlayer", this, "ntf_newActivePlayer");
                        dojo.subscribe("playerstatus", this, "ntf_playerStatusChanged");
                        dojo.subscribe("yourturnack", this, "ntf_yourTurnAck");
                        dojo.subscribe("clockalert", this, "ntf_clockalert");
                        dojo.subscribe("tableInfosChanged", this, "ntf_tableInfosChanged");
                        dojo.subscribe("playerEliminated", this, "ntf_playerEliminated");
                        dojo.subscribe("tableDecision", this, "ntf_tableDecision");
                        dojo.subscribe("infomsg", this, "ntf_infomsg");
                        dojo.subscribe("archivewaitingdelay", this, "ntf_archivewaitingdelay");
                        dojo.subscribe("end_archivewaitingdelay", this, "ntf_end_archivewaitingdelay");
                        this.notifqueue.setSynchronous("archivewaitingdelay", 500);
                        dojo.subscribe("replaywaitingdelay", this, "ntf_replaywaitingdelay");
                        dojo.subscribe("end_replaywaitingdelay", this, "ntf_end_replaywaitingdelay");
                        this.notifqueue.setSynchronous("replaywaitingdelay", 1500);
                        dojo.subscribe("replayinitialwaitingdelay", this, "ntf_replayinitialwaitingdelay");
                        dojo.subscribe("end_replayinitialwaitingdelay", this, "ntf_end_replayinitialwaitingdelay");
                        this.notifqueue.setSynchronous("replayinitialwaitingdelay", 1500);
                        dojo.subscribe("aiPlayerWaitingDelay", this, "ntf_aiPlayerWaitingDelay");
                        this.notifqueue.setSynchronous("aiPlayerWaitingDelay", 2000);
                        dojo.subscribe("replay_has_ended", this, "ntf_replay_has_ended");
                        dojo.subscribe("updateSpectatorList", this, "ntf_updateSpectatorList");
                        dojo.subscribe("tableWindow", this, "ntf_tableWindow");
                        dojo.subscribe("wouldlikethink", this, "ntf_wouldlikethink");
                        dojo.subscribe("updateReflexionTime", this, "ntf_updateReflexionTime");
                        dojo.subscribe("undoRestorePoint", this, "ntf_undoRestorePoint");
                        dojo.subscribe("resetInterfaceWithAllDatas", this, "ntf_resetInterfaceWithAllDatas");
                        dojo.subscribe("zombieModeFail", this, "ntf_zombieModeFail");
                        dojo.subscribe("zombieModeFailWarning", this, "ntf_zombieModeFailWarning");
                        dojo.subscribe("aiError", this, "ntf_aiError");
                        dojo.subscribe("skipTurnOfPlayer", this, "ntf_skipTurnOfPlayer");
                        dojo.subscribe("zombieBack", this, "ntf_zombieBack");
                        dojo.subscribe("allPlayersAreZombie", this, "ntf_allPlayersAreZombie");
                        dojo.subscribe("gameResultNeutralized", this, "ntf_gameResultNeutralized");
                        dojo.subscribe("playerConcedeGame", this, "ntf_playerConcedeGame");
                        dojo.subscribe("showTutorial", this, "ntf_showTutorial");
                        this.notifqueue.setSynchronous("showTutorial");
                        dojo.subscribe("showCursor", this, "ntf_showCursor");
                        dojo.subscribe("showCursorClick", this, "ntf_showCursorClick");
                        dojo.subscribe("skipTurnOfPlayerWarning", this, "ntf_skipTurnOfPlayerWarning");
                        dojo.subscribe("simplePause", this, "ntf_simplePause");
                        this.notifqueue.setSynchronous("simplePause");
                        dojo.subscribe("banFromTable", this, "ntf_banFromTable");
                        dojo.subscribe("resultsAvailable", this, "ntf_resultsAvailable");
                        dojo.subscribe("switchToTurnbased", this, "ntf_switchToTurnbased");
                    },
                    ntf_gameStateChange: function(_e1c) {
                        if (typeof _e1c.args.id != "undefined") {
                            if (typeof this.gamedatas.gamestates[_e1c.args.id] == "undefined") {
                                console.error("Unknow gamestate: " + _e1c.args.id);
                            }
                            if (typeof this.gamedatas.gamestates[_e1c.args.id].args != "undefined") {
                                delete this.gamedatas.gamestates[_e1c.args.id].args;
                            }
                            if (typeof this.gamedatas.gamestates[_e1c.args.id].updateGameProgression != "undefined") {
                                delete this.gamedatas.gamestates[_e1c.args.id].updateGameProgression;
                            }
                            for (var key in this.gamedatas.gamestates[_e1c.args.id]) {
                                _e1c.args[key] = this.gamedatas.gamestates[_e1c.args.id][key];
                            }
                        }
                        dojo.removeClass("overall-content", "gamestate_" + this.gamedatas.gamestate.name);
                        this.onLeavingState(this.gamedatas.gamestate.name);
                        if (this.next_private_args != null) {
                            _e1c.args.args._private = this.next_private_args;
                            this.next_private_args = null;
                        }
                        if (this.gamedatas.gamestate.name == "gameSetup") {
                            this.sendResizeEvent();
                        }
                        this.gamedatas.gamestate = dojo.clone(_e1c.args);
                        this.last_server_state = dojo.clone(this.gamedatas.gamestate);
                        this.on_client_state = false;
                        for (var _e1d in this.gamedatas.players) {
                            this.gamedatas.players[_e1d].ack = "wait";
                        }
                        this.cancelPlannedWakeUp();
                        this.cancelPlannedWakeUpCheck();
                        if (this.updateActivePlayerAnimation() && !g_archive_mode && this.bRealtime) {
                            this.sendWakeupInTenSeconds();
                        }
                        if (this.bRealtime && !g_archive_mode) {
                            this.checkWakupUpInFourteenSeconds();
                        }
                        this.updatePageTitle();
                        dojo.style("pagemaintitle_wrap", "display", "block");
                        dojo.style("gameaction_status_wrap", "display", "none");
                        if (typeof (_e1c.args.updateGameProgression) != "undefined") {
                            $("pr_gameprogression").innerHTML = _e1c.args.updateGameProgression;
                        }
                        if (_e1c.args.name == "gameSetup") {
                            if (!g_archive_mode) {
                                this.showMessage("Game will start in few seconds ...", "error");
                                setTimeout("window.location.reload();", 3000);
                            }
                        } else {
                            this.lastWouldLikeThinkBlinking = 0;
                            dojo.addClass("overall-content", "gamestate_" + _e1c.args.name);
                            this.onEnteringState(_e1c.args.name, _e1c.args);
                            if (_e1c.args.name == "gameEnd") {
                                this.bGameEndJustHappened = true;
                                this.onGameEnd();
                                if (typeof this.end_of_game_timestamp == "undefined") {
                                    this.end_of_game_timestamp = Math.floor(Date.now() / 1000);
                                }
                            }
                        }
                    },
                    ntf_gameStateChangePrivateArgs: function(_e1e) {
                        this.next_private_args = _e1e.args;
                    },
                    ntf_gameStateMultipleActiveUpdate: function(_e1f) {
                        this.gamedatas.gamestate.multiactive = _e1f.args;
                        this.last_server_state.multiactive = _e1f.args;
                        if (this.updateActivePlayerAnimation()) {
                            this.sendWakeupInTenSeconds();
                        }
                        this.updatePageTitle();
                    },
                    ntf_newActivePlayer: function(_e20) {
                        this.gamedatas.gamestate.active_player = _e20.args;
                        this.updatePageTitle();
                        this.updateActivePlayerAnimation();
                    },
                    ntf_playerStatusChanged: function(_e21) {
                        var _e22 = "player_" + _e21.args.player_id + "_status";
                        var _e23 = $(_e22);
                        if (_e23) {
                            dojo.removeClass(_e22, "status_online");
                            dojo.removeClass(_e22, "status_offline");
                            dojo.removeClass(_e22, "status_inactive");
                            dojo.addClass(_e22, "status_" + _e21.args.player_status);
                        }
                        this.updateFirePlayerLink();
                    },
                    ntf_yourTurnAck: function(_e24) {
                        var _e25 = _e24.args.player;
                        if (this.gamedatas.players[_e25]) {
                            this.gamedatas.players[_e25].ack = "ack";
                            if ($("avatar_active_" + _e25).src.indexOf("active_player") != -1) {
                                if (!this.shouldDisplayClockAlert(_e25)) {
                                    $("avatar_active_" + _e25).src = getStaticAssetUrl("img/layout/active_player.gif");
                                } else {
                                    $("avatar_active_" + _e25).src = getStaticAssetUrl("img/layout/active_player_clockalert.gif");
                                }
                            }
                        }
                    },
                    ntf_clockalert: function(_e26) {},
                    ntf_tableInfosChanged: function(_e27) {
                        if (_e27.args.reload_reason == "playerQuitGame") {
                            this.gamedatas.players[_e27.args.who_quits].zombie = 1;
                            this.updateActivePlayerAnimation();
                        } else {
                            if (_e27.args.reload_reason == "playerElimination") {
                                this.gamedatas.players[_e27.args.who_quits].eliminated = 1;
                                this.updateActivePlayerAnimation();
                            }
                        }
                    },
                    ntf_playerEliminated: function(_e28) {
                        if (_e28.args.who_quits == this.player_id) {
                            this.showEliminated();
                        }
                    },
                    ntf_tableDecision: function(_e29) {
                        this.updateDecisionPanel(_e29.args);
                    },
                    ntf_infomsg: function(_e2a) {
                        if (_e2a.args.player == this.player_id) {
                            var _e2b = dojo.string.substitute(_e2a.log, _e2a.args);
                            this.showMessage(_e2b, "info");
                        }
                    },
                    ntf_archivewaitingdelay: function(_e2c) {
                        this.lockInterface();
                    },
                    ntf_end_archivewaitingdelay: function(_e2d) {
                        this.unlockInterface();
                        if (this.bJumpToNextArchiveOnUnlock) {
                            this.bJumpToNextArchiveOnUnlock = false;
                            this.doNewArchiveCommentNext();
                        }
                        this.onEndDisplayLastArchive();
                    },
                    ntf_replaywaitingdelay: function(_e2e) {},
                    ntf_end_replaywaitingdelay: function(_e2f) {},
                    ntf_replayinitialwaitingdelay: function(_e30) {},
                    ntf_end_replayinitialwaitingdelay: function(_e31) {},
                    ntf_replay_has_ended: function(_e32) {
                        this.onEndOfReplay();
                    },
                    onEndOfReplay: function() {
                        this.unlockInterface("replayFrom");
                        this.setLoader(100, 100);
                        delete g_replayFrom;
                        if ($("current_header_infos_wrap")) {
                            dojo.style("current_header_infos_wrap", "display", "block");
                            dojo.style("previously_on", "display", "none");
                        }
                        if (this.gameUpgraded) {
                            window.location.href = this.getGameStandardUrl();
                        }
                    },
                    ntf_updateSpectatorList: function(_e33) {
                        if (_e33.channelorig == "/table/ts" + this.table_id) {
                            this.updateVisitors(_e33.args);
                        }
                    },
                    ntf_tableWindow: function(_e34) {
                        var _e35 = "";
                        if (typeof _e34.args.header != "undefined") {
                            _e35 = _e34.args.header;
                        }
                        var _e36 = "";
                        if (typeof _e34.args.footer != "undefined") {
                            _e36 = _e34.args.footer;
                        }
                        var _e37 = "";
                        if (typeof _e34.args.closing != "undefined") {
                            _e37 = _e34.args.closing;
                        }
                        this.displayTableWindow(_e34.args.id, _(_e34.args.title), _e34.args.table, _(_e35), _(_e36), _(_e37));
                    },
                    ntf_wouldlikethink: function(_e38) {
                        this.lastWouldLikeThinkBlinking = 0;
                    },
                    ntf_updateReflexionTime: function(_e39) {
                        if (typeof g_replayFrom == "undefined") {
                            var _e3a = toint(this.gamedatas.gamestate.reflexion.total[_e39.args.player_id]);
                            this.gamedatas.gamestate.reflexion.total[_e39.args.player_id] = _e3a + toint(_e39.args.delta);
                            if (_e39.args.max !== null) {
                                this.gamedatas.gamestate.reflexion.total[_e39.args.player_id] = Math.min(toint(this.gamedatas.gamestate.reflexion.total[_e39.args.player_id]), toint(_e39.args.max));
                            }
                            var _e3b = toint(this.gamedatas.gamestate.reflexion.total[_e39.args.player_id]);
                            if (typeof this.gamedatas.gamestate.reflexion.initial != "undefined") {
                                this.gamedatas.gamestate.reflexion.initial[_e39.args.player_id] = toint(this.gamedatas.gamestate.reflexion.initial[_e39.args.player_id]) + toint((toint(_e3b) - toint(_e3a)));
                            }
                        }
                    },
                    ntf_undoRestorePoint: function(_e3c) {
                        if (!g_archive_mode) {
                            this.ajaxcall("/" + this.game_name + "/" + this.game_name + "/gamedatas.html", {}, this, function(_e3d) {
                                dojo.query(".player_board_content > *").forEach(function(node) {
                                    if (dojo.hasClass(node, "player_score") || dojo.hasClass(node, "player_table_status")) {} else {
                                        dojo.destroy(node);
                                    }
                                });
                                dojo.empty("game_play_area");
                                dojo.place(this.original_game_area_html, "game_play_area");
                                dojo.removeClass("overall-content", "gamestate_" + this.gamedatas.gamestate.name);
                                this.destroyAllEbgControls();
                                this.setupNotifications = function() {}
                                ;
                                this.completesetup(this.game_name, this.game_name_displayed, this.table_id, this.player_id, null, null, "keep_existing_gamedatas_limited", _e3d.data, null, null);
                            });
                        }
                    },
                    ntf_resetInterfaceWithAllDatas: function(_e3e) {
                        dojo.query(".player_board_content > *").forEach(function(node) {
                            if (dojo.hasClass(node, "player_score") || dojo.hasClass(node, "player_table_status")) {} else {
                                dojo.destroy(node);
                            }
                        });
                        dojo.empty("game_play_area");
                        dojo.place(this.original_game_area_html, "game_play_area");
                        dojo.removeClass("overall-content", "gamestate_" + this.gamedatas.gamestate.name);
                        this.destroyAllEbgControls();
                        this.setupNotifications = function() {}
                        ;
                        this.completesetup(this.game_name, this.game_name_displayed, this.table_id, this.player_id, null, null, "keep_existing_gamedatas_limited", _e3e.args, null, null);
                    },
                    ntf_zombieModeFailWarning: function(_e3f) {
                        this.showMessage(__("lang_mainsite", "Error during Skip turn execution : if you are blocked please retry the same action and the game will be abandonned."), "info");
                    },
                    ntf_zombieModeFail: function(_e40) {
                        this.showMessage(__("lang_mainsite", "Error during Skip turn execution : this game has been cancelled. Please leave the game."), "info");
                    },
                    ntf_aiError: function(_e41) {
                        this.showMessage(__("lang_mainsite", "Artificial intelligence error:") + " " + _e41.args.error, "error");
                        dojo.style("ai_not_playing", "display", "inline");
                    },
                    ntf_skipTurnOfPlayer: function(_e42) {
                        if (_e42.args.player_id == this.player_id) {
                            if (_e42.args.zombie) {
                                this.displayZombieBack();
                            }
                        }
                        if (_e42.args.zombie) {
                            this.gamedatas.players[_e42.args.player_id].zombie = 1;
                        }
                        this.updateActivePlayerAnimation();
                    },
                    ntf_zombieBack: function(_e43) {
                        if (_e43.args.player_id == this.player_id) {
                            dojo.style("zombieBack", "display", "none");
                            this.setNewRTCMode(this.table_id, null, this.rtc_mode);
                        }
                        this.gamedatas.players[_e43.args.player_id].zombie = 0;
                        this.updateActivePlayerAnimation();
                    },
                    ntf_gameResultNeutralized: function(_e44) {
                        this.showNeutralizedGamePanel(_e44.args.progression, _e44.args.player_id);
                    },
                    ntf_allPlayersAreZombie: function(_e45) {
                        this.showMessage(__("lang_mainsite", "All players are over time limit and all turns are skipped: game is abandonned."), "info");
                        if (typeof bgaConfig != "undefined" && bgaConfig.webrtcEnabled) {
                            this.doLeaveRoom();
                        }
                        if (!this.quickGameEnd) {
                            window.location.href = this.metasiteurl + "/table?table=" + this.table_id;
                        } else {
                            window.location.href = this.metasiteurl + "/";
                        }
                    },
                    ntf_simplePause: function(_e46) {
                        var _e47 = _e46.args.time;
                        _e47 = Math.min(_e47, 10000);
                        this.notifqueue.setSynchronousDuration(_e47);
                    },
                    ntf_showTutorial: function(_e48) {
                        this.lockInterface();
                        if (_e48.args.delay && _e48.args.delay > 0) {
                            setTimeout(dojo.hitch(this, function() {
                                this.showTutorialItem(_e48);
                            }), toint(_e48.args.delay));
                        } else {
                            this.showTutorialItem(_e48);
                        }
                    },
                    showTutorialActivationDlg: function() {
                        if (this.is_solo) {
                            this.ajaxcall("/" + this.game_name + "/" + this.game_name + "/activeTutorial.html", {
                                active: 1
                            }, this, function(_e49) {});
                        } else {
                            var html = "<div class='tutorial_ingame'>";
                            html += dojo.string.substitute(__("lang_mainsite", "Welcome on ${game}. Do you want to learn how to play?"), {
                                game: this.game_name_displayed
                            });
                            html += "<div class='tutorial_footer'>";
                            html += "<a id='disable_tutorial' class='bgabutton bgabutton_gray' href='#'>";
                            html += "<span>" + __("lang_mainsite", "No, thanks") + "</span></a>&nbsp;&nbsp;";
                            html += "<a id='enable_tutorial' class='bgabutton bgabutton_blue' href='#'>";
                            html += "<span>" + __("lang_mainsite", "Yes") + "</span></a></div>";
                            html += "</div>";
                            html += "</div>";
                            this.tutorialActiveDlg = new ebg.popindialog();
                            this.tutorialActiveDlg.create("tutorialActiveDlg");
                            this.tutorialActiveDlg.setTitle(__("lang_mainsite", "Tutorial"));
                            this.tutorialActiveDlg.setContent(html);
                            this.tutorialActiveDlg.show();
                            dojo.connect($("disable_tutorial"), "onclick", this, function() {
                                this.ajaxcall("/" + this.game_name + "/" + this.game_name + "/activeTutorial.html", {
                                    active: 0
                                }, this, function(_e4a) {});
                                this.tutorialActiveDlg.destroy();
                            });
                            dojo.connect($("enable_tutorial"), "onclick", this, function() {
                                this.ajaxcall("/" + this.game_name + "/" + this.game_name + "/activeTutorial.html", {
                                    active: 1
                                }, this, function(_e4b) {});
                                this.tutorialActiveDlg.destroy();
                            });
                        }
                    },
                    showTutorialItem: function(_e4c) {
                        if (typeof this.tutorialItem[_e4c.args.id] != "undefined") {
                            endnotif();
                            return;
                        }
                        var html = "<div class='tutorial_ingame'>";
                        html += _(_e4c.args.text);
                        html += "<div class='tutorial_footer'><a id='close_tutorial_" + _e4c.args.id + "' class='bgabutton bgabutton_blue' href='#'>";
                        if (_e4c.args.calltoaction) {
                            html += "<span>" + _(_e4c.args.calltoaction) + "</span></a></div>";
                        } else {
                            html += "<span>" + __("lang_mainsite", "Ok") + "</span></a></div>";
                        }
                        html += "</div>";
                        var _e4d = null;
                        if (_e4c.args.attachement) {
                            var _e4d = _e4c.args.attachement;
                        }
                        if (!$(_e4d)) {
                            _e4d = null;
                        }
                        if (_e4d === null) {
                            if ($("tutorialDialogContent")) {
                                dojo.destroy("tutorialDialogContent");
                            }
                            this.tutorialItem[_e4c.args.id] = new dijit.Dialog({
                                title: __("lang_mainsite", "Tutorial")
                            });
                            this.tutorialItem[_e4c.args.id].set("content", html);
                            this.tutorialItem[_e4c.args.id].show();
                            dojo.connect($("close_tutorial_" + _e4c.args.id), "onclick", this, "onTutorialDlgClose");
                        } else {
                            this.tutorialItem[_e4c.args.id] = new dijit.TooltipDialog({
                                id: "tutorial_item_" + _e4c.args.id,
                                content: html,
                                closable: true
                            });
                            dijit.popup.open({
                                popup: this.tutorialItem[_e4c.args.id],
                                around: (_e4d !== null ? $(_e4d) : null)
                            });
                            dojo.connect($("close_tutorial_" + _e4c.args.id), "onclick", this, "onTutorialClose");
                        }
                    },
                    onTutorialClose: function(evt) {
                        var _e4e = evt.currentTarget.id.substr(15);
                        dijit.popup.close(this.tutorialItem[_e4e]);
                        this.tutorialItem[_e4e].destroy();
                        this.markTutorialAsSeen(_e4e);
                    },
                    onTutorialDlgClose: function(evt) {
                        var _e4f = evt.currentTarget.id.substr(15);
                        this.tutorialItem[_e4f].hide();
                        this.tutorialItem[_e4f].destroy();
                        this.markTutorialAsSeen(_e4f);
                    },
                    markTutorialAsSeen: function(_e50) {
                        this.unlockInterface();
                        this.interface_status = "updated";
                        dojo.style("pagemaintitle_wrap", "display", "block");
                        dojo.style("gameaction_status_wrap", "display", "none");
                        dojo.style("synchronous_notif_icon", "display", "none");
                        endnotif();
                        this.ajaxcall("/" + this.game_name + "/" + this.game_name + "/seenTutorial.html", {
                            id: _e50
                        }, this, function(_e51) {});
                    },
                    toggleTurnBasedNotes: function() {
                        var _e52 = $("ingame_menu_notes");
                        if (typeof this.turnBasedNotes == "undefined") {
                            this.openTurnBasedNotes();
                        } else {
                            if (this.turnBasedNotesIsOpen) {
                                this.closeTurnBasedNotes();
                            } else {
                                this.openTurnBasedNotes();
                            }
                        }
                    },
                    closeTurnBasedNotes: function() {
                        if (typeof this.turnBasedNotes != "undefined") {
                            if (this.turnBasedNotesIsOpen) {
                                dijit.popup.close(this.turnBasedNotesPopup);
                                this.turnBasedNotesIsOpen = false;
                                window.focus();
                                if (document.activeElement) {
                                    document.activeElement.blur();
                                }
                            }
                        }
                    },
                    openTurnBasedNotes: function(_e53) {
                        if (typeof _e53 == "undefined") {
                            _e53 = "";
                        } else {
                            dojo.removeClass("ingame_menu_notes", "icon32_notes");
                            dojo.addClass("ingame_menu_notes", "icon32_notes_active");
                        }
                        var _e54 = $("ingame_menu_notes");
                        if (typeof this.turnBasedNotesPopup == "undefined") {
                            var html = "<div id=\"turnbased_notes\">";
                            html += "<h3>" + __("lang_mainsite", "My personal notes on this game") + ":</h3>";
                            html += __("lang_mainsite", "Note: your opponents CANNOT see your notes.");
                            html += "<br/>";
                            html += "<br/>";
                            html += "<textarea id='turnbased_notes_content'>" + _e53 + "</textarea>";
                            html += "<br/>";
                            html += "<div id='turnbased_notes_commands'>";
                            html += "<a href='#' id='btn_clearmynotes' class='bgabutton bgabutton_gray' style='float:left'>" + __("lang_mainsite", "Clear my notes") + "</a> &nbsp;";
                            html += "<a href='#' id='btn_savemynotes' class='bgabutton bgabutton_blue'>" + __("lang_mainsite", "OK") + "</a> &nbsp;";
                            html += "</div>";
                            html += "<div class='clear'></div>";
                            html += "</div>";
                            this.turnBasedNotesPopup = new dijit.TooltipDialog({
                                id: "turnBasedNotes",
                                content: html,
                                closable: true
                            });
                            dijit.popup.open({
                                popup: this.turnBasedNotesPopup,
                                around: $(_e54),
                                orient: ["below", "below-alt", "above", "above-alt"]
                            });
                            $("turnbased_notes_content").focus();
                            setCaretPosition($("turnbased_notes_content"), 9999);
                            dojo.query(".dijitPopup").style("zIndex", 1054);
                            dojo.connect($("btn_savemynotes"), "onclick", this, "onSaveNotes");
                            dojo.connect($("btn_clearmynotes"), "onclick", this, "onClearNotes");
                            this.turnBasedNotesIsOpen = true;
                        } else {
                            dijit.popup.open({
                                popup: this.turnBasedNotesPopup,
                                around: $(_e54),
                                orient: ["below", "below-alt", "above", "above-alt"]
                            });
                            this.turnBasedNotesIsOpen = true;
                            $("turnbased_notes_content").focus();
                            setCaretPosition($("turnbased_notes_content"), 9999);
                            dojo.query(".dijitPopup").style("zIndex", 1054);
                        }
                    },
                    onSaveNotes: function(evt) {
                        dojo.stopEvent(evt);
                        var _e55 = $("turnbased_notes_content").value;
                        this.ajaxcall("/table/table/updateTurnBasedNotes.html", {
                            value: _e55,
                            table: this.table_id
                        }, this, function(_e56) {});
                        if (_e55 != "") {
                            dojo.removeClass("ingame_menu_notes", "icon32_notes");
                            dojo.addClass("ingame_menu_notes", "icon32_notes_active");
                        } else {
                            dojo.removeClass("ingame_menu_notes", "icon32_notes_active");
                            dojo.addClass("ingame_menu_notes", "icon32_notes");
                        }
                        this.closeTurnBasedNotes();
                    },
                    onClearNotes: function(evt) {
                        dojo.stopEvent(evt);
                        this.ajaxcall("/table/table/updateTurnBasedNotes.html", {
                            value: "",
                            table: this.table_id
                        }, this, function(_e57) {});
                        dojo.removeClass("ingame_menu_notes", "icon32_notes_active");
                        dojo.addClass("ingame_menu_notes", "icon32_notes");
                        this.closeTurnBasedNotes();
                    },
                    onSeeMoreLink: function(evt) {
                        dojo.stopEvent(evt);
                        var _e58 = evt.currentTarget.id.substr(7);
                        dojo.query(".link_see_more").style("display", "block");
                        dojo.style(evt.currentTarget.id, "display", "none");
                    },
                    onThumbUpLink: function(evt) {
                        dojo.stopEvent(evt);
                        var _e59 = evt.currentTarget.id.substr(13);
                        this.ajaxcall("/table/table/thumbUpLink.html", {
                            id: _e59
                        }, this, function(_e5a) {
                            $("thumbup_current_" + _e59).innerHTML = toint($("thumbup_current_" + _e59).innerHTML) + 1;
                        });
                    },
                    onChangePreference: function(evt) {
                        var _e5b = evt.currentTarget.id.substr(26);
                        var _e5c = evt.currentTarget.value;
                        $("preference_global_control_" + _e5b).value = _e5c;
                        $("preference_global_fontrol_" + _e5b).value = _e5c;
                        if (_e5b == "logsSecondColumn") {
                            this.switchLogModeTo(_e5c);
                        } else {
                            if (_e5b == "showOpponentCursor") {
                                this.showMessage(__("lang_mainsite", "Your preference will be applied starting next move"), "info");
                            } else {
                                if (_e5b == "displayTooltips") {
                                    this.switchDisplayTooltips(_e5c);
                                }
                            }
                        }
                        this.hideIngameMenu();
                        this.ajaxcall("/table/table/changeGlobalPreference.html", {
                            id: _e5b,
                            value: _e5c
                        }, this, function(_e5d) {});
                    },
                    getRanking: function() {
                        if (typeof this.last_rank_displayed == "undefined") {
                            this.last_rank_displayed = 0;
                            if (dojo.hasClass("ebd-body", "arena_mode")) {
                                this.ranking_mode_displayed = "arena";
                            } else {
                                this.ranking_mode_displayed = "elo";
                            }
                        }
                        this.ajaxcall("/gamepanel/gamepanel/getRanking.html", {
                            game: this.game_id,
                            start: this.last_rank_displayed,
                            mode: this.ranking_mode_displayed
                        }, this, function(_e5e) {
                            this.insert_rankings(_e5e);
                        });
                    },
                    insert_rankings: function(_e5f) {
                        var rank = this.last_rank_displayed + 1;
                        for (var i in _e5f) {
                            var _e60 = false;
                            var _e61 = _e5f[i];
                            _e61.rank = this.getRankString(_e61.rank_no);
                            _e61.additional_ranking = "";
                            _e61.premium = "";
                            _e61.avatar = g_themeurl + "../../data/avatar/" + id_to_path(_e61.id) + "/" + _e61.id + "_32.jpg?h=" + _e61.avatar;
                            _e61.device = playerDeviceToIcon(_e61.device);
                            if (_e61.ranking) {
                                _e61.ranking = this.getEloLabel(_e61.ranking);
                                _e61.link = this.metasiteurl + "/player?id=" + _e61.id;
                                _e61.flagx = _e61.country.flag_x;
                                _e61.flagy = _e61.country.flag_y;
                                _e61.flagdisplay = "inline-block";
                            } else {
                                if (_e61.arena) {
                                    _e61.ranking = this.getArenaLabel(_e61.arena);
                                    if (_e61.arena >= 500) {
                                        _e61.ranking = this.getArenaLabel(_e61.arena, _e61.rank_no);
                                    }
                                    _e61.link = "player?id=" + _e61.id;
                                    _e61.flagx = _e61.country.flag_x;
                                    _e61.flagy = _e61.country.flag_y;
                                    _e61.flagdisplay = "inline-block";
                                    _e61.additional_ranking = "ranking_arena";
                                } else {
                                    _e60 = true;
                                    _e61.name = "<img class=\"masqued_rank\" id=\"maskn_" + _e61.rank_no + "\" src=\"" + getStaticAssetUrl("img/common/rankmask.png") + "\"/>";
                                    _e61.ranking = "<a href=\"premium\"><img class=\"masqued_rank\" id=\"maskr_" + _e61.rank_no + "\" src=\"" + getStaticAssetUrl("img/common/rankmask.png") + "\"/></a>";
                                    _e61.link = "premium";
                                    _e61.flagx = 0;
                                    _e61.flagy = 0;
                                    _e61.flagdisplay = "none";
                                    _e61.id = "";
                                }
                            }
                            dojo.place(this.format_string(this.jstpl_player_ranking, _e61), "players");
                            if (!_e60) {
                                this.addTooltip("flag_" + _e61.id, _e61.country.name, "");
                            }
                            this.last_rank_displayed = rank;
                            rank++;
                        }
                    },
                    onSeeMoreRanking: function(evt) {
                        dojo.stopEvent(evt);
                        this.ajaxcall("/gamepanel/gamepanel/getRanking.html", {
                            game: this.game_id,
                            start: this.last_rank_displayed,
                            mode: this.ranking_mode_displayed
                        }, this, function(_e62) {
                            this.insert_rankings(_e62);
                        });
                    },
                    ntf_aiPlayerWaitingDelay: function(_e63) {},
                    ntf_playerConcedeGame: function(_e64) {
                        this.showMessage(dojo.string.substitute(__("lang_mainsite", "${player_name} concedes this game."), _e64.args), "info");
                    },
                    ntf_skipTurnOfPlayerWarning: function(_e65) {
                        if (_e65.args.player_id == this.player_id) {
                            this.showMessage(__("lang_mainsite", "You are out of time and an opponent is ready to EXPEL you from the game. You have 20 SECONDS to finish your turn or you'll lose this game."), "error");
                        }
                        this.notifqueue.resynchronizeNotifications(false);
                    },
                    ntf_showCursorClick: function(_e66) {
                        if ($("player_hidecursor_" + _e66.args.player_id)) {
                            if (!$("player_hidecursor_" + _e66.args.player_id).checked) {
                                return;
                            }
                        }
                        var ref = null;
                        var x = null;
                        var y = null;
                        var _e67 = -10;
                        for (var i in _e66.args.path) {
                            var elem = _e66.args.path[i];
                            if ($(elem.id)) {
                                if ($(elem.id).offsetParent !== null) {
                                    ref = elem.id;
                                    x = elem.x;
                                    y = elem.y;
                                    break;
                                }
                            }
                        }
                        if (ref !== null) {
                            var _e68 = _e66.args.player_id;
                            this.showClick(ref, x, y, "#" + this.gamedatas.players[_e68].color);
                        }
                    },
                    ntf_showCursor: function(_e69) {
                        if ($("player_hidecursor_" + _e69.args.player_id)) {
                            if (!$("player_hidecursor_" + _e69.args.player_id).checked) {
                                return;
                            }
                        }
                        var ref = null;
                        var x = null;
                        var y = null;
                        var _e6a = -10;
                        if (_e69.args.path == null) {
                            if ($("opponent_cursor_" + _e69.args.player_id)) {
                                dojo.destroy("opponent_cursor_" + _e69.args.player_id);
                            }
                            dojo.style("player_showcursor_" + _e69.args.player_id, "display", "none");
                            return;
                        }
                        dojo.style("player_showcursor_" + _e69.args.player_id, "display", "block");
                        for (var i in _e69.args.path) {
                            var elem = _e69.args.path[i];
                            if ($(elem.id)) {
                                if ($(elem.id).offsetParent !== null) {
                                    ref = elem.id;
                                    x = elem.x;
                                    y = elem.y;
                                    break;
                                }
                            }
                        }
                        var _e6b = _e69.args.player_id;
                        if (!$("opponent_cursor_" + _e6b)) {
                            dojo.place("<i id=\"opponent_cursor_" + _e6b + "\" class=\"opponent_cursor fa fa-hand-pointer-o\"></i>", "ebd-body");
                            if (ref !== null) {
                                this.placeOnObjectPos($("opponent_cursor_" + _e6b), ref, x + _e6a, y);
                            }
                        }
                        dojo.style("opponent_cursor_" + _e6b, "display", "block");
                        dojo.style("opponent_cursor_" + _e6b, "color", "#" + this.gamedatas.players[_e6b].color);
                        if (ref !== null) {
                            this.slideToObjectPos($("opponent_cursor_" + _e6b), ref, x + _e6a, y, 500).play();
                        }
                    },
                    onChatKeyDown: function(evt) {
                        if (this.control3dmode3d && evt.target.id == "ebd-body" && (evt.keyCode == 37 || evt.keyCode == 38 || evt.keyCode == 39 || evt.keyCode == 40 || evt.keyCode == 107 || evt.keyCode == 109)) {
                            if (evt.ctrlKey == false) {
                                if (evt.keyCode == 37) {
                                    this.change3d(0, 0, 100, 0, 0, true, false);
                                } else {
                                    if (evt.keyCode == 38) {
                                        this.change3d(0, 100, 0, 0, 0, true, false);
                                    } else {
                                        if (evt.keyCode == 39) {
                                            this.change3d(0, 0, -100, 0, 0, true, false);
                                        } else {
                                            if (evt.keyCode == 40) {
                                                this.change3d(0, -100, 0, 0, 0, true, false);
                                            } else {
                                                if (evt.keyCode == 107) {
                                                    this.change3d(0, 0, 0, 0, 0.1, true, false);
                                                    return;
                                                } else {
                                                    if (evt.keyCode == 109) {
                                                        this.change3d(0, 0, 0, 0, -0.1, true, false);
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if (evt.keyCode == 37) {
                                    this.change3d(0, 0, 0, -10, 0, true, false);
                                } else {
                                    if (evt.keyCode == 38) {
                                        this.change3d(-10, 0, 0, 0, 0, true, false);
                                    } else {
                                        if (evt.keyCode == 39) {
                                            this.change3d(0, 0, 0, 10, 0, true, false);
                                        } else {
                                            if (evt.keyCode == 40) {
                                                this.change3d(10, 0, 0, 0, 0, true, false);
                                            }
                                        }
                                    }
                                }
                            }
                            if (evt.keyCode == 107 || evt.keyCode == 109) {} else {
                                dojo.stopEvent(evt);
                            }
                        }
                        if (evt.target.id == "ebd-body" && evt.ctrlKey == false && ((evt.keyCode >= 48 && evt.keyCode <= 57) || (evt.keyCode >= 65 && evt.keyCode <= 90) || (evt.keyCode >= 96 && evt.keyCode <= 111) || evt.keyCode == 32 || evt.keyCode == 59 || evt.keyCode == 61 || evt.keyCode == 173 || evt.keyCode == 186 || evt.keyCode == 187 || evt.keyCode == 188 || evt.keyCode == 189 || evt.keyCode == 190 || evt.keyCode == 191 || evt.keyCode == 192 || evt.keyCode == 219 || evt.keyCode == 220 || evt.keyCode == 221 || evt.keyCode == 222)) {
                            this.expandChatWindow("table_" + this.table_id, true);
                        }
                        if (evt.keyCode == 27 && evt.ctrlKey == false) {
                            this.collapseChatWindow("table_" + this.table_id);
                        }
                    },
                    onChatInputBlur: function(evt) {},
                    onJudgeDecision: function(evt) {
                        var _e6c = evt.currentTarget.id.substr(17);
                        this.ajaxcall("/table/table/judgegivevictory.html", {
                            id: this.table_id,
                            winner: _e6c
                        }, this, function(_e6d) {});
                    },
                    registerEbgControl: function(_e6e) {
                        this.ebgControls.push(_e6e);
                    },
                    destroyAllEbgControls: function() {
                        for (var i in this.ebgControls) {
                            this.ensureEbgObjectReinit(this.ebgControls[i]);
                        }
                        this.ebgControls = [];
                    },
                    playMusic: function(evt) {
                        if (typeof $("melodice_frame").getAttribute("to_be_loaded_src") != "undefined") {
                            if ($("melodice_frame").getAttribute("to_be_loaded_src") !== null) {
                                $("melodice_frame").src = $("melodice_frame").getAttribute("to_be_loaded_src");
                                $("melodice_frame").removeAttribute("to_be_loaded_src");
                            }
                        }
                    },
                    lockScreenCounter: function() {
                        if (this.gamedatas.gamestate.name == "gameSetup" && !g_archive_mode) {
                            this.updatePageTitle();
                            this.lockts--;
                            if (this.lockts <= 0) {
                                this.ajaxcall("/" + this.game_name + "/" + this.game_name + "/endLockScreen.html", {}, this, function(_e6f) {
                                    if (_e6f.data.c == true) {} else {
                                        if (typeof this.lockScreenTimeout != "undefined") {
                                            clearTimeout(this.lockScreenTimeout);
                                            return;
                                        }
                                    }
                                });
                            }
                            this.lockScreenTimeout = setTimeout(dojo.hitch(this, "lockScreenCounter"), 1000);
                        }
                    },
                    initHotseat: function() {
                        this.hotseat_focus = null;
                        for (var _e70 in this.hotseat) {
                            var url = "/" + this.gameserver + "/" + this.game_name + "?table=" + this.table_id + "&lang=" + dojoConfig.locale + "&testuser=" + _e70;
                            if (this.hotseat_interface == "normal") {
                                dojo.place(dojo.string.substitute(this.jstpl_hotseat_interface, {
                                    url: url,
                                    player_id: _e70,
                                }), "overall-footer", "before");
                                dojo.style("hotseat_mask", "display", "block");
                            }
                            this.hotseat_focus = this.player_id;
                        }
                        if (this.hotseat_focus !== null) {
                            this.hotseat[this.player_id] = 1;
                        }
                        if (this.hotseat_interface == "hotseataccount") {
                            this.forceTestUser = this.player_id;
                        }
                        dojo.connect($("hotseat_mask"), "onclick", this, "onHotseatPlayButton");
                    },
                    onHotseatPlayButton: function(evt) {
                        dojo.stopEvent(evt);
                        dojo.style("hotseat_mask", "display", "none");
                    },
                    checkHotseatFocus: function() {
                        if (this.hotseat_focus === null) {
                            return;
                        }
                        if (this.isPlayerActive(this.hotseat_focus)) {
                            return;
                        } else {
                            for (var _e71 in this.hotseat) {
                                if (this.isPlayerActive(_e71)) {
                                    setTimeout(dojo.hitch(this, function() {
                                        this.giveHotseatFocusTo(_e71);
                                    }), 1000);
                                    return;
                                }
                            }
                        }
                    },
                    giveHotseatFocusTo: function(_e72) {
                        if (this.hotseat_interface == "single_screen") {
                            this.hotseat_focus = _e72;
                            this.player_id = _e72;
                            this.forceTestUser = _e72;
                            this.showMessage(dojo.string.substitute(("This is ${player} turn!"), {
                                player: this.gamedatas.players[_e72].player_name
                            }), "info");
                        } else {
                            dojo.query(".hotseat_iframe").style("left", "200%");
                            if (_e72 != this.player_id) {
                                dojo.style("hotseat_iframe_" + _e72, "left", "0px");
                                dojo.addClass("ebd-body", "fullscreen_iframe");
                            }
                            this.hotseat_focus = _e72;
                            if (this.hotseat_focus == this.player_id) {
                                dojo.style("hotseat_mask", "display", "block");
                                dojo.removeClass("ebd-body", "fullscreen_iframe");
                            } else {
                                var _e73 = window.frames["hotseat_iframe_" + this.hotseat_focus].contentDocument.getElementById("hotseat_mask");
                                dojo.style(_e73, "display", "block");
                            }
                        }
                    },
                    init3d: function() {
                        dojo.connect($("c3dAngleUp"), "onclick", dojo.hitch(this, this.change3d, -10, 0, 0, 0, 0, true, false));
                        dojo.connect($("c3dAngleDown"), "onclick", dojo.hitch(this, this.change3d, 10, 0, 0, 0, 0, true, false));
                        dojo.connect($("c3dUp"), "onclick", dojo.hitch(this, this.change3d, 0, 100, 0, 0, 0, true, false));
                        dojo.connect($("c3dDown"), "onclick", dojo.hitch(this, this.change3d, 0, -100, 0, 0, 0, true, false));
                        dojo.connect($("c3dLeft"), "onclick", dojo.hitch(this, this.change3d, 0, 0, 100, 0, 0, true, false));
                        dojo.connect($("c3dRight"), "onclick", dojo.hitch(this, this.change3d, 0, 0, -100, 0, 0, true, false));
                        dojo.connect($("c3dRotateL"), "onclick", dojo.hitch(this, this.change3d, 0, 0, 0, -10, 0, true, false));
                        dojo.connect($("c3dRotateR"), "onclick", dojo.hitch(this, this.change3d, 0, 0, 0, 10, 0, true, false));
                        dojo.connect($("ingame_menu_3d"), "onclick", dojo.hitch(this, this.change3d, 0, 0, 0, 0, 0, false, false));
                        dojo.connect($("c3dZoomIn"), "onclick", dojo.hitch(this, this.change3d, 0, 0, 0, 0, 0.1, true, false));
                        dojo.connect($("c3dZoomOut"), "onclick", dojo.hitch(this, this.change3d, 0, 0, 0, 0, -0.1, true, false));
                        dojo.query(".control3d_command").connect("onmouseenter", this, "enter3dButton");
                        dojo.query(".control3d_command").connect("onmouseleave", this, "leave3dButton");
                        if (dojo.hasClass("ebd-body", "mobile_version")) {
                            this.control3ddraggable = new ebg.draggable();
                            this.control3ddraggable.create(this, "controls3d_wrap", "controls3d_img");
                        }
                    },
                    change3d: function(_e74, xpos, ypos, _e75, _e76, _e77, _e78) {
                        if (_e77 == false) {
                            this.control3dmode3d = !this.control3dmode3d;
                        }
                        if (this.control3dmode3d == false) {
                            if (dojo.hasClass("ebd-body", "mode_3d")) {
                                dojo.removeClass("ebd-body", "mode_3d");
                            }
                            $("ingame_menu_3d_label").innerHTML = __("lang_mainsite", "3D mode");
                            $("game_play_area").style.transform = "rotatex(" + 0 + "deg) translate(" + 0 + "px," + 0 + "px) rotateZ(" + 0 + "deg)";
                        } else {
                            if (!dojo.hasClass("ebd-body", "mode_3d")) {
                                dojo.addClass("ebd-body", "mode_3d");
                            }
                            dojo.addClass("ebd-body", "enableTransitions");
                            $("ingame_menu_3d_label").innerHTML = __("lang_mainsite", "2D mode");
                            this.control3dxaxis += _e74;
                            if (this.control3dxaxis >= 80) {
                                this.control3dxaxis = 80;
                            }
                            if (this.control3dxaxis <= 0) {
                                this.control3dxaxis = 0;
                            }
                            if (this.control3dscale < 0.5) {
                                this.control3dscale = 0.5;
                            }
                            this.control3dzaxis += _e75;
                            this.control3dxpos += xpos;
                            this.control3dypos += ypos;
                            this.control3dscale += _e76;
                            if (_e78 == true) {
                                this.control3dxaxis = 0;
                                this.control3dzaxis = 0;
                                this.control3dxpos = 0;
                                this.control3dypos = 0;
                                this.control3dscale = 1;
                            }
                            $("game_play_area").style.transform = "rotatex(" + this.control3dxaxis + "deg) translate(" + this.control3dypos + "px," + this.control3dxpos + "px) rotateZ(" + this.control3dzaxis + "deg) scale3d(" + this.control3dscale + "," + this.control3dscale + "," + this.control3dscale + ")";
                        }
                    },
                    enter3dButton: function(evt) {
                        if (evt.currentTarget.id == "c3dLeft") {
                            $("tooltip3d").innerHTML = __("lang_mainsite", "Shortcut : Left arrow");
                        }
                        if (evt.currentTarget.id == "c3dRight") {
                            $("tooltip3d").innerHTML = __("lang_mainsite", "Shortcut : Right arrow");
                        }
                        if (evt.currentTarget.id == "c3dUp") {
                            $("tooltip3d").innerHTML = __("lang_mainsite", "Shortcut : Up arrow");
                        }
                        if (evt.currentTarget.id == "c3dDown") {
                            $("tooltip3d").innerHTML = __("lang_mainsite", "Shortcut : Down arrow");
                        }
                        if (evt.currentTarget.id == "c3dRotateL") {
                            $("tooltip3d").innerHTML = __("lang_mainsite", "Shortcut : Ctrl+Left arrow");
                        }
                        if (evt.currentTarget.id == "c3dRotateR") {
                            $("tooltip3d").innerHTML = __("lang_mainsite", "Shortcut : Ctrl+Right arrow");
                        }
                        if (evt.currentTarget.id == "c3dAngleDown") {
                            $("tooltip3d").innerHTML = __("lang_mainsite", "Shortcut : Ctrl+Down arrow");
                        }
                        if (evt.currentTarget.id == "c3dAngleUp") {
                            $("tooltip3d").innerHTML = __("lang_mainsite", "Shortcut : Ctrl+Up arrow");
                        }
                        if (evt.currentTarget.id == "c3dZoomIn") {
                            $("tooltip3d").innerHTML = __("lang_mainsite", "Shortcut : +");
                        }
                        if (evt.currentTarget.id == "c3dZoomOut") {
                            $("tooltip3d").innerHTML = __("lang_mainsite", "Shortcut : -");
                        }
                    },
                    leave3dButton: function(evt) {
                        $("tooltip3d").innerHTML = __("lang_mainsite", "Note: 3D is experimental");
                    },
                    ntf_banFromTable: function(_e79) {
                        if (this.isSpectator && typeof this.gamedatas.players[_e79.args.from] != "undefined") {
                            location.hash = "";
                            window.location.reload();
                        }
                    },
                    ntf_resultsAvailable: function(_e7a) {
                        this.updateResultPage();
                    },
                    ntf_switchToTurnbased: function(_e7b) {
                        this.showMessage(__("lang_mainsite", "This Realtime table has been switched to Turnbased table."), "info");
                        setTimeout(dojo.hitch(this, function() {
                            window.location.href = this.getGameStandardUrl();
                        }), 1000);
                    },
                    saveclient: function() {
                        this.save = dojo.clone($("game_play_area"));
                    },
                    restoreClient: function() {
                        dojo.destroy("game_play_area");
                        dojo.place(this.save, "game_play_area_wrap");
                    },
                    applyTranslationsOnLoad: function() {
                        dojo.query(".to_translate").forEach(dojo.hitch(this, function(node) {
                            var _e7c = node.innerHTML.split("£µ;");
                            if (_e7c.length > 1) {
                                var _e7d = _(_e7c.shift());
                                for (var i in _e7c) {
                                    var _e7e = _e7c[i].split("µù;");
                                    if (_e7e.length == 2) {
                                        _e7d = _e7d.replace(_e7e[0], _e7e[1]);
                                    }
                                }
                                node.innerHTML = _e7d;
                            } else {
                                node.innerHTML = _(node.innerHTML);
                            }
                        }));
                    },
                });
            });
        },
        "dijit/TooltipDialog": function() {
            define(["dojo/_base/declare", "dojo/dom-class", "dojo/has", "dojo/keys", "dojo/_base/lang", "dojo/on", "./focus", "./layout/ContentPane", "./_DialogMixin", "./form/_FormMixin", "./_TemplatedMixin", "dojo/text!./templates/TooltipDialog.html", "./main"], function(_e7f, _e80, has, keys, lang, on, _e81, _e82, _e83, _e84, _e85, _e86, _e87) {
                var _e88 = _e7f("dijit.TooltipDialog", [_e82, _e85, _e84, _e83], {
                    title: "",
                    doLayout: false,
                    autofocus: true,
                    baseClass: "dijitTooltipDialog",
                    _firstFocusItem: null,
                    _lastFocusItem: null,
                    templateString: _e86,
                    _setTitleAttr: "containerNode",
                    postCreate: function() {
                        this.inherited(arguments);
                        this.own(on(this.domNode, "keydown", lang.hitch(this, "_onKey")));
                    },
                    orient: function(node, _e89, _e8a) {
                        var newC = {
                            "MR-ML": "dijitTooltipRight",
                            "ML-MR": "dijitTooltipLeft",
                            "TM-BM": "dijitTooltipAbove",
                            "BM-TM": "dijitTooltipBelow",
                            "BL-TL": "dijitTooltipBelow dijitTooltipABLeft",
                            "TL-BL": "dijitTooltipAbove dijitTooltipABLeft",
                            "BR-TR": "dijitTooltipBelow dijitTooltipABRight",
                            "TR-BR": "dijitTooltipAbove dijitTooltipABRight",
                            "BR-BL": "dijitTooltipRight",
                            "BL-BR": "dijitTooltipLeft",
                            "BR-TL": "dijitTooltipBelow dijitTooltipABLeft",
                            "BL-TR": "dijitTooltipBelow dijitTooltipABRight",
                            "TL-BR": "dijitTooltipAbove dijitTooltipABRight",
                            "TR-BL": "dijitTooltipAbove dijitTooltipABLeft"
                        }[_e89 + "-" + _e8a];
                        _e80.replace(this.domNode, newC, this._currentOrientClass || "");
                        this._currentOrientClass = newC;
                    },
                    focus: function() {
                        this._getFocusItems();
                        _e81.focus(this._firstFocusItem);
                    },
                    onOpen: function(pos) {
                        this.orient(this.domNode, pos.aroundCorner, pos.corner);
                        var _e8b = pos.aroundNodePos;
                        if (pos.corner.charAt(0) == "M" && pos.aroundCorner.charAt(0) == "M") {
                            this.connectorNode.style.top = _e8b.y + ((_e8b.h - this.connectorNode.offsetHeight) >> 1) - pos.y + "px";
                            this.connectorNode.style.left = "";
                        } else {
                            if (pos.corner.charAt(1) == "M" && pos.aroundCorner.charAt(1) == "M") {
                                this.connectorNode.style.left = _e8b.x + ((_e8b.w - this.connectorNode.offsetWidth) >> 1) - pos.x + "px";
                            }
                        }
                        this._onShow();
                    },
                    onClose: function() {
                        this.onHide();
                    },
                    _onKey: function(evt) {
                        if (evt.keyCode == keys.ESCAPE) {
                            this.defer("onCancel");
                            evt.stopPropagation();
                            evt.preventDefault();
                        } else {
                            if (evt.keyCode == keys.TAB) {
                                var node = evt.target;
                                this._getFocusItems();
                                if (this._firstFocusItem == this._lastFocusItem) {
                                    evt.stopPropagation();
                                    evt.preventDefault();
                                } else {
                                    if (node == this._firstFocusItem && evt.shiftKey) {
                                        _e81.focus(this._lastFocusItem);
                                        evt.stopPropagation();
                                        evt.preventDefault();
                                    } else {
                                        if (node == this._lastFocusItem && !evt.shiftKey) {
                                            _e81.focus(this._firstFocusItem);
                                            evt.stopPropagation();
                                            evt.preventDefault();
                                        } else {
                                            evt.stopPropagation();
                                        }
                                    }
                                }
                            }
                        }
                    }
                });
                if (has("dojo-bidi")) {
                    _e88.extend({
                        _setTitleAttr: function(_e8c) {
                            this.containerNode.title = (this.textDir && this.enforceTextDirWithUcc) ? this.enforceTextDirWithUcc(null, _e8c) : _e8c;
                            this._set("title", _e8c);
                        },
                        _setTextDirAttr: function(_e8d) {
                            if (!this._created || this.textDir != _e8d) {
                                this._set("textDir", _e8d);
                                if (this.textDir && this.title) {
                                    this.containerNode.title = this.enforceTextDirWithUcc(null, this.title);
                                }
                            }
                        }
                    });
                }
                return _e88;
            });
        },
        "ebg/core/sitecore": function() {
            define(["dojo", "dojo/_base/declare", "dojo/has", "ebg/core/core", "ebg/core/soundManager", "dijit/form/Select", "dijit/TooltipDialog", "dojox/dtl/filter/htmlstrings", "ebg/gamenotif", "ebg/chatinput"], function(dojo, _e8e) {
                return _e8e("ebg.core.sitecore", ebg.core.core, {
                    constructor: function() {
                        this.ajaxcall_running = 0;
                        g_sitecore = this;
                        this.notifqueue = new ebg.gamenotif();
                        this.active_menu_label = "";
                        this.next_headmsg_id = 1;
                        this.cometd_is_connected = false;
                        this.page_is_unloading = false;
                        this.cometd_first_connect = true;
                        this.cometd_subscriptions = {};
                        this.reportErrorTimeout = false;
                        this.next_log_id = 0;
                        this.chatbarWindows = {};
                        this.jstpl_chatwindow = "<div id=\"chatwindow_${id}\" class=\"chatwindow chatwindowtype_${type}\">\t\t\t\t\t\t<div id=\"chatwindowexpanded_${id}\" class=\"chatwindowexpanded\">                            <div class=\"dropshadow\"></div>                            <div id=\"chatbarinput_${id}\" class=\"chatbarinput\"></div>                            <div id=\"chatbarbelowinput_${id}\" class=\"chatbarbelowinput\"><div id=\"chatbarinput_stopnotif_${id}\" class=\"chatbarinput_stopnotif\"><input type=\"checkbox\" checked=\"checked\" id=\"chatbarinput_stopnotif_box_${id}\"></input> <span id=\"chatbarinput_stopnotif_label_${id}\">${stop_notif_label}</span></div><div id=\"chatbarinput_startaudiochat_${id}\" class=\"chatwindow_startaudiochat chatbarbelowinput_item audiovideo_inactive\"><i class=\"fa fa-microphone\"></i></div><div id=\"chatbarinput_startvideochat_${id}\" class=\"chatwindow_startvideochat chatbarbelowinput_item audiovideo_inactive\"><i class=\"fa fa-video-camera\"></i></div><div id=\"chatbarinput_predefined_${id}\" class=\"chatbarbelowinput_item\"><div class=\"chatbarinput_predefined icon20 icon20_meeple_wb\"></div></div><div id=\"chatbarinput_showcursor_${id}\" class=\"chatbarbelowinput_item chatbarbelowinput_item_showcursor\"><i class=\"fa fa-hand-pointer-o\"></i></div>\t\t\t\t\t\t\t</div>                            <div id=\"chatwindowlogs_${id}\" class=\"chatwindowlogs\">\t\t\t\t\t\t\t\t<div id=\"chatwindowlogstitlebar_${id}\" class=\"chatwindowlogstitlebar\">                                    <div class=\"chatwindowlogstitle\" id=\"chatwindowlogstitle_${id}\">                                        <span id=\"is_writing_now_title_${id}\"  class=\"is_writing_now\">                                            <i class=\"fa fa-pencil fa-blink\"></i>&nbsp;<span id=\"is_writing_now_expl_title_${id}\" class=\"is_writing_now_expl\"></span>                                        </span>                                        <span id=\"chatwindowlogstitle_content_${id}\">${title}</span>                                    </div>                                    <div id=\"chatwindowicon_${id}\" class=\"chatwindowicon\"><div class=\"avatarwrap emblemwrap\">${avatar}</div></div>                                    <div id=\"chatwindowcollapse_${id}\" class=\"chatwindowcollapse icon20 icon20_collapse_white\"></div>                                    <div id=\"chatwindowremove_${id}\" class=\"chatwindowremove icon20 icon20_remove_white\"></div>                                </div>                                <div id=\"chatwindowlogs_zone_${id}\" class=\"chatwindowlogs_zone\">                                    <div id=\"chatwindowlogs_endzone_${id}\" class=\"chatwindowlogs_endzone\"></div>                                </div>                                <div id=\"chatwindowmorelogs_${id}\" class=\"chatwindowmorelogs roundedbox\"><a id=\"chatwindowmorelogslink_${id}\" href=\"#\">${more_logs_label}</a></div>                            </div>                        </div>                        <div id=\"chatwindowpreview_${id}\" class=\"chatwindowpreview\"></div>                        <div id=\"chatwindowcollapsed_${id}\" class=\"chatwindowcollapsed\">                            <div class=\"chatwindowcollapsedtitle\">                                <span id=\"chatwindownewmsgcount_${id}\" class=\"chatwindownewmsgcount\"></span>                                <span id=\"is_writing_now_${id}\"  class=\"is_writing_now\">                                    <i class=\"fa fa-pencil fa-blink\"></i>&nbsp;<span id=\"is_writing_now_expl_${id}\" class=\"is_writing_now_expl\"></span>                                </span>                                <span id=\"chatwindowtitlenolink_${id}\">${titlenolink}</span></div>                            <div id=\"chatwindowremovc_${id}\" class=\"chatwindowremovec icon20 icon20_remove\"></div>                            <div class=\"chatwindowavatar\"><div class=\"avatarwrap emblemwrap emblemwrap_l\">${avatar}</div>                                <div id=\"chatMindownewmsgcount_${id}\" class=\"chatwindownewmsgcount chatMindownewmsgcount\"></div>                                <i class=\"bubblecaret fa fa-caret-up\"></i>                            </div>                        </div>                    </div>";
                        this.dockedChatInitialized = false;
                        this.groupToCometdSubs = {};
                        this.window_visibility = "visible";
                        this.premiumMsgAudioVideo = null;
                        this.badWordList = ["a-hole", "dumb", "fool", "imbecile", "loser", "nutcase", "dipstick", "lunatic", "weirdo", "dork", "dope", "dimwit", "half-wit", "oaf", "bimbo", "jerk", "numskull", "numbskull", "goof", "suck", "moron", "morons", "idiot", "idi0t", "dump", "rape", "rapist", "hitler", "4r5e", "5h1t", "5hit", "a55", "anal", "anus", "ar5e", "arrse", "arse", "ass", "ass-fucker", "asses", "assfucker", "assfukka", "asshole", "assholes", "asswhole", "a_s_s", "b!tch", "b00bs", "b17ch", "b1tch", "ballbag", "ballsack", "bastard", "beastial", "beastiality", "bellend", "bestial", "bestiality", "bi+ch", "biatch", "bitch", "bitcher", "bitchers", "bitches", "bitchin", "bitching", "blow job", "blowjob", "blowjobs", "boiolas", "bollock", "bollok", "boner", "boob", "boobs", "booobs", "boooobs", "booooobs", "booooooobs", "breasts", "buceta", "bugger", "bum", "bunny fucker", "butt", "butthole", "buttmuch", "buttplug", "c0ck", "c0cksucker", "carpet muncher", "cawk", "chink", "cipa", "cl1t", "clit", "clitoris", "clits", "cnut", "cock", "cock-sucker", "cockface", "cockhead", "cockmunch", "cockmuncher", "cocks", "cocksuck ", "cocksucked ", "cocksucker", "cocksucking", "cocksucks ", "cocksuka", "cocksukka", "cokmuncher", "coksucka", "coon", "cox", "crap", "cum", "cummer", "cumming", "cums", "cumshot", "cunilingus", "cunillingus", "cunnilingus", "cunt", "cuntlick ", "cuntlicker ", "cuntlicking ", "cunts", "cyalis", "cyberfuc", "cyberfuck ", "cyberfucked ", "cyberfucker", "cyberfuckers", "cyberfucking ", "d1ck", "damn", "dick", "dickhead", "dildo", "dildos", "dink", "dinks", "dirsa", "dlck", "dog-fucker", "doggin", "dogging", "donkeyribber", "doosh", "duche", "dyke", "ejaculate", "ejaculated", "ejaculates ", "ejaculating ", "ejaculatings", "ejaculation", "ejakulate", "f u c k", "f u c k e r", "f4nny", "fag", "fagging", "faggitt", "faggot", "faggs", "fagot", "fagots", "fags", "fanny", "fannyflaps", "fannyfucker", "fanyy", "fatass", "fcuk", "fcuker", "fcuking", "feck", "fecker", "felching", "fellate", "fellatio", "fingerfuck ", "fingerfucked ", "fingerfucker ", "fingerfuckers", "fingerfucking ", "fingerfucks ", "fistfuck", "fistfucked ", "fistfucker ", "fistfuckers ", "fistfucking ", "fistfuckings ", "fistfucks ", "flange", "fook", "fooker", "fucka", "fucked", "fucker", "fuckers", "fuckhead", "fuckheads", "fuckings", "fuckingshitmotherfucker", "fuckme ", "fucks", "fuckwhit", "fuckwit", "fudge packer", "fudgepacker", "fuk", "fuker", "fukker", "fukkin", "fuks", "fukwhit", "fukwit", "fux", "fux0r", "f_u_c_k", "gangbang", "gangbanged ", "gangbangs ", "gaylord", "gaysex", "goatse", "God", "god-dam", "god-damned", "goddamn", "goddamned", "hardcoresex ", "heshe", "hoar", "hoare", "hoer", "homo", "hore", "horniest", "horny", "hotsex", "jack-off ", "jackoff", "jap", "jerk-off ", "jism", "jiz ", "jizm ", "jizz", "kawk", "knob", "knobead", "knobed", "knobend", "knobhead", "knobjocky", "knobjokey", "kock", "kondum", "kondums", "kum", "kummer", "kumming", "kums", "kunilingus", "l3i+ch", "l3itch", "labia", "lmfao", "lust", "lusting", "m0f0", "m0fo", "m45terbate", "ma5terb8", "ma5terbate", "masochist", "master-bate", "masterb8", "masterbat*", "masterbat3", "masterbate", "masterbation", "masterbations", "masturbate", "mo-fo", "mof0", "mofo", "mothafuck", "mothafucka", "mothafuckas", "mothafuckaz", "mothafucked ", "mothafucker", "mothafuckers", "mothafuckin", "mothafucking ", "mothafuckings", "mothafucks", "mother fucker", "motherfuck", "motherfucked", "motherfucker", "motherfuckers", "motherfuckin", "motherfucking", "motherfuckings", "motherfuckka", "motherfucks", "muff", "mutha", "muthafecker", "muthafuckker", "muther", "mutherfucker", "n1gga", "n1gger", "nazi", "nigg3r", "nigg4h", "nigga", "niggah", "niggas", "niggaz", "nigger", "niggers ", "nob", "nob jokey", "nobhead", "nobjocky", "nobjokey", "numbnuts", "nutsack", "orgasim ", "orgasims ", "orgasm", "orgasms ", "p0rn", "pecker", "penis", "penisfucker", "phonesex", "phuck", "phuk", "phuked", "phuking", "phukked", "phukking", "phuks", "phuq", "pigfucker", "pimpis", "piss", "pissed", "pisser", "pissers", "pisses ", "pissflaps", "pissin ", "pissing", "pissoff ", "poop", "porn", "porno", "pornography", "pornos", "prick", "pricks ", "pron", "pube", "pusse", "pussi", "pussies", "pussy", "pussys ", "rectum", "retard", "retards", "rimjaw", "rimming", "s hit", "s.o.b.", "sadist", "schlong", "screwing", "scroat", "scrote", "scrotum", "semen", "sex", "sh!+", "sh!t", "sh1t", "shag", "shagger", "shaggin", "shagging", "shemale", "shi+", "shit", "shitdick", "shite", "shited", "shitey", "shitfuck", "shitfull", "shithead", "shiting", "shitings", "shits", "shitted", "shitter", "shitters ", "shitting", "shittings", "shitty ", "skank", "slut", "sluts", "smegma", "smut", "snatch", "son-of-a-bitch", "spac", "spunk", "s_h_i_t", "t1tt1e5", "t1tties", "teets", "teez", "testical", "testicle", "tit", "titfuck", "tits", "titt", "tittie5", "tittiefucker", "titties", "tittyfuck", "tittywank", "titwank", "tosser", "turd", "tw4t", "twat", "twathead", "twatty", "twunt", "twunter", "v14gra", "v1gra", "vulva", "w00se", "wang", "wank", "wanker", "wanky", "whoar", "whore", "willies", "willy", "xrated", "xxx", "enculé", "baiser", "nique", "niquer", "salope", "pute", "fuck", "f*ck", "f**k", "noob"];
                        this.tutorialHighlightedQueue = [];
                        this.browser_inactivity_time = 0;
                        this.bInactiveBrowser = false;
                        this.red_thumbs_given = {};
                        this.red_thumbs_taken = {};
                    },
                    init_core: function() {
                        this.premiumMsgAudioVideo = _("Premium feature: audio or video calls can be started by Premium players.") + "<br /><a href=\"/premium\">" + _("To be able to start a live chat with fellow players, go Premium!") + "</a><br />" + _("(browser compatibility: %s)").replace("%s", "Chrome, Firefox, Opera");
                        dojo.removeClass("ebd-body", "page_is_loading");
                        if ($("head_infomsg")) {
                            dojo.empty("head_infomsg");
                        }
                        this.takeIntoAccountAndroidIosRequestDesktopWebsite(document);
                        if (typeof mainsite != "undefined" && mainsite.dockedChat) {
                            if (typeof this.chatDetached == "undefined" || this.chatDetached.type === null) {
                                this.notifqueue.onPlaceLogOnChannel = dojo.hitch(this, "onPlaceLogOnChannel");
                                this.initChatDockedSystem();
                            }
                        }
                        if (typeof gameui != "undefined" && gameui.dockedChat) {
                            this.notifqueue.onPlaceLogOnChannel = dojo.hitch(this, "onPlaceLogOnChannel");
                            this.initChatDockedSystem();
                        }
                        this.isTouchDevice = (("ontouchstart"in window) || (navigator.msMaxTouchPoints > 0));
                        if (this.isTouchDevice) {
                            dojo.addClass("ebd-body", "touch-device");
                        } else {
                            dojo.addClass("ebd-body", "notouch-device");
                        }
                        this.predefinedTextMessages = {
                            "goodmove": "Sorry I have an emergency: I'm back in few seconds...",
                            "gm": "Good move!",
                            "think": "I would like to think a little, thank you",
                            "stillthinkin": "Yeah, still there, just thinking.",
                            "stillthere": "Hey, are you still there?",
                            "gg": "Good Game!",
                            "glhf": "Good luck, have fun!",
                        };
                        this.predefinedTextMessages_untranslated = {
                            "Sorry I have an emergency: I'm back in few seconds...": "goodmove",
                            "Good move!": "gm",
                            "Yeah, still there, just thinking.": "stillthinkin",
                            "Hey, are you still there?": "stillthere",
                            "I would like to think a little, thank you": "think",
                            "Good Game!": "gg",
                            "Good luck, have fun!": "glhf",
                        };
                        this.predefinedTextMessages_target_translation = {
                            "goodmove": __("lang_mainsite", "Sorry I have an emergency: I'm back in few seconds..."),
                            "gm": __("lang_mainsite", "Good move!"),
                            "think": __("lang_mainsite", "I would like to think a little, thank you"),
                            "stillthinkin": __("lang_mainsite", "Yeah, still there, just thinking."),
                            "stillthere": __("lang_mainsite", "Hey, are you still there?"),
                            "gg": __("lang_mainsite", "Good Game!"),
                            "glhf": __("lang_mainsite", "Good luck, have fun!"),
                            "test": __("lang_mainsite", "We detect an insult in your chat input.")
                        };
                        if ($("seemorelogs_btn")) {
                            dojo.connect($("seemorelogs_btn"), "onclick", this, "onSeeMoreLogs");
                        }
                        this.initMonitoringWindowVisibilityChange();
                        var _e8f = $("servicetime").innerHTML;
                        var now = new Date();
                        var _e90 = (60 * now.getHours()) + now.getMinutes();
                        this.timezoneDelta = Math.round((_e90 - _e8f) / 60);
                        if (this.timezoneDelta < 0) {
                            this.timezoneDelta += 24;
                        }
                        this.register_subs(dojo.subscribe("ackmsg", this, "onAckMsg"));
                        this.register_subs(dojo.subscribe("force_browser_reload", this, "onForceBrowserReload"));
                        this.register_subs(dojo.subscribe("debugPing", this, "onDebugPing"));
                        if (soundManager.bMuteSound == true) {
                            dojo.removeClass("toggleSound_icon", "fa-volume-up");
                            dojo.addClass("toggleSound_icon", "fa-volume-off");
                        }
                        dojo.connect($("toggleSound"), "onclick", this, "onToggleSound");
                        dojo.connect($("toggleSound"), "onmouseover", this, "onDisplaySoundControls");
                        dojo.connect($("toggleSound"), "onmouseout", this, "onHideSoundControls");
                        dojo.connect($("soundVolumeControl"), "onmouseup", this, "onSoundVolumeControl");
                        dojo.connect($("soundControls"), "onmouseover", this, "onStickSoundControls");
                        dojo.connect($("soundControls"), "onmouseout", this, "onUnstickSoundControls");
                        setTimeout(dojo.hitch(this, "traceLoadingPerformances"), 8000);
                        setInterval(dojo.hitch(this, "inactivityTimerIncrement"), 60000);
                        document.onmousemove = dojo.hitch(this, "resetInactivityTimer");
                        document.onkeypress = dojo.hitch(this, "resetInactivityTimer");
                    },
                    unload: function() {
                        this.page_is_unloading = true;
                    },
                    updateAjaxCallStatus: function() {
                        if ($("logoicon")) {
                            if (this.ajaxcall_running > 0) {
                                dojo.style("logoiconimg", "display", "none");
                                dojo.style("logoicon_inprogress", "display", "block");
                            } else {
                                dojo.style("logoiconimg", "display", "block");
                                dojo.style("logoicon_inprogress", "display", "none");
                            }
                        }
                    },
                    showMessage: function(msg, type) {
                        if (typeof globalUserInfos != "undefined") {
                            var _e91 = this.toReplaceForFemale[dojo.config.locale.substr(0, 2)];
                            var _e92 = this.replacementForFemale[dojo.config.locale.substr(0, 2)];
                            if (typeof _e91 != "undefined" && globalUserInfos.gender == 0) {
                                msg = msg.replace(new RegExp(_e91,"g"), _e92);
                            }
                            _e91 = this.toReplaceForMale[dojo.config.locale.substr(0, 2)];
                            _e92 = this.replacementForMale[dojo.config.locale.substr(0, 2)];
                            if (typeof _e91 != "undefined" && globalUserInfos.gender == 1) {
                                msg = msg.replace(new RegExp(_e91,"g"), _e92);
                            }
                            _e91 = this.toReplaceForNeutral[dojo.config.locale.substr(0, 2)];
                            _e92 = this.replacementForNeutral[dojo.config.locale.substr(0, 2)];
                            if (typeof _e91 != "undefined" && globalUserInfos.gender == null) {
                                msg = msg.replace(new RegExp(_e91,"g"), _e92);
                            }
                        }
                        if (type != "only_to_log") {
                            var _e93 = "head_infomsg_" + this.next_headmsg_id;
                            var _e94 = "<div class='head_" + type + "' id='" + _e93 + "' style='display:none;'><div class='head_infomsg_close' id='close_" + _e93 + "'><i class='fa fa-close' aria-hidden='true'></i></div><div class='head_infomsg_item'>" + msg + "</div></div>";
                            this.next_headmsg_id++;
                            dojo.place(_e94, "head_infomsg");
                            dojo.connect($("close_" + _e93), "onclick", this, function(evt) {
                                dojo.style(evt.currentTarget.parentElement.id, "display", "none");
                            });
                            dojo.fx.chain([dojo.fx.wipeIn({
                                node: _e93,
                                duration: 500
                            }), dojo.fx.wipeOut({
                                node: _e93,
                                delay: 5000,
                                duration: 500
                            })]).play();
                        }
                        if (type == "error" || type == "only_to_log") {
                            g_sitecore.notifqueue.addToLog(msg);
                        }
                    },
                    changeActiveMenuItem: function(_e95) {
                        var _e96;
                        if (_e95 == "preferences") {
                            _e95 = "welcome";
                        }
                        if (_e95 == "playernotif") {
                            _e95 = "welcome";
                        }
                        if (_e95 == "welcomestudio") {
                            _e95 = "welcome";
                        }
                        if (_e95 == "start") {
                            _e95 = "welcome";
                        }
                        if (_e95 == "legal") {
                            _e95 = "welcome";
                        }
                        if (_e95 == "message") {
                            _e95 = "welcome";
                        }
                        if (_e95 == "gameinprogress") {
                            _e95 = "welcome";
                        }
                        if (_e95 == "table") {
                            _e95 = "lobby";
                        }
                        if (_e95 == "lobby") {
                            _e95 = "gamelobby";
                        }
                        if (_e95 == "meetinglobby") {
                            _e95 = "gamelobby";
                        }
                        if (_e95 == "availableplayers") {
                            _e95 = "gamelobby";
                        }
                        if (_e95 == "createtable") {
                            _e95 = "gamelobby";
                        }
                        if (_e95 == "newtable") {
                            _e95 = "gamelobby";
                        }
                        if (_e95 == "gamereview") {
                            _e95 = "gamelobby";
                        }
                        if (_e95 == "gamelobby") {
                            _e95 = "gamelobby";
                        }
                        if (_e95 == "gamelobbyauto") {
                            _e95 = "gamelobby";
                        }
                        if (_e95 == "tournament") {
                            _e95 = "gamelobby";
                        }
                        if (_e95 == "newtournament") {
                            _e95 = "gamelobby";
                        }
                        if (_e95 == "tournamentlist") {
                            _e95 = "gamelobby";
                        }
                        if (_e95 == "gamepanel") {
                            _e95 = "gamelist";
                        }
                        if (_e95 == "player") {
                            _e95 = "community";
                        }
                        if (_e95 == "playerstat") {
                            _e95 = "community";
                        }
                        if (_e95 == "group") {
                            _e95 = "community";
                        }
                        if (_e95 == "newgroup") {
                            _e95 = "community";
                        }
                        if (_e95 == "community") {
                            _e95 = "community";
                        }
                        if (_e95 == "report") {
                            _e95 = "community";
                        }
                        if (_e95 == "newreport") {
                            _e95 = "community";
                        }
                        if (_e95 == "moderated") {
                            _e95 = "community";
                        }
                        if (_e95 == "translation") {
                            _e95 = "community";
                        }
                        if (_e95 == "translationhq") {
                            _e95 = "community";
                        }
                        if (_e95 == "map") {
                            _e95 = "community";
                        }
                        if (_e95 == "grouplist") {
                            _e95 = "community";
                        }
                        if (_e95 == "contribute") {
                            _e95 = "community";
                        }
                        if (_e95 == "sponsorship") {
                            _e95 = "community";
                        }
                        if (_e95 == "moderator") {
                            _e95 = "community";
                        }
                        if (_e95 == "bug" || _e95 == "bugs") {
                            _e95 = "community";
                        }
                        if (_e95 == "faq") {
                            _e95 = "community";
                        }
                        if (_e95 == "gamepublishers") {
                            _e95 = "community";
                        }
                        if (_e95 == "team") {
                            _e95 = "community";
                        }
                        if (_e95 == "troubleshootmainsite") {
                            _e95 = "community";
                        }
                        if (_e95 == "sandbox") {
                            _e95 = "community";
                        }
                        if (_e95 == "club") {
                            _e95 = "premium";
                        }
                        if (_e95 == "premium") {
                            _e95 = "premium";
                        }
                        if (_e95 == "contact") {
                            _e95 = "community";
                        }
                        if (_e95 == "shop") {
                            _e95 = "shop";
                        }
                        if (_e95 == "shopsupport") {
                            _e95 = "shopsupport";
                        }
                        if (_e95 == "prestige") {
                            _e95 = "competition";
                        }
                        if (_e95 == "gameranking") {
                            _e95 = "competition";
                        }
                        if (_e95 == "award") {
                            _e95 = "competition";
                        }
                        if (_e95 == "gamestats") {
                            _e95 = "competition";
                        }
                        if (_e95 == "page") {
                            _e95 = "doc";
                        }
                        if (_e95 == "news") {
                            _e95 = "headlines";
                        }
                        if (_e95 == "event") {
                            _e95 = "events";
                        }
                        if (_e95 == "eventnew") {
                            _e95 = "events";
                        }
                        if (_e95 == "eventmodify") {
                            _e95 = "events";
                        }
                        if (_e95 == "controlpanel") {
                            _e95 = "controlpanel";
                        }
                        if (_e95 == "linkmoderation") {
                            _e95 = "controlpanel";
                        }
                        if (_e95 == "moderation") {
                            _e95 = "controlpanel";
                        }
                        if (_e95 == "studio") {
                            _e95 = "controlpanel";
                        }
                        if (_e95 == "studiogame") {
                            _e95 = "controlpanel";
                        }
                        if (_e95 == "administration") {
                            _e95 = "controlpanel";
                        }
                        if (_e95 == "banners") {
                            _e95 = "controlpanel";
                        }
                        if (_e95 == "projects") {
                            _e95 = "projects";
                        }
                        if (_e95 == "startwannaplay") {
                            _e95 = "welcome";
                        }
                        if (_e95 == "startsteps") {
                            _e95 = "welcome";
                        }
                        if (this.active_menu_label != "") {
                            _e96 = $("navbutton_" + this.active_menu_label);
                            if (_e96) {
                                dojo.removeClass("navbutton_" + this.active_menu_label, "navigation-button-active");
                            }
                        }
                        this.active_menu_label = _e95;
                        if (_e95 != "") {
                            _e96 = $("navbutton_" + _e95);
                            if (_e96) {
                                dojo.addClass("navbutton_" + _e95, "navigation-button-active");
                            }
                        }
                    },
                    subscribeCometdChannel: function(_e97, _e98, _e99) {
                        if (this.cometd_service == "socketio") {
                            if (typeof this.cometd_subscriptions[_e97] == "undefined") {
                                this.io.emit("join", _e97);
                                this.cometd_subscriptions[_e97] = 1;
                            } else {
                                this.cometd_subscriptions[_e97]++;
                            }
                            return _e97;
                        }
                    },
                    subscribeCometdChannels: function(_e9a, _e9b, _e9c) {
                        var _e9d = {};
                        if (this.cometd_service == "socketio") {
                            var _e9e = [];
                            for (var i in _e9a) {
                                var _e9f = _e9a[i];
                                if (typeof this.cometd_subscriptions[_e9f] == "undefined") {
                                    _e9e.push(_e9f);
                                    this.cometd_subscriptions[_e9f] = 1;
                                } else {
                                    this.cometd_subscriptions[_e9f]++;
                                }
                            }
                            if (_e9e.length > 0) {
                                this.io.emit("join", _e9e);
                            }
                            _e9d = _e9a;
                        }
                        return _e9d;
                    },
                    unsubscribeCometdChannel: function(id) {
                        if (typeof this.cometd_subscriptions[id] != "undefined") {
                            this.cometd_subscriptions[id]--;
                            if (this.cometd_subscriptions[id] == 0) {
                                this.io.emit("leave", id);
                                delete this.cometd_subscriptions[id];
                            } else {}
                        }
                    },
                    reconnectAllSubscriptions: function() {
                        var _ea0 = [];
                        for (var id in this.cometd_subscriptions) {
                            _ea0.push(id);
                        }
                        if (_ea0.length > 0) {
                            this.io.emit("join", _ea0);
                        }
                    },
                    onSocketIoConnectionStatusChanged: function(_ea1, arg) {
                        if (this.page_is_unloading) {
                            dojo.style("connect_status", "display", "none");
                        } else {
                            if (_ea1 == "connect") {
                                dojo.style("connect_status", "display", "none");
                                this.cometd_is_connected = true;
                            } else {
                                if (_ea1 == "connect_error") {
                                    dojo.style("connect_status", "display", "block");
                                    this.cometd_is_connected = false;
                                    $("connect_status_text").innerHTML = __("lang_mainsite", "Disconnected from game server !");
                                    console.error("Disconnected from game server : " + arg);
                                    g_sitecore.notifqueue.addToLog($("connect_status_text").innerHTML);
                                } else {
                                    if (_ea1 == "connect_timeout") {
                                        dojo.style("connect_status", "display", "block");
                                        this.cometd_is_connected = false;
                                        $("connect_status_text").innerHTML = __("lang_mainsite", "Disconnected from game server !");
                                        $("connect_status_text").innerHTML += " (timeout)";
                                        g_sitecore.notifqueue.addToLog($("connect_status_text").innerHTML);
                                    } else {
                                        if (_ea1 == "reconnect") {
                                            dojo.style("connect_status", "display", "none");
                                            this.cometd_is_connected = true;
                                            g_sitecore.notifqueue.addToLog(__("lang_mainsite", "You are connected again."));
                                            this.reconnectAllSubscriptions();
                                        } else {
                                            if (_ea1 == "reconnect_error") {
                                                dojo.style("connect_status", "display", "block");
                                                this.cometd_is_connected = false;
                                                $("connect_status_text").innerHTML = __("lang_mainsite", "Disconnected from game server !");
                                                console.error("Disconnected from game server : " + arg);
                                                g_sitecore.notifqueue.addToLog($("connect_status_text").innerHTML);
                                            } else {
                                                if (_ea1 == "reconnect_failed") {
                                                    dojo.style("connect_status", "display", "block");
                                                    this.cometd_is_connected = false;
                                                    $("connect_status_text").innerHTML = __("lang_mainsite", "Disconnected from game server !");
                                                    $("connect_status_text").innerHTML += " (reconnect failed)";
                                                    g_sitecore.notifqueue.addToLog($("connect_status_text").innerHTML);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    onFirstConnectedToComet: function() {},
                    leaveTable: function(_ea2, _ea3) {
                        this.ajaxcall("/table/table/quitgame.html", {
                            table: _ea2,
                            neutralized: true,
                            s: "table_quitgame"
                        }, this, function(_ea4) {
                            _ea3();
                        }, function(_ea5, _ea6, _ea7) {
                            if (_ea5) {
                                if (_ea7 == 803 || _ea7 == 804) {
                                    var _ea8 = new ebg.popindialog();
                                    _ea8.create("quitConfirmContent");
                                    _ea8.setTitle(_("Quit game in progress"));
                                    _ea8.tableModule = this;
                                    var html = "<div id=\"quitConfirmContent\">";
                                    if (_ea7 == 803) {
                                        html += _("You are about to quit a game in progress.") + "<br/>";
                                        html += _("This will cost you some <img src='theme/img/common/rank.png' class='imgtext'/> for this game, and 1 <div class='icon20 icon20_penaltyleave'></div> for your reputation.<br/><br/>");
                                        html += _("Note 1: If you are forced to quit the game because some opponent is not playing, you should fire him from the game instead of quit the game.") + "<br/>";
                                        html += _("Note 2: You also have the possibility to quit the game collectively without loosing any rank point or reputation.") + "<br/><br/>";
                                    } else {
                                        html += _("You are about to quit a Training game in progress.") + "<br/>";
                                        html += _("Because this is a Training game, this will have no consequence (no penalty whatsoever).");
                                    }
                                    html += "<p><a class='bgabutton bgabutton_blue' id='quitgame_cancel' href='#'>" + _("Cancel") + "</a>&nbsp;&nbsp;&nbsp;<a class='bgabutton bgabutton_gray' id='quitgame_confirm' href='#'>" + _("Leave game") + "</a></p>";
                                    html += "</div>";
                                    _ea8.setContent(html);
                                    _ea8.show();
                                    dojo.connect($("quitgame_cancel"), "onclick", dojo.hitch(_ea8, function(evt) {
                                        evt.preventDefault();
                                        this.destroy();
                                    }));
                                    dojo.connect($("quitgame_confirm"), "onclick", dojo.hitch(_ea8, function(evt) {
                                        evt.preventDefault();
                                        this.destroy();
                                        this.tableModule.ajaxcall("/table/table/quitgame.html", {
                                            table: _ea2,
                                            s: "table_quitdlg"
                                        }, this, function(_ea9) {
                                            _ea3();
                                        });
                                    }));
                                }
                            }
                        });
                    },
                    onSeeMoreLogs: function(evt) {
                        evt.preventDefault();
                        var _eaa = toint(dojo.style($("logs"), "maxHeight"));
                        var _eab = _eaa + 600;
                        dojo.style($("logs"), "maxHeight", _eab + "px");
                        dojo.style($("seemorelogs"), "top", (_eab - 24) + "px");
                        this.onIncreaseContentHeight(600);
                    },
                    onIncreaseContentHeight: function() {},
                    onScriptError: function(msg, url, _eac) {
                        if (this.page_is_unloading) {
                            return;
                        }
                        console.error(msg);
                        console.error("url=" + url);
                        console.error("line=" + _eac);
                        if (typeof this.setLoader == "function") {
                            this.setLoader(100, 100);
                        }
                        if (this.reportJsError === false) {
                            return;
                        }
                        if (url.search("telwa/cometd?") != -1) {
                            return;
                        }
                        if (url.search("cloudfront.net") != -1) {
                            return;
                        }
                        var log = msg + "\nScript: " + url + "\nUrl: " + window.location + "\n";
                        if ($("bga_release_id")) {
                            log += "BGA version " + $("bga_release_id").innerHTML + "\n";
                        }
                        log += this.getScriptErrorModuleInfos() + "\n";
                        log += navigator.userAgent + "\n";
                        if (this.reportJsError == "show") {
                            var _ead = this.nl2br(log, false);
                            this.showMessage("Javascript error:<br/>" + _ead, "error");
                        }
                        if (this.reportErrorTimeout) {
                            return;
                        }
                        this.reportErrorTimeout = true;
                        setTimeout(dojo.hitch(this, function() {
                            this.reportErrorTimeout = false;
                        }), 60000);
                        this.ajaxcall("/web/scripterror", {
                            log: log
                        }, this, function(_eae) {});
                    },
                    initChatDockedSystem: function() {
                        var args = {
                            id: "stacked",
                            type: "stacked",
                            title: "<div class=\"icon20 icon20_speak\"></div>",
                            titlenolink: "<span style=\"font-size:120%\">+</span>",
                            avatar: "<i class=\"fa fa-ellipsis-h\" aria-hidden=\"true\"></i>",
                            more_logs_label: _("Scroll down to see new messages"),
                            stop_notif_label: _("Notify chat messages")
                        };
                        dojo.place(this.format_string(this.jstpl_chatwindow, args), "chatbarstackedmenu", "first");
                        dojo.place("<div id=\"stackedmenu\"></div>", "chatwindowcollapsed_stacked");
                        dojo.connect($("chatwindowcollapsed_stacked"), "onclick", this, "onToggleStackMenu");
                        this.adaptChatbarDock();
                        dojo.connect(window, "onresize", this, dojo.hitch(this, function(evt) {
                            this.stackOrUnstackIfNeeded();
                        }));
                        this.dockedChatInitialized = true;
                    },
                    extractChannelInfosFromNotif: function(_eaf) {
                        var _eb0 = _eaf.channelorig;
                        var _eb1 = dojo.hasClass("ebd-body", "mobile_version");
                        if (_eb0.substr(0, 8) == "/table/t") {
                            var _eb2 = _eb0.substr(8);
                            var _eb3 = "";
                            if (typeof _eaf.gamenameorig != "undefined") {
                                var _eb4 = this.getGameNameDisplayed(_eaf.gamenameorig) + " #" + _eb2;
                                _eb3 = _eaf.gamenameorig;
                            } else {
                                if (typeof _eaf.args.game_name_ori != "undefined") {
                                    var _eb4 = this.getGameNameDisplayed(_eaf.args.game_name_ori) + " #" + _eb2;
                                    _eb3 = _eaf.args.game_name_ori;
                                } else {
                                    if (typeof _eaf.args.game_name != "undefined") {
                                        var _eb4 = this.getGameNameDisplayed(_eaf.args.game_name) + " #" + _eb2;
                                        _eb3 = _eaf.args.game_name;
                                    } else {
                                        var _eb4 = "Table #" + _eb2;
                                    }
                                }
                            }
                            var _eb5 = (_eaf.type == "chat" || _eaf.type == "groupchat" || _eaf.type == "chatmessage" || _eaf.type == "tablechat" || _eaf.type == "privatechat" || _eaf.type == "startWriting" || _eaf.type == "stopWriting" || _eaf.type == "newRTCMode");
                            if (!_eb5 && typeof gameui != "undefined") {
                                return {
                                    type: "tablelog",
                                    id: _eb2,
                                    game_name: _eb3,
                                    label: _("Game log"),
                                    url: "#",
                                    channel: _eb0,
                                    window_id: "tablelog_" + _eb2,
                                    subscription: true,
                                    notifymethod: "title",
                                    start: "collapsed"
                                };
                            } else {
                                return {
                                    type: "table",
                                    id: _eb2,
                                    game_name: _eb3,
                                    label: _eb4,
                                    url: "/table?table=" + _eb2,
                                    channel: _eb0,
                                    window_id: "table_" + _eb2,
                                    subscription: true,
                                    start: "collapsed"
                                };
                            }
                        } else {
                            if (_eb0.substr(0, 8) == "/group/g") {
                                var _eb6 = _eb0.substr(8);
                                return {
                                    type: "group",
                                    id: _eb6,
                                    label: ((typeof _eaf.args.group_name == "undefined") ? "" : _eaf.args.group_name),
                                    url: ((typeof _eaf.args.seemore == "undefined") ? "" : "/" + _eaf.args.seemore),
                                    channel: "/group/g" + _eb6,
                                    window_id: "group_" + _eb6,
                                    start: "collapsed"
                                };
                            } else {
                                if (_eb0.substr(0, 13) == "/chat/general") {
                                    return {
                                        type: "general",
                                        id: 0,
                                        label: _("General messages"),
                                        url: null,
                                        channel: "/chat/general",
                                        window_id: "general",
                                        start: "collapsed"
                                    };
                                } else {
                                    if (_eb0.substr(0, 9) == "/player/p") {
                                        if (_eaf.type == "privatechat" || _eaf.type == "startWriting" || _eaf.type == "stopWriting" || _eaf.type == "newRTCMode") {
                                            if (typeof current_player_id != "undefined") {
                                                if (current_player_id == _eaf.args.player_id) {
                                                    var _eb7 = _eaf.args.target_id;
                                                    var _eb8 = _eaf.args.target_name;
                                                    var _eb9 = _eaf.args.target_avatar;
                                                } else {
                                                    var _eb7 = _eaf.args.player_id;
                                                    var _eb8 = _eaf.args.player_name;
                                                    var _eb9 = _eaf.args.avatar;
                                                }
                                            } else {
                                                if (this.player_id) {
                                                    if (this.player_id == _eaf.args.player_id) {
                                                        var _eb7 = _eaf.args.target_id;
                                                        var _eb8 = _eaf.args.target_name;
                                                        var _eb9 = _eaf.args.target_avatar;
                                                    } else {
                                                        var _eb7 = _eaf.args.player_id;
                                                        var _eb8 = _eaf.args.player_name;
                                                        var _eb9 = _eaf.args.avatar;
                                                    }
                                                } else {
                                                    var _eb7 = _eaf.args.player_id;
                                                    var _eb8 = _eaf.args.player_name;
                                                    var _eb9 = _eaf.args.avatar;
                                                }
                                            }
                                            return {
                                                type: "privatechat",
                                                id: _eb7,
                                                label: _eb8,
                                                avatar: _eb9,
                                                url: "/player?id=" + _eb7,
                                                channel: "/player/p" + _eb7,
                                                window_id: "privatechat_" + _eb7,
                                                subscription: false,
                                                start: "collapsed"
                                            };
                                        } else {
                                            if (typeof _eaf.gamenameorig != "undefined" && typeof gameui != "undefined") {
                                                var _eb2 = gameui.table_id;
                                                return {
                                                    type: "tablelog",
                                                    id: _eb2,
                                                    label: _("Game log"),
                                                    url: "#",
                                                    channel: "/table/t" + _eb2,
                                                    window_id: "tablelog_" + _eb2,
                                                    subscription: true,
                                                    notifymethod: "title",
                                                    start: "collapsed"
                                                };
                                            }
                                        }
                                    } else {
                                        if (_eb0.substr(0, 18) == "/general/emergency") {
                                            return {
                                                type: "emergency",
                                                id: 0,
                                                label: __("lang_mainsite", "Important notice"),
                                                url: null,
                                                channel: "/general/emergency",
                                                window_id: "emergency",
                                                start: _eb1 ? "collapsed" : "expanded"
                                            };
                                        }
                                    }
                                }
                            }
                        }
                        if (_eaf.type == "startWriting" || _eaf.type == "stopWriting") {
                            return null;
                        }
                        return {
                            type: "general",
                            id: 0,
                            label: _("General messages"),
                            url: null,
                            channel: "/chat/general",
                            window_id: "general",
                            start: "collapsed"
                        };
                    },
                    getChatInputArgs: function(_eba) {
                        if (_eba.type == "table") {
                            var _ebb = "";
                            if (typeof _eba.game_name != "undefined") {
                                _ebb = "<img src=\"" + g_themeurl + "games/" + _eba.game_name + "/current/img/game_icon.png" + "\" alt=\"\" class=\"game_icon emblem\" />";
                            }
                            var _ebc = "/table/table/say.html";
                            var _ebd = "";
                            if (typeof gameui != "undefined" && typeof gameui.debug_from_chat != "undefined" && gameui.debug_from_chat && typeof _eba.game_name != "undefined") {
                                _ebd = "/" + _eba.game_name + "/" + _eba.game_name + "/say.html";
                            }
                            if (typeof gameui != "undefined" && typeof gameui.chat_on_gs_side != "undefined" && gameui.chat_on_gs_side && typeof _eba.game_name != "undefined") {
                                _ebd = "/" + _eba.game_name + "/" + _eba.game_name + "/say.html";
                            }
                            return {
                                type: "table",
                                id: _eba.id,
                                action: _ebc,
                                doubleaction: _ebd,
                                label: _("Discuss at this table"),
                                param: {
                                    table: _eba.id
                                },
                                channel: "/table/t" + _eba.id,
                                avatar: _ebb
                            };
                        } else {
                            if (_eba.type == "tablelog") {
                                return null;
                            } else {
                                if (_eba.type == "general") {
                                    return {
                                        type: "global",
                                        id: 0,
                                        action: "/chat/chat/say.html",
                                        label: __("lang_mainsite", "Discuss with everyone"),
                                        param: {},
                                        channel: null,
                                        avatar: "<i class=\"fa fa-comments\" aria-hidden=\"true\"></i>"
                                    };
                                } else {
                                    if (_eba.type == "privatechat") {
                                        var _ebe = id_to_path(_eba.id);
                                        return {
                                            type: "player",
                                            id: _eba.id,
                                            action: "/table/table/say_private.html",
                                            label: _("Discuss with") + " " + _eba.label,
                                            param: {
                                                to: _eba.id
                                            },
                                            channel: "/player/p" + _eba.id,
                                            avatar: "<img src=\"" + g_themeurl + "../../data/avatar/" + _ebe + "/" + _eba.id + "_50.jpg?h=" + _eba.avatar + "" + "\" alt=\"\" class=\"emblem\" />"
                                        };
                                    } else {
                                        if (_eba.type == "emergency") {
                                            return null;
                                        } else {
                                            if (_eba.type == "group") {
                                                var _ebe = Math.floor(_eba.id / 1000);
                                                return {
                                                    type: "group",
                                                    id: _eba.id,
                                                    action: "/group/group/say.html",
                                                    label: _("Discuss with the group"),
                                                    param: {
                                                        to: _eba.id
                                                    },
                                                    channel: "/group/g" + _eba.id,
                                                    avatar: "<img src=\"" + g_themeurl + "../../data/grouparms/" + _ebe + "/group_" + _eba.id + ".png?h=000000" + "\" alt=\"\" class=\"emblem\" />"
                                                };
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        return null;
                    },
                    onPlaceLogOnChannel: function(_ebf) {
                        if (!this.dockedChatInitialized) {
                            return false;
                        }
                        var _ec0 = this.extractChannelInfosFromNotif(_ebf);
                        if (_ec0 === null) {
                            return true;
                        }
                        var _ec1 = _ec0.window_id;
                        var _ec2 = dojo.hasClass("ebd-body", "mobile_version");
                        var _ec3 = true;
                        if (this.notifqueue.game !== null) {
                            if (_ec0.type == "playtable" || _ec0.type == "table" || _ec0.type == "tablelog") {} else {
                                if (_ebf.type == "privatechat" || _ebf.type == "newRTCMode" || _ebf.type == "startWriting" || _ec0.type == "emergency") {} else {
                                    return false;
                                }
                            }
                        }
                        var _ec4 = (this.notifqueue.game !== null);
                        var _ec5 = (_ebf.type == "history_history");
                        var _ec6 = (_ebf.type == "chat" || _ebf.type == "groupchat" || _ebf.type == "chatmessage" || _ebf.type == "tablechat" || _ebf.type == "privatechat" || _ebf.type == "stopWriting" || _ebf.type == "startWriting");
                        var _ec7 = false;
                        var _ec8 = false;
                        if (_ec6 && typeof _ebf.args.text != "undefined" && _ebf.args.text === null) {
                            _ebf.log = "~ " + __("lang_mainsite", "${player_name} left the chat") + " ~";
                            _ec7 = true;
                            _ec8 = true;
                        }
                        var _ec9 = true;
                        if (_ebf.type == "history_history" || typeof _ebf.loadprevious != "undefined") {
                            _ec9 = false;
                            if (typeof _ebf.loadprevious != "undefined" && _ebf.loadprevious) {
                                if (_ec6 && typeof _ebf.args.is_new != "undefined" && _ebf.args.is_new == 1) {
                                    _ec9 = true;
                                    _ebf.args.mread = null;
                                }
                            }
                        }
                        if (typeof _ebf.donotpreview != "undefined") {
                            _ec9 = false;
                        }
                        if (_ebf.type == "chat" && _ebf.channelorig == "/chat/general") {
                            if (typeof mainsite != "undefined") {
                                if (mainsite.notifyOnGeneralChat == 0) {
                                    _ec9 = false;
                                }
                            }
                        }
                        if (_ec4) {
                            if (!_ec6) {
                                _ec3 = false;
                            }
                        }
                        if (_ec6 && _ebf.type == "chatmessage" && typeof _ebf.args.message != "undefined" && typeof _ebf.gamenameorig != "undefined" && typeof _ebf.args.message.log == "undefined") {
                            if (_ebf.gamenameorig == "werewolves" && _ebf.args.message.indexOf("$$$") != -1) {
                                return true;
                            }
                        }
                        if (typeof this.chatbarWindows[_ec1] != "undefined") {
                            if (_ebf.type == "startWriting") {
                                if (typeof (this.chatbarWindows[_ec1].is_writing_now[_ebf.args.player_name]) != "undefined") {
                                    clearTimeout(this.chatbarWindows[_ec1].is_writing_now[_ebf.args.player_name]);
                                } else {}
                                this.chatbarWindows[_ec1].is_writing_now[_ebf.args.player_name] = setTimeout(dojo.hitch(this, function() {
                                    if (typeof this.chatbarWindows[_ec1] != "undefined") {
                                        delete this.chatbarWindows[_ec1].is_writing_now[_ebf.args.player_name];
                                        this.onUpdateIsWritingStatus(_ec1);
                                    }
                                }), 8000);
                                this.onUpdateIsWritingStatus(_ec1);
                                return true;
                            }
                            if (_ec6 && typeof _ebf.args.player_id != "undefined") {
                                if (typeof (this.chatbarWindows[_ec1].is_writing_now[_ebf.args.player_name] != "undefined")) {
                                    clearTimeout(this.chatbarWindows[_ec1].is_writing_now[_ebf.args.player_name]);
                                    delete this.chatbarWindows[_ec1].is_writing_now[_ebf.args.player_name];
                                    this.onUpdateIsWritingStatus(_ec1);
                                }
                            }
                        } else {
                            if (_ebf.type == "startWriting" || _ebf.type == "stopWriting") {
                                return true;
                            }
                        }
                        var _eca = this.next_log_id;
                        this.next_log_id++;
                        var _ecb = false;
                        if (typeof _ec0.subscription != "undefined" && _ec0.subscription && _ec0.subscription) {
                            _ecb = true;
                        }
                        if (typeof this.chatbarWindows[_ec0.window_id] == "undefined") {
                            if (_ec7) {
                                return true;
                            }
                        }
                        var _ecc = this.createChatBarWindow(_ec0, _ecb);
                        if (_ebf.type == "newRTCMode" && typeof _ebf.args.table_id != "undefined") {
                            if (_ebf.args.rtc_mode > 0 && this.room !== null && this.room.indexOf("P") >= 0) {
                                var html = "<div  class=\"rtc_dialog\">" + "<br />";
                                html += "<div style=\"text-align: center; border-bottom: 1px solid black; border-top: 1px solid black; padding: 5px 5px 5px 5px;\"><i>" + (this.mediaConstraints.video !== false ? _("A Premium user has set up a video chat session for this table!") : _("A Premium user has set up an audio chat session for this table!")) + "</i></div>" + "<br /><br />";
                                html += "<div style=\"text-align: center; font-weight: bold;\">" + _("But you are already taking part in another live chat session!") + "<br /><br /> " + _("Do you want to join the call?") + " (" + _("you will be disconnected from your current live chat session to join the new one") + ")</div><br /><br />";
                                html += "</div>";
                                this.confirmationDialog(html, dojo.hitch(this, function() {
                                    var _ecd = this.room.substr(1).split("_");
                                    var _ece = _ecd[0] == _ecf ? _ecd[1] : _ecd[0];
                                    if (this.mediaConstraints.video) {
                                        this.ajaxcall("/table/table/startStopVideo.html", {
                                            target_table: null,
                                            target_player: _ece
                                        }, this, dojo.hitch(this, function(_ed0) {
                                            this.already_accepted_room = "T" + _ebf.args.table_id;
                                            this.setNewRTCMode(_ebf.args.table_id, null, _ebf.args.rtc_mode, _ebf.args.room_creator);
                                        }));
                                    } else {
                                        if (this.mediaConstraints.audio) {
                                            this.ajaxcall("/table/table/startStopAudio.html", {
                                                target_table: null,
                                                target_player: _ece
                                            }, this, dojo.hitch(this, function(_ed1) {
                                                this.already_accepted_room = "T" + _ebf.args.table_id;
                                                this.setNewRTCMode(_ebf.args.table_id, null, _ebf.args.rtc_mode, _ebf.args.room_creator);
                                            }));
                                        }
                                    }
                                }), dojo.hitch(this, function() {}));
                            } else {
                                if (this.room === null || this.room.indexOf("T") >= 0) {
                                    this.setNewRTCMode(_ebf.args.table_id, null, _ebf.args.rtc_mode, _ebf.args.room_creator);
                                }
                            }
                        }
                        if (_ebf.type == "newRTCMode" && typeof _ebf.args.player_id != "undefined") {
                            if (_ebf.args.rtc_mode > 0 && this.room !== null && this.room.indexOf("T") >= 0) {
                                var html = "<div  class=\"rtc_dialog\">" + "<br />";
                                html += "<div style=\"text-align: center; border-bottom: 1px solid black; border-top: 1px solid black; padding: 5px 5px 5px 5px;\"><i>" + (this.mediaConstraints.video !== false ? _("A Premium user has set up a video chat session with you!") : _("A Premium user has set up an audio chat session with you!")) + "</i></div>" + "<br /><br />";
                                html += "<div style=\"text-align: center; font-weight: bold;\">" + _("But you are already taking part in another live chat session!") + "<br /><br /> " + _("Do you want to join the call?") + " (" + _("you will be disconnected from your current live chat session to join the new one") + ")</div><br /><br />";
                                html += "</div>";
                                this.confirmationDialog(html, dojo.hitch(this, function() {
                                    var _ed2 = this.room.substr(1);
                                    this.doLeaveRoom(dojo.hitch(this, function() {
                                        this.already_accepted_room = "P" + Math.min(_ebf.args.player_id, _ebf.args.target_id) + "_" + Math.max(_ebf.args.player_id, _ebf.args.target_id);
                                        this.expandChatWindow(_ec0.window_id);
                                        this.setNewRTCMode(null, _ebf.args.target_id, _ebf.args.rtc_mode, _ebf.args.room_creator);
                                    }));
                                }), dojo.hitch(this, function() {
                                    if (this.mediaConstraints.video) {
                                        this.ajaxcall("/table/table/startStopVideo.html", {
                                            target_table: null,
                                            target_player: _ebf.args.target_id
                                        }, this, function(_ed3) {});
                                    } else {
                                        if (this.mediaConstraints.audio) {
                                            this.ajaxcall("/table/table/startStopAudio.html", {
                                                target_table: null,
                                                target_player: _ebf.args.target_id
                                            }, this, function(_ed4) {});
                                        }
                                    }
                                }));
                            } else {
                                if (this.room === null || this.room.indexOf("P") >= 0) {
                                    this.expandChatWindow(_ec0.window_id);
                                    this.setNewRTCMode(null, _ebf.args.target_id, _ebf.args.rtc_mode, _ebf.args.room_creator);
                                }
                            }
                        }
                        if (_ecc) {
                            if (_ebf.type == "groupchat" && typeof _ebf.args.gamesession != "undefined" && _ebf.args.gamesessionadmin != this.getCurrentPlayerId()) {
                                var msg = dojo.clone(_ebf);
                                msg.log = "<p style=\"text-align:center\"><a id=\"quit_playingsession_" + _ebf.args.group_id + "\" href=\"#\" class=\"bgabutton bgabutton_gray\">" + __("lang_mainsite", "Quit this playing session") + "</a></p>";
                                msg.donotpreview = true;
                                this.onPlaceLogOnChannel(msg);
                                dojo.connect($("quit_playingsession_" + _ebf.args.group_id), "onclick", this, dojo.hitch(this, function(evt) {
                                    dojo.stopEvent(evt);
                                    var _ed5 = evt.currentTarget.id.substr(20);
                                    this.ajaxcall("/community/community/quitGroup.html", {
                                        id: _ed5
                                    }, this, function() {}, function(_ed6) {});
                                    this.closeChatWindow("group_" + _ed5);
                                }));
                            }
                        }
                        var _ed7 = _ebf.args.logaction;
                        if (_ec6 && typeof _ebf.args.text != "undefined" && typeof this.predefinedTextMessages_untranslated[_ebf.args.text] != "undefined") {
                            _ebf.args.text = __("lang_mainsite", _ebf.args.text);
                            _ec8 = true;
                        }
                        if (_ec6 && typeof _ebf.args.text != "undefined" && _ebf.args.text != null) {
                            _ebf.args.text = this.makeClickableLinks(_ebf.args.text, false);
                        } else {
                            if (_ec6 && typeof _ebf.args.message != "undefined" && typeof _ebf.args.message.log == "undefined") {
                                _ebf.args.message = this.makeClickableLinks(_ebf.args.message, false);
                            }
                        }
                        var html = this.notifqueue.formatLog(_ebf.log, _ebf.args);
                        var _ed8 = "";
                        var _ed9 = "";
                        if (this.notifqueue.game == null) {
                            if (_ed7) {
                                var _eda = this.notifqueue.formatLog(_ed7.log, _ed7.args);
                                _ed8 = ("<div class=\"logaction\"><a href=\"#\" id=\"logaction_" + _eca + "\">[" + _eda + "]</a></div>");
                                _ed9 = ("<div class=\"logaction\"><a href=\"#\" id=\"logactionp_" + _eca + "\">[" + _eda + "]</a></div>");
                            }
                        } else {
                            if (!_ec6) {
                                var _edb = this.notifqueue.game.toReplaceForFemale[dojo.config.locale.substr(0, 2)];
                                var _edc = this.notifqueue.game.replacementForFemale[dojo.config.locale.substr(0, 2)];
                                if (typeof _edb != "undefined") {
                                    for (var i = 0; i < this.notifqueue.game.gameFemalePlayers.length; i++) {
                                        if (html.match(new RegExp(">" + this.notifqueue.game.gameFemalePlayers[i] + "<"))) {
                                            html = html.replace(new RegExp(_edb,"g"), _edc);
                                        }
                                    }
                                }
                                _edb = this.notifqueue.game.toReplaceForMale[dojo.config.locale.substr(0, 2)];
                                _edc = this.notifqueue.game.replacementForMale[dojo.config.locale.substr(0, 2)];
                                if (typeof _edb != "undefined") {
                                    for (var i = 0; i < this.notifqueue.game.gameMalePlayers.length; i++) {
                                        if (html.match(new RegExp(">" + this.notifqueue.game.gameMalePlayers[i] + "<"))) {
                                            html = html.replace(new RegExp(_edb,"g"), _edc);
                                        }
                                    }
                                }
                                _edb = this.notifqueue.game.toReplaceForNeutral[dojo.config.locale.substr(0, 2)];
                                _edc = this.notifqueue.game.replacementForNeutral[dojo.config.locale.substr(0, 2)];
                                if (typeof _edb != "undefined") {
                                    for (var i = 0; i < this.notifqueue.game.gameNeutralPlayers.length; i++) {
                                        if (html.match(new RegExp(">" + this.notifqueue.game.gameNeutralPlayers[i] + "<"))) {
                                            html = html.replace(new RegExp(_edb,"g"), _edc);
                                        }
                                    }
                                }
                            }
                        }
                        if (_ec6 && typeof _ebf.args.text != "undefined") {
                            if (this.isBadWorkInChat(_ebf.args.text)) {
                                _ed8 += "<div  class=\"logaction\">" + _("Insult? Aggressive attitude? Please do not respond or you will be moderated too.") + " " + _("Block this player (thumb down) and report him/her to moderators.") + "</div>";
                            }
                        }
                        var _edd = "";
                        var _ede = this.chatbarWindows[_ec1].lastMsgTime;
                        var _edf = _ebf.time;
                        var _ee0 = "";
                        var _ee1 = new Date(_edf * 1000);
                        _ee0 = _ee1.toLocaleTimeString([], {
                            hour: "2-digit",
                            minute: "2-digit"
                        });
                        var _ee2 = new Date(_ede * 1000);
                        var _ee3 = _edf - _ede;
                        if (Math.floor(_ede / 60) != Math.floor(_edf / 60)) {
                            if (_ee2.toLocaleDateString() != _ee1.toLocaleDateString()) {
                                var _ee4 = _ee1.toLocaleDateString();
                                _edd += "<div class=\"timestamp\">" + _ee4 + "</div>";
                            } else {}
                            this.chatbarWindows[_ec1].lastMsgTime = _edf;
                        }
                        var _ee5 = "";
                        var _ee6 = false;
                        var _ee7 = false;
                        var _ee8 = "";
                        if (_ec6) {
                            _ee5 += " chatlog";
                            var _ecf = (typeof this.current_player_id != "undefined" ? this.current_player_id : this.player_id);
                            if (typeof _ebf.args.player_id != "undefined" && _ebf.args.player_id == _ecf) {
                                _ee5 += " ownchatlog";
                                _ee6 = true;
                            }
                            if (typeof this.chatbarWindows[_ec1].lastMsgAuthor != "undefined" && this.chatbarWindows[_ec1].lastMsgAuthor == _ebf.args.player_id) {
                                if (_ee3 < 60) {
                                    _ee7 = true;
                                    _ee5 += " sameauthor";
                                }
                            }
                            this.chatbarWindows[_ec1].lastMsgAuthor = _ebf.args.player_id;
                            if (typeof _ebf.args.mread != "undefined" && !_ee6) {
                                if (_ebf.args.mread) {} else {
                                    _ee5 += " newmessage";
                                    if (typeof _ebf.args.id != "undefined") {
                                        _ee8 = " id=\"newmessage_" + _ec1.substr(0, 1) + "_" + _ebf.args.id + "\"";
                                    }
                                }
                            }
                            if (_ec7) {
                                _ee5 += " leavechat";
                            }
                        }
                        _edd += "<div class=\"roundedbox log " + _ee5 + "\" id=\"dockedlog_" + _eca + "\">" + "<div class=\"roundedboxinner\"" + _ee8 + ">";
                        var _ee9 = html;
                        if (_ec6) {
                            html = this.addSmileyToText(html).replace(/(?:\r\n|\r|\n)/g, "<br>");
                        }
                        var _eea = html;
                        if (_ee0 != "") {
                            var _eeb = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
                            var _eec = "";
                            if (_ebf.type == "privatechat" && typeof _ebf.args.mread != "undefined" && _ee6) {
                                if (_ebf.args.mread) {
                                    _eec = "<i class=\"fa fa-check message_read\" aria-hidden=\"true\"></i>";
                                    _eeb += "&nbsp;&nbsp;";
                                } else {
                                    _eec = "<i class=\"fa fa-check message_unread\" id=\"privmsg_read_" + _ebf.args.id + "\" aria-hidden=\"true\"></i>";
                                    _eeb += "&nbsp;&nbsp;";
                                }
                            }
                            if (!_ec6) {
                                _eeb += "&nbsp;&nbsp;";
                            }
                            html += _eeb + "<div class=\"msgtime\">" + _ee0 + " " + _eec + "</div>";
                        }
                        _edd += (html + _ed8);
                        if (_ec6 && !_ee6 && !_ec8) {
                            _edd += "<div class=\"translate_icon " + "\" id=\"logtr_" + _ec1 + "_" + _eca + "\" title=\"" + _("Translate with Google") + "\"></div>";
                        }
                        _edd += "</div></div>";
                        var _eed = dojo.style("chatwindowlogs_zone_" + _ec1, "height");
                        var _eee = (($("chatwindowlogs_zone_" + _ec1).scrollTop + _eed) >= ($("chatwindowlogs_zone_" + _ec1).scrollHeight - 10));
                        if (typeof _ebf.loadprevious == "undefined" || !$("load_previous_message_wrap_" + _ec1)) {
                            dojo.place(_edd, "chatwindowlogs_endzone_" + _ec1, "before");
                        } else {
                            dojo.place(_edd, "load_previous_message_wrap_" + _ec1, "before");
                        }
                        this.addTooltipToClass("message_read", _("This message has been read"), "");
                        this.addTooltipToClass("message_unread", _("This message has not been read yet"), "");
                        if (this.notifqueue.game == null) {
                            if (_ed7) {
                                if ($("logaction_" + _eca)) {
                                    dojo.connect($("logaction_" + _eca), "onclick", this, function(evt) {
                                        dojo.stopEvent(evt);
                                        mainsite.ajaxcall(_ed7.action, _ed7.action_arg, this, function() {});
                                    });
                                }
                            }
                        } else {
                            if (_ec6 && typeof _ebf.args.player_id != "undefined") {
                                if ($("ban_spectator_" + _ebf.args.player_id)) {
                                    dojo.style("ban_spectator_" + _ebf.args.player_id, "display", "inline");
                                }
                            }
                        }
                        if (typeof _ebf.loadprevious == "undefined") {
                            if (_eee) {
                                $("chatwindowlogs_zone_" + _ec1).scrollTop = $("chatwindowlogs_zone_" + _ec1).scrollHeight;
                            } else {
                                dojo.style("chatwindowmorelogs_" + _ec1, "display", "block");
                            }
                        }
                        if (_ec6 && $("logtr_" + _ec1 + "_" + _eca)) {
                            dojo.connect($("logtr_" + _ec1 + "_" + _eca), "onclick", this.notifqueue, "onTranslateLog");
                        }
                        var _eef = "dockedlog_" + _eca;
                        if (typeof _ebf.loadprevious == "undefined") {
                            dojo.style(_eef, "display", "none");
                            dojo.fx.chain([dojo.fx.wipeIn({
                                node: _eef,
                                onAnimate: function(node) {
                                    if (_eee) {
                                        $("chatwindowlogs_zone_" + _ec1).scrollTop = $("chatwindowlogs_zone_" + _ec1).scrollHeight;
                                    }
                                },
                                onEnd: function(node) {
                                    if (_eee) {
                                        $("chatwindowlogs_zone_" + _ec1).scrollTop = $("chatwindowlogs_zone_" + _ec1).scrollHeight;
                                    }
                                }
                            }), dojo.animateProperty({
                                node: _eef,
                                delay: 5000,
                                properties: {
                                    color: {
                                        end: "#000000"
                                    },
                                    onEnd: function(node) {
                                        dojo.style(node, "display", "block");
                                    }
                                }
                            })]).play();
                        } else {
                            if ($(_eef)) {
                                dojo.style(_eef, "color", "#000000");
                            }
                        }
                        if (this.chatbarWindows[_ec1].notifymethod == "title") {
                            var _ef0 = _eea.split("<!--");
                            var _ef1 = "";
                            var _ef2 = true;
                            for (var i in _ef0) {
                                var part = _ef0[i];
                                if (part.substr(0, 6) == "PNS-->") {
                                    if (_ef2) {
                                        _ef1 += part;
                                    } else {
                                        _ef1 += "<!--" + part;
                                    }
                                } else {
                                    if (!_ef2) {
                                        part = "<!--" + part;
                                    }
                                    _ef1 += dojox.dtl.filter.htmlstrings.striptags(part);
                                }
                                if (_ef2) {
                                    _ef2 = false;
                                }
                            }
                            $("chatwindowtitlenolink_" + _ec1).innerHTML = _ef1;
                        }
                        var _ef3 = this.chatbarWindows[_ec1].status;
                        if (_ec9 && (_ef3 == "collapsed" || _ef3 == "stacked")) {
                            if (_ef3 == "collapsed") {
                                if (_ec1 == "general") {} else {
                                    if (this.chatbarWindows[_ec1].notifymethod == "normal" || (_ec2 && _ebf.type == "tablechat")) {
                                        dojo.addClass("chatwindow_" + _ec1, "newmessage");
                                        var _ef4 = $("chatwindownewmsgcount_" + _ec1).innerHTML;
                                        if (_ef4 == "") {
                                            $("chatwindownewmsgcount_" + _ec1).innerHTML = 1;
                                            $("chatMindownewmsgcount_" + _ec1).innerHTML = 1;
                                        } else {
                                            if (toint(_ef4) <= 8) {
                                                $("chatwindownewmsgcount_" + _ec1).innerHTML = toint(_ef4) + 1;
                                                $("chatMindownewmsgcount_" + _ec1).innerHTML = toint(_ef4) + 1;
                                            } else {
                                                $("chatwindownewmsgcount_" + _ec1).innerHTML = "9+";
                                                $("chatMindownewmsgcount_" + _ec1).innerHTML = "9+";
                                            }
                                        }
                                    }
                                }
                                if (!_ec2) {
                                    dojo.place("<div><div id=\"logprev_" + _eca + "\" class=\"chatwindowpreviewmsg\">" + _eea + _ed9 + "</div></div>", "chatwindowpreview_" + _ec1);
                                    var _ef5 = dojo.query("#chatwindowpreview_" + _ec1 + " .chatwindowpreviewmsg");
                                    if (_ef5.length > 5) {
                                        var nbr = _ef5.length;
                                        for (var i in _ef5) {
                                            if (nbr <= 5) {
                                                break;
                                            }
                                            dojo.destroy(_ef5[i]);
                                            nbr--;
                                        }
                                    }
                                }
                            } else {
                                if (_ef3 == "stacked") {
                                    if (!_ec2) {
                                        dojo.place("<div id=\"logprev_" + _eca + "\" class=\"chatwindowpreviewmsg\">" + html + _ed9 + "</div>", "chatwindowpreview_stacked");
                                    }
                                }
                            }
                            if (!_ec2) {
                                var _eef = "logprev_" + _eca;
                                dojo.style(_eef, "display", "none");
                                dojo.fx.wipeIn({
                                    node: _eef
                                }).play();
                                this.fadeOutAndDestroy(_eef, 500, 5000);
                            }
                            if (this.notifqueue.game == null) {
                                if (_ed7) {
                                    if ($("logactionp_" + _eca)) {
                                        dojo.connect($("logactionp_" + _eca), "onclick", this, function(evt) {
                                            dojo.stopEvent(evt);
                                            mainsite.ajaxcall(_ed7.action, _ed7.action_arg, this, function() {});
                                        });
                                    }
                                }
                            }
                        }
                        if (_ebf.type == "privatechat" || _ebf.type == "tablechat") {
                            if (typeof this.chatbarWindows[_ec1].first_msg_timestamp == "undefined") {
                                this.chatbarWindows[_ec1].first_msg_timestamp = toint(_ebf.time);
                            } else {
                                this.chatbarWindows[_ec1].first_msg_timestamp = Math.min(_ebf.time, this.chatbarWindows[_ec1].first_msg_timestamp);
                            }
                        }
                        if (_ec7) {
                            if (_ebf.args.type == "leavelast") {
                                $("chatbarinput_" + _ec1 + "_input").disabled = true;
                                $("chatbarinput_" + _ec1 + "_input").placeholder = __("lang_mainsite", "There is no one left in this chat");
                            }
                        }
                        return _ec3;
                    },
                    onUpdateIsWritingStatus: function(_ef6) {
                        var _ef7 = 0;
                        var list = "";
                        for (var _ef8 in this.chatbarWindows[_ef6].is_writing_now) {
                            if (_ef8 != this.current_player_name) {
                                if (list == "") {
                                    list = _ef8;
                                } else {
                                    list += ", " + _ef8;
                                }
                                _ef7++;
                            }
                        }
                        if (_ef7 == 0) {
                            dojo.style("chatwindowtitlenolink_" + _ef6, "display", "inline");
                            dojo.style("is_writing_now_" + _ef6, "display", "none");
                            dojo.style("chatwindowlogstitle_content_" + _ef6, "display", "inline");
                            dojo.style("is_writing_now_title_" + _ef6, "display", "none");
                        } else {
                            $("is_writing_now_expl_" + _ef6).innerHTML = dojo.string.substitute(__("lang_mainsite", "${player} is writing something ..."), {
                                player: list
                            });
                            $("is_writing_now_expl_title_" + _ef6).innerHTML = dojo.string.substitute(__("lang_mainsite", "${player} is writing something ..."), {
                                player: list
                            });
                            dojo.style("chatwindowtitlenolink_" + _ef6, "display", "none");
                            dojo.style("is_writing_now_" + _ef6, "display", "inline");
                            dojo.style("chatwindowlogstitle_content_" + _ef6, "display", "none");
                            dojo.style("is_writing_now_title_" + _ef6, "display", "inline");
                        }
                    },
                    createChatBarWindow: function(_ef9, _efa) {
                        if (!this.dockedChatInitialized) {
                            return false;
                        }
                        var _efb = dojo.hasClass("ebd-body", "mobile_version");
                        var _efc = _ef9.window_id;
                        var _efd = _ef9.label;
                        if (typeof this.chatbarWindows[_efc] != "undefined") {
                            if (this.chatbarWindows[_efc].status == "collapsed") {
                                return false;
                            } else {
                                if (this.chatbarWindows[_efc].status == "expanded") {
                                    return false;
                                } else {
                                    if (this.chatbarWindows[_efc].status == "stacked") {
                                        return false;
                                    }
                                }
                            }
                        }
                        this.stackChatWindowsIfNeeded(_ef9.start);
                        if (_ef9.url !== null) {
                            _efd = "<a href=\"" + _ef9.url + "\" class=\"chatwindowtitlelink\" id=\"chatwindowtitlelink_" + _efc + "\"\">" + _efd + "</a>";
                        }
                        var _efe = "normal";
                        if (typeof _ef9.notifymethod != "undefined") {
                            _efe = _ef9.notifymethod;
                        }
                        var _eff = false;
                        if (typeof _ef9.autoShowOnKeyPress != "undefined") {
                            _eff = _ef9.autoShowOnKeyPress;
                        }
                        this.chatbarWindows[_efc] = {
                            status: _ef9.start,
                            title: _efd,
                            input: new ebg.chatinput(),
                            subscription: null,
                            notifymethod: _efe,
                            autoShowOnKeyPress: _eff,
                            lastMsgTime: 0,
                            lastMsgAuthor: 0,
                            is_writing_now: {}
                        };
                        this.chatbarWindows[_efc].input.callbackBeforeChat = dojo.hitch(this, "onCallbackBeforeChat");
                        this.chatbarWindows[_efc].input.callbackAfterChat = dojo.hitch(this, "onCallbackAfterChat");
                        this.chatbarWindows[_efc].input.callbackAfterChatError = dojo.hitch(this, "callbackAfterChatError");
                        dojo.connect(this.chatbarWindows[_efc].input, "onChatInputKeyUp", this, "onDockedChatInputKey");
                        dojo.connect($("chatbarinput_" + _efc + "_input"), "onclick", this, "onDockedChatFocus");
                        this.adaptChatbarDock();
                        var _f00 = this.getChatInputArgs(_ef9);
                        var _f01 = _efc.split("_");
                        var _f02 = _f01[0];
                        if (_f00 == null || typeof _f00.avatar == "undefined" || _f00.avatar == "") {
                            var _f03 = "<i class=\"fa fa-comment\" aria-hidden=\"true\"></i>";
                            if (_f00 === null) {
                                if (_ef9.type == "tablelog") {
                                    var _f03 = "<i class=\"fa fa-history\" aria-hidden=\"true\"></i>";
                                }
                            }
                        } else {
                            var _f03 = _f00.avatar;
                        }
                        if (typeof gameui != "undefined" && _ef9.type == "table" && _ef9.id == gameui.table_id) {
                            var _f03 = "<i class=\"fa fa-comment\" aria-hidden=\"true\"></i>";
                        }
                        if (_ef9.type == "emergency") {
                            var _f03 = "<img src=\"" + getStaticAssetUrl("img/logo/logo.png") + "\" alt=\"\" class=\"bga_logo emblem\" />";
                        }
                        var args = {
                            id: _efc,
                            title: _efd,
                            type: _f02,
                            titlenolink: _ef9.label,
                            more_logs_label: _("Scroll down to see new messages"),
                            stop_notif_label: _("Notify chat messages"),
                            avatar: _f03
                        };
                        dojo.place(this.format_string(this.jstpl_chatwindow, args), "chatbardock", "first");
                        dojo.addClass("chatwindow_" + _efc, _ef9.start);
                        if (_ef9.start == "expanded") {
                            dojo.style("chatwindowexpanded_" + _efc, "display", "block");
                            if (!_efb) {
                                dojo.style("chatwindowcollapsed_" + _efc, "display", "none");
                            }
                            dojo.style("chatwindowpreview_" + _efc, "display", "none");
                            if (_efb) {
                                this.makeSureChatBarIsOnTop(_efc);
                            }
                        }
                        if ($("chatbarinput_stopnotif_general")) {
                            this.addTooltip("chatbarinput_stopnotif_general", "", _("Uncheck this box if you don't want to be notified when there is a new message in the global chat."));
                            dojo.connect($("chatbarinput_stopnotif_box_general"), "onclick", this, "onChangeStopNotifGeneralBox");
                            dojo.connect($("chatbarinput_stopnotif_label_general"), "onclick", this, "onChangeStopNotifGeneralLabel");
                            if (typeof mainsite != "undefined") {
                                if (mainsite.notifyOnGeneralChat == 0) {
                                    bDisplayPreview = false;
                                    $("chatbarinput_stopnotif_box_general").checked = "";
                                }
                            }
                        }
                        if (_f00 !== null) {
                            this.chatbarWindows[_efc].input.create(this, "chatbarinput_" + _efc, _f00.action, _f00.label);
                            this.chatbarWindows[_efc].input.writingNowChannel = _f00.channel;
                            this.chatbarWindows[_efc].input.baseparams = _f00.param;
                            if (typeof _f00.doubleaction != "undefined" && _f00.doubleaction != "") {
                                this.chatbarWindows[_efc].input.post_url_bis = _f00.doubleaction;
                            }
                            dojo.connect($("chatbarinput_predefined_" + _efc), "onclick", this, "onShowPredefined");
                        } else {
                            dojo.addClass("chatwindowlogs_zone_" + _efc, "chatwindowlogs_zone_big");
                        }
                        if (_f02 == "privatechat" || _f02 == "table") {
                            var html = "<div id=\"load_previous_message_wrap_" + _efc + "\" class=\"load_previous_message\">                                <a href=\"#\" id=\"load_previous_message_" + _efc + "\">" + _("Load previous messages") + "</a>                            </div>";
                            dojo.place(html, "chatwindowlogs_endzone_" + _efc, "before");
                            dojo.connect($("load_previous_message_" + _efc), "onclick", this, "onLoadPreviousMessages");
                        }
                        dojo.connect($("chatwindowremove_" + _efc), "onclick", this, "onCloseChatWindow");
                        dojo.connect($("chatwindowcollapse_" + _efc), "onclick", this, "onCollapseChatWindow");
                        dojo.connect($("chatwindowlogstitlebar_" + _efc), "onclick", this, "onCollapseChatWindow");
                        dojo.connect($("chatwindowcollapsed_" + _efc), "onclick", this, "onExpandChatWindow");
                        dojo.connect($("chatwindowremovc_" + _efc), "onclick", this, "onCloseChatWindow");
                        dojo.connect($("chatwindowmorelogslink_" + _efc), "onclick", this, "onScrollDown");
                        dojo.connect($("chatbar_inner"), "onclick", this, "onCollapseAllChatWindow");
                        if (_efa) {
                            this.chatbarWindows[_efc].subscription = this.subscribeCometdChannel(_ef9.channel, this.notifqueue, "onNotification");
                        }
                        if (_f02 == "table" || _f02 == "privatechat") {
                            if (typeof mainsite != "undefined" && mainsite.pma || typeof gameui != "undefined" && gameui.pma) {
                                dojo.query("#chatbarinput_startaudiochat_" + _efc).connect("onclick", this, "onStartStopAudioChat");
                                this.addTooltip("chatbarinput_startaudiochat_" + _efc, "", _("Audio call"));
                                dojo.query("#chatbarinput_startvideochat_" + _efc).connect("onclick", this, "onStartStopVideoChat");
                                this.addTooltip("chatbarinput_startvideochat_" + _efc, "", _("Video call"));
                            } else {
                                this.addTooltip("chatbarinput_startaudiochat_" + _efc, this.premiumMsgAudioVideo, "");
                                dojo.query("#chatbarinput_startaudiochat_" + _efc).connect("onclick", this, function(evt) {
                                    dojo.stopEvent(evt);
                                    this.showMessage(_(this.premiumMsgAudioVideo), "info");
                                });
                                this.addTooltip("chatbarinput_startvideochat_" + _efc, this.premiumMsgAudioVideo, "");
                                dojo.query("#chatbarinput_startvideochat_" + _efc).connect("onclick", this, function(evt) {
                                    dojo.stopEvent(evt);
                                    this.showMessage(_(this.premiumMsgAudioVideo), "info");
                                });
                            }
                            if (this.mediaConstraints.video) {
                                dojo.query("#chatbarinput_startvideochat_" + _efc).removeClass("audiovideo_inactive").addClass("audiovideo_active");
                            } else {
                                if (this.mediaConstraints.audio) {
                                    dojo.query("#chatbarinput_startaudiochat_" + _efc).removeClass("audiovideo_inactive").addClass("audiovideo_active");
                                }
                            }
                        }
                        return true;
                    },
                    onChangeStopNotifGeneralBox: function(evt) {
                        var _f04 = ($("chatbarinput_stopnotif_box_general").checked) ? 1 : 0;
                        this.ajaxcall("/player/profile/setNotificationPreference.html", {
                            type: "notifyGeneralChat",
                            value: _f04
                        }, this, function() {
                            this.showMessage(__("lang_mainsite", "Preference updated!"), "info");
                        });
                        if (typeof mainsite != "undefined") {
                            mainsite.notifyOnGeneralChat = _f04;
                        }
                    },
                    onChangeStopNotifGeneralLabel: function(evt) {
                        dojo.stopEvent(evt);
                        if ($("chatbarinput_stopnotif_box_general").checked) {
                            $("chatbarinput_stopnotif_box_general").checked = "";
                        } else {
                            $("chatbarinput_stopnotif_box_general").checked = "checked";
                        }
                        this.onChangeStopNotifGeneralBox(evt);
                    },
                    onStartStopAudioChat: function(evt) {
                        dojo.stopEvent(evt);
                        var _f05 = evt.target.id.split("_")[2];
                        if (typeof _f05 == "undefined") {
                            _f05 = evt.target.parentNode.id.split("_")[2];
                        }
                        if (_f05 == "table") {
                            if (this.room !== null && this.room.indexOf("T") < 0) {
                                this.showMessage(_("You must end your other live chat sessions before starting a new one."), "error");
                                return;
                            }
                            var _f06 = (typeof current_player_id != "undefined" ? current_player_id : this.player_id);
                            if (typeof mainsite != "undefined" && $("active_player_" + _f06) === null) {
                                this.showMessage(_("You are not currently playing at this table (you haven't joined yet, you have quit or the game has ended)."), "error");
                                return;
                            }
                            var _f07 = evt.target.id.split("_")[3];
                            if (typeof _f07 == "undefined") {
                                _f07 = evt.target.parentNode.id.split("_")[3];
                            }
                            var html = "<div  class=\"rtc_dialog\">" + "<br />";
                            html += "<div style=\"text-align: center; border-bottom: 1px solid black; border-top: 1px solid black; padding: 5px 5px 5px 5px;\"><i>" + (this.mediaConstraints.video !== false ? _("You are launching a video chat session for this table!") : _("You are launching an audio chat session for this table!")) + "</i></div>";
                            html += "</div>";
                            if (this.room === null) {
                                this.confirmationDialog(html, dojo.hitch(this, function() {
                                    this.ajaxcall("/table/table/startStopAudio.html", {
                                        target_table: _f07,
                                        target_player: null
                                    }, this, function(_f08) {});
                                }), dojo.hitch(this, function() {}));
                            } else {
                                this.ajaxcall("/table/table/startStopAudio.html", {
                                    target_table: _f07,
                                    target_player: null
                                }, this, function(_f09) {});
                            }
                        }
                        if (_f05 == "privatechat") {
                            if (this.room !== null && this.room.indexOf("P") < 0) {
                                this.showMessage(_("You must end your other live chat sessions before starting a new one."), "error");
                                return;
                            }
                            var _f06 = evt.target.id.split("_")[3];
                            if (typeof _f06 == "undefined") {
                                _f06 = evt.target.parentNode.id.split("_")[3];
                            }
                            var html = "<div  class=\"rtc_dialog\">" + "<br />";
                            html += "<div style=\"text-align: center; border-bottom: 1px solid black; border-top: 1px solid black; padding: 5px 5px 5px 5px;\"><i>" + (this.mediaConstraints.video !== false ? _("You are launching a video chat session with another player!") : _("You are launching an audio chat session with another player!")) + "</i></div>";
                            html += "</div>";
                            if (this.room === null) {
                                this.confirmationDialog(html, dojo.hitch(this, function() {
                                    this.ajaxcall("/table/table/startStopAudio.html", {
                                        target_table: null,
                                        target_player: _f06
                                    }, this, function(_f0a) {});
                                }), dojo.hitch(this, function() {}));
                            } else {
                                this.ajaxcall("/table/table/startStopAudio.html", {
                                    target_table: null,
                                    target_player: _f06
                                }, this, function(_f0b) {});
                            }
                        }
                    },
                    onStartStopVideoChat: function(evt) {
                        dojo.stopEvent(evt);
                        var _f0c = evt.target.id.split("_")[2];
                        if (typeof _f0c == "undefined") {
                            _f0c = evt.target.parentNode.id.split("_")[2];
                        }
                        if (_f0c == "table") {
                            if (this.room !== null && this.room.indexOf("T") < 0) {
                                this.showMessage(_("You must end your other live chat sessions before starting a new one."), "error");
                                return;
                            }
                            var _f0d = (typeof current_player_id != "undefined" ? current_player_id : this.player_id);
                            if (typeof mainsite != "undefined" && $("active_player_" + _f0d) === null) {
                                this.showMessage(_("You are not currently playing at this table (you haven't joined yet, you have quit or the game has ended)."), "error");
                                return;
                            }
                            var _f0e = evt.target.id.split("_")[3];
                            if (typeof _f0e == "undefined") {
                                _f0e = evt.target.parentNode.id.split("_")[3];
                            }
                            var html = "<div  class=\"rtc_dialog\">" + "<br />";
                            html += "<div style=\"text-align: center; border-bottom: 1px solid black; border-top: 1px solid black; padding: 5px 5px 5px 5px;\"><i>" + (this.mediaConstraints.video !== false ? _("You are launching a video chat session for this table!") : _("You are launching an audio chat session for this table!")) + "</i></div>";
                            html += "</div>";
                            if (this.room === null) {
                                this.confirmationDialog(html, dojo.hitch(this, function() {
                                    this.ajaxcall("/table/table/startStopVideo.html", {
                                        target_table: _f0e,
                                        target_player: null
                                    }, this, function(_f0f) {});
                                }), dojo.hitch(this, function() {}));
                            } else {
                                this.ajaxcall("/table/table/startStopVideo.html", {
                                    target_table: _f0e,
                                    target_player: null
                                }, this, function(_f10) {});
                            }
                        }
                        if (_f0c == "privatechat") {
                            if (this.room !== null && this.room.indexOf("P") < 0) {
                                this.showMessage(_("You must end your other live chat sessions before starting a new one."), "error");
                                return;
                            }
                            var _f0d = evt.target.id.split("_")[3];
                            if (typeof _f0d == "undefined") {
                                _f0d = evt.target.parentNode.id.split("_")[3];
                            }
                            var html = "<div  class=\"rtc_dialog\">" + "<br />";
                            html += "<div style=\"text-align: center; border-bottom: 1px solid black; border-top: 1px solid black; padding: 5px 5px 5px 5px;\"><i>" + (this.mediaConstraints.video !== false ? _("You are launching a video chat session with another player!") : _("You are launching an audio chat session with another player!")) + "</i></div>";
                            html += "</div>";
                            if (this.room === null) {
                                this.confirmationDialog(html, dojo.hitch(this, function() {
                                    this.ajaxcall("/table/table/startStopVideo.html", {
                                        target_table: null,
                                        target_player: _f0d
                                    }, this, function(_f11) {});
                                }), dojo.hitch(this, function() {}));
                            } else {
                                this.ajaxcall("/table/table/startStopVideo.html", {
                                    target_table: null,
                                    target_player: _f0d
                                }, this, function(_f12) {});
                            }
                        }
                    },
                    setNewRTCMode: function(_f13, _f14, _f15, _f16) {
                        if (_f15 === null) {
                            return;
                        }
                        this.rtc_mode = _f15;
                        if (typeof bgaConfig != "undefined" && bgaConfig.webrtcEnabled && !this.isSpectator) {
                            var _f17 = (typeof current_player_id != "undefined" ? current_player_id : this.player_id);
                            var _f18 = false;
                            var _f19 = (_f15 == 0 ? false : true);
                            if (this.mediaConstraints.audio != _f19) {
                                this.mediaConstraints.audio = _f19;
                                _f18 = true;
                            }
                            var _f1a = this.getRtcVideoConstraints(_f15);
                            if (JSON.stringify(this.mediaConstraints.video) != JSON.stringify(_f1a)) {
                                this.mediaConstraints.video = _f1a;
                                _f18 = true;
                            }
                            if (_f18 && this.webrtc !== null) {
                                this.clearRTC();
                                this.room = null;
                            }
                            if (this.room === null && (this.mediaConstraints.audio || this.mediaConstraints.video)) {
                                if (_f13 !== null) {
                                    this.room = "T" + _f13;
                                    if (typeof gameui != "undefined" && $("rtc_container_" + _f17) == null) {
                                        dojo.place(this.format_string(this.getRTCTemplate(this.mediaConstraints.audio, this.mediaConstraints.video, false), {
                                            player_id: _f17,
                                            muted: "muted"
                                        }), $("rtc_placeholder_" + _f17));
                                        this.setupRTCEvents(_f17);
                                    }
                                    if (typeof mainsite != "undefined") {
                                        if ($("active_player_" + _f17) != null && $("emblem_" + _f17) != null && $("rtc_container_" + _f17) == null) {
                                            dojo.place(this.format_string(this.getRTCTemplate(this.mediaConstraints.audio, this.mediaConstraints.video, false), {
                                                player_id: _f17,
                                                muted: "muted"
                                            }), $("table_rtc_placeholder"));
                                            this.placeOnObject($("rtc_container_" + _f17), $("emblem_" + _f17));
                                            this.setupRTCEvents(_f17);
                                        }
                                    }
                                } else {
                                    if (_f14 !== null) {
                                        this.room = "P" + Math.min(_f17, _f14) + "_" + Math.max(_f17, _f14);
                                        if ($("chatwindowlogs_privatechat_" + _f14) !== null) {
                                            if ($("rtc_container_" + _f17) == null) {
                                                dojo.place(this.format_string(this.getRTCTemplate(this.mediaConstraints.audio, this.mediaConstraints.video, false), {
                                                    player_id: _f17,
                                                    muted: "muted"
                                                }), $("chatwindowlogs_privatechat_" + _f14));
                                                if (this.mediaConstraints.video) {
                                                    dojo.style($("rtc_container_" + _f17), "top", "-6px");
                                                    dojo.style($("rtc_container_" + _f17), "left", "115px");
                                                    dojo.style($("rtc_container_" + _f17), "zIndex", "496");
                                                } else {
                                                    if (this.mediaConstraints.audio) {
                                                        dojo.style($("rtc_container_" + _f17), "top", "-13px");
                                                        dojo.style($("rtc_container_" + _f17), "left", "135px");
                                                    }
                                                }
                                                this.setupRTCEvents(_f17);
                                            }
                                        }
                                    }
                                }
                                if (_f16 === _f17) {
                                    this.already_accepted_room = this.room;
                                }
                                var _f1b = (_f13 !== null ? "table_" + _f13 : "privatechat_" + _f14);
                                if (this.mediaConstraints.video) {
                                    dojo.query("#chatbarinput_startvideochat_" + _f1b).removeClass("audiovideo_inactive").addClass("audiovideo_active");
                                    dojo.query("#playersaroundtable_startvideochat_" + _f1b).removeClass("audiovideo_inactive").addClass("audiovideo_active");
                                } else {
                                    if (this.mediaConstraints.audio) {
                                        dojo.query("#chatbarinput_startaudiochat_" + _f1b).removeClass("audiovideo_inactive").addClass("audiovideo_active");
                                        dojo.query("#playersaroundtable_startaudiochat_" + _f1b).removeClass("audiovideo_inactive").addClass("audiovideo_active");
                                    }
                                }
                                this.startRTC();
                            }
                        }
                    },
                    onLoadPreviousMessages: function(evt) {
                        dojo.stopEvent(evt);
                        var _f1c = evt.currentTarget.id.substr(22);
                        var _f1d = _f1c.split("_")[0];
                        var _f1e = _f1c.split("_")[1];
                        this.loadPreviousMessage(_f1d, _f1e);
                    },
                    loadPreviousMessage: function(_f1f, _f20) {
                        var _f21 = _f1f + "_" + _f20;
                        var from = null;
                        if (typeof this.chatbarWindows[_f21].first_msg_timestamp != "undefined") {
                            from = this.chatbarWindows[_f21].first_msg_timestamp;
                        }
                        this.ajaxcall("/table/table/chatHistory.html", {
                            type: _f1f,
                            id: _f20,
                            before: from
                        }, this, "loadPreviousMessageCallback", function(_f22) {}, "get");
                    },
                    loadPreviousMessageCallback: function(_f23) {
                        if (typeof _f24 == "undefined") {
                            var _f24 = this.player_id;
                        }
                        var _f25 = _f23.type;
                        var _f26 = _f23.id;
                        this.chatbarWindows[_f25 + "_" + _f26].lastMsgAuthor = null;
                        var _f27 = $("chatwindowlogs_zone_" + _f25 + "_" + _f26).scrollHeight;
                        var _f28 = false;
                        for (var i in _f23.history) {
                            _f28 = true;
                            if (_f25 == "privatechat") {
                                var _f29 = {
                                    channel: "/player/p" + _f24,
                                    channelorig: "/player/p" + _f24,
                                    args: _f23.history[i],
                                    bIsTableMsg: false,
                                    lock_uuid: "dummy",
                                    log: "${player_name} ${text}",
                                    type: "privatechat",
                                    time: _f23.history[i].time,
                                    mread: _f23.history[i].mread,
                                    loadprevious: true,
                                    uid: 0
                                };
                                this.onPlaceLogOnChannel(_f29);
                            } else {
                                if (_f25 == "table") {
                                    var _f29 = {
                                        channel: "/table/t" + _f26,
                                        channelorig: "/table/t" + _f26,
                                        args: _f23.history[i],
                                        bIsTableMsg: true,
                                        lock_uuid: "dummy",
                                        log: "${player_name} ${text}",
                                        type: "tablechat",
                                        time: _f23.history[i].time,
                                        loadprevious: true,
                                        uid: 0
                                    };
                                    this.onPlaceLogOnChannel(_f29);
                                } else {
                                    console.error("unknow previous message type: " + _f25);
                                }
                            }
                        }
                        dojo.place("load_previous_message_wrap_" + _f25 + "_" + _f26, "chatwindowlogs_zone_" + _f25 + "_" + _f26, "first");
                        if (!_f28) {
                            dojo.destroy("load_previous_message_" + _f25 + "_" + _f26);
                        }
                        var _f2a = $("chatwindowlogs_zone_" + _f25 + "_" + _f26).scrollHeight;
                        if (_f2a > _f27) {
                            $("chatwindowlogs_zone_" + _f25 + "_" + _f26).scrollTop += toint((_f2a - _f27));
                        }
                    },
                    stackOrUnstackIfNeeded: function() {
                        var _f2b = this.countStackedWindows();
                        var _f2c = dojo.hasClass("ebd-body", "mobile_version");
                        if (_f2b > 0) {
                            var _f2d = this.getNeededChatbarWidth();
                            var _f2e = dojo.position("chatbar");
                            var _f2f = _f2e.w - 50;
                            var _f30 = _f2c ? 80 : 300;
                            if (_f2d + _f30 <= _f2f) {
                                for (var i in this.chatbarWindows) {
                                    if (this.chatbarWindows[i].status == "stacked") {
                                        this.unstackChatWindow(i, "automatic");
                                        return;
                                    }
                                }
                            }
                        }
                        this.stackChatWindowsIfNeeded();
                        if (_f2c) {
                            dojo.query("#chatbar .expanded .chatwindowlogs_zone").forEach(function(node) {
                                setTimeout(function() {
                                    node.scrollTop = node.scrollHeight;
                                }, 1);
                            });
                        }
                    },
                    onUnstackChatWindow: function(evt) {
                        dojo.stopEvent(evt);
                        var _f31 = evt.currentTarget.id.substr(15);
                        this.unstackChatWindow(_f31);
                        dojo.style("stackedmenu", "display", "none");
                    },
                    unstackChatWindow: function(_f32, _f33) {
                        if (typeof _f33 == "undefined") {
                            _f33 = "normal";
                        }
                        this.stackChatWindowsIfNeeded("expanded");
                        this.expandChatWindow(_f32);
                        if (_f33 == "automatic") {
                            this.collapseChatWindow(_f32);
                        }
                        if ($("stackmenu_item_" + _f32)) {
                            dojo.destroy("stackmenu_item_" + _f32);
                        }
                    },
                    stackChatWindowsIfNeeded: function(_f34) {
                        var _f35 = dojo.hasClass("ebd-body", "mobile_version");
                        if (dojo.style("chatbar", "display") == "none") {
                            return;
                        }
                        if (typeof save_spaces_nbr == "undefined") {
                            save_spaces_nbr = null;
                        }
                        var _f36 = dojo.position("chatbar");
                        var _f37 = _f36.w - 50;
                        var _f38 = this.getNeededChatbarWidth();
                        if (_f34 == "collapsed") {
                            _f38 += _f35 ? 64 : 176;
                        }
                        if (_f34 == "expanded") {
                            _f38 += _f35 ? 64 : 220;
                        }
                        if (_f38 > _f37) {
                            this.stackOneChatWindow();
                            this.stackChatWindowsIfNeeded(_f34);
                        }
                    },
                    stackOneChatWindow: function() {
                        var _f39 = null;
                        for (var i in this.chatbarWindows) {
                            var _f3a = this.chatbarWindows[i].status;
                            if (_f3a == "collapsed") {
                                _f39 = i;
                            }
                        }
                        if (_f39 === null) {
                            for (var i in this.chatbarWindows) {
                                var _f3a = this.chatbarWindows[i].status;
                                if (_f3a == "expanded") {
                                    _f39 = i;
                                }
                            }
                        }
                        if (_f39 === null) {
                            console.error("Cannot find any chatwindow to stack!!!");
                        }
                        this.chatbarWindows[_f39].status = "stacked";
                        dojo.removeClass("chatwindow_" + _f39, ["collapsed", "expanded", "stacked"]);
                        dojo.addClass("chatwindow_" + _f39, "stacked");
                        this.updateChatBarStatus();
                        dojo.style("chatwindowexpanded_" + _f39, "display", "none");
                        dojo.style("chatwindowcollapsed_" + _f39, "display", "none");
                        dojo.style("chatwindowpreview_" + _f39, "display", "none");
                        var _f3b = $("chatwindowtitlenolink_" + _f39).innerHTML;
                        dojo.place("<div class=\"stackmenu_item\" id=\"stackmenu_item_" + _f39 + "\">" + _f3b + "</div>", "stackedmenu");
                        dojo.connect($("stackmenu_item_" + _f39), "onclick", this, "onUnstackChatWindow");
                        this.adaptChatbarDock();
                    },
                    getNeededChatbarWidth: function() {
                        var _f3c = dojo.hasClass("ebd-body", "mobile_version");
                        var _f3d = 0;
                        var _f3e = 0;
                        var _f3f = _f3c ? 64 : 280;
                        var _f40 = _f3c ? 64 : 176;
                        var _f41 = 0;
                        for (var i in this.chatbarWindows) {
                            if (i.substr(0, 8) == "tablelog" && dojo.hasClass("ebd-body", "desktop_version")) {} else {
                                if (this.chatbarWindows[i].status == "expanded") {
                                    _f3d++;
                                } else {
                                    if (this.chatbarWindows[i].status == "collapsed") {
                                        _f3e++;
                                    }
                                }
                            }
                            if (i.substr(0, 6) == "table_" && dojo.hasClass("ebd-body", "desktop_version") && typeof gameui != "undefined") {
                                if (this.chatbarWindows[i].status == "expanded") {
                                    _f41 += (412 - _f3f);
                                } else {
                                    if (this.chatbarWindows[i].status == "collapsed") {
                                        _f41 += (312 - _f40);
                                    }
                                }
                            }
                        }
                        return _f3d * _f3f + _f3e * _f40 + _f41;
                    },
                    adaptChatbarDock: function() {
                        if (!$("chatwindowcollapsed_stacked")) {
                            return;
                        }
                        var _f42 = this.getNeededChatbarWidth();
                        if (_f42 > 0) {
                            dojo.addClass("chatbardock", "chatbardock_visible");
                            dojo.style("chatbardock", "width", _f42 + "px");
                        } else {
                            dojo.removeClass("chatbardock", "chatbardock_visible");
                        }
                        var _f43 = this.countStackedWindows();
                        if (_f43 > 0) {
                            dojo.style("chatwindowcollapsed_stacked", "display", "block");
                        } else {
                            dojo.style("chatwindowcollapsed_stacked", "display", "none");
                        }
                    },
                    countStackedWindows: function() {
                        var _f44 = 0;
                        for (var i in this.chatbarWindows) {
                            if (this.chatbarWindows[i].status == "stacked") {
                                _f44++;
                            }
                        }
                        return _f44;
                    },
                    closeChatWindow: function(_f45) {
                        this.makeSureChatBarIsOnBottom(_f45);
                        if (this.chatbarWindows[_f45].subscription !== null) {
                            g_sitecore.unsubscribeCometdChannel(this.chatbarWindows[_f45].subscription);
                        }
                        dojo.destroy("chatwindow_" + _f45);
                        delete this.chatbarWindows[_f45];
                        this.updateChatBarStatus();
                        this.stackOrUnstackIfNeeded();
                        this.adaptChatbarDock();
                    },
                    onCloseChatWindow: function(evt) {
                        dojo.stopEvent(evt);
                        var _f46 = evt.currentTarget.id.substr(17);
                        this.ackUnreadMessage(_f46, "unsub");
                        if (this.room !== null && this.room.indexOf("P") >= 0) {
                            var _f47 = (typeof current_player_id != "undefined" ? current_player_id : this.player_id);
                            if (chatwindow_type == "table" && this.room == "T" + chatwindow_type_id) {
                                this.doLeaveRoom();
                                this.closeChatWindow(_f46);
                            } else {
                                if (chatwindow_type == "privatechat" && this.room == "P" + chatwindow_type_id + "_" + _f47 || chatwindow_type == "privatechat" && this.room == "P" + _f47 + "_" + chatwindow_type_id) {
                                    if (this.mediaConstraints.video) {
                                        this.ajaxcall("/table/table/startStopVideo.html", {
                                            target_table: null,
                                            target_player: chatwindow_type_id
                                        }, this, function(_f48) {
                                            this.closeChatWindow(_f46);
                                        });
                                    } else {
                                        if (this.mediaConstraints.audio) {
                                            this.ajaxcall("/table/table/startStopAudio.html", {
                                                target_table: null,
                                                target_player: chatwindow_type_id
                                            }, this, function(_f49) {
                                                this.closeChatWindow(_f46);
                                            });
                                        }
                                    }
                                } else {
                                    this.closeChatWindow(_f46);
                                }
                            }
                        } else {
                            this.closeChatWindow(_f46);
                        }
                    },
                    onCollapseChatWindow: function(evt) {
                        if (evt.target.id.substr(0, 19) == "chatwindowtitlelink") {
                            return true;
                        }
                        dojo.stopEvent(evt);
                        if (evt.currentTarget.id.substr(0, 18) == "chatwindowcollapse") {
                            var _f4a = evt.currentTarget.id.substr(19);
                        } else {
                            var _f4a = evt.currentTarget.id.substr(23);
                        }
                        this.collapseChatWindow(_f4a);
                    },
                    collapseChatWindow: function(_f4b, _f4c) {
                        this.chatbarWindows[_f4b].status = "collapsed";
                        dojo.removeClass("chatwindow_" + _f4b, ["collapsed", "expanded", "stacked"]);
                        dojo.addClass("chatwindow_" + _f4b, "collapsed");
                        this.updateChatBarStatus();
                        dojo.style("chatwindowexpanded_" + _f4b, "display", "none");
                        dojo.style("chatwindowcollapsed_" + _f4b, "display", "block");
                        dojo.style("chatwindowpreview_" + _f4b, "display", "block");
                        this.stackOrUnstackIfNeeded();
                        this.adaptChatbarDock();
                        if (typeof this.autoChatWhilePressingKey != "undefined") {
                            dijit.popup.close(this.autoChatWhilePressingKey);
                        }
                        if (typeof _f4c == "undefined" || !_f4c) {
                            this.makeSureChatBarIsOnBottom(_f4b);
                        }
                    },
                    onExpandChatWindow: function(evt) {
                        var _f4d = evt.currentTarget.id.substr(20);
                        if (this.chatbarWindows[_f4d].status != "expanded") {
                            this.expandChatWindow(_f4d);
                            this.ackUnreadMessage(_f4d);
                        } else {
                            this.collapseChatWindow(_f4d);
                        }
                    },
                    onCollapseAllChatWindow: function(evt) {
                        if (evt.target.id == "chatbar_inner") {
                            dojo.stopEvent(evt);
                            for (var i in this.chatbarWindows) {
                                if (this.chatbarWindows[i].status == "expanded") {
                                    this.collapseChatWindow(i);
                                }
                            }
                        }
                    },
                    updateChatBarStatus: function() {
                        if (dojo.query(".chatwindow.expanded").length > 0) {
                            dojo.addClass("chatbar", "at_least_one_expanded");
                        } else {
                            dojo.removeClass("chatbar", "at_least_one_expanded");
                        }
                    },
                    expandChatWindow: function(_f4e, _f4f) {
                        var _f50 = dojo.hasClass("ebd-body", "mobile_version");
                        if (this.chatbarWindows[_f4e].status == "expanded") {} else {
                            if (_f50) {
                                for (var i in this.chatbarWindows) {
                                    if (this.chatbarWindows[i].status == "expanded") {
                                        this.collapseChatWindow(i, true);
                                    }
                                }
                            }
                            if (typeof _f4f != "undefined" && _f4f) {
                                this.chatbarWindows[_f4e].autoCollapseAfterMessage = true;
                            } else {
                                this.chatbarWindows[_f4e].autoCollapseAfterMessage = false;
                            }
                            this.chatbarWindows[_f4e].status = "expanded";
                            dojo.removeClass("chatwindow_" + _f4e, ["collapsed", "expanded", "stacked"]);
                            dojo.addClass("chatwindow_" + _f4e, "expanded");
                            this.updateChatBarStatus();
                            dojo.style("chatwindowexpanded_" + _f4e, "display", "block");
                            if (!_f50) {
                                dojo.style("chatwindowcollapsed_" + _f4e, "display", "none");
                            } else {
                                dojo.style("chatwindowcollapsed_" + _f4e, "display", "block");
                            }
                            dojo.style("chatwindowpreview_" + _f4e, "display", "none");
                            dojo.removeClass("chatwindow_" + _f4e, "newmessage");
                            $("chatwindownewmsgcount_" + _f4e).innerHTML = "";
                            $("chatwindowlogs_zone_" + _f4e).scrollTop = $("chatwindowlogs_zone_" + _f4e).scrollHeight;
                            this.stackOrUnstackIfNeeded();
                            this.adaptChatbarDock();
                            if (_f50) {
                                this.makeSureChatBarIsOnTop(_f4e);
                            }
                        }
                        if ($("chatbarinput_" + _f4e + "_input")) {
                            $("chatbarinput_" + _f4e + "_input").focus();
                        }
                    },
                    makeSureChatBarIsOnTop: function(_f51) {
                        if (dojo.hasClass("ebd-body", "chatbar_ontop")) {
                            return;
                        }
                        var _f52 = dojo.position("chatbar");
                        dojo.addClass("ebd-body", "chatbar_ontop");
                        var _f53 = dojo.position("chatbar");
                        dojo.style("chatbar", "top", _f52.y + "px");
                        dojo.style("chatbar", "bottom", "auto");
                        var anim = dojo.fx.slideTo({
                            node: "chatbar",
                            top: _f53.y,
                            left: 0,
                            delay: 0,
                            duration: 200,
                            unit: "px"
                        });
                        dojo.connect(anim, "onEnd", function() {
                            dojo.style("chatbar", "bottom", "");
                            dojo.style("chatbar", "top", "");
                            dojo.style("chatbar", "position", "");
                        });
                        anim.play();
                        if (_f52.y == _f53.y) {
                            dojo.style("chatwindowexpanded_" + _f51, "opacity", 1);
                        } else {
                            dojo.style("chatwindowexpanded_" + _f51, "opacity", 0);
                            dojo.fadeIn({
                                node: "chatwindowexpanded_" + _f51,
                                duration: 200,
                                delay: 180,
                                onEnd: function(node) {
                                    dojo.style(node, "opacity", "");
                                }
                            }).play();
                        }
                    },
                    makeSureChatBarIsOnBottom: function(_f54) {
                        if (!dojo.hasClass("ebd-body", "chatbar_ontop")) {
                            return;
                        }
                        var _f55 = dojo.position("chatbar");
                        dojo.removeClass("ebd-body", "chatbar_ontop");
                        var _f56 = dojo.position("chatbar");
                        dojo.style("chatbar", "top", "auto");
                        dojo.style("chatbar", "bottom", (_f56.y - _f55.y) + "px");
                        dojo.animateProperty({
                            node: "chatbar",
                            delay: 0,
                            properties: {
                                bottom: {
                                    end: "0",
                                    unit: "px"
                                },
                            },
                            onEnd: function(node) {
                                dojo.style("chatbar", "top", "");
                                dojo.style("chatbar", "bottom", "");
                                dojo.style("chatbar", "position", "");
                            }
                        }).play();
                        dojo.style("chatwindowexpanded_" + _f54, "opacity", 1);
                    },
                    onScrollDown: function(evt) {
                        dojo.stopEvent(evt);
                        var _f57 = evt.currentTarget.id.substr(23);
                        dojo.style("chatwindowmorelogs_" + _f57, "display", "none");
                        $("chatwindowlogs_zone_" + _f57).scrollTop = $("chatwindowlogs_zone_" + _f57).scrollHeight;
                    },
                    onToggleStackMenu: function(evt) {
                        dojo.stopEvent(evt);
                        if (dojo.style("stackedmenu", "display") == "block") {
                            dojo.style("stackedmenu", "display", "none");
                        } else {
                            dojo.style("stackedmenu", "display", "block");
                        }
                    },
                    onCallbackBeforeChat: function(_f58) {
                        if (typeof _f58.table != "undefined") {
                            if (this.chatbarWindows["table_" + _f58.table] != "undefined") {
                                if (this.chatbarWindows["table_" + _f58.table].autoCollapseAfterMessage != "undefined") {
                                    if (this.chatbarWindows["table_" + _f58.table].autoCollapseAfterMessage) {
                                        this.collapseChatWindow("table_" + _f58.table);
                                    }
                                }
                                if (typeof this.discussblock != "undefined") {
                                    this.showMessage(_("A player at thie table blocked you."), "error");
                                    return false;
                                }
                            }
                        }
                        if (this.isBadWorkInChat(_f58.msg)) {
                            var _f59 = __("lang_mainsite", "We detect a word in your chat input that may be considered as an insult/profanity/aggressive attitude by others.") + "\n\n";
                            _f59 += __("lang_mainsite", "BGA has a zero-tolerance policy about insults and aggressive attitudes, whatever the reason.") + "\n\n";
                            _f59 += __("lang_mainsite", "If another player reports you, you will be ban from BGA.") + "\n\n";
                            _f59 += __("lang_mainsite", "If someone is provoking you, DO NOT RESPOND, block this player (thumb down on his/her profile) and report this players to moderators.") + "\n\n";
                            _f59 += __("lang_mainsite", "Insults on both side = Moderation of both side.") + "\n\n";
                            _f59 += __("lang_mainsite", "Do you really want to send your message and risk a moderation?");
                            return confirm(_f59);
                        }
                        return true;
                    },
                    isBadWorkInChat: function(msg) {
                        if (msg === null) {
                            return false;
                        }
                        var _f5a = " " + msg.toLowerCase() + " ";
                        for (var i in this.badWordList) {
                            if (_f5a.indexOf(" " + this.badWordList[i].replace("-", " ") + " ") != -1) {
                                return true;
                            }
                        }
                        return false;
                    },
                    onCallbackAfterChat: function(_f5b) {
                        if (typeof this.autoChatWhilePressingKey != "undefined") {
                            dijit.popup.close(this.autoChatWhilePressingKey);
                        }
                    },
                    callbackAfterChatError: function(_f5c) {
                        if (typeof _f5c.table != "undefined") {
                            if (this.chatbarWindows["table_" + _f5c.table] != "undefined") {
                                if (this.chatbarWindows["table_" + _f5c.table].autoCollapseAfterMessage != "undefined") {
                                    if (this.chatbarWindows["table_" + _f5c.table].autoCollapseAfterMessage) {
                                        this.expandChatWindow("table_" + _f5c.table, true);
                                    }
                                }
                            }
                        }
                    },
                    onDockedChatFocus: function(evt) {
                        var _f5d = evt.target.id.substr(13).slice(0, -6);
                        this.ackUnreadMessage(_f5d);
                    },
                    onDockedChatInputKey: function(evt) {
                        var _f5e = evt.target.id.substr(13).slice(0, -6);
                        this.ackUnreadMessage(_f5e);
                        if (this.chatbarWindows[_f5e].autoShowOnKeyPress && !this.chatbarWindows[_f5e].autoCollapseAfterMessage) {
                            if (typeof this.autoChatWhilePressingKey == "undefined" && dojo.hasClass("ebd-body", "desktop_version")) {
                                var html = "<div class=\"icon20 icon20_suggestion\"></div> ";
                                html += "<b>" + _("Did you know?") + "</b>";
                                html += "<hr/><div style='max-width:200px'>";
                                html += _("You can type messages anytime during a game to start chatting without opening this chat window manually.");
                                html += "</div>";
                                this.autoChatWhilePressingKey = new dijit.TooltipDialog({
                                    id: "autoChatWhilePressingKey",
                                    content: html,
                                    closable: true
                                });
                                var _f5f = evt.target;
                                dijit.popup.open({
                                    popup: this.autoChatWhilePressingKey,
                                    around: $(_f5f),
                                    orient: ["before-centered", "before", "below", "below-alt", "above", "above-alt"]
                                });
                            }
                        }
                    },
                    onShowPredefined: function(evt) {
                        var _f60 = evt.currentTarget.id.substr(24);
                        var _f61 = evt.currentTarget.id;
                        var _f62 = false;
                        if (typeof this.chatbarWindows[_f60].predefinedMessages == "undefined") {
                            _f62 = true;
                            var _f63 = this.getSmileyClassToCodeTable();
                            var html = "";
                            html += "<div style='width:300px'>";
                            if (this.notifqueue.game !== null) {
                                if (_f60.substr(0, 6) == "table_") {
                                    for (var code in this.predefinedTextMessages) {
                                        html += "<p class='predefined_textmessage' id='predefined_textmessage_" + _f60 + "-" + code + "'>" + __("lang_mainsite", this.predefinedTextMessages[code]) + "</p>";
                                    }
                                    html += "<hr/>";
                                }
                            }
                            for (var _f64 in _f63) {
                                html += "<div class='predefined_message' id='predefined_message_" + _f60 + "-" + _f64 + "'>";
                                html += this.addSmileyToText(_f63[_f64]);
                                html += "</div>";
                            }
                            html += "</div>";
                            this.chatbarWindows[_f60].predefinedMessages = new dijit.TooltipDialog({
                                id: "predefinedMessages_" + _f60,
                                content: html,
                                closable: true
                            });
                            var _f65 = {
                                BL: "TL",
                                TL: "BL"
                            };
                            this.chatbarWindows[_f60].predefinedMessagesOpen = false;
                        }
                        if (this.chatbarWindows[_f60].predefinedMessagesOpen == false) {
                            this.chatbarWindows[_f60].predefinedMessagesOpen = true;
                            dijit.popup.open({
                                popup: this.chatbarWindows[_f60].predefinedMessages,
                                around: $(_f61),
                                orient: ["after-centered", "after", "below", "below-alt", "above", "above-alt"]
                            });
                        } else {
                            this.chatbarWindows[_f60].predefinedMessagesOpen = false;
                            dijit.popup.close(this.chatbarWindows[_f60].predefinedMessages);
                        }
                        var _f66 = dojo.hasClass("ebd-body", "mobile_version");
                        dojo.style("chatbarinput_predefined_" + _f60 + "_dropdown", "zIndex", _f66 ? 10510 : 1051);
                        if (_f62) {
                            dojo.query("#chatbarinput_predefined_" + _f60 + "_dropdown .predefined_message").connect("onclick", this, "onInsertPredefinedMessage");
                            dojo.query("#chatbarinput_predefined_" + _f60 + "_dropdown .predefined_textmessage").connect("onclick", this, "onInsertPredefinedTextMessage");
                        }
                    },
                    onInsertPredefinedMessage: function(evt) {
                        var id = evt.currentTarget.id.substr(19);
                        var _f67 = id.split("-");
                        var _f68 = _f67[0];
                        var code = _f67[1];
                        var _f69 = this.getSmileyClassToCodeTable();
                        this.chatbarWindows[_f68].input.addContentToInput(_f69[code]);
                        $("chatbarinput_" + _f68 + "_input").focus();
                        this.chatbarWindows[_f68].predefinedMessagesOpen = false;
                        dijit.popup.close(this.chatbarWindows[_f68].predefinedMessages);
                    },
                    onInsertPredefinedTextMessage: function(evt) {
                        var id = evt.currentTarget.id.substr(23);
                        var _f6a = id.split("-");
                        var _f6b = _f6a[0];
                        var code = _f6a[1];
                        var text = this.predefinedTextMessages[code];
                        this.chatbarWindows[_f6b].input.addContentToInput(text);
                        $("chatbarinput_" + _f6b + "_input").focus();
                        if (this.chatbarWindows[_f6b].input.input_div.value == text) {
                            this.chatbarWindows[_f6b].input.sendMessage();
                        }
                        this.chatbarWindows[_f6b].predefinedMessagesOpen = false;
                        dijit.popup.close(this.chatbarWindows[_f6b].predefinedMessages);
                    },
                    setGroupList: function(_f6c, _f6d, _f6e, _f6f) {
                        this.groupList = _f6c;
                        this.red_thumbs_given = {};
                        this.red_thumbs_taken = {};
                        if (typeof _f6d != "undefined") {
                            this.allGroupList = _f6d;
                        }
                        if (typeof _f6e != "undefined" && typeof _f6e == "object") {
                            this.red_thumbs_given = _f6e;
                        } else {
                            this.red_thumbs_given = {};
                        }
                        if (typeof _f6f != "undefined" && typeof _f6f == "object") {
                            this.red_thumbs_taken = _f6f;
                        } else {
                            this.red_thumbs_taken = {};
                        }
                        if (!this.bChatDetached) {
                            var _f70 = {};
                            for (var _f71 in _f6c) {
                                _f70[_f71] = "/group/g" + _f71;
                            }
                            this.groupToCometdSubs = this.subscribeCometdChannels(_f70, this.notifqueue, "onNotification");
                        }
                    },
                    setLanguagesList: function(_f72) {
                        this.allLanguagesList = _f72;
                    },
                    setPma: function(pma) {
                        this.pma = pma;
                    },
                    setRtcMode: function(_f73, _f74) {
                        this.rtc_mode = _f73;
                        this.rtc_room = _f74;
                    },
                    takeIntoAccountAndroidIosRequestDesktopWebsite: function(d) {
                        function C(k) {
                            return (d.cookie.match("(^|; )" + k + "=([^;]*)") || 0)[2];
                        }
                        ;var ua = navigator.userAgent, _f75 = / mobile/i.test(ua), _f76 = !!(/ gecko/i.test(ua) && / firefox\//i.test(ua)), _f77 = C("wasmobile") === "was", _f78 = "user-scalable=yes, maximum-scale=2", el;
                        if (_f75 && !_f77) {
                            d.cookie = "wasmobile=was";
                        } else {
                            if (!_f75 && _f77) {
                                if (_f76) {
                                    el = d.createElement("meta");
                                    el.setAttribute("content", _f78);
                                    el.setAttribute("name", "viewport");
                                    d.getElementsByTagName("head")[0].appendChild(el);
                                } else {
                                    if (typeof d.getElementsByName("viewport")[0] == "undefined") {} else {
                                        d.getElementsByName("viewport")[0].setAttribute("content", _f78);
                                    }
                                }
                            }
                        }
                    },
                    traceLoadingPerformances: function() {
                        if (window.performance) {
                            if (window.performance.getEntries) {
                                var _f79 = window.performance.getEntries();
                                var _f7a = {};
                                for (var i in _f79) {
                                    var _f7b = _f79[i];
                                    var _f7c = extractDomain(_f7b["name"]);
                                    if (typeof _f7a[_f7c] == "undefined") {
                                        _f7a[_f7c] = {
                                            nb: 1,
                                            max: _f7b["duration"],
                                            total: _f7b["duration"]
                                        };
                                    } else {
                                        _f7a[_f7c].nb++;
                                        _f7a[_f7c].max = Math.max(_f7a[_f7c].max, _f7b["duration"]);
                                        _f7a[_f7c].total += _f7b["duration"];
                                    }
                                }
                                for (var i in _f7a) {
                                    _f7a[i].avg = Math.round(_f7a[i].total / _f7a[i].nb);
                                    _f7a[i].total = Math.round(_f7a[i].total);
                                    _f7a[i].max = Math.round(_f7a[i].max);
                                }
                                this.ajaxcall("/table/table/perfs.html", {
                                    perfs: dojo.toJson(_f7a)
                                }, this, function(_f7d) {}, function(_f7e) {}, "post");
                            }
                        }
                    },
                    getCurrentPlayerId: function() {
                        if (typeof current_player_id != "undefined") {
                            return current_player_id;
                        } else {
                            return this.player_id;
                        }
                    },
                    tutorialShowOnce: function(_f7f, _f80) {
                        if (typeof _f80 == "undefined") {
                            _f80 = true;
                        }
                        if (typeof current_player_id != "undefined") {
                            if (toint(current_player_id) < 0) {
                                return false;
                            }
                        } else {
                            if (this.isSpectator) {
                                return false;
                            }
                        }
                        if (_f7f < 0 || _f7f >= 256) {
                            console.error("Invalid tutorial id: " + _f7f);
                            return false;
                        } else {
                            var _f81 = Math.floor(_f7f / 64);
                            var _f82 = _f7f % 64;
                            var _f83 = 1 << _f82;
                            if (typeof this.tutorial != "undefined") {
                                var _f84 = this.tutorial;
                            } else {
                                var _f84 = this.metasite_tutorial;
                            }
                            if (_f84[_f81] & _f83) {
                                if (_f80) {
                                    _f84[_f81] = (_f84[_f81] & ~_f83);
                                    this.ajaxcall("/table/table/markTutorialAsSeen.html", {
                                        id: _f7f
                                    }, this, function(_f85) {});
                                }
                                return true;
                            } else {
                                return false;
                            }
                        }
                    },
                    highligthElementwaitForPopinToClose: function() {
                        if (dojo.query(".standard_popin").length > 0) {
                            setTimeout(dojo.hitch(this, "highligthElementwaitForPopinToClose"), 1000);
                        } else {
                            this.bHighlightPopinTimeoutInProgress = false;
                            this.onElementTutorialNext();
                        }
                    },
                    highlightElementTutorial: function(_f86, text, _f87) {
                        if (typeof _f87 == "undefined") {
                            _f87 = "";
                        }
                        if ($("tutorial-overlay")) {
                            this.tutorialHighlightedQueue.push({
                                id: _f86,
                                text: text,
                                optclass: _f87
                            });
                        } else {
                            if (dojo.query(".standard_popin").length > 0) {
                                this.tutorialHighlightedQueue.push({
                                    id: _f86,
                                    text: text,
                                    optclass: _f87
                                });
                                if (typeof this.bHighlightPopinTimeoutInProgress == "undefined" || this.bHighlightPopinTimeoutInProgress == false) {
                                    this.highligthElementwaitForPopinToClose();
                                    this.bHighlightPopinTimeoutInProgress = true;
                                }
                            } else {
                                dojo.place("<div id=\"tutorial-overlay\" class=\"tutorial-overlay\"></div>", "ebd-body", "first");
                                dojo.connect($("tutorial-overlay"), "onclick", this, "onElementTutorialNext");
                                var _f88 = {
                                    node: "tutorial-overlay",
                                    duration: 1000,
                                };
                                var _f89 = this;
                                this.highlightFadeInInProgress = true;
                                _f88.onEnd = dojo.hitch(this, function() {
                                    this.highlightFadeInInProgress = false;
                                    if ($("newArchiveComment")) {
                                        dojo.destroy("newArchiveComment");
                                    }
                                    if (dijit.byId("currentTutorialDialog")) {
                                        dijit.byId("currentTutorialDialog").destroy();
                                    }
                                    var html = "<div id='newArchiveComment' class='newArchiveComment'>                                    <div class='archiveComment_before'><p class='archiveComment_before_inner'><i class='fa fa-graduation-cap'></i></p></div>                                    <div id='newArchiveCommentTextDisplay'>" + this.applyCommentMarkup(text) + "</div>                                    <div id='newArchiveCommentDisplayControls'>" + "<a href='#' id='newArchiveCommentNext' class='bgabutton bgabutton_blue'>" + _("Continue") + "</a>                                    </div>                                </div>";
                                    this.currentTutorialDialog = new dijit.TooltipDialog({
                                        id: "currentTutorialDialog",
                                        content: html,
                                        closable: true
                                    });
                                    if (_f86 !== null && $(_f86)) {
                                        dijit.popup.open({
                                            popup: this.currentTutorialDialog,
                                            around: $(_f86),
                                            orient: ["below", "above", "after", "before"]
                                        });
                                    } else {
                                        var _f8a = dojo.position("ebd-body");
                                        var _f8b = _f8a.w / 2 - (430 / 2);
                                        dijit.popup.open({
                                            popup: this.currentTutorialDialog,
                                            x: _f8b,
                                            y: 180,
                                            orient: ["below", "above", "after", "before"]
                                        });
                                        dojo.query(".dijitTooltipConnector").style("display", "none");
                                    }
                                    if ($("newArchiveCommentNext")) {
                                        dojo.connect($("newArchiveCommentNext"), "onclick", _f89, "onElementTutorialNext");
                                    }
                                });
                                if (_f86 != null) {
                                    var _f8c = dojo.window.getBox();
                                    var _f8d = dojo.position(_f86);
                                    var _f8e = false;
                                    if (_f8d.y < 0) {
                                        _f8e = true;
                                    } else {
                                        if ((_f8d.y + _f8d.h) > (_f8c.h)) {
                                            _f8e = true;
                                        }
                                    }
                                    if (_f8e) {
                                        window.scrollBy({
                                            top: _f8d.y - 200,
                                            behavior: "smooth",
                                        });
                                    }
                                    dojo.addClass(_f86, "above-overlay");
                                    this.current_hightlighted_additional_class = _f87;
                                    if (_f87 != "") {
                                        dojo.addClass(_f86, _f87);
                                    }
                                    if (dojo.style(_f86, "position") == "static") {
                                        dojo.addClass(_f86, "above-overlay-relative");
                                    }
                                }
                                dojo.fadeIn(_f88).play();
                            }
                        }
                    },
                    onElementTutorialNext: function(evt) {
                        if (typeof evt != "undefined") {
                            dojo.stopEvent(evt);
                        }
                        if (typeof this.highlightFadeInInProgress != "undefined" && this.highlightFadeInInProgress) {
                            return;
                        }
                        if (this.currentTutorialDialog !== null) {
                            dijit.popup.close(this.currentTutorialDialog);
                            this.currentTutorialDialog = null;
                        }
                        if ($("tutorial-overlay")) {
                            var _f8f = {
                                node: "tutorial-overlay",
                                duration: 500
                            };
                            this.highlightFadeInInProgress = true;
                            _f8f.onEnd = dojo.hitch(this, function() {
                                this.highlightFadeInInProgress = false;
                                dojo.destroy("tutorial-overlay");
                                if (this.current_hightlighted_additional_class != "") {
                                    dojo.query(".above-overlay").removeClass(this.current_hightlighted_additional_class);
                                }
                                dojo.query(".above-overlay").removeClass("above-overlay");
                                dojo.query(".above-overlay-relative").removeClass("above-overlay-relative");
                                if (this.tutorialHighlightedQueue.length > 0) {
                                    var next = this.tutorialHighlightedQueue.shift();
                                    this.highlightElementTutorial(next.id, next.text, next.optclass);
                                }
                            });
                            dojo.fadeOut(_f8f).play();
                        } else {
                            if (this.tutorialHighlightedQueue.length > 0) {
                                var next = this.tutorialHighlightedQueue.shift();
                                this.highlightElementTutorial(next.id, next.text, next.optclass);
                            }
                        }
                    },
                    websiteWindowVisibilityChange: function(evt) {
                        var _f90 = "hidden";
                        var v = "visible"
                          , h = "hidden"
                          , _f91 = {
                            focus: v,
                            focusin: v,
                            pageshow: v,
                            blur: h,
                            focusout: h,
                            pagehide: h
                        };
                        evt = evt || window.event;
                        if (evt.type in _f91) {
                            this.window_visibility = _f91[evt.type];
                        } else {
                            this.window_visibility = document[_f90] ? "hidden" : "visible";
                        }
                    },
                    ackUnreadMessage: function(_f92, _f93) {
                        var _f94 = _f92.split("_")[0];
                        var _f95 = _f92.split("_")[1];
                        var _f96 = false;
                        if (typeof _f93 != "undefined" && _f93 == "unsub") {
                            if (_f94 == "table") {
                                _f96 = true;
                            }
                        }
                        if (_f94 == "privatechat" || _f94 == "table") {
                            if (dojo.query("#chatwindowlogs_zone_" + _f92 + " .newmessage").length > 0 || _f96) {
                                var _f97 = [];
                                dojo.query("#chatwindowlogs_zone_" + _f92 + " .newmessage .roundedboxinner").forEach(function(node) {
                                    _f97.push(node.id.substr(13));
                                });
                                if (_f94 == "privatechat") {
                                    var _f98 = _f95;
                                    this.ackMessagesWithPlayer(_f98, _f97);
                                } else {
                                    if (_f94 == "table") {
                                        var _f99 = _f95;
                                        this.ackMessagesOnTable(_f99, _f97, _f96);
                                    }
                                }
                                dojo.query("#chatwindowlogs_zone_" + _f92 + " .newmessage").removeClass("newmessage");
                            }
                        }
                    },
                    ackMessagesWithPlayer: function(_f9a, _f9b) {
                        this.ajaxcall("/table/table/chatack.html", {
                            player: _f9a,
                            list: _f9b.join(";")
                        }, this, function(_f9c) {}, function(_f9d) {}, "get");
                    },
                    ackMessagesOnTable: function(_f9e, _f9f, _fa0) {
                        var args = {
                            table: _f9e,
                            list: _f9f.join(";")
                        };
                        if (_fa0) {
                            args.bUnsub = _fa0;
                        }
                        this.ajaxcall("/table/table/chatack.html", args, this, function(_fa1) {}, function(_fa2) {}, "get");
                    },
                    onAckMsg: function(_fa3) {
                        for (var i in _fa3.args.msgs) {
                            var _fa4 = _fa3.args.msgs[i];
                            if ($("privmsg_read_" + _fa4)) {
                                dojo.removeClass("privmsg_read_" + _fa4, "message_unread");
                                dojo.addClass("privmsg_read_" + _fa4, "message_read");
                            }
                        }
                    },
                    initMonitoringWindowVisibilityChange: function() {
                        var _fa5 = "hidden";
                        if (_fa5 in document) {
                            dojo.connect(document, "visibilitychange", this, "websiteWindowVisibilityChange");
                        } else {
                            if ((_fa5 = "mozHidden")in document) {
                                dojo.connect(document, "mozvisibilitychange", this, "websiteWindowVisibilityChange");
                            } else {
                                if ((_fa5 = "webkitHidden")in document) {
                                    dojo.connect(document, "webkitvisibilitychange", this, "websiteWindowVisibilityChange");
                                } else {
                                    if ((_fa5 = "msHidden")in document) {
                                        dojo.connect(document, "msvisibilitychange", this, "websiteWindowVisibilityChange");
                                    } else {
                                        if ("onfocusin"in document) {
                                            dojo.connect(document, "onfocusin", this, "websiteWindowVisibilityChange");
                                            dojo.connect(document, "onfocusout", this, "websiteWindowVisibilityChange");
                                        } else {
                                            dojo.connect(window, "onpageshow", this, "websiteWindowVisibilityChange");
                                            dojo.connect(window, "onpagehide", this, "websiteWindowVisibilityChange");
                                            dojo.connect(window, "onfocus", this, "websiteWindowVisibilityChange");
                                            dojo.connect(window, "onblur", this, "websiteWindowVisibilityChange");
                                        }
                                    }
                                }
                            }
                        }
                        if (document[_fa5] !== undefined) {
                            this.websiteWindowVisibilityChange({
                                type: document[_fa5] ? "blur" : "focus"
                            });
                        }
                    },
                    playingHoursToLocal: function(_fa6, _fa7) {
                        if (_fa6.indexOf(":00") == -1) {
                            return _fa6;
                        }
                        var _fa8 = toint(_fa6.substr(0, _fa6.indexOf(":")));
                        var _fa9 = (_fa8 + this.timezoneDelta);
                        if (typeof _fa7 != "undefined" && _fa7) {
                            return {
                                start_hour: (_fa9 % 24) + ":00",
                                end_hour: ((_fa9 + 12) % 24) + ":00"
                            };
                        } else {
                            return (_fa9 % 24) + ":00 &rarr; " + ((_fa9 + 12) % 24) + ":00";
                        }
                    },
                    showSplashedPlayerNotifications: function(_faa) {
                        if (typeof this.splashNotifToDisplay == "undefined") {
                            this.splashNotifToDisplay = [];
                        }
                        for (var i in _faa) {
                            var _fab = _faa[i];
                            this.splashNotifToDisplay.push(_fab);
                        }
                        this.displayNextSplashNotif();
                    },
                    displayNextSplashNotif: function() {
                        var _fac = this.splashNotifToDisplay.shift();
                        var _fad = this.splashNotifToDisplay.length;
                        if (typeof _fac == "undefined") {
                            dojo.fadeOut({
                                node: "splashedNotifications_overlay",
                                duration: 500,
                                onEnd: function() {
                                    dojo.style("splashedNotifications_overlay", "display", "none");
                                }
                            }).play();
                            return;
                        }
                        var _fae = 500;
                        if (dojo.style("splashedNotifications_overlay", "display") == "none") {
                            dojo.style("splashedNotifications_overlay", "display", "block");
                            dojo.fadeIn({
                                node: "splashedNotifications_overlay",
                                duration: 1000
                            }).play();
                            _fae = 1000;
                        }
                        if (toint(_fac.news_type) == 16 || toint(_fac.news_type) == 21 || toint(_fac.news_type) == 17 || toint(_fac.news_type) == 30) {
                            var _faf = _fac.args[3];
                            if (toint(_faf) > 1000) {
                                var _fb0 = _fac.args[17];
                                var _fb1 = _fac.args[18];
                                _fac.base_img = getStaticAssetUrl("img/awards/" + _faf + "_" + _fb1 + ".png");
                                var _fb2 = Math.floor(_fb0 / 1000);
                                _fac.addimg = "<img src=\"" + g_themeurl + "../../data/grouparms/" + _fb2 + "/group_" + _fb0 + ".png?h=t" + "\"/>";
                                _fac.trophy_name = _fac.jargs.championship_name + " " + _fac.jargs.tournament_name + ": " + __("lang_mainsite", _fac.trophy_name);
                            } else {
                                _fac.base_img = getStaticAssetUrl("img/awards/" + _faf + ".png");
                                _fac.addimg = "";
                                _fac.trophy_name = __("lang_mainsite", _fac.trophy_name);
                                _fac.trophy_name = _fac.trophy_name.replace("%s", format_number(_fac.trophy_name_arg));
                                _fac.trophy_descr = __("lang_mainsite", _fac.trophy_descr);
                                _fac.trophy_descr = _fac.trophy_descr.replace("%s", format_number(_fac.trophy_name_arg));
                            }
                            _fac.shadow_img = getStaticAssetUrl("img/awards/award_shadow.png");
                            _fac.game_name = "";
                            if (typeof _fac.jargs.game_name != "undefined") {
                                _fac.game_name = __("lang_mainsite", _fac.jargs.game_name + "_displayed");
                                _fac.trophy_descr = "";
                            } else {}
                            _fac.continuelbl = __("lang_mainsite", "Continue");
                            _fac.prestige = format_number(_fac.args[16]);
                            if (_fad > 0) {
                                _fac.skiplbl = dojo.string.substitute(_("Skip ${nbr} more"), {
                                    nbr: _fad
                                });
                            } else {
                                _fac.skiplbl = "";
                            }
                            var _fb3 = "<div id=\"splash_trophy_${id}\" class=\"splash_block\">                        <div id=\"splash_background_${id}\" class=\"splash_background\"></div>                        <div id=\"splash_central_${id}\" class=\"splash_central\">                            <div class=\"trophyimg_wrap\">                                <div id=\"splash_trophy_imgwrap_${id}\" class=\"trophyimg_image\">                                    <img class=\"trophyimg_shadow\"  src='${shadow_img}'\"></img>                                    <div id=\"splash_trophyimg_${id}\" class=\"trophyimg trophyimg_xlarge\" style=\"background-image: url('${base_img}')\">${addimg}</div>                                </div>                                <p id=\"trophy_prestige_${id}\" class=\"trophy_prestige\">+${prestige} <span class=\"icon20 icon20_prestige\" style=\"top:1px\"></span></p>                            </div>                            <div class=\"splash_intro\">" + __("lang_mainsite", "You get a new trophy") + "</div>                            <div class=\"splash_gamename gamename\">${game_name}</div>                            <div class=\"splash_trophyname\">${trophy_name}</div>                            <div class=\"splash_descr\">${trophy_descr}</div>                        </div>                        <div id=\"continue_btn_${id}\" class=\"bgabutton bgabutton_always_big bgabutton_blue\">${continuelbl}</div>                        <a id=\"skip_wrap_${id}\" class=\"skip_wrap\" href=\"#\">${skiplbl}</a>                    </div>";
                            dojo.place(dojo.string.substitute(_fb3, _fac), splashedNotifications_overlay);
                            dojo.style("splash_central_" + _fac.id, "opacity", 0);
                            dojo.style("continue_btn_" + _fac.id, "opacity", 0);
                            dojo.style("skip_wrap_" + _fac.id, "opacity", 0);
                            dojo.style("splash_background_" + _fac.id, "left", "100%");
                            dojo.style("trophy_prestige_" + _fac.id, "opacity", 0);
                            dojo.fx.chain([dojo.animateProperty({
                                delay: _fae,
                                node: "splash_background_" + _fac.id,
                                properties: {
                                    left: 0,
                                    unit: "%"
                                },
                                onEnd: function() {
                                    playSound("new_trophy");
                                }
                            }), dojo.fadeIn({
                                node: "splash_central_" + _fac.id,
                                duration: 700
                            }), dojo.fadeIn({
                                node: "trophy_prestige_" + _fac.id,
                                duration: 700
                            }), dojo.fadeIn({
                                node: "continue_btn_" + _fac.id,
                                duration: 700
                            }), dojo.fadeIn({
                                node: "skip_wrap_" + _fac.id,
                                duration: 700
                            }), ]).play();
                            dojo.connect($("continue_btn_" + _fac.id), "onclick", this, "onDisplayNextSplashNotif");
                            dojo.connect($("skip_wrap_" + _fac.id), "onclick", this, "onDisplayNextSplashNotif");
                        } else {
                            if (toint(_fac.news_type) == 28) {
                                var _fb4 = _fac.args[1];
                                _fac.game_name = __("lang_mainsite", _fac.jargs.game_name + "_displayed");
                                _fac.continuelbl = __("lang_mainsite", "Continue");
                                var _fb5 = _fac.args[10];
                                var _fb6 = _fac.args[11];
                                var _fb7 = this.arenaPointsDetails(_fb5 / 10000, _fac.jargs.league_nbr);
                                var _fb8 = this.arenaPointsDetails(_fb6 / 10000, _fac.jargs.league_nbr);
                                var _fb3 = "<div id=\"splash_trophy_${id}\" class=\"splash_block splash_arena_points\">" + "<div id=\"splash_background_arena\" class=\"splash_background\"></div>" + "<div id=\"splash_central_arena\" class=\"splash_central\">" + "<div id=\"splash_trophy_imgwrap_arena\" class=\"leagueimg_image\">" + "<img class=\"trophyimg_shadow\"  src='${shadow_img}'\"></img>" + "<div id=\"splash_trophyimg_arena\" class=\"trophyimg trophyimg_xlarge\" style=\"background-image: url('${base_img}')\"></div>" + "</div>" + "<div id=\"splash_arena_bar\">" + "</div>" + "<div class=\"splash_intro\">${game_name} " + " ${league_name}</div>" + "<div class=\"progressbar progressbar_arena arena_${league_id} progressbar_nolabel\">" + "<div id=\"arena_bar\" class=\"progressbar_bar\">" + "<div id=\"progressbar_arena_width\" class=\"progressbar_content\"  style=\"${arenabarpcent}\">" + "<div id=\"arena_bar_container\" class=\"arena_container\">${arena_points_html}</div>" + "</div>" + "</div>" + "</div>" + "<div id=\"arena_bar_bottom_infos\" class=\"progressbar_bottom_infos\">${arena_bottom_infos}</div>" + "<div id=\"arena_world_rank_wrap\" style=\"display:none;\">" + _("World rank") + ": <span id=\"arena_world_rank\"><i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i></span></div>" + "</div>" + "<div id=\"continue_btn_${id}\" class=\"bgabutton bgabutton_always_big bgabutton_blue\">${continuelbl}</div>" + "</div>";
                                _fac.shadow_img = getStaticAssetUrl("img/awards/award_shadow.png");
                                _fac.base_img = getStaticAssetUrl("img/awards/" + (100 + _fb7.league) + ".png");
                                _fac.league_name = _fb7.league_name;
                                _fac.league_id = _fb7.league;
                                var html = this.arenaPointsHtml(_fb7);
                                _fac.arena_points_html = html.bar_content;
                                _fac.arena_bottom_infos = html.bottom_infos;
                                _fac.arenabarpcent = html.bar_pcent;
                                if (toint(_fb6) <= toint(_fb5)) {
                                    var _fb9 = _fb8.points;
                                    var _fba = _fb7.points;
                                } else {
                                    var _fb9 = _fb8.points;
                                    var _fba = _fb7.points;
                                    if (_fb8.league > _fb7.league) {
                                        _fb9 = 10;
                                    }
                                }
                                dojo.place(dojo.string.substitute(_fb3, _fac), splashedNotifications_overlay);
                                dojo.style("splash_central_arena", "opacity", 0);
                                dojo.style("continue_btn_" + _fac.id, "opacity", 0);
                                dojo.style("splash_background_arena", "left", "100%");
                                var _fbb;
                                dojo.forEach(["transform", "WebkitTransform", "msTransform", "MozTransform", "OTransform"], function(name) {
                                    if (typeof dojo.body().style[name] != "undefined") {
                                        _fbb = name;
                                    }
                                });
                                this.transform = _fbb;
                                var _fbc = [dojo.animateProperty({
                                    delay: _fae,
                                    node: "splash_background_arena",
                                    properties: {
                                        left: 0,
                                        unit: "%"
                                    }
                                }), dojo.fadeIn({
                                    node: "splash_central_arena",
                                    duration: 700
                                })];
                                if (_fb7.league == 5) {
                                    var _fbd = this.arenaPointsHtml(_fb8);
                                    if (_fb8.arelo != _fb7.arelo) {
                                        var _fbe = "";
                                        if (_fb8.arelo > _fb7.arelo) {
                                            var diff = _fb8.arelo - _fb7.arelo;
                                            _fbe = "+" + Math.round(diff) + " " + _("points");
                                        } else {
                                            var diff = _fb8.arelo - _fb7.arelo;
                                            _fbe = Math.round(diff) + " " + _("points");
                                        }
                                        var anim = new dojo.Animation({
                                            curve: [_fb7.arelo, _fb8.arelo],
                                            duration: 1000,
                                            onBegin: function() {
                                                playSound("elochange");
                                            },
                                            onAnimate: dojo.hitch(this, function(v) {
                                                $("arena_bar_container").innerHTML = Math.round(v) + " " + _("points");
                                                var _fbf = html.bar_pcent_number + (_fbd.bar_pcent_number - html.bar_pcent_number) * (v - _fb7.arelo) / (_fb8.arelo - _fb7.arelo);
                                                $("progressbar_arena_width").style["width"] = _fbf + "%";
                                            }),
                                            onEnd: function() {
                                                $("arena_bar").innerHTML += "<div class=\"arena_container_bar_details\">" + _fbe + "</div>";
                                            }
                                        });
                                        _fbc.push(anim);
                                    }
                                    var _fc0 = {
                                        transform: _fbb,
                                        node: $("arena_world_rank_wrap")
                                    };
                                    var anim = new dojo.Animation({
                                        curve: [20, 1],
                                        delay: 300,
                                        onBegin: dojo.hitch(_fc0, function() {
                                            dojo.style("arena_world_rank_wrap", "display", "block");
                                        }),
                                        onAnimate: dojo.hitch(_fc0, function(v) {
                                            this.node.style[this.transform] = "scale(" + v + ")";
                                        }),
                                        onEnd: function() {
                                            playSound("gain_arena");
                                        },
                                        duration: 500
                                    });
                                    _fbc.push(anim);
                                    this.ajaxcall("/lobby/lobby/getArenaWorldRank.html", {
                                        game: _fb4,
                                        arelo: _fb8.arelo
                                    }, this, dojo.hitch(this, function(_fc1) {
                                        $("arena_world_rank").innerHTML = this.getRankString(_fc1.rank);
                                    }));
                                }
                                if (_fb9 > _fba) {
                                    if (soundManager.loadSound) {
                                        soundManager.loadSound("gain_arena");
                                    }
                                    for (var i = _fba; i < _fb9; i++) {
                                        dojo.query(".arena_point_wrap_" + i + " .arena_shadow").style("opacity", 1);
                                        var _fc2 = dojo.query(".arena_point_wrap_" + i + " .arena_colored")[0];
                                        var _fc0 = {
                                            transform: _fbb,
                                            node: _fc2
                                        };
                                        var anim = new dojo.Animation({
                                            curve: [20, 1],
                                            onBegin: dojo.hitch(_fc0, function() {
                                                this.node.style["opacity"] = 1;
                                            }),
                                            onAnimate: dojo.hitch(_fc0, function(v) {
                                                this.node.style[this.transform] = "scale(" + v + ")";
                                            }),
                                            onEnd: function() {
                                                playSound("gain_arena");
                                                var _fc3 = dojo.query(".splash_block .remain_arena_points")[0];
                                                if (_fc3) {
                                                    _fc3.innerHTML = toint(_fc3.innerHTML) - 1;
                                                    if (toint(_fc3.innerHTML) == 0) {
                                                        dojo.query(".progressbar_bottom_infos")[0].innerHTML = "<i class=\"fa fa-check\"></i> " + _("Completed!");
                                                    }
                                                }
                                            },
                                            duration: 500
                                        });
                                        _fbc.push(anim);
                                    }
                                } else {
                                    if (_fb9 < _fba) {
                                        if (soundManager.loadSound) {
                                            soundManager.loadSound("lose_arena");
                                        }
                                        for (var i = _fba; i > _fb9; i--) {
                                            dojo.query(".arena_point_wrap_" + (i - 1) + " .arena_white").style("opacity", 1);
                                            dojo.query(".arena_point_wrap_" + (i - 1) + " .arena_shadow").style("opacity", 0);
                                            var _fc2 = dojo.query(".arena_point_wrap_" + (i - 1) + " .arena_colored")[0];
                                            var anim = this.slideToObjectPos(_fc2, _fc2.parentNode, 0, 500);
                                            dojo.connect(anim, "onEnd", function(node) {
                                                dojo.destroy(node);
                                                playSound("lose_arena");
                                                var _fc4 = dojo.query(".splash_block .remain_arena_points")[0];
                                                if (_fc4) {
                                                    _fc4.innerHTML = toint(_fc4.innerHTML) + 1;
                                                }
                                            });
                                            _fbc.push(anim);
                                        }
                                    }
                                }
                                _fbc.push(dojo.fadeIn({
                                    node: "continue_btn_" + _fac.id,
                                    duration: 700
                                }));
                                dojo.fx.chain(_fbc).play();
                                dojo.connect($("continue_btn_" + _fac.id), "onclick", this, "onDisplayNextSplashNotif");
                            } else {
                                console.error("Unknow notification to splashed reveived: " + _fac.news_type);
                                this.displayNextSplashNotif();
                            }
                        }
                    },
                    onDisplayNextSplashNotif: function(evt) {
                        dojo.stopEvent(evt);
                        var _fc5 = evt.currentTarget.id.split("_");
                        var _fc6 = _fc5[2];
                        if (_fc5[0] == "continue") {
                            var args = {
                                id: _fc6
                            };
                            this.ajaxcall("/message/board/markread.html", args, this, function() {});
                        } else {
                            if (_fc5[0] == "skip") {
                                var _fc7 = _fc6 + ";";
                                for (var i in this.splashNotifToDisplay) {
                                    _fc7 += this.splashNotifToDisplay[i].id + ";";
                                }
                                this.ajaxcall("/message/board/markreads.html", {
                                    ids: _fc7
                                }, this, function() {});
                                this.splashNotifToDisplay = [];
                            }
                        }
                        this.fadeOutAndDestroy("splash_trophy_" + _fc6);
                        this.displayNextSplashNotif();
                    },
                    inactivityTimerIncrement: function() {
                        this.browser_inactivity_time += 1;
                        if (this.browser_inactivity_time > 120 && this.bInactiveBrowser == false) {
                            this.bInactiveBrowser = true;
                            if (this.io) {
                                this.io.close();
                                this.warningDialog(_("You have been disconnected due to inactivity. Click on button below to continue."), function() {
                                    window.location.reload();
                                });
                            }
                        }
                    },
                    resetInactivityTimer: function() {
                        this.browser_inactivity_time = 0;
                    },
                    onForceBrowserReload: function() {
                        if (this.io) {
                            this.io.close();
                            this.warningDialog(_("Due to a BGA upgrade, we have to ask you to reload this page to continue."), function() {
                                window.location.reload();
                            });
                        }
                    },
                    onDebugPing: function() {
                        var _fc8 = "_";
                        if ($("bga_release_id")) {
                            _fc8 = $("bga_release_id").innerHTML;
                        }
                        this.ajaxcall("/table/table/debugPing.html", {
                            bgaversion: _fc8
                        }, this, function(_fc9) {});
                    },
                    onMuteSound: function() {
                        var mute = localStorage.getItem("sound_muted");
                        if (mute == 1) {
                            soundManager.bMuteSound = true;
                            dojo.removeClass("toggleSound_icon", "fa-volume-up");
                            dojo.addClass("toggleSound_icon", "fa-volume-off");
                            if ($("soundVolumeControl") !== null) {
                                $("soundVolumeControl").value = 0;
                            }
                        } else {
                            soundManager.bMuteSound = false;
                            dojo.addClass("toggleSound_icon", "fa-volume-up");
                            dojo.removeClass("toggleSound_icon", "fa-volume-off");
                            if ($("soundVolumeControl") !== null) {
                                $("soundVolumeControl").value = soundManager.volume * 100;
                            }
                            playSound("tac");
                        }
                    },
                    onSetSoundVolume: function() {
                        var _fca = localStorage.getItem("sound_volume");
                        soundManager.volume = _fca / 100;
                        this.onMuteSound();
                    },
                    onToggleSound: function(evt) {
                        evt.preventDefault();
                        var mute = localStorage.getItem("sound_muted");
                        if (mute == 1) {
                            localStorage.setItem("sound_muted", 0);
                        } else {
                            localStorage.setItem("sound_muted", 1);
                        }
                        this.onMuteSound();
                    },
                    onDisplaySoundControls: function(evt) {
                        clearTimeout(this.hideSoundControlsTimer);
                        this.displaySoundControlsTimer = setTimeout(dojo.hitch(this, "displaySoundControls"), 200);
                    },
                    displaySoundControls: function(evt) {
                        if (dojo.hasClass("soundControls", "soundControlsHidden")) {
                            dojo.removeClass("soundControls", "soundControlsHidden");
                        }
                    },
                    onHideSoundControls: function(evt) {
                        clearTimeout(this.displaySoundControlsTimer);
                        this.hideSoundControlsTimer = setTimeout(dojo.hitch(this, "hideSoundControls"), 200);
                    },
                    hideSoundControls: function() {
                        if (!dojo.hasClass("soundControls", "stickySoundControls") && !dojo.hasClass("soundControls", "soundControlsHidden")) {
                            dojo.addClass("soundControls", "soundControlsHidden");
                        }
                    },
                    onStickSoundControls: function(evt) {
                        clearTimeout(this.hideSoundControlsTimer);
                    },
                    onUnstickSoundControls: function(evt) {
                        this.onHideSoundControls(evt);
                    },
                    onSoundVolumeControl: function(evt) {
                        if ($("soundVolumeControl") !== null) {
                            var _fcb = $("soundVolumeControl").value;
                            localStorage.setItem("sound_volume", _fcb);
                            $("soundVolumeControl").blur();
                            this.onSetSoundVolume();
                        }
                    },
                });
            });
        },
        "ebg/core/soundManager": function() {
            define(["dojo", "dojo/_base/declare", "ebg/core/core"], function(dojo, _fcc) {
                return _fcc("ebg.core.soundManager", null, {
                    constructor: function() {
                        this.html5 = true;
                        this.useOgg = true;
                        this.bMuteSound = false;
                        this.soundMode = 0;
                        this.initOk = false;
                        this.volume = 0.8;
                    },
                    init: function() {
                        var _fcd = !!(document.createElement("audio").canPlayType);
                        if (_fcd) {
                            this.html5 = true;
                            this.initHtml5Audio();
                        }
                        return this.html5;
                    },
                    initHtml5Audio: function() {
                        var _fce = !!(document.createElement("audio").canPlayType);
                        if (_fce) {
                            var _fcf = document.createElement("audio");
                            if (_fcf.canPlayType) {
                                var _fd0 = !!_fcf.canPlayType && "" != _fcf.canPlayType("audio/ogg; codecs=\"vorbis\"");
                                if (_fd0) {
                                    this.html5 = true;
                                    this.useOgg = true;
                                    this.initOk = true;
                                } else {
                                    this.useOgg = false;
                                    var _fd1 = !!_fcf.canPlayType && "" != _fcf.canPlayType("audio/mpeg");
                                    if (_fd1) {
                                        this.html5 = true;
                                        this.initOk = true;
                                    }
                                }
                            }
                        }
                    },
                    getSoundIdFromEvent: function(_fd2) {
                        if (soundManager.sounds[_fd2]) {
                            return soundManager.sounds[_fd2];
                        } else {
                            return _fd2;
                        }
                    },
                    getSoundTag: function(_fd3) {
                        if (this.useOgg) {
                            return "audiosrc_o_" + _fd3;
                        } else {
                            return "audiosrc_" + _fd3;
                        }
                    },
                    doPlay: function(_fd4) {
                        if (this.bMuteSound) {
                            return;
                        }
                        var _fd5 = this.getSoundIdFromEvent(_fd4.id);
                        this.doPlayFile(_fd5);
                    },
                    loadSound: function(_fd6) {
                        var _fd7 = this.getSoundTag(_fd6);
                        if (!$(_fd7)) {
                            var file = _fd6;
                            if (this.useOgg) {
                                file += ".ogg";
                            } else {
                                file += ".mp3";
                            }
                            dojo.place(dojo.trim(dojo.string.substitute(jstpl_audiosrc, {
                                id: _fd7,
                                file: file
                            })), "audiosources");
                        }
                    },
                    doPlayFile: function(_fd8) {
                        var _fd9 = this.getSoundTag(_fd8);
                        this.loadSound(_fd8);
                        if ($(_fd9)) {
                            $(_fd9).volume = this.volume;
                            $(_fd9).currentTime = 0;
                            $(_fd9).play();
                        }
                    },
                    stop: function(_fda) {
                        var _fdb = this.getSoundIdFromEvent(_fda.id);
                        var _fdc = this.getSoundTag(_fdb);
                        if ($(_fdc)) {
                            $(_fdc).pause();
                        }
                    },
                    onChangeSound: function(_fdd) {
                        this.sounds[_fdd.args.event] = _fdd.args.file;
                    }
                });
            });
        },
        "dijit/form/Select": function() {
            define(["dojo/_base/array", "dojo/_base/declare", "dojo/dom-attr", "dojo/dom-class", "dojo/dom-geometry", "dojo/i18n", "dojo/keys", "dojo/_base/lang", "dojo/on", "dojo/sniff", "./_FormSelectWidget", "../_HasDropDown", "../DropDownMenu", "../MenuItem", "../MenuSeparator", "../Tooltip", "../_KeyNavMixin", "../registry", "dojo/text!./templates/Select.html", "dojo/i18n!./nls/validate"], function(_fde, _fdf, _fe0, _fe1, _fe2, i18n, keys, lang, on, has, _fe3, _fe4, _fe5, _fe6, _fe7, _fe8, _fe9, _fea, _feb) {
                var _fec = _fdf("dijit.form._SelectMenu", _fe5, {
                    autoFocus: true,
                    buildRendering: function() {
                        this.inherited(arguments);
                        this.domNode.setAttribute("role", "listbox");
                    },
                    postCreate: function() {
                        this.inherited(arguments);
                        this.own(on(this.domNode, "selectstart", function(evt) {
                            evt.preventDefault();
                            evt.stopPropagation();
                        }));
                    },
                    focus: function() {
                        var _fed = false
                          , val = this.parentWidget.value;
                        if (lang.isArray(val)) {
                            val = val[val.length - 1];
                        }
                        if (val) {
                            _fde.forEach(this.parentWidget._getChildren(), function(_fee) {
                                if (_fee.option && (val === _fee.option.value)) {
                                    _fed = true;
                                    this.focusChild(_fee, false);
                                }
                            }, this);
                        }
                        if (!_fed) {
                            this.inherited(arguments);
                        }
                    }
                });
                var _fef = _fdf("dijit.form.Select" + (has("dojo-bidi") ? "_NoBidi" : ""), [_fe3, _fe4, _fe9], {
                    baseClass: "dijitSelect dijitValidationTextBox",
                    templateString: _feb,
                    _buttonInputDisabled: has("ie") ? "disabled" : "",
                    required: false,
                    state: "",
                    message: "",
                    tooltipPosition: [],
                    emptyLabel: "&#160;",
                    _isLoaded: false,
                    _childrenLoaded: false,
                    labelType: "html",
                    _fillContent: function() {
                        this.inherited(arguments);
                        if (this.options.length && !this.value && this.srcNodeRef) {
                            var si = this.srcNodeRef.selectedIndex || 0;
                            this._set("value", this.options[si >= 0 ? si : 0].value);
                        }
                        this.dropDown = new _fec({
                            id: this.id + "_menu",
                            parentWidget: this
                        });
                        _fe1.add(this.dropDown.domNode, this.baseClass.replace(/\s+|$/g, "Menu "));
                    },
                    _getMenuItemForOption: function(_ff0) {
                        if (!_ff0.value && !_ff0.label) {
                            return new _fe7({
                                ownerDocument: this.ownerDocument
                            });
                        } else {
                            var _ff1 = lang.hitch(this, "_setValueAttr", _ff0);
                            var item = new _fe6({
                                option: _ff0,
                                label: (this.labelType === "text" ? (_ff0.label || "").toString().replace(/&/g, "&amp;").replace(/</g, "&lt;") : _ff0.label) || this.emptyLabel,
                                onClick: _ff1,
                                ownerDocument: this.ownerDocument,
                                dir: this.dir,
                                textDir: this.textDir,
                                disabled: _ff0.disabled || false
                            });
                            item.focusNode.setAttribute("role", "option");
                            return item;
                        }
                    },
                    _addOptionItem: function(_ff2) {
                        if (this.dropDown) {
                            this.dropDown.addChild(this._getMenuItemForOption(_ff2));
                        }
                    },
                    _getChildren: function() {
                        if (!this.dropDown) {
                            return [];
                        }
                        return this.dropDown.getChildren();
                    },
                    focus: function() {
                        if (!this.disabled && this.focusNode.focus) {
                            try {
                                this.focusNode.focus();
                            } catch (e) {}
                        }
                    },
                    focusChild: function(_ff3) {
                        if (_ff3) {
                            this.set("value", _ff3.option);
                        }
                    },
                    _getFirst: function() {
                        var _ff4 = this._getChildren();
                        return _ff4.length ? _ff4[0] : null;
                    },
                    _getLast: function() {
                        var _ff5 = this._getChildren();
                        return _ff5.length ? _ff5[_ff5.length - 1] : null;
                    },
                    childSelector: function(node) {
                        var node = _fea.byNode(node);
                        return node && node.getParent() == this.dropDown;
                    },
                    onKeyboardSearch: function(item, evt, _ff6, _ff7) {
                        if (item) {
                            this.focusChild(item);
                        }
                    },
                    _loadChildren: function(_ff8) {
                        if (_ff8 === true) {
                            if (this.dropDown) {
                                delete this.dropDown.focusedChild;
                                this.focusedChild = null;
                            }
                            if (this.options.length) {
                                this.inherited(arguments);
                            } else {
                                _fde.forEach(this._getChildren(), function(_ff9) {
                                    _ff9.destroyRecursive();
                                });
                                var item = new _fe6({
                                    ownerDocument: this.ownerDocument,
                                    label: this.emptyLabel
                                });
                                this.dropDown.addChild(item);
                            }
                        } else {
                            this._updateSelection();
                        }
                        this._isLoaded = false;
                        this._childrenLoaded = true;
                        if (!this._loadingStore) {
                            this._setValueAttr(this.value, false);
                        }
                    },
                    _refreshState: function() {
                        if (this._started) {
                            this.validate(this.focused);
                        }
                    },
                    startup: function() {
                        this.inherited(arguments);
                        this._refreshState();
                    },
                    _setValueAttr: function(_ffa) {
                        this.inherited(arguments);
                        _fe0.set(this.valueNode, "value", this.get("value"));
                        this._refreshState();
                    },
                    _setNameAttr: "valueNode",
                    _setDisabledAttr: function(_ffb) {
                        this.inherited(arguments);
                        this._refreshState();
                    },
                    _setRequiredAttr: function(_ffc) {
                        this._set("required", _ffc);
                        this.focusNode.setAttribute("aria-required", _ffc);
                        this._refreshState();
                    },
                    _setOptionsAttr: function(_ffd) {
                        this._isLoaded = false;
                        this._set("options", _ffd);
                    },
                    _setDisplay: function(_ffe) {
                        var lbl = (this.labelType === "text" ? (_ffe || "").replace(/&/g, "&amp;").replace(/</g, "&lt;") : _ffe) || this.emptyLabel;
                        this.containerNode.innerHTML = "<span role=\"option\" aria-selected=\"true\" class=\"dijitReset dijitInline " + this.baseClass.replace(/\s+|$/g, "Label ") + "\">" + lbl + "</span>";
                    },
                    validate: function(_fff) {
                        var _1000 = this.disabled || this.isValid(_fff);
                        this._set("state", _1000 ? "" : (this._hasBeenBlurred ? "Error" : "Incomplete"));
                        this.focusNode.setAttribute("aria-invalid", _1000 ? "false" : "true");
                        var _1001 = _1000 ? "" : this._missingMsg;
                        if (_1001 && this.focused && this._hasBeenBlurred) {
                            _fe8.show(_1001, this.domNode, this.tooltipPosition, !this.isLeftToRight());
                        } else {
                            _fe8.hide(this.domNode);
                        }
                        this._set("message", _1001);
                        return _1000;
                    },
                    isValid: function() {
                        return (!this.required || this.value === 0 || !(/^\s*$/.test(this.value || "")));
                    },
                    reset: function() {
                        this.inherited(arguments);
                        _fe8.hide(this.domNode);
                        this._refreshState();
                    },
                    postMixInProperties: function() {
                        this.inherited(arguments);
                        this._missingMsg = i18n.getLocalization("dijit.form", "validate", this.lang).missingMessage;
                    },
                    postCreate: function() {
                        this.inherited(arguments);
                        this.own(on(this.domNode, "selectstart", function(evt) {
                            evt.preventDefault();
                            evt.stopPropagation();
                        }));
                        this.domNode.setAttribute("aria-expanded", "false");
                        var _1002 = this._keyNavCodes;
                        delete _1002[keys.LEFT_ARROW];
                        delete _1002[keys.RIGHT_ARROW];
                    },
                    _setStyleAttr: function(value) {
                        this.inherited(arguments);
                        _fe1.toggle(this.domNode, this.baseClass.replace(/\s+|$/g, "FixedWidth "), !!this.domNode.style.width);
                    },
                    isLoaded: function() {
                        return this._isLoaded;
                    },
                    loadDropDown: function(_1003) {
                        this._loadChildren(true);
                        this._isLoaded = true;
                        _1003();
                    },
                    destroy: function(_1004) {
                        if (this.dropDown && !this.dropDown._destroyed) {
                            this.dropDown.destroyRecursive(_1004);
                            delete this.dropDown;
                        }
                        _fe8.hide(this.domNode);
                        this.inherited(arguments);
                    },
                    _onFocus: function() {
                        this.validate(true);
                    },
                    _onBlur: function() {
                        _fe8.hide(this.domNode);
                        this.inherited(arguments);
                        this.validate(false);
                    }
                });
                if (has("dojo-bidi")) {
                    _fef = _fdf("dijit.form.Select", _fef, {
                        _setDisplay: function(_1005) {
                            this.inherited(arguments);
                            this.applyTextDir(this.containerNode);
                        }
                    });
                }
                _fef._Menu = _fec;
                function _1006(_1007) {
                    return function(evt) {
                        if (!this._isLoaded) {
                            this.loadDropDown(lang.hitch(this, _1007, evt));
                        } else {
                            this.inherited(_1007, arguments);
                        }
                    }
                    ;
                }
                ;_fef.prototype._onContainerKeydown = _1006("_onContainerKeydown");
                _fef.prototype._onContainerKeypress = _1006("_onContainerKeypress");
                return _fef;
            });
        },
        "dijit/form/_FormSelectWidget": function() {
            define(["dojo/_base/array", "dojo/_base/Deferred", "dojo/aspect", "dojo/data/util/sorter", "dojo/_base/declare", "dojo/dom", "dojo/dom-class", "dojo/_base/kernel", "dojo/_base/lang", "dojo/query", "dojo/when", "dojo/store/util/QueryResults", "./_FormValueWidget"], function(array, _1008, _1009, _100a, _100b, dom, _100c, _100d, lang, query, when, _100e, _100f) {
                var _1010 = _100b("dijit.form._FormSelectWidget", _100f, {
                    multiple: false,
                    options: null,
                    store: null,
                    _setStoreAttr: function(val) {
                        if (this._created) {
                            this._deprecatedSetStore(val);
                        }
                    },
                    query: null,
                    _setQueryAttr: function(query) {
                        if (this._created) {
                            this._deprecatedSetStore(this.store, this.selectedValue, {
                                query: query
                            });
                        }
                    },
                    queryOptions: null,
                    _setQueryOptionsAttr: function(_1011) {
                        if (this._created) {
                            this._deprecatedSetStore(this.store, this.selectedValue, {
                                queryOptions: _1011
                            });
                        }
                    },
                    labelAttr: "",
                    onFetch: null,
                    sortByLabel: true,
                    loadChildrenOnOpen: false,
                    onLoadDeferred: null,
                    getOptions: function(_1012) {
                        var opts = this.options || [];
                        if (_1012 == null) {
                            return opts;
                        }
                        if (lang.isArrayLike(_1012)) {
                            return array.map(_1012, "return this.getOptions(item);", this);
                        }
                        if (lang.isString(_1012)) {
                            _1012 = {
                                value: _1012
                            };
                        }
                        if (lang.isObject(_1012)) {
                            if (!array.some(opts, function(_1013, idx) {
                                for (var a in _1012) {
                                    if (!(a in _1013) || _1013[a] != _1012[a]) {
                                        return false;
                                    }
                                }
                                _1012 = idx;
                                return true;
                            })) {
                                _1012 = -1;
                            }
                        }
                        if (_1012 >= 0 && _1012 < opts.length) {
                            return opts[_1012];
                        }
                        return null;
                    },
                    addOption: function(_1014) {
                        array.forEach(lang.isArrayLike(_1014) ? _1014 : [_1014], function(i) {
                            if (i && lang.isObject(i)) {
                                this.options.push(i);
                            }
                        }, this);
                        this._loadChildren();
                    },
                    removeOption: function(_1015) {
                        var _1016 = this.getOptions(lang.isArrayLike(_1015) ? _1015 : [_1015]);
                        array.forEach(_1016, function(_1017) {
                            if (_1017) {
                                this.options = array.filter(this.options, function(node) {
                                    return (node.value !== _1017.value || node.label !== _1017.label);
                                });
                                this._removeOptionItem(_1017);
                            }
                        }, this);
                        this._loadChildren();
                    },
                    updateOption: function(_1018) {
                        array.forEach(lang.isArrayLike(_1018) ? _1018 : [_1018], function(i) {
                            var _1019 = this.getOptions({
                                value: i.value
                            }), k;
                            if (_1019) {
                                for (k in i) {
                                    _1019[k] = i[k];
                                }
                            }
                        }, this);
                        this._loadChildren();
                    },
                    setStore: function(store, _101a, _101b) {
                        _100d.deprecated(this.declaredClass + "::setStore(store, selectedValue, fetchArgs) is deprecated. Use set('query', fetchArgs.query), set('queryOptions', fetchArgs.queryOptions), set('store', store), or set('value', selectedValue) instead.", "", "2.0");
                        this._deprecatedSetStore(store, _101a, _101b);
                    },
                    _deprecatedSetStore: function(store, _101c, _101d) {
                        var _101e = this.store;
                        _101d = _101d || {};
                        if (_101e !== store) {
                            var h;
                            while ((h = this._notifyConnections.pop())) {
                                h.remove();
                            }
                            if (!store.get) {
                                lang.mixin(store, {
                                    _oldAPI: true,
                                    get: function(id) {
                                        var _101f = new _1008();
                                        this.fetchItemByIdentity({
                                            identity: id,
                                            onItem: function(_1020) {
                                                _101f.resolve(_1020);
                                            },
                                            onError: function(error) {
                                                _101f.reject(error);
                                            }
                                        });
                                        return _101f.promise;
                                    },
                                    query: function(query, _1021) {
                                        var _1022 = new _1008(function() {
                                            if (_1023.abort) {
                                                _1023.abort();
                                            }
                                        }
                                        );
                                        _1022.total = new _1008();
                                        var _1023 = this.fetch(lang.mixin({
                                            query: query,
                                            onBegin: function(count) {
                                                _1022.total.resolve(count);
                                            },
                                            onComplete: function(_1024) {
                                                _1022.resolve(_1024);
                                            },
                                            onError: function(error) {
                                                _1022.reject(error);
                                            }
                                        }, _1021));
                                        return new _100e(_1022);
                                    }
                                });
                                if (store.getFeatures()["dojo.data.api.Notification"]) {
                                    this._notifyConnections = [_1009.after(store, "onNew", lang.hitch(this, "_onNewItem"), true), _1009.after(store, "onDelete", lang.hitch(this, "_onDeleteItem"), true), _1009.after(store, "onSet", lang.hitch(this, "_onSetItem"), true)];
                                }
                            }
                            this._set("store", store);
                        }
                        if (this.options && this.options.length) {
                            this.removeOption(this.options);
                        }
                        if (this._queryRes && this._queryRes.close) {
                            this._queryRes.close();
                        }
                        if (this._observeHandle && this._observeHandle.remove) {
                            this._observeHandle.remove();
                            this._observeHandle = null;
                        }
                        if (_101d.query) {
                            this._set("query", _101d.query);
                        }
                        if (_101d.queryOptions) {
                            this._set("queryOptions", _101d.queryOptions);
                        }
                        if (store && store.query) {
                            this._loadingStore = true;
                            this.onLoadDeferred = new _1008();
                            this._queryRes = store.query(this.query, this.queryOptions);
                            when(this._queryRes, lang.hitch(this, function(items) {
                                if (this.sortByLabel && !_101d.sort && items.length) {
                                    if (store.getValue) {
                                        items.sort(_100a.createSortFunction([{
                                            attribute: store.getLabelAttributes(items[0])[0]
                                        }], store));
                                    } else {
                                        var _1025 = this.labelAttr;
                                        items.sort(function(a, b) {
                                            return a[_1025] > b[_1025] ? 1 : b[_1025] > a[_1025] ? -1 : 0;
                                        });
                                    }
                                }
                                if (_101d.onFetch) {
                                    items = _101d.onFetch.call(this, items, _101d);
                                }
                                array.forEach(items, function(i) {
                                    this._addOptionForItem(i);
                                }, this);
                                if (this._queryRes.observe) {
                                    this._observeHandle = this._queryRes.observe(lang.hitch(this, function(_1026, _1027, _1028) {
                                        if (_1027 == _1028) {
                                            this._onSetItem(_1026);
                                        } else {
                                            if (_1027 != -1) {
                                                this._onDeleteItem(_1026);
                                            }
                                            if (_1028 != -1) {
                                                this._onNewItem(_1026);
                                            }
                                        }
                                    }), true);
                                }
                                this._loadingStore = false;
                                this.set("value", "_pendingValue"in this ? this._pendingValue : _101c);
                                delete this._pendingValue;
                                if (!this.loadChildrenOnOpen) {
                                    this._loadChildren();
                                } else {
                                    this._pseudoLoadChildren(items);
                                }
                                this.onLoadDeferred.resolve(true);
                                this.onSetStore();
                            }), lang.hitch(this, function(err) {
                                console.error("dijit.form.Select: " + err.toString());
                                this.onLoadDeferred.reject(err);
                            }));
                        }
                        return _101e;
                    },
                    _setValueAttr: function(_1029, _102a) {
                        if (!this._onChangeActive) {
                            _102a = null;
                        }
                        if (this._loadingStore) {
                            this._pendingValue = _1029;
                            return;
                        }
                        if (_1029 == null) {
                            return;
                        }
                        if (lang.isArrayLike(_1029)) {
                            _1029 = array.map(_1029, function(value) {
                                return lang.isObject(value) ? value : {
                                    value: value
                                };
                            });
                        } else {
                            if (lang.isObject(_1029)) {
                                _1029 = [_1029];
                            } else {
                                _1029 = [{
                                    value: _1029
                                }];
                            }
                        }
                        _1029 = array.filter(this.getOptions(_1029), function(i) {
                            return i && i.value;
                        });
                        var opts = this.getOptions() || [];
                        if (!this.multiple && (!_1029[0] || !_1029[0].value) && !!opts.length) {
                            _1029[0] = opts[0];
                        }
                        array.forEach(opts, function(opt) {
                            opt.selected = array.some(_1029, function(v) {
                                return v.value === opt.value;
                            });
                        });
                        var val = array.map(_1029, function(opt) {
                            return opt.value;
                        });
                        if (typeof val == "undefined" || typeof val[0] == "undefined") {
                            return;
                        }
                        var disp = array.map(_1029, function(opt) {
                            return opt.label;
                        });
                        this._setDisplay(this.multiple ? disp : disp[0]);
                        this.inherited(arguments, [this.multiple ? val : val[0], _102a]);
                        this._updateSelection();
                    },
                    _getDisplayedValueAttr: function() {
                        var ret = array.map([].concat(this.get("selectedOptions")), function(v) {
                            if (v && "label"in v) {
                                return v.label;
                            } else {
                                if (v) {
                                    return v.value;
                                }
                            }
                            return null;
                        }, this);
                        return this.multiple ? ret : ret[0];
                    },
                    _setDisplayedValueAttr: function(label) {
                        this.set("value", this.getOptions(typeof label == "string" ? {
                            label: label
                        } : label));
                    },
                    _loadChildren: function() {
                        if (this._loadingStore) {
                            return;
                        }
                        array.forEach(this._getChildren(), function(child) {
                            child.destroyRecursive();
                        });
                        array.forEach(this.options, this._addOptionItem, this);
                        this._updateSelection();
                    },
                    _updateSelection: function() {
                        this.focusedChild = null;
                        this._set("value", this._getValueFromOpts());
                        var val = [].concat(this.value);
                        if (val && val[0]) {
                            var self = this;
                            array.forEach(this._getChildren(), function(child) {
                                var _102b = array.some(val, function(v) {
                                    return child.option && (v === child.option.value);
                                });
                                if (_102b && !self.multiple) {
                                    self.focusedChild = child;
                                }
                                _100c.toggle(child.domNode, this.baseClass.replace(/\s+|$/g, "SelectedOption "), _102b);
                                child.domNode.setAttribute("aria-selected", _102b ? "true" : "false");
                            }, this);
                        }
                    },
                    _getValueFromOpts: function() {
                        var opts = this.getOptions() || [];
                        if (!this.multiple && opts.length) {
                            var opt = array.filter(opts, function(i) {
                                return i.selected;
                            })[0];
                            if (opt && opt.value) {
                                return opt.value;
                            } else {
                                opts[0].selected = true;
                                return opts[0].value;
                            }
                        } else {
                            if (this.multiple) {
                                return array.map(array.filter(opts, function(i) {
                                    return i.selected;
                                }), function(i) {
                                    return i.value;
                                }) || [];
                            }
                        }
                        return "";
                    },
                    _onNewItem: function(item, _102c) {
                        if (!_102c || !_102c.parent) {
                            this._addOptionForItem(item);
                        }
                    },
                    _onDeleteItem: function(item) {
                        var store = this.store;
                        this.removeOption({
                            value: store.getIdentity(item)
                        });
                    },
                    _onSetItem: function(item) {
                        this.updateOption(this._getOptionObjForItem(item));
                    },
                    _getOptionObjForItem: function(item) {
                        var store = this.store
                          , label = (this.labelAttr && this.labelAttr in item) ? item[this.labelAttr] : store.getLabel(item)
                          , value = (label ? store.getIdentity(item) : null);
                        return {
                            value: value,
                            label: label,
                            item: item
                        };
                    },
                    _addOptionForItem: function(item) {
                        var store = this.store;
                        if (store.isItemLoaded && !store.isItemLoaded(item)) {
                            store.loadItem({
                                item: item,
                                onItem: function(i) {
                                    this._addOptionForItem(i);
                                },
                                scope: this
                            });
                            return;
                        }
                        var _102d = this._getOptionObjForItem(item);
                        this.addOption(_102d);
                    },
                    constructor: function(_102e) {
                        this._oValue = (_102e || {}).value || null;
                        this._notifyConnections = [];
                    },
                    buildRendering: function() {
                        this.inherited(arguments);
                        dom.setSelectable(this.focusNode, false);
                    },
                    _fillContent: function() {
                        if (!this.options) {
                            this.options = this.srcNodeRef ? query("> *", this.srcNodeRef).map(function(node) {
                                if (node.getAttribute("type") === "separator") {
                                    return {
                                        value: "",
                                        label: "",
                                        selected: false,
                                        disabled: false
                                    };
                                }
                                return {
                                    value: (node.getAttribute("data-" + _100d._scopeName + "-value") || node.getAttribute("value")),
                                    label: String(node.innerHTML),
                                    selected: node.getAttribute("selected") || false,
                                    disabled: node.getAttribute("disabled") || false
                                };
                            }, this) : [];
                        }
                        if (!this.value) {
                            this._set("value", this._getValueFromOpts());
                        } else {
                            if (this.multiple && typeof this.value == "string") {
                                this._set("value", this.value.split(","));
                            }
                        }
                    },
                    postCreate: function() {
                        this.inherited(arguments);
                        _1009.after(this, "onChange", lang.hitch(this, "_updateSelection"));
                        var store = this.store;
                        if (store && (store.getIdentity || store.getFeatures()["dojo.data.api.Identity"])) {
                            this.store = null;
                            this._deprecatedSetStore(store, this._oValue, {
                                query: this.query,
                                queryOptions: this.queryOptions
                            });
                        }
                        this._storeInitialized = true;
                    },
                    startup: function() {
                        this._loadChildren();
                        this.inherited(arguments);
                    },
                    destroy: function() {
                        var h;
                        while ((h = this._notifyConnections.pop())) {
                            h.remove();
                        }
                        if (this._queryRes && this._queryRes.close) {
                            this._queryRes.close();
                        }
                        if (this._observeHandle && this._observeHandle.remove) {
                            this._observeHandle.remove();
                            this._observeHandle = null;
                        }
                        this.inherited(arguments);
                    },
                    _addOptionItem: function() {},
                    _removeOptionItem: function() {},
                    _setDisplay: function() {},
                    _getChildren: function() {
                        return [];
                    },
                    _getSelectedOptionsAttr: function() {
                        return this.getOptions({
                            selected: true
                        });
                    },
                    _pseudoLoadChildren: function() {},
                    onSetStore: function() {}
                });
                return _1010;
            });
        },
        "dojo/data/util/sorter": function() {
            define(["../../_base/lang"], function(lang) {
                var _102f = {};
                lang.setObject("dojo.data.util.sorter", _102f);
                _102f.basicComparator = function(a, b) {
                    var r = -1;
                    if (a === null) {
                        a = undefined;
                    }
                    if (b === null) {
                        b = undefined;
                    }
                    if (a == b) {
                        r = 0;
                    } else {
                        if (a > b || a == null) {
                            r = 1;
                        }
                    }
                    return r;
                }
                ;
                _102f.createSortFunction = function(_1030, store) {
                    var _1031 = [];
                    function _1032(attr, dir, comp, s) {
                        return function(itemA, itemB) {
                            var a = s.getValue(itemA, attr);
                            var b = s.getValue(itemB, attr);
                            return dir * comp(a, b);
                        }
                        ;
                    }
                    ;var _1033;
                    var map = store.comparatorMap;
                    var bc = _102f.basicComparator;
                    for (var i = 0; i < _1030.length; i++) {
                        _1033 = _1030[i];
                        var attr = _1033.attribute;
                        if (attr) {
                            var dir = (_1033.descending) ? -1 : 1;
                            var comp = bc;
                            if (map) {
                                if (typeof attr !== "string" && ("toString"in attr)) {
                                    attr = attr.toString();
                                }
                                comp = map[attr] || bc;
                            }
                            _1031.push(_1032(attr, dir, comp, store));
                        }
                    }
                    return function(rowA, rowB) {
                        var i = 0;
                        while (i < _1031.length) {
                            var ret = _1031[i++](rowA, rowB);
                            if (ret !== 0) {
                                return ret;
                            }
                        }
                        return 0;
                    }
                    ;
                }
                ;
                return _102f;
            });
        },
        "dijit/DropDownMenu": function() {
            define(["dojo/_base/declare", "dojo/keys", "dojo/text!./templates/Menu.html", "./_MenuBase"], function(_1034, keys, _1035, _1036) {
                return _1034("dijit.DropDownMenu", _1036, {
                    templateString: _1035,
                    baseClass: "dijitMenu",
                    _onUpArrow: function() {
                        this.focusPrev();
                    },
                    _onDownArrow: function() {
                        this.focusNext();
                    },
                    _onRightArrow: function(evt) {
                        this._moveToPopup(evt);
                        evt.stopPropagation();
                        evt.preventDefault();
                    },
                    _onLeftArrow: function(evt) {
                        if (this.parentMenu) {
                            if (this.parentMenu._isMenuBar) {
                                this.parentMenu.focusPrev();
                            } else {
                                this.onCancel(false);
                            }
                        } else {
                            evt.stopPropagation();
                            evt.preventDefault();
                        }
                    }
                });
            });
        },
        "dijit/_MenuBase": function() {
            define(["dojo/_base/array", "dojo/_base/declare", "dojo/dom", "dojo/dom-attr", "dojo/dom-class", "dojo/_base/lang", "dojo/mouse", "dojo/on", "dojo/window", "./a11yclick", "./registry", "./_Widget", "./_CssStateMixin", "./_KeyNavContainer", "./_TemplatedMixin"], function(array, _1037, dom, _1038, _1039, lang, mouse, on, _103a, _103b, _103c, _103d, _103e, _103f, _1040) {
                return _1037("dijit._MenuBase", [_103d, _1040, _103f, _103e], {
                    selected: null,
                    _setSelectedAttr: function(item) {
                        if (this.selected != item) {
                            if (this.selected) {
                                this.selected._setSelected(false);
                                this._onChildDeselect(this.selected);
                            }
                            if (item) {
                                item._setSelected(true);
                            }
                            this._set("selected", item);
                        }
                    },
                    activated: false,
                    _setActivatedAttr: function(val) {
                        _1039.toggle(this.domNode, "dijitMenuActive", val);
                        _1039.toggle(this.domNode, "dijitMenuPassive", !val);
                        this._set("activated", val);
                    },
                    parentMenu: null,
                    popupDelay: 500,
                    passivePopupDelay: Infinity,
                    autoFocus: false,
                    childSelector: function(node) {
                        var _1041 = _103c.byNode(node);
                        return node.parentNode == this.containerNode && _1041 && _1041.focus;
                    },
                    postCreate: function() {
                        var self = this
                          , _1042 = typeof this.childSelector == "string" ? this.childSelector : lang.hitch(this, "childSelector");
                        this.own(on(this.containerNode, on.selector(_1042, mouse.enter), function() {
                            self.onItemHover(_103c.byNode(this));
                        }), on(this.containerNode, on.selector(_1042, mouse.leave), function() {
                            self.onItemUnhover(_103c.byNode(this));
                        }), on(this.containerNode, on.selector(_1042, _103b), function(evt) {
                            self.onItemClick(_103c.byNode(this), evt);
                            evt.stopPropagation();
                        }), on(this.containerNode, on.selector(_1042, "focusin"), function() {
                            self._onItemFocus(_103c.byNode(this));
                        }));
                        this.inherited(arguments);
                    },
                    onKeyboardSearch: function(item, evt, _1043, _1044) {
                        this.inherited(arguments);
                        if (!!item && (_1044 == -1 || (!!item.popup && _1044 == 1))) {
                            this.onItemClick(item, evt);
                        }
                    },
                    _keyboardSearchCompare: function(item, _1045) {
                        if (!!item.shortcutKey) {
                            return _1045 == item.shortcutKey.toLowerCase() ? -1 : 0;
                        }
                        return this.inherited(arguments) ? 1 : 0;
                    },
                    onExecute: function() {},
                    onCancel: function() {},
                    _moveToPopup: function(evt) {
                        if (this.focusedChild && this.focusedChild.popup && !this.focusedChild.disabled) {
                            this.onItemClick(this.focusedChild, evt);
                        } else {
                            var _1046 = this._getTopMenu();
                            if (_1046 && _1046._isMenuBar) {
                                _1046.focusNext();
                            }
                        }
                    },
                    _onPopupHover: function() {
                        this.set("selected", this.currentPopupItem);
                        this._stopPendingCloseTimer();
                    },
                    onItemHover: function(item) {
                        if (this.activated) {
                            this.set("selected", item);
                            if (item.popup && !item.disabled && !this.hover_timer) {
                                this.hover_timer = this.defer(function() {
                                    this._openItemPopup(item);
                                }, this.popupDelay);
                            }
                        } else {
                            if (this.passivePopupDelay < Infinity) {
                                if (this.passive_hover_timer) {
                                    this.passive_hover_timer.remove();
                                }
                                this.passive_hover_timer = this.defer(function() {
                                    this.onItemClick(item, {
                                        type: "click"
                                    });
                                }, this.passivePopupDelay);
                            }
                        }
                        this._hoveredChild = item;
                        item._set("hovering", true);
                    },
                    _onChildDeselect: function(item) {
                        this._stopPopupTimer();
                        if (this.currentPopupItem == item) {
                            this._stopPendingCloseTimer();
                            this._pendingClose_timer = this.defer(function() {
                                this._pendingClose_timer = null;
                                this.currentPopupItem = null;
                                item._closePopup();
                            }, this.popupDelay);
                        }
                    },
                    onItemUnhover: function(item) {
                        if (this._hoveredChild == item) {
                            this._hoveredChild = null;
                        }
                        if (this.passive_hover_timer) {
                            this.passive_hover_timer.remove();
                            this.passive_hover_timer = null;
                        }
                        item._set("hovering", false);
                    },
                    _stopPopupTimer: function() {
                        if (this.hover_timer) {
                            this.hover_timer = this.hover_timer.remove();
                        }
                    },
                    _stopPendingCloseTimer: function() {
                        if (this._pendingClose_timer) {
                            this._pendingClose_timer = this._pendingClose_timer.remove();
                        }
                    },
                    _getTopMenu: function() {
                        for (var top = this; top.parentMenu; top = top.parentMenu) {}
                        return top;
                    },
                    onItemClick: function(item, evt) {
                        if (this.passive_hover_timer) {
                            this.passive_hover_timer.remove();
                        }
                        this.focusChild(item);
                        if (item.disabled) {
                            return false;
                        }
                        if (item.popup) {
                            this.set("selected", item);
                            this.set("activated", true);
                            var _1047 = /^key/.test(evt._origType || evt.type) || (evt.clientX == 0 && evt.clientY == 0);
                            this._openItemPopup(item, _1047);
                        } else {
                            this.onExecute();
                            item._onClick ? item._onClick(evt) : item.onClick(evt);
                        }
                    },
                    _openItemPopup: function(_1048, focus) {
                        if (_1048 == this.currentPopupItem) {
                            return;
                        }
                        if (this.currentPopupItem) {
                            this._stopPendingCloseTimer();
                            this.currentPopupItem._closePopup();
                        }
                        this._stopPopupTimer();
                        var popup = _1048.popup;
                        popup.parentMenu = this;
                        this.own(this._mouseoverHandle = on.once(popup.domNode, "mouseover", lang.hitch(this, "_onPopupHover")));
                        var self = this;
                        _1048._openPopup({
                            parent: this,
                            orient: this._orient || ["after", "before"],
                            onCancel: function() {
                                if (focus) {
                                    self.focusChild(_1048);
                                }
                                self._cleanUp();
                            },
                            onExecute: lang.hitch(this, "_cleanUp", true),
                            onClose: function() {
                                if (self._mouseoverHandle) {
                                    self._mouseoverHandle.remove();
                                    delete self._mouseoverHandle;
                                }
                            }
                        }, focus);
                        this.currentPopupItem = _1048;
                    },
                    onOpen: function() {
                        this.isShowingNow = true;
                        this.set("activated", true);
                    },
                    onClose: function() {
                        this.set("activated", false);
                        this.set("selected", null);
                        this.isShowingNow = false;
                        this.parentMenu = null;
                    },
                    _closeChild: function() {
                        this._stopPopupTimer();
                        if (this.currentPopupItem) {
                            if (this.focused) {
                                _1038.set(this.selected.focusNode, "tabIndex", this.tabIndex);
                                this.selected.focusNode.focus();
                            }
                            this.currentPopupItem._closePopup();
                            this.currentPopupItem = null;
                        }
                    },
                    _onItemFocus: function(item) {
                        if (this._hoveredChild && this._hoveredChild != item) {
                            this.onItemUnhover(this._hoveredChild);
                        }
                        this.set("selected", item);
                    },
                    _onBlur: function() {
                        this._cleanUp(true);
                        this.inherited(arguments);
                    },
                    _cleanUp: function(_1049) {
                        this._closeChild();
                        if (typeof this.isShowingNow == "undefined") {
                            this.set("activated", false);
                        }
                        if (_1049) {
                            this.set("selected", null);
                        }
                    }
                });
            });
        },
        "dijit/MenuItem": function() {
            define(["dojo/_base/declare", "dojo/dom", "dojo/dom-attr", "dojo/dom-class", "dojo/_base/kernel", "dojo/sniff", "dojo/_base/lang", "./_Widget", "./_TemplatedMixin", "./_Contained", "./_CssStateMixin", "dojo/text!./templates/MenuItem.html"], function(_104a, dom, _104b, _104c, _104d, has, lang, _104e, _104f, _1050, _1051, _1052) {
                var _1053 = _104a("dijit.MenuItem" + (has("dojo-bidi") ? "_NoBidi" : ""), [_104e, _104f, _1050, _1051], {
                    templateString: _1052,
                    baseClass: "dijitMenuItem",
                    label: "",
                    _setLabelAttr: function(val) {
                        this._set("label", val);
                        var _1054 = "";
                        var text;
                        var ndx = val.search(/{\S}/);
                        if (ndx >= 0) {
                            _1054 = val.charAt(ndx + 1);
                            var _1055 = val.substr(0, ndx);
                            var _1056 = val.substr(ndx + 3);
                            text = _1055 + _1054 + _1056;
                            val = _1055 + "<span class=\"dijitMenuItemShortcutKey\">" + _1054 + "</span>" + _1056;
                        } else {
                            text = val;
                        }
                        this.domNode.setAttribute("aria-label", text + " " + this.accelKey);
                        this.containerNode.innerHTML = val;
                        this._set("shortcutKey", _1054);
                    },
                    iconClass: "dijitNoIcon",
                    _setIconClassAttr: {
                        node: "iconNode",
                        type: "class"
                    },
                    accelKey: "",
                    disabled: false,
                    _fillContent: function(_1057) {
                        if (_1057 && !("label"in this.params)) {
                            this._set("label", _1057.innerHTML);
                        }
                    },
                    buildRendering: function() {
                        this.inherited(arguments);
                        var label = this.id + "_text";
                        _104b.set(this.containerNode, "id", label);
                        if (this.accelKeyNode) {
                            _104b.set(this.accelKeyNode, "id", this.id + "_accel");
                        }
                        dom.setSelectable(this.domNode, false);
                    },
                    onClick: function() {},
                    focus: function() {
                        try {
                            if (has("ie") == 8) {
                                this.containerNode.focus();
                            }
                            this.focusNode.focus();
                        } catch (e) {}
                    },
                    _setSelected: function(_1058) {
                        _104c.toggle(this.domNode, "dijitMenuItemSelected", _1058);
                    },
                    setLabel: function(_1059) {
                        _104d.deprecated("dijit.MenuItem.setLabel() is deprecated.  Use set('label', ...) instead.", "", "2.0");
                        this.set("label", _1059);
                    },
                    setDisabled: function(_105a) {
                        _104d.deprecated("dijit.Menu.setDisabled() is deprecated.  Use set('disabled', bool) instead.", "", "2.0");
                        this.set("disabled", _105a);
                    },
                    _setDisabledAttr: function(value) {
                        this.focusNode.setAttribute("aria-disabled", value ? "true" : "false");
                        this._set("disabled", value);
                    },
                    _setAccelKeyAttr: function(value) {
                        if (this.accelKeyNode) {
                            this.accelKeyNode.style.display = value ? "" : "none";
                            this.accelKeyNode.innerHTML = value;
                            _104b.set(this.containerNode, "colSpan", value ? "1" : "2");
                        }
                        this._set("accelKey", value);
                    }
                });
                if (has("dojo-bidi")) {
                    _1053 = _104a("dijit.MenuItem", _1053, {
                        _setLabelAttr: function(val) {
                            this.inherited(arguments);
                            if (this.textDir === "auto") {
                                this.applyTextDir(this.textDirNode);
                            }
                        }
                    });
                }
                return _1053;
            });
        },
        "dijit/MenuSeparator": function() {
            define(["dojo/_base/declare", "dojo/dom", "./_WidgetBase", "./_TemplatedMixin", "./_Contained", "dojo/text!./templates/MenuSeparator.html"], function(_105b, dom, _105c, _105d, _105e, _105f) {
                return _105b("dijit.MenuSeparator", [_105c, _105d, _105e], {
                    templateString: _105f,
                    buildRendering: function() {
                        this.inherited(arguments);
                        dom.setSelectable(this.domNode, false);
                    },
                    isFocusable: function() {
                        return false;
                    }
                });
            });
        },
        "ebg/chatinput": function() {
            define(["dojo", "dojo/_base/declare"], function(dojo, _1060) {
                return _1060("ebg.chatinput", null, {
                    constructor: function() {
                        this.page = null;
                        this.container_id = null;
                        this.post_url = "";
                        this.default_content = "";
                        this.input_div = null;
                        this.baseparams = {};
                        this.detachType = null;
                        this.detachId = null;
                        this.detachTypeGame = null;
                        this.callbackBeforeChat = null;
                        this.callbackAfterChat = null;
                        this.callbackAfterChatError = null;
                        this.writingNowChannel = null;
                        this.bWritingNow = false;
                        this.writingNowTimeout = null;
                        this.writingNowTimeoutDelay = 8000;
                        this.lastTimeStartWriting = null;
                        this.max_height = 100;
                        this.bIncreaseHeightToTop = true;
                    },
                    create: function(page, _1061, _1062, _1063) {
                        this.page = page;
                        this.container_id = _1061;
                        this.post_url = _1062;
                        this.default_content = _1063;
                        if (!$(this.container_id)) {
                            return false;
                        }
                        dojo.empty(this.container_id);
                        var _1064 = this.container_id + "_input";
                        var _1065 = "onclick='window.open(\"/?detachChatType=" + this.detachType + "&detachChatId=" + this.detachId + "\", \"notif" + this.detachType + this.detachId + "\", \"scrollbars=yes,width=280px,height=500px\" );return false;'";
                        if (this.detachType == "playtable") {
                            _1065 = "onclick='window.open(\"/" + this.detachTypeGame + "?detachChatType=" + this.detachType + "&table=" + this.detachId + "\", \"notif" + this.detachType + this.detachId + "\", \"scrollbars=yes,width=280px,height=500px\" );return false;'";
                        }
                        dojo.place("<div class='chatinputctrl'><textarea id='" + _1064 + "' class='chatinput' value='' style='overflow:hidden;resize: none;' rows='1' maxlength='300'  style='resize:none'></textarea></div>", $(this.container_id));
                        this.input_div = $(_1064);
                        dojo.connect(this.input_div, "onkeyup", this, "onChatInputKeyUp");
                        dojo.connect(this.input_div, "onkeypress", this, "onChatInputKeyPress");
                        dojo.connect(this.input_div, "onfocus", this, "onChatInputFocus");
                        this.input_div.placeholder = _1063;
                    },
                    destroy: function() {
                        if ($(this.container_id)) {
                            dojo.empty(this.container_id);
                        }
                    },
                    sendMessage: function() {
                        var _1066 = dojo.clone(this.baseparams);
                        _1066.msg = this.input_div.value;
                        if (this.callbackBeforeChat !== null) {
                            if (!this.callbackBeforeChat(_1066)) {
                                return;
                            }
                        }
                        if (typeof this.post_url_bis != "undefined") {
                            _1066.no_notif = 1;
                        }
                        this.page.ajaxcall(this.post_url, _1066, this, function(_1067) {
                            this.input_div.value = "";
                            this.readaptChatHeight();
                            if (this.callbackAfterChat !== null) {
                                this.callbackAfterChat(_1066);
                            }
                        }, function(_1068) {
                            if (_1068) {
                                if (this.callbackAfterChatError !== null) {
                                    this.callbackAfterChatError(_1066);
                                }
                            }
                        }, "post");
                        if (typeof this.post_url_bis != "undefined") {
                            delete _1066.no_notif;
                            this.page.ajaxcall(this.post_url_bis, _1066, this, function(_1069) {}, function(_106a) {}, "post");
                        }
                    },
                    onChatInputKeyPress: function(evt) {
                        if (evt.keyCode == dojo.keys.ENTER) {
                            dojo.stopEvent(evt);
                        }
                    },
                    onChatInputKeyUp: function(evt) {
                        if (evt.keyCode == dojo.keys.ENTER) {
                            dojo.stopEvent(evt);
                            this.input_div.value = this.input_div.value.replace(/(\r\n|\n|\r)/gm, "");
                            this.sendMessage();
                            this.lastTimeStartWriting = null;
                            return true;
                        }
                        var now = Math.floor(Date.now() / 1000);
                        if (this.lastTimeStartWriting === null || now >= this.lastTimeStartWriting + 5) {
                            if (typeof this.page.io != "undefined") {
                                this.page.io.emit("startWriting", this.writingNowChannel);
                            }
                            this.lastTimeStartWriting = now;
                        }
                        this.readaptChatHeight();
                        return false;
                    },
                    readaptChatHeight: function() {
                        var _106b = dojo.style(this.input_div, "top");
                        var _106c = dojo.style(this.input_div, "height");
                        dojo.style(this.input_div, "height", "0px");
                        var _106d = Math.max(20, Math.min(this.input_div.scrollHeight + 1, this.max_height));
                        dojo.style(this.input_div, "height", _106d + "px");
                        if (this.bIncreaseHeightToTop) {
                            var delta = _106d - _106c;
                            var _106e = _106b - delta;
                            dojo.style(this.input_div, "top", _106e + "px");
                        }
                    },
                    onChatInputFocus: function(evt) {},
                    onChatInputBlur: function(evt) {},
                    addContentToInput: function(text) {
                        this.input_div.value += text;
                    }
                });
            });
        },
        "ebg/playerlocation": function() {
            define(["dojo", "dojo/_base/declare"], function(dojo, _106f) {
                return _106f("ebg.playerlocation", null, {
                    constructor: function() {
                        this.page = null;
                        this.board_div = null;
                        this.board_div_id = null;
                        this.board_uid = "_";
                        this.template = "<div id=\"current_localization\" style=\"display:${my_position_visibility}\">" + "${my_city}: ${position} <a href=\"#\" id=\"modifycity\" class=\"smalltext\">[${LB_CHANGE}]</a>" + "</div>" + "<div id=\"current_localization_teasing\" style=\"display:${MY_POSITION_TEASING}\">" + "<div>${POSITION_TEASING}</div>" + "${MY_CITY}: <input type=\"text\" id=\"cityinput\"  size=\"30\" value=\"${INITIAL_CITY}\"></input> <a href=\"#\" class=\"bgabutton bgabutton_blue\" id=\"savecity\"><span>${LB_OK}</span></a>" + "</div>" + "<form id=\"profileinfos\" name=\"profileinfos\" method=\"post\">" + "<input type=\"hidden\" name=\"city\" id=\"city\" value=\"\"></input>" + "<input type=\"hidden\" name=\"lat\" id=\"lat\" value=\"0\"></input>" + "<input type=\"hidden\" name=\"lon\" id=\"lon\" value=\"0\"></input>" + "<input type=\"hidden\" name=\"loc_city\" id=\"loc_city\" value=\"\"></input>" + "<input type=\"hidden\" name=\"loc_area1\" id=\"loc_area1\" value=\"\"></input>" + "<input type=\"hidden\" name=\"loc_area2\" id=\"loc_area2\" value=\"\"></input>" + "<input type=\"hidden\" name=\"loc_country\" id=\"loc_country\" value=\"\"></input>" + "<input type=\"hidden\" name=\"loc_cityprivacy\" id=\"loc_cityprivacy\" value=\"\"></input>" + "</form>";
                        this.teasing = "";
                        this.googleApiLoaded = false;
                        this.jtpl_citychoice = "<input type='radio' name='cityChoice' id='cityChoiceLink_${id}' class='cityChoiceLink' ${checked}>${description}</input><br/>";
                        this.locationDialog = null;
                        this.cityChoiceResult = null;
                        this.callback_url = "";
                    },
                    create: function(page, _1070, _1071, _1072, _1073) {
                        this.page = page;
                        this.board_div = $(_1070);
                        this.board_div_id = _1070;
                        this.teasing = _1071;
                        this.callback_url = _1073;
                        var args = {
                            my_city: _("My city"),
                            my_position_visibility: ($("initial_position").innerHTML != "" ? "block" : "none"),
                            position: $("initial_position").innerHTML,
                            LB_CHANGE: _("LB_CHANGE"),
                            POSITION_TEASING: this.teasing,
                            MY_POSITION_TEASING: ($("initial_position").innerHTML != "" ? "none" : "block"),
                            MY_CITY: _("My city"),
                            INITIAL_CITY: $("initial_city").innerHTML,
                            LB_OK: _("LB_OK")
                        };
                        var _1074 = false;
                        if ($("upperrightmenu_loggedin")) {
                            if (dojo.style("upperrightmenu_loggedin", "display") != "none") {
                                _1074 = true;
                            }
                        } else {
                            if ($("disconnected_player_menu")) {
                                if (dojo.style("disconnected_player_menu") != "none") {
                                    _1074 = true;
                                }
                            }
                        }
                        if (_1074) {
                            dojo.place(dojo.string.substitute(this.template, args), this.board_div);
                            dojo.connect($("savecity"), "onclick", this, "onSaveCity");
                            dojo.connect($("modifycity"), "onclick", this, "onModifyCity");
                            if (_1072) {
                                var _1075 = document.createElement("script");
                                _1075.type = "text/javascript";
                                var _1076 = dojoConfig.locale.substr(0, 2);
                                _1075.src = "https://maps.googleapis.com/maps/api/js?key=AIzaSyCrPx3aUElpdWAGTyxd-t9w92er94Nfxjk&sensor=false&callback=initGoogleApi&language=" + _1076;
                                initGoogleApi = dojo.hitch(this, function() {
                                    this.googleApiLoaded = true;
                                });
                                document.body.appendChild(_1075);
                            }
                        }
                    },
                    onModifyCity: function(evt) {
                        dojo.stopEvent(evt);
                        dojo.style("current_localization", "display", "none");
                        dojo.style("current_localization_teasing", "display", "block");
                    },
                    onSaveCity: function(evt) {
                        dojo.stopEvent(evt);
                        var city = $("cityinput").value;
                        var _1077 = $("country").value;
                        if (city != "") {
                            if (typeof google != "undefined" && typeof google.maps != "undefined" && typeof google.maps.Geocoder != "undefined") {
                                geocoder = new google.maps.Geocoder();
                                geocoder.geocode({
                                    "address": city,
                                    "language": dojoConfig.locale.substr(0, 2),
                                    "region": _1077
                                }, dojo.hitch(this, function(_1078, _1079) {
                                    if (_1079 == google.maps.GeocoderStatus.OK) {
                                        this.cityChoiceResult = _1078;
                                        if ($("locationDialog_content")) {
                                            dojo.destroy("locationDialog_content");
                                        }
                                        this.locationDialog = new ebg.popindialog();
                                        this.locationDialog.create("locationDialog");
                                        this.locationDialog.setTitle(_("Please confirm your city"));
                                        this.locationDialog.setMaxWidth(500);
                                        var html = "<div id='locationDialog_content'>";
                                        for (var i in _1078) {
                                            var _107a = _1078[i];
                                            var _107b = getLocationDescriptionFromResult(_107a);
                                            html += dojo.string.substitute(this.jtpl_citychoice, {
                                                id: i,
                                                description: _107b,
                                                checked: (toint(i) == 0 ? "checked='checked'" : "")
                                            });
                                        }
                                        html += "<br/>";
                                        html += "<input type='checkbox' id='cityprivacy' checked='checked'></input> " + _("Show my city to other players") + " (\"" + $("cityinput").value + "\")";
                                        html += "<br/>";
                                        html += "<br/><div style='text-align:center'><a id='validCityChoice' class='button'><span>" + _("Ok") + "</span></a></div>";
                                        html += "</div>";
                                        this.locationDialog.setContent(html);
                                        this.locationDialog.show();
                                        dojo.connect($("validCityChoice"), "onclick", this, "onCityChoiceConfirm");
                                    } else {
                                        if (_1079 == google.maps.GeocoderStatus.ZERO_RESULTS) {
                                            this.showMessage("Sorry, we couldn't found your city", "error");
                                        } else {
                                            this.showMessage("Google Maps error: " + _1079, "error");
                                        }
                                    }
                                }));
                            } else {
                                this.page.showMessage(_("Failed to load Google Maps"), "error");
                            }
                        }
                    },
                    onCityChoiceConfirm: function(evt) {
                        dojo.stopEvent(evt);
                        var _107c = 0;
                        dojo.query(".cityChoiceLink").forEach(function(node) {
                            if (node.checked) {
                                _107c = node.id.substr(15);
                            }
                        });
                        var _107d = this.cityChoiceResult[_107c];
                        var lat = parseFloat(_107d.geometry.location.lat());
                        var lon = parseFloat(_107d.geometry.location.lng());
                        $("lon").value = lon;
                        $("lat").value = lat;
                        var _107e = analyseLocationDescriptionFromResult(_107d);
                        $("loc_city").value = _107e.city;
                        $("loc_area1").value = _107e.area1;
                        $("loc_area2").value = _107e.area2;
                        $("loc_country").value = _107e.country;
                        $("city").value = $("cityinput").value;
                        $("loc_cityprivacy").value = ($("cityprivacy").checked ? 0 : 1);
                        this.locationDialog.destroy();
                        if (typeof mainsite != "undefined") {
                            this.page.ajaxcall("/player/profile/updateCity.html", {
                                form_id: "profileinfos"
                            }, this, function() {
                                this.page.showMessage(__("lang_mainsite", "Profile informations updated !"), "info");
                                mainsite.gotourl_forcereload(this.callback_url);
                            }, function(_107f) {}, "post");
                        } else {
                            this.page.ajaxcall("/table/table/updateCity.html", {
                                form_id: "profileinfos"
                            }, this, function() {
                                this.page.showMessage(__("lang_mainsite", "Profile informations updated !"), "info");
                                location.reload();
                            }, function(_1080) {}, "post");
                        }
                    },
                });
            });
        },
        "ebg/pageheader": function() {
            define(["dojo", "dojo/_base/declare"], function(dojo, _1081) {
                return _1081("ebg.pageheader", null, {
                    constructor: function() {
                        this.page = null;
                        this.div_id = null;
                        this.adaptsubtrigger = null;
                        this.bDisableAdaptMenu = false;
                        this.bUpdateQueryString = false;
                    },
                    create: function(page, _1082, _1083, _1084, _1085) {
                        this.page = page;
                        this.div_id = _1082;
                        this.buttons = _1083;
                        this.bAllByDefault = _1084;
                        if (typeof _1085 == "undefined") {
                            this.bUpdateQueryString = true;
                        } else {
                            this.bUpdateQueryString = _1085;
                        }
                        if (!_1084) {
                            this.hideAllSections();
                        }
                        for (var i in _1083) {
                            var _1086 = _1083[i];
                            dojo.connect($(_1086.btn), "onclick", this, "onClickButton");
                            if (typeof _1086.defaults != "undefined" && _1086.defaults) {
                                this.showSection(_1086.section, _1086.btn);
                            }
                        }
                        dojo.query("#" + _1082 + " h2").connect("onclick", this, "onClickHeader");
                        this.adaptsubtrigger = dojo.connect(window, "onresize", this, dojo.hitch(this, "adaptSubmenu"));
                        this.adaptSubmenu();
                    },
                    destroy: function() {
                        if (this.adaptsubtrigger !== null) {
                            dojo.disconnect(this.adaptsubtrigger);
                            this.adaptsubtrigger = null;
                        }
                    },
                    adaptSubmenu: function() {
                        if (this.bDisableAdaptMenu) {
                            return;
                        }
                        if ($(this.div_id)) {
                            dojo.removeClass(this.div_id, "pageheader_menu_smallwidth");
                            var y = null;
                            var _1087 = false;
                            dojo.query("#" + this.div_id + " .pageheader_menuitem").forEach(function(node) {
                                if (dojo.style(node, "display") != "none") {
                                    var pos = dojo.position(node);
                                    if (y === null) {
                                        y = pos.y;
                                    } else {
                                        if (Math.abs(y - pos.y) > 10) {
                                            _1087 = true;
                                        }
                                    }
                                }
                            });
                            if (_1087) {
                                dojo.addClass(this.div_id, "pageheader_menu_smallwidth");
                            }
                        }
                    },
                    getSelected: function() {
                        var items = dojo.query("#" + this.div_id + " .pageheader_menuitemselected");
                        if (items.length != 1) {
                            return null;
                        } else {
                            return items[0].id;
                        }
                    },
                    getNumberSelected: function() {
                        var items = dojo.query("#" + this.div_id + " .pageheader_menuitemselected");
                        return items.length;
                    },
                    hideAllSections: function() {
                        for (var i in this.buttons) {
                            dojo.query("#" + this.div_id + " .pageheader_menuitemselected").removeClass("pageheader_menuitemselected");
                            if (typeof this.buttons[i].section == "object") {
                                for (var j in this.buttons[i].section) {
                                    if ($(this.buttons[i].section[j])) {
                                        dojo.style(this.buttons[i].section[j], "display", "none");
                                    } else {
                                        console.error("pageheader coulnd find : " + this.buttons[i].section[j]);
                                    }
                                }
                            } else {
                                if ($(this.buttons[i].section)) {
                                    dojo.style(this.buttons[i].section, "display", "none");
                                } else {
                                    console.error("pageheader: " + this.buttons[i].section + " does not exists");
                                }
                            }
                        }
                        dojo.query("#" + this.div_id + " .pageheader_hide_if_not_active").style("display", "none");
                    },
                    showDefault: function() {
                        if (this.bAllByDefault) {
                            for (var i in this.buttons) {
                                var _1088 = this.buttons[i];
                                if (typeof _1088.section == "object") {
                                    for (var i in _1088.section) {
                                        if ($(_1088.section[i])) {
                                            dojo.style(_1088.section[i], "display", "block");
                                        } else {
                                            console.error("pageheader coulnd find : " + _1088.section[i]);
                                        }
                                    }
                                } else {
                                    dojo.style(_1088.section, "display", "block");
                                }
                            }
                            dojo.query("#" + this.div_id + " .pageheader_menuitemselected").removeClass("pageheader_menuitemselected");
                            dojo.query("#" + this.div_id + " .pageheader_hide_if_not_active").style("display", "block");
                            this.updateQueryString("");
                        } else {
                            this.hideAllSections();
                            for (var i in this.buttons) {
                                var _1088 = this.buttons[i];
                                if (typeof _1088.defaults != "undefined") {
                                    this.showSection(_1088.section, _1088.btn);
                                }
                            }
                        }
                    },
                    showSection: function(_1089, btn) {
                        if (typeof _1089 != "undefined" && _1089 !== null && $(_1089)) {
                            if (typeof _1089 == "object") {
                                for (var i in _1089) {
                                    dojo.style(_1089[i], "display", "block");
                                }
                            } else {
                                dojo.style(_1089, "display", "block");
                            }
                        }
                        dojo.addClass(btn, "pageheader_menuitemselected");
                        this.updateQueryString(btn);
                        this.onSectionChanged();
                    },
                    onSectionChanged: function() {},
                    onClickButton: function(evt) {
                        dojo.stopEvent(evt);
                        this.showSectionFromButton(evt.currentTarget.id);
                    },
                    showSectionFromButton: function(_108a) {
                        for (var i in this.buttons) {
                            var _108b = this.buttons[i];
                            if (_108b.btn == _108a) {
                                this.hideAllSections();
                                this.showSection(_108b.section, _108b.btn);
                                if (typeof _108b.onShow != "undefined") {
                                    _108b.onShow();
                                }
                                if (typeof _108b.onHide != "undefined") {
                                    _108b.onHide();
                                }
                            }
                        }
                    },
                    onClickHeader: function(evt) {
                        this.showDefault();
                    },
                    updateQueryString: function(btn) {
                        if (!this.bUpdateQueryString) {
                            return;
                        }
                        var _108c = "";
                        var _108d = window.location.search;
                        var parts = _108d.split("?");
                        if (parts.length >= 2 && parts[1].length > 0) {
                            for (var i = 1; i < parts.length; i++) {
                                if (i > 1) {
                                    _108c += "%3F";
                                }
                                _108c += parts[i];
                            }
                            module = parts[0];
                        } else {
                            module = _108d;
                        }
                        var args = dojo.queryToObject(_108c);
                        if (btn === "" || this.getNumberSelected() !== 1) {
                            args.section = null;
                            delete args.section;
                        } else {
                            args.section = btn.substr(11);
                        }
                        _108c = dojo.objectToQuery(args);
                        var url = module;
                        if (_108c != "") {
                            url += "?" + _108c;
                        }
                        if (window.location.search != url && typeof mainsite !== "undefined") {
                            mainsite.disableNextHashChange = true;
                            history.pushState(null, "", window.location.pathname + url);
                        }
                    },
                });
            });
        },
        "ebg/tableresults": function() {
            define(["dojo", "dojo/_base/declare", "ebg/thumb", "ebg/core/common"], function(dojo, _108e) {
                return _108e("ebg.tableresults", null, {
                    constructor: function() {
                        this.page = null;
                        this.div = null;
                        this.jstpl_template = "<div class=\"game_abandonned\" id=\"game_abandonned\" style=\"display:none\">                                        <h4 class=\"game_result_status_important\">${LB_GAME_ABANDONNED}</h4>                                        <span id=\"game_abandonned_explanation\"></span>                                        <br/>                                        <br/>                                    </div>                                    <div class=\"game_cancelled\" id=\"game_cancelled\" style=\"display:none\">                                        <h4 class=\"game_result_status_important\">${LB_GAME_RESULT_CANCELLED} (${LB_SOMEONE_LEFT_THE_GAME_BEFORE_THE_END}) :</h4>                                        ${THE_PLAYER_WHO_LEFT}<br/>                                        ${THE_OTHERS_PLAYERS}                                        <br/>                                        <br/>                                    </div>                                    <h4 class=\"game_conceded\" id=\"game_conceded\" style=\"display:none\">${LB_GAME_CONCEDED}</h4>                                    <h4 class=\"game_unranked\" id=\"game_unranked\" style=\"display:none\"><span id=\"game_unranked_label\">${label_unranked} <i class=\"fa fa-question-circle\"></i></span></h4>                                    <div class=\"game_result\" id=\"game_result\"></div>                                    <div id=\"tiebreaker_explanation\"></div><div class=\"publishresult\" id=\"publishresult\">                                        <fb:like layout=\"button_count\" href=\"https://${LANGUAGE_SHORT}.boardgamearena.com/table?table=${TABLE_ID}\"  show_faces=\"false\" width=\"30\"></fb:like>                                    </div>";
                        this.jstpl_score_entry = "<div class=\"score-entry\" id=\"score_entry_${player_id}\">" + "<div class=\"rank\">${rankstr}</div>" + "<div class=\"emblemwrap ${emblem_class} emblemwrap_l\"><img id=\"emblem_${player_id}\" src=\"${emblem}\" alt=\"${name}\" class=\"emblem\"/><div class=\"emblempremium\"></div></div>" + "<div class=\"name\"><a href=\"${url_base}/player?id=${player_id}\" id=\"player_${player_id}_name\" class=\"playername\">${name}</a></div>" + "<div class=\"score\">" + "${score} <i class=\"fa fa-lg fa-star\"></i>" + "<span class=\"score_aux score_aux_${score} tttiebraker\" id=\"score_aux_${index}\"> (${score_aux}<i class=\"fa fa-star tiebreaker\"></i>)</span>" + "</div>" + "<br class=\"clear\" />" + "<div class=\"adddetails adddetails_arena\">" + "<span class=\"rankdetails rankdetailsarena\" style=\"display:${show_arena}\">" + "<div id=\"winpointsarena_${player_id}\" class=\"winpoints\">" + "<span class=\"\" id=\"winpointsarena_value_${player_id}\">${arena_win_display}</span> &nbsp;" + "&nbsp;<img alt=\"->\" src=\"" + getStaticAssetUrl("img/common/arrow.png") + "\" class=\"imgtext\"/>&nbsp;&nbsp;</div>" + "<div id=\"newrankarena_${player_id}\" class=\"newrank\">${arena_after_display}</div>" + "</span>" + "</div>" + "<div id=\"adddetails_${player_id}\" class=\"adddetails\">" + "<span class=\"rankdetails\">" + "<div id=\"winpoints_${player_id}\" class=\"winpoints\">" + "<span id=\"leave_${player_id}\" style=\"display:none;\" class=\"leavepenalty\">&nbsp;<span id=\"leavevalue_wrap_${player_id}\"><div class=\"icon20 icon20_penaltyleave \"></div> </span></span>" + "<span class=\"\" id=\"winpoints_value_${player_id}\">${point_win}</span> &nbsp;" + "&nbsp;<img alt=\"->\" src=\"" + getStaticAssetUrl("img/common/arrow.png") + "\" class=\"imgtext\"/>&nbsp;&nbsp;</div>" + "<div id=\"newrank_${player_id}\" class=\"newrank\">${rank_after_game}</div>" + "</span>" + "<div class=\"penalties\">" + "<span id=\"clock_${player_id}\" style=\"display:none;\" class=\"clockpenalty\">&nbsp;<div class=\"icon20 icon20_penaltyclock\"></div></span>" + "</div>" + "</div>" + "<div class=\"reputation_wrap\" style=\"display:${reputation_display}\">" + "<p id=\"reputation_block_${player_id}\">" + "<div class=\"reputation\" id=\"reput_${player_id}\">" + "</div>" + "</p><br/>" + "<p id=\"stickynote_wrap_${player_id}\" class=\"stickynote_wrap\">" + "<a href=\"#\" id=\"stickynote_edit_${player_id}\"><i class=\"fa fa-lg fa-sticky-note-o\"></i>&nbsp; <span id=\"stickynote_ctrl_${player_id}\"></span></a>" + "</p>" + "</div>" + "<br class=\"clear\" />" + "</div>";
                        this.jstpl_trophy = "<div class=\"trophy\">                           <a id=\"award_${AWARD_ID}\" href=\"${url_base}/award?game=${GAME_ID}&award=${AWARD_TYPE_ID}\">                                <div class=\"trophyimg\" id=\"awardimg_${AWARD_ID}\" style=\"background-image:  url('${base_img}')\"></div>                                <div class=\"trophyname\"><b>${TROPHY_NAME}</b><br/>${TROPHY_SPECIAL}+${TROPHY_PRESTIGE}<div class=\"icon20 icon20_prestige\"></div></div><br class=\"clear\"/>                            </a>                        </div>";
                        this.jstpl_statistics = "<p>${intro}</p><div id=\"table_stats\" class=\"smalltext\">                </div>                <div id=\"player_stats\">                    <table class=\"statstable\" id=\"player_stats_table\">                        <tr id=\"player_stats_header\">                            <th></th>                        </tr>                    </table>                </div>";
                        this.jstpl_table_stat = "<div class=\"row-data\">                            <div class=\"row-label\">${statname}</div>                            <div class=\"row-value\">&nbsp;${value} ${unit}</div>                        </div>";
                        this.jstpl_playerstatheader = "<th id=\"playerstatheader_${ID}\">${NAME}</th>";
                        this.jstpl_playerstat = "<tr>                                <th>${NAME}</th>                                ${PLAYER_STATS}                            </tr>";
                        this.tableinfos = null;
                        this.pma = false;
                    },
                    create: function(page, _108f, _1090, _1091, _1092) {
                        this.page = page;
                        this.div = _108f;
                        this.stats_div = _1090;
                        this.tableinfos = _1091;
                        this.pma = _1092;
                        if (!$(this.div)) {
                            return;
                        }
                        dojo.place(dojo.string.substitute(this.jstpl_template, {
                            LANGUAGE_SHORT: dojo.config.locale.substr(0, 2),
                            TABLE_ID: _1091.id,
                            LB_GAME_ABANDONNED: __("lang_mainsite", "LB_GAME_ABANDONNED"),
                            LB_GAME_CONCEDED: __("lang_mainsite", "LB_GAME_CONCEDED"),
                            label_unranked: __("lang_mainsite", "Unranked game (Training mode)"),
                            LB_SOMEONE_LEFT_THE_GAME_BEFORE_THE_END: __("lang_mainsite", "LB_SOMEONE_LEFT_THE_GAME_BEFORE_THE_END"),
                            LB_GAME_RESULT_CANCELLED: __("lang_mainsite", "LB_GAME_RESULT_CANCELLED"),
                            THE_PLAYER_WHO_LEFT: __("lang_mainsite", "The player who left (or was skipped) lost the game and got a %s penalty.").replace("%s", "☯"),
                            THE_OTHERS_PLAYERS: __("lang_mainsite", "The other players won this game and get %s of normal ELO points (because %s of this game has been played before the incident).").replace("%s", this.tableinfos.progression + "%").replace("%s", this.tableinfos.progression + "%")
                        }), this.div, "replace");
                        this.playeropinion = {};
                        this.update();
                        this.updateStats();
                    },
                    destroy: function() {},
                    update: function() {
                        var table = this.tableinfos;
                        if (typeof table.thumbs != "undefined") {
                            this.playeropinion = table.thumbs;
                        }
                        if (typeof _1093 == "undefined") {
                            var _1093 = this.page.player_id;
                        }
                        dojo.style("game_abandonned", "display", "block");
                        dojo.style("publishresult", "display", "none");
                        var _1094 = false;
                        if (table.result.endgame_reason === "didntstart_cron_timeout") {
                            $("game_abandonned_explanation").innerHTML = __("lang_mainsite", "Table closed automatically because not enough players joined the table after a while.");
                        } else {
                            if (table.result.endgame_reason === "didntstart_cron_init_timeout") {
                                $("game_abandonned_explanation").innerHTML = __("lang_mainsite", "Table has been abandonned during initial configuration.");
                            } else {
                                if (table.result.endgame_reason === "didntstart_players_left") {
                                    $("game_abandonned_explanation").innerHTML = __("lang_mainsite", "All players left the game before it begins.");
                                } else {
                                    if (table.result.endgame_reason === "didntplay_cron_timeout") {
                                        $("game_abandonned_explanation").innerHTML = __("lang_mainsite", "Game has been closed automatically because no move had been done on it during a long period of time.");
                                    } else {
                                        if (table.result.endgame_reason === "normal_end" || table.result.endgame_reason === "normal_concede_end") {
                                            dojo.style("game_abandonned", "display", "none");
                                            dojo.style("publishresult", "display", "none");
                                            _1094 = true;
                                            if (table.result.endgame_reason === "normal_concede_end") {
                                                dojo.style("game_conceded", "display", "block");
                                            }
                                        } else {
                                            if (table.result.endgame_reason === "neutralized_after_skipturn" || table.result.endgame_reason === "neutralized_after_skipturn_error") {
                                                dojo.style($("game_cancelled"), "display", "block");
                                                dojo.style("game_abandonned", "display", "none");
                                                dojo.style("publishresult", "display", "none");
                                                _1094 = true;
                                            } else {
                                                if (table.result.endgame_reason === "abandon_by_decision") {
                                                    $("game_abandonned_explanation").innerHTML = __("lang_mainsite", "The game has been abandonned because all players (with a positive clock) decided it, or because all players left the game.");
                                                } else {
                                                    if (table.result.endgame_reason === "abandon_by_tournamenttimeout") {
                                                        $("game_abandonned_explanation").innerHTML = __("lang_mainsite", "Game has been abandonned automatically because players did not managed to finish it before the next round of the tournament. The player with the most remaining reflexion time wins the game.");
                                                    } else {
                                                        if (table.result.endgame_reason === "error_tournament_wrongnumber") {
                                                            $("game_abandonned_explanation").innerHTML = __("lang_mainsite", "Some players of this tournament game did not show up, so we could not start the game (these players got a penalty on their profile).");
                                                        } else {
                                                            if (table.result.endgame_reason === "synchro_error_corrupted" || table.result.endgame_reason === "synchro_error_finished_on_gs" || table.result.endgame_reason === "synchro_error_not_on_gs") {
                                                                $("game_abandonned_explanation").innerHTML = __("lang_mainsite", "Game has been closed automatically due to a technical error") + " (" + table.result.endgame_reason + ")";
                                                            } else {
                                                                if (table.result.endgame_reason === "express_stop") {
                                                                    $("game_abandonned_explanation").innerHTML = "A developer cancel this game using Express Stop.";
                                                                } else {
                                                                    if (table.result.endgame_reason == "abandon_sandbox_disagreement") {
                                                                        $("game_abandonned_explanation").innerHTML = __("lang_mainsite", "The players disagree on the game result of this game, so we cancelled it.");
                                                                    } else {
                                                                        $("game_abandonned_explanation").innerHTML = "Unknow endgame reason: " + table.result.endgame_reason;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (toint(table.unranked) == 1) {
                            dojo.style($("game_unranked"), "display", "block");
                            this.page.addTooltip("game_unranked_label", _("The Training mode has been enabled for this table (no ranking points gain/loss for this game)."), "");
                        }
                        var _1095;
                        var _1096 = false;
                        var _1097 = false;
                        var _1098 = null;
                        var _1099 = [];
                        var _109a = null;
                        var _109b = {};
                        var _109c = false;
                        for (var i in table.result.player) {
                            _1095 = table.result.player[i];
                            var _109a = _1095.player_id;
                            _109b[_109a] = {
                                rank_after_game: _1095.rank_after_game,
                                elo_win: _1095.point_win,
                                rank_before_game: (_1095.rank_after_game - _1095.point_win),
                                gamerank: _1095.gamerank,
                                name: _1095.name,
                                opponents: {}
                            };
                            if (_1095.gamerank != 1) {
                                _109c = true;
                            }
                        }
                        for (var _109a in _109b) {
                            var _109d = 0;
                            for (var _109e in _109b) {
                                if (_109e != _109a) {
                                    var _109f = _109b[_109a].rank_before_game - _109b[_109e].rank_before_game;
                                    if (_109b[_109a].gamerank < _109b[_109e].gamerank) {
                                        var _10a0 = 1;
                                    } else {
                                        if (_109b[_109a].gamerank == _109b[_109e].gamerank) {
                                            var _10a0 = 0.5;
                                        } else {
                                            var _10a0 = 0;
                                        }
                                    }
                                    var _10a1 = 1 / (1 + Math.pow(10, -_109f / 400));
                                    var _10a2 = _10a0 - _10a1;
                                    _109d += _10a2;
                                    _109b[_109a].opponents[_109e] = {
                                        gameresult: _10a0,
                                        expectedResult: _10a1,
                                        elo_delta_no_k: _10a2
                                    };
                                }
                            }
                            if (_109d != 0) {
                                _109b[_109a].k_factor = Math.max(20, Math.round(_109b[_109a].elo_win / _109d));
                            } else {
                                _109b[_109a].k_factor = 60;
                            }
                            if (_109b[_109a].rank_after_game == 1301 && _109b[_109a].rank_before_game == 1300) {
                                _109b[_109a].k_factor = 60;
                                _109b[_109a].particular_case = _("You always get at least 1 ELO point during your first game on BGA.");
                            } else {
                                if (_109b[_109a].rank_after_game == 1400 && _109d < 0) {
                                    _109b[_109a].particular_case = _("Note: you can never go back under 100 ELO.");
                                } else {
                                    if (_109b[_109a].rank_after_game < 1400 && _109d < 0) {
                                        _109b[_109a].particular_case = _("Note: you cannot lose ELO while your ELO has not reach 100.");
                                    }
                                }
                            }
                        }
                        for (var i in table.result.player) {
                            _1095 = table.result.player[i];
                            var _109a = _1095.player_id;
                            _1095.index = i;
                            var _10a3 = _1095.rank_after_game;
                            var _10a4 = _1095.point_win;
                            var _10a5 = _10a3 - _10a4;
                            _1095.point_win_arena = "";
                            _1095.show_arena = "none";
                            _1095.arena_win_display = "";
                            _1095.arena_after_display = "";
                            if (!_1095.score) {
                                _1095.rank_mask = "";
                                _1095.point_win = "";
                                _1095.rank_after_game = "";
                                _1095.is_tie = "";
                                _1095.score = "";
                                _1095.score_aux = "";
                                _1095.rankstr = "";
                            } else {
                                if (table.result.losers_not_ranked && !_109c) {
                                    _1095.rankstr = __("lang_mainsite", "Tie");
                                } else {
                                    _1095.rankstr = this.page.getRankString(_1095.gamerank, table.result.losers_not_ranked);
                                }
                                _1095.point_win = Math.round(_109b[_109a].rank_after_game) - Math.round(_109b[_109a].rank_before_game);
                                if (_1095.point_win >= 0) {
                                    _1095.point_win = "+" + _1095.point_win;
                                }
                                _1095.rank_after_game = this.page.getEloLabel(_1095.rank_after_game);
                                if (toint(table.unranked) == 1) {
                                    _1095.rank_after_game = "";
                                    _1095.point_win = "";
                                }
                                if (_1095.arena_points_win != null) {
                                    _1095.show_arena = "block";
                                    var _10a6 = this.page.arenaPointsDetails(_1095.arena_after_game);
                                    if (_10a6.league == 5) {
                                        var sign = _1095.arena_points_win >= 0 ? "+" : "";
                                        _1095.arena_win_display = sign + Math.round(_1095.arena_points_win % 1 * 10000);
                                        _1095.arena_after_display = Math.round(_1095.arena_after_game % 1 * 10000) + " " + _("pts") + " ";
                                        _1095.arena_after_display += "<div style=\"display:inline-block;position:relative;margin-top: -32px;margin-bottom: 26px;\">";
                                        _1095.arena_after_display += "<div class=\"myarena_league league_" + _10a6.league + "\" style=\"position:relative;display:inline-block;top:21px;left:0px\">";
                                        _1095.arena_after_display += "<div class=\"arena_label\"></div>";
                                        _1095.arena_after_display += "</div>";
                                        _1095.arena_after_display += "</div>";
                                    } else {
                                        if (_1095.arena_points_win > 100) {
                                            _1095.arena_win_display = "";
                                        } else {
                                            var sign = _1095.arena_points_win >= 0 ? "+" : "";
                                            _1095.arena_win_display = sign + (Math.round(_1095.arena_points_win) % 10) + "<div class=\"icon20 icon_arena\"></div>";
                                        }
                                        _1095.arena_after_display = "<div style=\"display:inline-block;position:relative;margin-top: -29px;margin-bottom: 26px;\">";
                                        _1095.arena_after_display += "<div class=\"myarena_league league_" + _10a6.league + "\" style=\"position:relative;display:inline-block;top:21px;\">";
                                        _1095.arena_after_display += "<div class=\"arena_label\">" + _10a6.points + "</div>";
                                        _1095.arena_after_display += "</div>";
                                        _1095.arena_after_display += "</div>";
                                    }
                                }
                            }
                            var _10a7 = id_to_path(_1095.player_id);
                            _1095.emblem = g_themeurl + "../../data/avatar/" + _10a7 + "/" + _1095.player_id + "_50.jpg?h=" + _1095.avatar;
                            if (_1095.gender === null) {
                                _1095.gender = "";
                            }
                            _1095.flagx = _1095.country.flag_x;
                            _1095.flagy = _1095.country.flag_y;
                            _1095.table_id = table.id;
                            _1095.emblem_class = "";
                            if (_1095.is_premium == 1) {
                                _1095.emblem_class = "is_premium";
                            }
                            if (_1098 !== null && _1098 == _1095.score && _1095.score_aux !== null) {
                                _1099.push(_1095.score);
                            }
                            _1098 = _1095.score;
                            if (_1095.score_aux === null) {
                                _1095.score_aux = "";
                            }
                            _1095.signal_player_label = __("lang_mainsite", "Signal this player");
                            _1095.reputation_display = "block";
                            if (_109a == _1093) {
                                _1095.reputation_display = "none";
                            }
                            _1095.url_base = "";
                            if (typeof this.page.metasiteurl != "undefined") {
                                _1095.url_base = this.page.metasiteurl;
                            }
                            dojo.place(this.page.format_string(this.jstpl_score_entry, _1095), "game_result");
                            this.page.addTooltip("flag_" + _109a, _1095.country.name, "");
                            if (this.playeropinion[_109a] && this.playeropinion[_109a].n == 1) {
                                this.page.ajaxcall("/table/table/loadStickyNote.html", {
                                    player: _109a
                                }, this, function(_10a8) {
                                    $("stickynote_ctrl_" + _10a8.player).innerHTML = _10a8.note;
                                });
                                this.page.addTooltip("stickynote_edit_" + _109a, dojo.string.substitute(__("lang_mainsite", "A personal note on ${player}, for your eyes only"), {
                                    player: _1095.name
                                }), __("lang_mainsite", "Modify"));
                            } else {
                                $("stickynote_ctrl_" + _109a).innerHTML = dojo.string.substitute(__("lang_mainsite", "Write a personal note about ${name}"), {
                                    name: $("player_" + _109a + "_name").innerHTML
                                });
                                this.page.addTooltip("stickynote_edit_" + _109a, "", dojo.string.substitute(__("lang_mainsite", "Write a personal note about ${player}, for your eyes only"), {
                                    player: _1095.name
                                }));
                            }
                            dojo.connect($("stickynote_edit_" + _109a), "onclick", this, "onEditSticky");
                            if (toint(table.result.penalties[_109a].clock) >= 0) {
                                dojo.style("clock_" + _109a, "display", "inline");
                                if (typeof (table.result.penalties[_109a].clock_cancelled) != "undefined") {
                                    dojo.place("<span> (" + _("Penalty cancelled") + ") </span>", "clock_" + _109a);
                                    dojo.addClass("clock_" + _109a, "clockpenalty_cancelled");
                                }
                            }
                            if (toint(table.result.penalties[_109a].leave) >= 0) {
                                if (typeof (table.result.penalties[_109a].leave_cancelled) != "undefined") {
                                    dojo.place("<span> (" + _("Penalty cancelled") + ") </span>", "leave_" + _109a);
                                    dojo.addClass("leave_" + _109a, "leavepenalty_cancelled");
                                } else {
                                    $("winpoints_value_" + _109a).innerHTML += " - " + table.result.penalties[_109a].leave;
                                }
                                dojo.style("leave_" + _109a, "display", "inline");
                                dojo.style("leavevalue_wrap_" + _109a, "display", "inline");
                            }
                            var html = "<h2>" + dojo.string.substitute(_("Details of the ELO computation for ${player}"), {
                                player: _1095.name
                            }) + "</h2>";
                            html += "<hr/>";
                            html += "<table class='newbgatable'>";
                            html += "<tr><td>" + _("ELO rank before this game") + "</td><td style='text-align:right'>" + this.page.getEloLabel(_109b[_109a].rank_before_game, false, false) + "</td>";
                            html += "<tr><td>" + _("K factor") + "</td><td style='text-align:right'>" + _109b[_109a].k_factor + "</td>";
                            for (var _109e in _109b[_109a].opponents) {
                                if (_109b[_109a].opponents[_109e].gameresult == 1) {
                                    var label = dojo.string.substitute(_("Victory against ${player}"), {
                                        player: _109b[_109e].name
                                    });
                                } else {
                                    if (_109b[_109a].opponents[_109e].gameresult == 0.5) {
                                        var label = dojo.string.substitute(_("Tie with ${player}"), {
                                            player: _109b[_109e].name
                                        });
                                    } else {
                                        var label = dojo.string.substitute(_("Defeat against ${player}"), {
                                            player: _109b[_109e].name
                                        });
                                    }
                                }
                                label += "<br/>";
                                label += this.page.getEloLabel(_109b[_109e].rank_before_game, true);
                                label += ": " + _("Probability of a win") + ": " + Math.round(_109b[_109a].opponents[_109e].expectedResult * 100) + "%";
                                var _10a4 = Math.round(_109b[_109a].opponents[_109e].elo_delta_no_k * _109b[_109a].k_factor * 100) / 100;
                                html += "<tr><td>" + label + "</td><td style='text-align:right'>" + _10a4 + "</td>";
                            }
                            if (typeof _109b[_109a].particular_case != "undefined") {
                                html += "<tr><td colspan='2' style='text-align:center'>" + _109b[_109a].particular_case + "</td>";
                            }
                            html += "<tr><td><b>" + _("Total ELO variation") + "</b></td><td style='text-align:right'><b>" + ((Math.round((_109b[_109a].elo_win) * 100) / 100)) + "</b></td>";
                            html += "<tr><td>" + _("ELO rank after this game") + "</td><td style='text-align:right'>" + this.page.getEloLabel(_109b[_109a].rank_after_game, false, false) + "</td>";
                            html += "</table>";
                            this.page.addTooltipHtml("adddetails_" + _109a, html);
                            this.page.addTooltipToClass("adddetails_arena", _("Arena points won/loss during this game"), "");
                            var _10a9 = 0;
                            if (this.playeropinion[_109a]) {
                                _10a9 = toint(this.playeropinion[_109a].t);
                                if (_10a9 == 0 && _109a != _1093 && dojo.style("reputation_block_" + _109a, "display") != "none") {
                                    _1097 = true;
                                }
                            } else {
                                if (_109a != _1093 && dojo.style("reputation_block_" + _109a, "display") != "none") {
                                    _1097 = true;
                                }
                            }
                            if (_109a == _1093) {
                                _1096 = true;
                            } else {
                                var _10aa = new ebg.thumb();
                                _10aa.create(this.page, "reput_" + _109a, _109a, _10a9);
                            }
                        }
                        if (_109a !== null) {
                            dojo.addClass("score_entry_" + _109a, "last-score-entry");
                        }
                        var _10ab = null;
                        if ($("gametiebreaker") !== null) {
                            _10ab = $("gametiebreaker").innerHTML;
                        } else {
                            if (typeof this.page.tiebreaker != "undefined") {
                                _10ab = _(this.page.tiebreaker);
                            }
                        }
                        if (_10ab != "" && toint(table.cancelled) != 1) {
                            for (var i in _1099) {
                                var _10ac = _1099[i];
                                dojo.query(".score_aux_" + _10ac).style("display", "inline");
                            }
                            this.page.addTooltipToClass("tttiebraker", __("lang_mainsite", "Tie breaker") + ": " + _10ab, "");
                            if (_1099.length > 0) {
                                $("tiebreaker_explanation").innerHTML = "<div class='smalltext'>(<i class='fa fa-star tiebreaker'></i>: " + __("lang_mainsite", "Tie breaker") + ": " + _10ab + ")</div><br/>";
                            }
                        }
                        if (!_1094) {
                            dojo.query(".rankdetails").style("display", "none");
                            dojo.query(".score").style("display", "none");
                        }
                        if (toint(table.unranked) == 1) {
                            dojo.query(".rankdetails").style("display", "none");
                        }
                        this.page.addTooltipToClass("clockpenalty", __("lang_mainsite", "This player ran out of time during this game."), "");
                        this.page.addTooltipToClass("leavepenalty", __("lang_mainsite", "This player left this game before the end."), "");
                        this.page.addTooltipToClass("leavepenalty_cancelled", __("lang_mainsite", "This penalty has been cancelled because we judged that it was not this player fault (ex: technical error)."), "");
                        this.page.addTooltipToClass("clockpenalty_cancelled", __("lang_mainsite", "This penalty has been cancelled because we judged that it was not this player fault (ex: technical error)."), "");
                        if (typeof mainsite != "undefined") {
                            mainsite.updatePremiumEmblemLinks();
                        } else {
                            if (typeof gameui != undefined) {
                                gameui.updatePremiumEmblemLinks();
                            }
                        }
                    },
                    onEditSticky: function(evt) {
                        dojo.stopEvent(evt);
                        var pid = evt.currentTarget.id.substr(16);
                        dojo.destroy("stickEditDialog");
                        var _10ad = new ebg.popindialog();
                        _10ad.create("stickEditDialog");
                        _10ad.setTitle(dojo.string.substitute(__("lang_mainsite", "Write a personal note about ${name}"), {
                            name: $("player_" + pid + "_name").innerHTML
                        }));
                        _10ad.setMaxWidth(400);
                        _10ad.tableModule = this.page;
                        var text = "";
                        if ($("stickynote_ctrl_" + pid).innerHTML != dojo.string.substitute(__("lang_mainsite", "Write a personal note about ${name}"), {
                            name: $("player_" + pid + "_name").innerHTML
                        })) {
                            text = $("stickynote_ctrl_" + pid).innerHTML;
                        }
                        var html = "<div id=\"stickEditDialog\">";
                        html += "<textarea id='sticky_text' style='width: 100%'>" + text + "</textarea>";
                        html += "<p><a class='bgabutton bgabutton_gray' id='stickyedit_cancel' href='#'><span>" + __("lang_mainsite", "Cancel") + "</span></a> <a class='bgabutton bgabutton_blue' id='stickyedit_save' href='#'><span>" + __("lang_mainsite", "Save") + "</span></a></p>";
                        html += "</div>";
                        _10ad.setContent(html);
                        _10ad.show();
                        dojo.connect($("stickyedit_cancel"), "onclick", dojo.hitch(_10ad, function(evt) {
                            evt.preventDefault();
                            dojo.destroy("stickEditDialog");
                            this.destroy();
                        }));
                        dojo.connect($("stickyedit_save"), "onclick", dojo.hitch(_10ad, function(evt) {
                            evt.preventDefault();
                            var text = $("sticky_text").value;
                            this.destroy();
                            this.tableModule.ajaxcall("/table/table/updateText.html", {
                                type: "stickynote",
                                id: pid,
                                text: text
                            }, this, function(_10ae) {});
                            $("stickynote_ctrl_" + pid).innerHTML = text;
                        }));
                    },
                    updateStats: function() {
                        var intro = "";
                        if (!this.tableinfos.result.stats) {
                            return;
                        }
                        if (!this.pma) {
                            intro = "<p style=\"text-align:center;\"><a href=\"/premium\" class=\"bgabutton bgabutton_blue\">" + __("lang_mainsite", "Go Premium to see game statistics!") + "</a></p><br/><br/>";
                        }
                        dojo.place(dojo.string.substitute(this.jstpl_statistics, {
                            intro: intro
                        }), this.stats_div, "only");
                        var _10af = 1;
                        if (this.pma) {
                            this.insertTableStat(__("lang_mainsite", "Game duration"), Math.round(this.tableinfos.result.time_duration / 60), _("mn"));
                            _10af++;
                            this.insertTableStat(__("lang_mainsite", "Players average level"), this.page.getEloLabel(this.tableinfos.result.table_level));
                            _10af++;
                        } else {
                            this.insertTableStat(__("lang_mainsite", "Game duration"), "<img class=\"statmasked\" id=\"statmasked_" + _10af + "\" src=\"" + getStaticAssetUrl("img/common/rankmask.png") + "\" alt=\"masked\" />");
                            _10af++;
                            this.insertTableStat(__("lang_mainsite", "Players average level"), "<img class=\"statmasked\" id=\"statmasked_" + _10af + "\" src=\"" + getStaticAssetUrl("img/common/rankmask.png") + "\" alt=\"masked\" />");
                            _10af++;
                        }
                        for (var i in this.tableinfos.result.stats.table) {
                            var stat = this.tableinfos.result.stats.table[i];
                            _10af++;
                            if (stat.id == 3 || stat.id == 1) {} else {
                                if (typeof stat.value != "undefined" && stat.value !== null) {
                                    if (stat.value == "*masked*" || !this.pma) {
                                        stat.value = "<img class=\"statmasked\" id=\"statmasked_" + _10af + "\" src=\"" + getStaticAssetUrl("img/common/rankmask.png") + "\" alt=\"masked\" />";
                                    } else {
                                        if (stat.type == "int") {
                                            stat.value = Math.round(stat.value);
                                        } else {
                                            if (stat.type == "bool") {
                                                stat.value = (stat.value == 0) ? __("lang_mainsite", "no") : __("lang_mainsite", "yes");
                                            }
                                        }
                                        if (typeof stat.valuelabel != "undefined") {
                                            stat.value = __("lang_" + this.tableinfos.game_name, stat.valuelabel);
                                        }
                                    }
                                    this.insertTableStat(__("lang_" + this.tableinfos.game_name, stat.name), stat.value, stat.unit);
                                }
                            }
                        }
                        this.page.addTooltipToClass("statmasked", __("lang_mainsite", "You must be a Premium member to see statistics"), "");
                        var _10b0 = {};
                        var _10b1 = {};
                        for (var i in this.tableinfos.result.player) {
                            var _10b2 = this.tableinfos.result.player[i];
                            dojo.place(dojo.string.substitute(this.jstpl_playerstatheader, {
                                ID: _10b2.player_id,
                                NAME: _10b2.name
                            }), "player_stats_header");
                            _10b0[_10b2.player_id] = _10b2.gamerank;
                            _10b1[_10b2.player_id] = _10b2.score;
                        }
                        var _10b3 = "";
                        for (var i in this.tableinfos.result.player) {
                            var _10b2 = this.tableinfos.result.player[i];
                            var _10b4 = _10b2.player_id;
                            _10b3 += "<td>" + this.page.getRankString(_10b0[_10b4]) + " (" + _10b1[_10b4] + "<i class=\"fa fa-lg fa-star\"></i>)</td>";
                        }
                        dojo.place(dojo.string.substitute(this.jstpl_playerstat, {
                            NAME: __("lang_mainsite", "LB_GAME_RESULT"),
                            PLAYER_STATS: _10b3
                        }), "player_stats_table");
                        for (var _10b5 in this.tableinfos.result.stats.player) {
                            if ((_10b5 == "time_bonus_nbr" || _10b5 == "reflexion_time_sd") && ($("go_to_table") === null)) {} else {
                                var stat = this.tableinfos.result.stats.player[_10b5];
                                var _10b3 = "";
                                var unit = typeof stat.unit == "undefined" ? "" : " " + stat.unit;
                                var _10b6 = false;
                                for (var i in this.tableinfos.result.player) {
                                    var _10b4 = this.tableinfos.result.player[i].player_id;
                                    if (typeof stat.values[_10b4] != "undefined") {
                                        var value = stat.values[_10b4];
                                    } else {
                                        value = "-";
                                    }
                                    _10af++;
                                    if (value !== null) {
                                        _10b6 = true;
                                    }
                                    if (value == "*masked*" || !this.pma) {
                                        value = "<img class=\"statmasked\" id=\"statmasked_" + _10af + "\" src=\"" + getStaticAssetUrl("img/common/rankmask.png") + "\" alt=\"masked\" />";
                                    } else {
                                        if (stat.type == "int") {
                                            value = Math.round(value);
                                        } else {
                                            if (stat.type == "bool") {
                                                value = (value == 0) ? __("lang_mainsite", "no") : __("lang_mainsite", "yes");
                                            }
                                        }
                                        if (typeof stat.valuelabels[_10b4] != "undefined") {
                                            value = __("lang_" + this.tableinfos.game_name, stat.valuelabels[_10b4]);
                                        }
                                        if (_10b5 == "reflexion_time") {
                                            value = this.page.formatReflexionTime(value).string;
                                            unit = "";
                                        }
                                    }
                                    _10b3 += "<td>" + value + unit + "</td>";
                                }
                                if (_10b6) {
                                    dojo.place(dojo.string.substitute(this.jstpl_playerstat, {
                                        NAME: __("lang_" + this.tableinfos.game_name, stat.name),
                                        PLAYER_STATS: _10b3
                                    }), "player_stats_table");
                                }
                            }
                        }
                        var _10b3 = "";
                        for (var i in this.tableinfos.result.player) {
                            var _10b2 = this.tableinfos.result.player[i];
                            var _10b4 = _10b2.player_id;
                            _10b3 += "<td class=\"smalltext\"><div class=\"icon20 icon20_stat\"></div> <a href=\"/playerstat?id=" + _10b4 + "&game=" + this.tableinfos.game_id + "\">" + __("lang_mainsite", "%s`s statistics at this game").replace("%s", _10b2.name) + "</a></td>";
                        }
                        dojo.place(dojo.string.substitute(this.jstpl_playerstat, {
                            NAME: "<div class=\"icon20 icon20_stat\"></div> " + __("lang_mainsite", "All stats"),
                            PLAYER_STATS: _10b3
                        }), "player_stats_table");
                    },
                    insertTableStat: function(_10b7, value, unit) {
                        if (typeof unit == "undefined") {
                            unit = "";
                        }
                        dojo.place(dojo.string.substitute(this.jstpl_table_stat, {
                            statname: _10b7,
                            value: value,
                            unit: unit
                        }), "table_stats");
                    }
                });
            });
        },
        "ebg/thumb": function() {
            define(["dojo", "dojo/_base/declare"], function(dojo, _10b8) {
                return _10b8("ebg.thumb", null, {
                    constructor: function() {
                        this.page = null;
                        this.div_id = null;
                        this.div = null;
                        this.value = 0;
                        this.target_player = null;
                        this.staticControl = false;
                        this.bForceThumbDown = false;
                    },
                    create: function(page, _10b9, _10ba, _10bb) {
                        this.page = page;
                        this.div_id = _10b9;
                        this.div = $(this.div_id);
                        this.value = toint(_10bb);
                        this.target_player = _10ba;
                        dojo.style(this.div, "display", "inline-block");
                        this.updateControl();
                    },
                    updateControl: function() {
                        var _10bc = "<div>";
                        var _10bd = false;
                        if (this.value == 1 || (this.value == 0 && !this.staticControl)) {
                            _10bc += "<div class=\"icon16 icon16_reputup givethumb\" id=\"" + this.div_id + "_up\"></div>";
                            _10bd = true;
                        }
                        if (this.value == -1 || (this.value == 0 && !this.staticControl)) {
                            if (_10bd) {
                                _10bc += "&nbsp;&nbsp;";
                            }
                            _10bc += "<div class=\"icon16 icon16_reputdown givethumb\" id=\"" + this.div_id + "_down\"></div>";
                        }
                        dojo.place(_10bc, this.div_id, "only");
                        if (this.value == 1) {
                            this.page.addTooltip(this.div_id + "_up", __("lang_mainsite", "I like and recommend to play with this player"), this.staticControl ? "" : __("lang_mainsite", "Cancel"));
                            if (!this.staticControl) {
                                dojo.connect($(this.div_id + "_up"), "onclick", this, "onCancelOpinion");
                            }
                        } else {
                            if (this.value == 0 && !this.staticControl) {
                                this.page.addTooltip(this.div_id + "_up", "", __("lang_mainsite", "I like and recommend to play with this player"));
                                this.page.addTooltip(this.div_id + "_down", "", __("lang_mainsite", "I dislike to play with this player"));
                                dojo.connect($(this.div_id + "_up"), "onclick", this, "onGiveThumbUp");
                                dojo.connect($(this.div_id + "_down"), "onclick", this, "onGiveThumbDown");
                            } else {
                                if (this.value == -1) {
                                    this.page.addTooltip(this.div_id + "_down", __("lang_mainsite", "I dislike to play with this player"), this.staticControl ? "" : __("lang_mainsite", "Cancel"));
                                    if (!this.staticControl) {
                                        dojo.connect($(this.div_id + "_down"), "onclick", this, "onCancelOpinion");
                                    }
                                }
                            }
                        }
                    },
                    onCancelOpinion: function(evt) {
                        evt.preventDefault();
                        this.page.ajaxcall("/table/table/changeReputation.html", {
                            player: this.target_player,
                            value: 0
                        }, this, function(_10be) {
                            this.value = 0;
                            this.updateControl();
                        });
                    },
                    onGiveThumbUp: function(evt) {
                        evt.preventDefault();
                        this.page.ajaxcall("/table/table/changeReputation.html", {
                            player: this.target_player,
                            value: 1
                        }, this, function(_10bf) {
                            this.value = 1;
                            this.updateControl();
                        });
                    },
                    onGiveThumbDown: function(evt) {
                        evt.preventDefault();
                        this.thumbdownDlg = new ebg.popindialog();
                        this.thumbdownDlg.create("thumbdownDialog");
                        this.thumbdownDlg.setTitle(__("lang_mainsite", "You are about to give a thumb down."));
                        this.thumbdownDlg.setMaxWidth(600);
                        var html = "<div id=\"thumbdownDialog\" class=\"midSizeDialog\">";
                        html += __("lang_mainsite", "You are about to give a red thumb.") + "<br/><br/>";
                        html += __("lang_mainsite", "If you confirm BGA will make sure you won't play at the same table again.");
                        html += __("lang_mainsite", "This player won't be able to send you a message (or speak as a spectator at your table).");
                        html += "<p>";
                        html += "<a class='bgabutton bgabutton_blue bgabutton_big' id='thumbdown_confirm' href='#'><span>" + __("lang_mainsite", "I don't want to play with this player, ever") + "</span></a>";
                        html += "<a class='bgabutton bgabutton_gray bgabutton_big' id='thumbdown_cancel' href='#'><span>" + __("lang_mainsite", "Cancel") + "</span></a>";
                        html += "</p>";
                        html += "</div>";
                        this.thumbdownDlg.setContent(html);
                        this.thumbdownDlg.show();
                        dojo.connect($("thumbdown_cancel"), "onclick", dojo.hitch(this.thumbdownDlg, function(evt) {
                            evt.preventDefault();
                            this.destroy();
                        }));
                        dojo.connect($("thumbdown_confirm"), "onclick", dojo.hitch(this, function(evt) {
                            evt.preventDefault();
                            this.thumbdownDlg.destroy();
                            this.onGiveThumbDownStep2();
                        }));
                    },
                    onGiveThumbDownStep2: function(evt) {
                        this.thumbdownDlg = new ebg.popindialog();
                        this.thumbdownDlg.create("thumbdownDialog2");
                        this.thumbdownDlg.setTitle(__("lang_mainsite", "You are about to give a thumb down."));
                        this.thumbdownDlg.setMaxWidth(600);
                        var html = "<div id=\"thumbdownDialog2\" class=\"midSizeDialog\">";
                        html += __("lang_mainsite", "Do you also want to tell the whole community not to play with this player?") + "<br/><br/>";
                        html += "<p>";
                        html += "<a class='bgabutton bgabutton_blue bgabutton_big' id='thumbdown_personal' href='#'><span>" + __("lang_mainsite", "No, this is just my personal opinion") + "</span></a>";
                        html += "<a class='bgabutton bgabutton_blue bgabutton_big' id='thumbdown_community' href='#'><span>" + __("lang_mainsite", "Yes, nobody should play with this player") + "</span></a>";
                        html += "</p>";
                        html += "</div>";
                        this.thumbdownDlg.setContent(html);
                        this.thumbdownDlg.show();
                        dojo.connect($("thumbdown_personal"), "onclick", dojo.hitch(this, function(evt) {
                            evt.preventDefault();
                            this.thumbdownDlg.destroy();
                            var args = {
                                player: this.target_player,
                                value: -1,
                                category: "personal"
                            };
                            if (this.bForceThumbDown) {
                                args.f = 1;
                            }
                            this.page.ajaxcall("/table/table/changeReputation.html", args, this, function(_10c0) {
                                this.value = -1;
                                this.updateControl();
                            });
                        }));
                        dojo.connect($("thumbdown_community"), "onclick", dojo.hitch(this, function(evt) {
                            evt.preventDefault();
                            this.thumbdownDlg.destroy();
                            this.onGiveThumbDownStep3();
                        }));
                    },
                    onGiveThumbDownStep3: function(evt) {
                        this.thumbdownDlg = new ebg.popindialog();
                        this.thumbdownDlg.create("thumbdownDialog3");
                        this.thumbdownDlg.setTitle(__("lang_mainsite", "You are about to give a thumb down."));
                        this.thumbdownDlg.setMaxWidth(600);
                        var html = "<div id=\"thumbdownDialog3\" class=\"midSizeDialog\">";
                        html += __("lang_mainsite", "Please tell us why nobody should play with X?") + "<br/><br/>";
                        html += "<p>";
                        html += "<a class='bgabutton bgabutton_blue thumbdown_apply' id='thumbdown_chat' href='#'><span>" + __("lang_mainsite", "This player is aggressive/insulting or said innapropriate things in the chat") + "</span></a>";
                        html += "<a class='bgabutton bgabutton_blue thumbdown_apply' id='thumbdown_slow'  href='#'><span>" + __("lang_mainsite", "This player plays too slowly and/or has frequent disconnections") + "</span></a>";
                        html += "<a class='bgabutton bgabutton_blue thumbdown_apply' id='thumbdown_leave' href='#'><span>" + __("lang_mainsite", "This player quits/abandoned the game on purpose") + "</span></a>";
                        html += "<a class='bgabutton bgabutton_blue thumbdown_apply' id='thumbdown_kingmaking' href='#'><span>" + __("lang_mainsite", "This player is doing some Kingmaking / team play.") + "</span></a>";
                        html += "<a class='bgabutton bgabutton_blue thumbdown_apply' id='thumbdown_other'  href='#'><span>" + __("lang_mainsite", "This player should be avoided for another reason") + "</span></a>";
                        html += "<a class='bgabutton bgabutton_gray thumbdown_apply' id='thumbdown_personal' href='#'><span>" + __("lang_mainsite", "Nevermind, this is just my opinion finally") + "</span></a>";
                        html += "</p>";
                        html += "</div>";
                        this.thumbdownDlg.setContent(html);
                        this.thumbdownDlg.show();
                        dojo.query(".thumbdown_apply").connect("onclick", dojo.hitch(this, function(evt) {
                            evt.preventDefault();
                            this.thumbdownDlg.destroy();
                            var _10c1 = evt.currentTarget.id.substr(10);
                            var args = {
                                player: this.target_player,
                                value: -1,
                                category: _10c1
                            };
                            if (this.bForceThumbDown) {
                                args.f = 1;
                            }
                            this.page.ajaxcall("/table/table/changeReputation.html", args, this, function(_10c2) {
                                this.value = -1;
                                this.updateControl();
                                if (_10c1 != "personal") {
                                    this.onGiveThumbDownFinal();
                                }
                            });
                        }));
                    },
                    onGiveThumbDownFinal: function() {
                        this.thumbdownDlg = new ebg.popindialog();
                        this.thumbdownDlg.create("thumbdownDialog4");
                        this.thumbdownDlg.setTitle(__("lang_mainsite", "Thank you"));
                        this.thumbdownDlg.setMaxWidth(600);
                        var html = "<div id=\"thumbdownDialog4\" class=\"midSizeDialog\">";
                        html += dojo.string.substitute(__("lang_mainsite", "Thanks. Eventually, if you think this player violated our Terms of Service (ex : insults / verbal aggression), you should ${action} to moderators in addition."), {
                            action: "<a href=\"/newreport?player=" + this.target_player + "\" id=\"thumbdown_report\">" + __("lang_mainsite", "Report this player") + "</a>"
                        });
                        +"<br/><br/>";
                        html += "<p>";
                        html += "<a class='bgabutton bgabutton_gray bgabutton_big' id='thumbdown_cancel' href='#'><span>" + __("lang_mainsite", "Ok") + "</span></a>";
                        html += "</p>";
                        html += "</div>";
                        this.thumbdownDlg.setContent(html);
                        this.thumbdownDlg.show();
                        dojo.connect($("thumbdown_cancel"), "onclick", dojo.hitch(this.thumbdownDlg, function(evt) {
                            evt.preventDefault();
                            this.destroy();
                        }));
                        dojo.connect($("thumbdown_report"), "onclick", dojo.hitch(this.thumbdownDlg, function(evt) {
                            dojo.destroy("thumbdownDialog4");
                            this.destroy();
                        }));
                    }
                });
            });
        },
        "ebg/paymentbuttons": function() {
            define(["dojo", "dojo/_base/declare", "ebg/expandablesection", "ebg/comboajax"], function(dojo, _10c3) {
                return _10c3("ebg.paymentbuttons", null, {
                    constructor: function() {
                        this.page = null;
                        this.div_id = null;
                        this.sections = {};
                        this.btcDialog = null;
                        this.bUseStripeElements = true;
                    },
                    create: function(page) {
                        this.page = page;
                        dojo.query(".payment_image").forEach(function(node) {
                            dojo.attr(node, "src", dojo.attr(node, "data-src"));
                        });
                        if ($("payment_method").innerHTML == "stripe" || $("payment_method").innerHTML == "wechat") {
                            this.initStripe();
                        }
                        if ($("payment_method").innerHTML == "wechat") {
                            this.page.register_subs(dojo.subscribe("weChatPaymentSuccess", this, "onWeChatPaymentSucceeded"));
                            jQuery(document).ready(function($) {
                                require([g_themeurl + "js/qrcode.min.js"], function() {});
                            });
                        }
                        dojo.connect($("premium_btn_12months"), "onclick", this, function(evt) {
                            if (toint($("target_player").innerHTML) < 0) {
                                this.page.showMessage(_("You must be logged with your account, or offer this membership (see below)"), "info");
                                return;
                            }
                            if ($("payment_method").innerHTML == "paypal") {
                                $("premium_btn_12months").innerHTML = _("Please wait...");
                                $("paypal_btn_12months").click();
                            } else {
                                if ($("payment_method").innerHTML == "wechat") {
                                    this.onClickWechatButton($("plan_12months").innerHTML, evt.currentTarget);
                                } else {
                                    this.onClickStripeButton($("plan_12months").innerHTML);
                                }
                            }
                        });
                        dojo.connect($("premium_btn_2months"), "onclick", this, function(evt) {
                            if (toint($("target_player").innerHTML) < 0) {
                                this.page.showMessage(_("You must be logged with your account, or offer this membership (see below)"), "info");
                                return;
                            }
                            if ($("payment_method").innerHTML == "paypal") {
                                $("premium_btn_2months").innerHTML = _("Please wait...");
                                $("paypal_btn_2months").click();
                            } else {
                                if ($("payment_method").innerHTML == "wechat") {
                                    this.onClickWechatButton($("plan_1month").innerHTML, evt.currentTarget);
                                } else {
                                    this.onClickStripeButton($("plan_1month").innerHTML);
                                }
                            }
                        });
                        dojo.connect($("more_payment_option_btn"), "onclick", this, function(evt) {
                            dojo.stopEvent(evt);
                            if (typeof mainsite != "undefined") {
                                dojo.style("more_payment_option_btn", "display", "none");
                                dojo.style("more_payment_option", "display", "block");
                            } else {
                                window.open(this.page.metasiteurl + "/premium?options", "_blank");
                            }
                        });
                        if ($("payment_method").innerHTML == "paypal") {
                            dojo.style("more_payment_option_btn", "display", "none");
                            dojo.style("more_payment_option", "display", "block");
                        }
                        this.currentGameBox = 0;
                        setTimeout(dojo.hitch(this, "rollGameBoxes"), 2000);
                        if ($("payment_method").innerHTML == "stripe") {
                            this.loadStripeButtons();
                        }
                        dojo.query(".btc_donate").connect("onclick", this, "onClickBtcDonate");
                        this.sections["bitcoinpayment"] = new ebg.expandablesection();
                        this.sections["bitcoinpayment"].create(this, "expandable_bitcoinpayment");
                        this.sections["offer"] = new ebg.expandablesection();
                        this.sections["offer"].create(this, "expandable_offer");
                        this.filteringSelect = new ebg.comboajax();
                        this.filteringSelect.create("findplayer", "/player/player/findPlayer.html", __("lang_mainsite", "Type a player name..."));
                        dojo.connect(this.filteringSelect, "onChange", this, dojo.hitch(this, function(_10c4) {
                            if (toint(_10c4) !== 0) {
                                dijit.focus.curNode && dijit.focus.curNode.blur();
                                var _10c5 = this.filteringSelect.div.value;
                                $("offer_result").innerHTML = dojo.string.substitute(_("You are about to offer a Premium membership to ${name}. Please now use any payment button on this page."), {
                                    name: "<b>" + _10c5 + "</b>"
                                });
                                dojo.query(".target_player").forEach(function(node) {
                                    node.value = _10c4;
                                });
                                $("target_player").innerHTML = _10c4;
                                $("target_player_username").innerHTML = _10c5;
                                if (toint($("target_player").innerHTML) < 0) {
                                    dojo.query(".player_notlogged_button").style("display", "inline");
                                    dojo.query(".player_logged_button").style("display", "none");
                                } else {
                                    dojo.query(".player_logged_button").style("display", "inline");
                                    dojo.query(".player_notlogged_button").style("display", "none");
                                    dojo.style("payment_buttons_section", "display", "block");
                                    dojo.query(".paypal_button").forEach(function(node) {
                                        node.innerHTML = dojo.string.substitute(_("Make ${name} Premium"), {
                                            name: _10c5
                                        });
                                    });
                                    $("premium_save_12_months").innerHTML = _("(Billed once for 12 months)");
                                    if ($("one_year_mainline")) {
                                        $("one_year_mainline").innerHTML = "12";
                                    }
                                    if ($("one_year_subline")) {
                                        $("one_year_subline").innerHTML = _("months");
                                    }
                                    if ($("one_month_mainline")) {
                                        $("one_month_mainline").innerHTML = "1";
                                    }
                                    if ($("one_month_subline")) {
                                        $("one_month_subline").innerHTML = _("month");
                                    }
                                }
                            }
                        }));
                        if (toint($("target_player").innerHTML) < 0) {
                            dojo.query(".player_notlogged_button").style("display", "inline");
                            dojo.query(".player_logged_button").style("display", "none");
                        }
                        dojo.query(".paypal_payment_button").connect("onclick", this, "onPaypalBtnClick");
                        if ($("cancel_stripe_subscription")) {
                            dojo.connect($("cancel_stripe_subscription"), "onclick", this, "onCancelSubscription");
                        }
                        if ($("payment_method").innerHTML == "paypal") {
                            dojo.addClass("paymentmethod_paypal", "current_payment_method");
                        } else {
                            if ($("payment_method").innerHTML == "wechat") {
                                dojo.addClass("paymentmethod_wechat", "current_payment_method");
                            } else {
                                dojo.addClass("paymentmethod_" + $("currency").innerHTML, "current_payment_method");
                            }
                        }
                        dojo.query(".paymentmethod").connect("onclick", this, "onPaymentMethodChange");
                    },
                    destroy: function() {
                        if ($("findplayer")) {
                            dijit.byId("findplayer").destroy();
                        }
                    },
                    onPaypalBtnClick: function(evt) {
                        ga("send", "event", "Club", "paypal_btn_click", evt.currentTarget.id.substr(11));
                    },
                    onClickBtcDonate: function(evt) {
                        evt.preventDefault();
                        evt.stopPropagation();
                        var node = evt.currentTarget.id;
                        var _10c6 = node.split("_")[3];
                        ga("send", "event", "Club", "bitcoin_btn_click", "months" + _10c6);
                        this.page.ajaxcall("/account/account/blockchain_prepare_payment.html", {
                            months: _10c6,
                            target: $("target_player").innerHTML,
                            lock: true
                        }, this, function(_10c7) {
                            if (this.btcDialog) {
                                this.btcDialog.destroyRecursive();
                            }
                            this.btcDialog = new dijit.Dialog({});
                            this.btcDialog.autofocus = false;
                            this.btcDialog.refocus = false;
                            this.btcDialog.set("title", _("Pay with Bitcoin"));
                            var html = "<div class='btc_dialog_main'>" + "&bull; " + _("Got a wallet configured with your brower? Click the link below:") + "<div class='btc_link' title='" + _("Click to pay") + "'>" + "<a id='btc_pay_link' href='" + _10c7.btc_pay_uri + "'>Pay <em>" + _10c7.btc_price + " BTC</em> to <em>Board Game Arena</em></a>" + "</div>" + "&bull; " + _("Got a mobile phone wallet? Just scan the QR code:") + "<div class='btc_qrcode'>" + "<img id='btc_pay_qrcode' src='https://chart.googleapis.com/chart?chs=150x150&cht=qr&chl=" + escape(_10c7.btc_pay_uri) + "&choe=UTF-8' title='" + _("Scan to pay") + "' />" + "</div>" + "&bull; " + _("If you prefer to process your payment manually, please send exactly <em>%f BTC</em> to:").replace("%f", _10c7.btc_price) + "<div class='btc_address'><span id='btc_pay_address'>" + _10c7.btc_pay_address + "</span></div>" + "</div>" + "<div id='btc_dialog_footnotes'>" + _("This bitcoin payment address will be valid for the next 24 hours.") + "<br />" + _("Your payment may take some time to process. You'll get a confirmation email when we receive confirmation for the transaction.") + "<br />" + _("The rate used for converting the selected donation amount into bitcoins is updated on a regular basis.") + "</div>" + "<div id='btc_dialog_action'><a id='action_close' class='button' href='welcome'><span>" + _("Done!") + "</span></a></div>";
                            this.btcDialog.set("content", html);
                            dojo.connect($("action_close"), "onclick", this, function(evt) {
                                evt.preventDefault();
                                this.btcDialog.hide();
                            });
                            this.btcDialog.show();
                        }, function(_10c8) {});
                    },
                    rollGameBoxes: function() {
                        if ($("whypremium_catalog")) {
                            var _10c9 = false;
                            var _10ca = document.querySelectorAll(":hover");
                            var _10cb = dojo.query("#whypremium_catalog_list .game_box").length;
                            for (var i in _10ca) {
                                if (_10ca[i].id == "whypremium_catalog") {
                                    _10c9 = true;
                                }
                            }
                            if (!_10c9) {
                                if (this.currentGameBox >= (_10cb - 1)) {
                                    this.currentGameBox = 0;
                                    dojo.style("whypremium_catalog_list", "left", "0px");
                                }
                                this.currentGameBox++;
                                var size = dojo.style("whypremium_catalog", "width");
                                this.page.slideToObjectPos("whypremium_catalog_list", "whypremium_catalog", -size * this.currentGameBox, 0).play();
                            }
                            setTimeout(dojo.hitch(this, "rollGameBoxes"), 2000);
                        }
                    },
                    loadStripeButtons: function() {},
                    initStripe: function() {
                        if (this.bUseStripeElements) {
                            if (typeof this.bStripeIsLoading == "undefined") {
                                this.bStripeIsLoading = true;
                                var _10cc = document.createElement("script");
                                _10cc.setAttribute("src", "https://js.stripe.com/v3/");
                                $("stripe_script").appendChild(_10cc);
                            }
                            if (typeof Stripe == "undefined") {
                                setTimeout(dojo.hitch(this, "initStripe"), 100);
                            } else {
                                this.stripe = Stripe($("stripe_key").innerHTML);
                                this.stripeElements = this.stripe.elements();
                                var style = {
                                    base: {
                                        fontSize: "14px",
                                        fontWeight: 500,
                                        color: "black",
                                        "::placeholder": {
                                            color: "#a1a1a7",
                                        },
                                    }
                                };
                                this.card = this.stripeElements.create("cardNumber", {
                                    style: style,
                                    placeholder: _("Card number")
                                });
                                this.card.mount("#bga_payment_card_placeholder");
                                this.card.addEventListener("change", dojo.hitch(this, function(event) {
                                    var _10cd = document.getElementById("card-errors");
                                    if (event.error) {
                                        _10cd.textContent = event.error.message;
                                        dojo.addClass("bga_payment_window", "ModalContainer--animating");
                                        dojo.addClass("bga_payment_window_content", "Modal-animationWrapper Modal-animationWrapper--shake");
                                        setTimeout(dojo.hitch(this, function() {
                                            dojo.removeClass("bga_payment_window", "ModalContainer--animating");
                                            dojo.removeClass("bga_payment_window_content", "Modal-animationWrapper Modal-animationWrapper--shake");
                                        }), 500);
                                    } else {
                                        _10cd.textContent = "";
                                    }
                                    if (event.brand) {
                                        this.setBrandIcon(event.brand);
                                    }
                                }));
                                this.cardExpire = this.stripeElements.create("cardExpiry", {
                                    style: style
                                });
                                this.cardExpire.mount("#bga_payment_expire");
                                this.cardCVV = this.stripeElements.create("cardCvc", {
                                    style: style
                                });
                                this.cardCVV.mount("#bga_payment_cvv");
                                var form = document.getElementById("payment-form");
                                form.addEventListener("submit", dojo.hitch(this, function(event) {
                                    event.preventDefault();
                                    bOneTimePayment = false;
                                    if ((typeof current_player_id != "undefined") && $("target_player").innerHTML != current_player_id) {
                                        bOneTimePayment = true;
                                    }
                                    if (dojo.hasClass("bga_payment_button_wrap", "Button--disableClick") || dojo.hasClass("bga_payment_button_wrap", "Button--success")) {
                                        this.page.showMessage(_("Please wait, a payment is already in progress..."), "error");
                                    } else {
                                        if (($("accept_tos").innerHTML != 0) && $("agree_tos").checked != true) {
                                            $("card-errors").textContent = _("You must agree with Term of Sales");
                                            dojo.addClass("bga_payment_window", "ModalContainer--animating");
                                            dojo.addClass("bga_payment_window_content", "Modal-animationWrapper Modal-animationWrapper--shake");
                                            setTimeout(dojo.hitch(this, function() {
                                                dojo.removeClass("bga_payment_window", "ModalContainer--animating");
                                                dojo.removeClass("bga_payment_window_content", "Modal-animationWrapper Modal-animationWrapper--shake");
                                            }), 500);
                                        } else {
                                            dojo.addClass("bga_payment_button_wrap", "Button--disableClick");
                                            this.latest_bga_button_label = $("bga_payment_button").innerHTML;
                                            $("bga_payment_button").innerHTML = "<i class=\"fa fa-spinner fa-pulse fa-lg\" aria-hidden=\"true\" style=\"position:relative;top:8px;\"></i>";
                                            if (bOneTimePayment) {
                                                if (this.paymentIntent_secret === null) {
                                                    this.page.showMessage("Error during payment initialization", "Error");
                                                    return;
                                                }
                                                this.stripe.handleCardPayment(this.paymentIntent_secret, this.card).then(dojo.hitch(this, "stripePaymentResultHandler"));
                                            } else {
                                                this.stripe.createToken(this.card).then(dojo.hitch(this, "stripePaymentResultHandler"));
                                            }
                                        }
                                    }
                                }));
                                dojo.connect($("bga_payment_close"), "onclick", this, function() {
                                    dojo.style("bga_payment_layout", "display", "none");
                                });
                                dojo.connect(this.card, "focus", dojo.hitch(this, function(evt) {
                                    dojo.addClass("bga_card_field", "Fieldset-child--focused");
                                }));
                                dojo.connect(this.card, "blur", dojo.hitch(this, function(evt) {
                                    dojo.removeClass("bga_card_field", "Fieldset-child--focused");
                                }));
                                dojo.connect(this.cardExpire, "focus", dojo.hitch(this, function(evt) {
                                    dojo.addClass("bga_cardexpiry_field", "Fieldset-child--focused");
                                }));
                                dojo.connect(this.cardExpire, "blur", dojo.hitch(this, function(evt) {
                                    dojo.removeClass("bga_cardexpiry_field", "Fieldset-child--focused");
                                }));
                                dojo.connect(this.cardCVV, "focus", dojo.hitch(this, function(evt) {
                                    dojo.addClass("bga_cardcvc_field", "Fieldset-child--focused");
                                }));
                                dojo.connect(this.cardCVV, "blur", dojo.hitch(this, function(evt) {
                                    dojo.removeClass("bga_cardcvc_field", "Fieldset-child--focused");
                                }));
                                dojo.connect($("security_infos"), "onclick", this, dojo.hitch(this, function() {
                                    alert(_("Your payment data are NEVER collected, transmitted or stored by Board Game Arena.") + "\n" + _("Your infos are collected and processed exclusively by our payment service Stripe.com.") + "\n" + _("We are going to redirect you to Stripe.com privacy policy."));
                                }));
                            }
                        } else {
                            if (typeof this.bStripeIsLoading == "undefined") {
                                this.bStripeIsLoading = true;
                                var _10cc = document.createElement("script");
                                _10cc.setAttribute("src", "https://checkout.stripe.com/checkout.js");
                                $("stripe_script").appendChild(_10cc);
                            }
                            if (typeof StripeCheckout == "undefined") {
                                setTimeout(dojo.hitch(this, "initStripe"), 100);
                            } else {
                                this.stripeHandler = StripeCheckout.configure({
                                    key: $("stripe_key").innerHTML,
                                    image: getStaticAssetUrl("/img/logo/logo.png"),
                                    locale: dojoConfig.locale,
                                    token: dojo.hitch(this, "payWithStripe")
                                });
                                window.addEventListener("popstate", dojo.hitch(this, function() {
                                    this.stripeHandler.close();
                                }));
                            }
                        }
                    },
                    stripePaymentResultHandler: function(_10ce) {
                        bOneTimePayment = false;
                        if ((typeof current_player_id != "undefined") && $("target_player").innerHTML != current_player_id) {
                            bOneTimePayment = true;
                        }
                        if (_10ce.error) {
                            var _10cf = document.getElementById("card-errors");
                            _10cf.textContent = _10ce.error.message;
                            dojo.addClass("bga_payment_window", "ModalContainer--animating");
                            dojo.addClass("bga_payment_window_content", "Modal-animationWrapper Modal-animationWrapper--shake");
                            setTimeout(dojo.hitch(this, function() {
                                dojo.removeClass("bga_payment_window", "ModalContainer--animating");
                                dojo.removeClass("bga_payment_window_content", "Modal-animationWrapper Modal-animationWrapper--shake");
                            }), 500);
                            dojo.removeClass("bga_payment_button_wrap", "Button--disableClick");
                            $("bga_payment_button").innerHTML = this.latest_bga_button_label;
                        } else {
                            dojo.removeClass("bga_payment_button_wrap", "Button--disableClick");
                            dojo.addClass("bga_payment_button_wrap", "Button--success");
                            $("bga_payment_button").innerHTML = "<i class=\"fa fa-check-circle-o fa-lg\" aria-hidden=\"true\" style=\"position:relative;top:8px;\"></i>";
                            if (bOneTimePayment) {
                                gotourl("premium?confirmpayment");
                            } else {
                                this.stripeTokenHandler(_10ce.token);
                            }
                        }
                    },
                    setBrandIcon: function(brand) {
                        var _10d0 = {
                            "visa": "fa-cc-visa",
                            "mastercard": "fa-cc-mastercard",
                            "amex": "fa-cc-amex",
                            "discover": "fa-cc-discover",
                            "diners": "fa-cc-dinners-club",
                            "jcb": "fa-cc-jcb"
                        };
                        var _10d1 = document.getElementById("brand-icon");
                        if (brand in _10d0) {
                            $("brand-icon").src = getStaticAssetUrl("img/common/cc_" + brand + ".png");
                            dojo.style("brand-icon", "display", "block");
                        } else {
                            dojo.style("brand-icon", "display", "none");
                        }
                    },
                    onClickWechatButton: function(_10d2, _10d3) {
                        var _10d4 = 2400;
                        if (_10d2 % 100 == 12) {
                            _10d4 = 2400;
                        } else {
                            _10d4 = 800;
                        }
                        this.saveWeChatButtonContent = _10d3.innerHTML;
                        _10d3.innerHTML = "<i class=\"fa fa-spinner fa-spin fa-fw\"></i>";
                        this.stripe.createSource({
                            type: "wechat",
                            amount: _10d4,
                            currency: "eur",
                            statement_descriptor: "Player " + $("target_player").innerHTML,
                        }).then(dojo.hitch(this, function(_10d5) {
                            _10d3.innerHTML = this.saveWeChatButtonContent;
                            if (_10d5.source) {
                                this.wechatDlg = new ebg.popindialog();
                                this.wechatDlg.create("wechatDlg");
                                this.wechatDlg.setTitle(__("lang_mainsite", "Please use your WeChat app to confirm the payment"));
                                var html = "<div id=\"wechatContent\">";
                                html += "<p>" + _("Note: because WeChat is doing its own currency conversion, the amount displayed below may be slightly different that our price. Sorry about this.") + "</p>";
                                html += "<div id=\"qrcode\" style=\"margin:auto;width:256px;height:256px;margin-top: 50px;margin-bottom: 50px;\"></div>";
                                html += "<p style='text-align:center'><a href='" + _10d5.source.wechat.qr_code_url + "' target='_blank'>" + _("... or click here to open your WeChap app") + "</a></p>";
                                html += "</div>";
                                this.wechatDlg.setContent(html);
                                this.wechatDlg.show();
                                new QRCode(document.getElementById("qrcode"),{
                                    text: _10d5.source.wechat.qr_code_url,
                                    width: 256,
                                    height: 256,
                                    colorDark: "#000000",
                                    colorLight: "#ffffff",
                                    correctLevel: QRCode.CorrectLevel.H
                                });
                            } else {
                                this.page.showMessage("Error during wechat source creation", "error");
                                console.error(_10d5.error);
                            }
                        }));
                    },
                    onWeChatPaymentSucceeded: function() {
                        if (this.wechatDlg) {
                            this.wechatDlg.destroy();
                            if (typeof gotourl != "undefined") {
                                gotourl("premium?confirmpayment");
                            } else {
                                this.page.showMessage(_("You are awesome! Starting next game you'll enjoy your Premium membership!"), "info");
                            }
                        }
                    },
                    onClickStripeButton: function(_10d6) {
                        var descr = "";
                        var _10d7 = "";
                        var _10d8 = false;
                        var _10d9 = _("Subscribe");
                        if ($("accept_tos").innerHTML == 1) {
                            if (_10d6 % 100 == 2) {
                                _10d9 = dojo.string.substitute(_("Subscribe for ${price}"), {
                                    price: $("price_1month").innerHTML
                                });
                            } else {
                                if (_10d6 % 100 == 12) {
                                    _10d9 = dojo.string.substitute(_("Subscribe for ${price}"), {
                                        price: $("price_12months").innerHTML
                                    });
                                }
                            }
                        }
                        if ((typeof current_player_id != "undefined") && $("target_player").innerHTML != current_player_id) {
                            _10d9 = _("Offer membership");
                            _10d8 = true;
                        }
                        var _10da = this.bUseStripeElements;
                        if (_10d8) {
                            this.paymentIntent_secret = null;
                            this.page.ajaxcall("/premium/premium/paymentIntent.html", {
                                plan: _10d6,
                                currency: $("currency").innerHTML,
                                email: $("target_player_email").innerHTML,
                                target: $("target_player").innerHTML,
                            }, this, dojo.hitch(this, function(_10db) {
                                this.paymentIntent_secret = _10db.client_secret;
                            }));
                        }
                        if (_10d6 % 100 == 2) {
                            descr = _("Monthly membership");
                            _10d7 = $("price_1month").innerHTML;
                            if (_10d8) {
                                descr = _("1 month membership");
                            }
                        } else {
                            if (_10d6 % 100 == 6) {
                                descr = _("6 month membership");
                                _10d7 = $("price_6months").innerHTML;
                            } else {
                                if (_10d6 % 100 == 12) {
                                    descr = _("Yearly membership");
                                    _10d7 = $("price_12months").innerHTML + " " + $("premium_save_12_months").innerHTML;
                                    if (_10d8) {
                                        descr = _("1 year membership");
                                    }
                                }
                            }
                        }
                        if (_10da) {
                            $("bga_payment_name").innerHTML = descr;
                            $("bga_payment_descr").innerHTML = _10d7;
                            $("bga_payment_email").innerHTML = _("Account") + ": " + $("target_player_username").innerHTML;
                            $("bga_payment_email").title = $("target_player_email").innerHTML;
                            $("bga_payment_button").innerHTML = _10d9;
                            dojo.removeClass("bga_payment_button_wrap", "Button--success");
                            var _10dc = dojo.window.getBox();
                            var _10dd = Math.max(0, ((_10dc.h - 400) / 2) - 30);
                            dojo.style("bga_payment_window", "marginTop", _10dd + "px");
                            if ($("accept_tos").innerHTML == 0) {
                                dojo.style("accept_tos_block", "display", "none");
                            } else {
                                dojo.style("accept_tos_block", "display", "block");
                            }
                            dojo.style("bga_payment_layout", "display", "block");
                            if (typeof this.card != "undefined") {
                                this.card.focus();
                            }
                        } else {
                            this.stripeHandler.open({
                                name: descr,
                                description: _10d7,
                                zipCode: false,
                                email: $("target_player_email").innerHTML,
                                bitcoin: false,
                                allowRememberMe: false,
                                panelLabel: _10d9,
                            });
                        }
                        this.stripeCurrentPlan = _10d6;
                    },
                    stripeTokenHandler: function(token) {
                        this.page.showMessage(_("Please wait few seconds while we are upgrading up your account ..."), "info");
                        var args = {
                            stripeToken: token.id,
                            email: $("target_player_email").innerHTML,
                            target: $("target_player").innerHTML,
                            plan: this.stripeCurrentPlan,
                            currency: $("currency").innerHTML
                        };
                        if ($("agree_tos").checked) {
                            args.tos_agreed = true;
                        }
                        this.page.ajaxcall("/premium/premium/doPayment.html", args, this, dojo.hitch(this, function(_10de) {
                            if (typeof _10de.requires_action != "undefined" && _10de.requires_action) {
                                var _10df = _10de.client_secret;
                                this.page.showMessage(_("We are redirecting you to your bank to confirm the payment..."), "info");
                                dojo.style("bga_payment_layout", "display", "none");
                                this.stripe.handleCardPayment(_10df).then(dojo.hitch(this, function(_10e0) {
                                    if (_10e0.error) {
                                        this.page.showMessage(_("Sorry, the payment have failed :(") + " " + _10e0.error, "error");
                                    } else {
                                        if (typeof gotourl != "undefined") {
                                            gotourl("premium?confirmpayment");
                                        } else {
                                            this.page.showMessage(_("You are awesome! Starting next game you'll enjoy your Premium membership!"), "info");
                                        }
                                    }
                                }));
                            } else {
                                if (typeof gotourl != "undefined") {
                                    gotourl("premium?confirmpayment");
                                } else {
                                    this.page.showMessage(_("You are awesome! Starting next game you'll enjoy your Premium membership!"), "info");
                                    dojo.style("bga_payment_layout", "display", "none");
                                }
                            }
                        }), function(_10e1) {
                            setTimeout(function() {
                                dojo.style("bga_payment_layout", "display", "none");
                            }, 1000);
                        });
                    },
                    payWithStripe: function(token) {
                        this.page.showMessage(_("Please wait few seconds while we are upgrading up your account ..."), "info");
                        this.page.ajaxcall("/premium/premium/doPayment.html", {
                            stripeToken: token.id,
                            email: $("target_player_email").innerHTML,
                            target: $("target_player").innerHTML,
                            plan: this.stripeCurrentPlan,
                            currency: $("currency").innerHTML
                        }, this, function(_10e2) {
                            if (typeof gotourl != "undefined") {
                                gotourl("premium?confirmpayment");
                            } else {
                                this.page.showMessage(_("You are awesome! Starting next game you'll enjoy your Premium membership!"), "info");
                            }
                        });
                    },
                    onCancelSubscription: function(evt) {
                        dojo.stopEvent(evt);
                        this.page.confirmationDialog(_("Your account will remains Premium until the end of the current period, then there will be no automatic renewal."), dojo.hitch(this, function() {
                            this.page.ajaxcall("/premium/premium/cancelSubscription.html", {}, this, function(_10e3) {
                                mainsite.gotourl_forcereload("premium");
                                this.page.showMessage(_("Done! The automatic membership renewal has been removed. Your account will be downgraded to Standard at the end of the current period."), "info");
                            });
                        }));
                    },
                    onPaymentMethodChange: function(evt) {
                        dojo.stopEvent(evt);
                        var _10e4 = evt.currentTarget.id.substr(14);
                        if (_10e4 == "btc") {
                            mainsite.gotourl_forcereload("premium?paymentmethod=bitcoin");
                            this.page.showMessage(_("Done! Please choose a payment button."), "info");
                        } else {
                            if (_10e4 == "paypal") {
                                mainsite.gotourl_forcereload("premium?paymentmethod=paypal");
                                this.page.showMessage(_("Done! Please choose a payment button."), "info");
                            } else {
                                if (_10e4 == "wechat") {
                                    mainsite.gotourl_forcereload("premium?paymentmethod=wechat");
                                    this.page.showMessage(_("Done! Please choose a payment button."), "info");
                                } else {
                                    if (_10e4 == "eur") {
                                        mainsite.gotourl_forcereload("premium?country=DE");
                                    } else {
                                        if (_10e4 == "usd") {
                                            mainsite.gotourl_forcereload("premium?country=US");
                                        } else {
                                            if (_10e4 == "gbp") {
                                                mainsite.gotourl_forcereload("premium?country=GB");
                                            } else {
                                                if (_10e4 == "cad") {
                                                    mainsite.gotourl_forcereload("premium?country=CA");
                                                } else {
                                                    if (_10e4 == "jpy") {
                                                        mainsite.gotourl_forcereload("premium?country=JP");
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                });
            });
        },
        "ebg/expandablesection": function() {
            define(["dojo", "dojo/_base/declare"], function(dojo, _10e5) {
                return _10e5("ebg.expandablesection", null, {
                    constructor: function() {
                        this.page = null;
                        this.div_id = null;
                    },
                    create: function(page, _10e6) {
                        this.page = page;
                        this.div_id = _10e6;
                        dojo.query("#" + this.div_id + " .expandabletoggle").connect("onclick", this, "toggle");
                    },
                    destroy: function() {},
                    toggle: function(evt) {
                        if (typeof evt != "undefined") {
                            evt.preventDefault();
                        }
                        var _10e7 = dojo.query("#" + this.div_id + " .expandablecontent")[0];
                        if (dojo.style(_10e7, "display") == "none") {
                            this.expand();
                        } else {
                            this.collapse();
                        }
                    },
                    expand: function() {
                        var _10e8 = dojo.query("#" + this.div_id + " .expandablecontent")[0];
                        var arrow = dojo.query("#" + this.div_id + " .expandablearrow " + "div")[0];
                        dojo.style(_10e8, "display", "block");
                        dojo.removeClass(arrow, "icon20_expand");
                        dojo.addClass(arrow, "icon20_collapse");
                    },
                    collapse: function() {
                        var _10e9 = dojo.query("#" + this.div_id + " .expandablecontent")[0];
                        var arrow = dojo.query("#" + this.div_id + " .expandablearrow " + "div")[0];
                        dojo.style(_10e9, "display", "none");
                        dojo.removeClass(arrow, "icon20_collapse");
                        dojo.addClass(arrow, "icon20_expand");
                    }
                });
            });
        },
        "ebg/comboajax": function() {
            define(["dojo", "dojo/_base/declare", "dijit/form/FilteringSelect", "dojox/data/QueryReadStore"], function(dojo, _10ea) {
                return _10ea("ebg.comboajax", null, {
                    constructor: function() {
                        this.div_id = null;
                        this.div = null;
                        this.query_url = "";
                        this.stateStore = null;
                        this.filteringSelect = null;
                        this.currentSelection = null;
                        this.disableNextOnChange = false;
                    },
                    create: function(_10eb, _10ec, _10ed, value) {
                        this.div_id = _10eb;
                        this.div = $(_10eb);
                        if (this.div === null) {
                            console.error("comboajax::create: " + this.div_id + " associated div is null");
                        }
                        this.query_url = _10ec;
                        this.stateStore = new dojox.data.QueryReadStore({
                            url: this.query_url
                        });
                        if (typeof _10ed == "undefined") {
                            _10ed = __("lang_mainsite", "Start typing...");
                        }
                        if (typeof value == "undefined") {
                            value = "";
                        }
                        this.filteringSelect = new dijit.form.FilteringSelect({
                            id: _10eb,
                            name: _10eb,
                            store: this.stateStore,
                            searchAttr: "q",
                            value: value,
                            queryExpr: "${0}",
                            hasDownArrow: false,
                            invalidMessage: _10ed
                        },_10eb);
                        this.div = $(_10eb);
                        this.div.value = _10ed;
                        dojo.connect(this.div, "onfocus", this, function(evt) {
                            this.div.value = "";
                            this.filteringSelect.loadAndOpenDropDown();
                        });
                        dojo.connect(dijit.byId(this.div_id), "onChange", this, function(evt) {
                            var _10ee = dijit.byId(_10eb);
                            if (_10ee !== null && _10ee.item !== null && _10ee.item) {
                                var id = _10ee.item.i.id;
                                this.currentSelection = id;
                                if (this.disableNextOnChange) {} else {
                                    this.onChange(id);
                                }
                            }
                            this.disableNextOnChange = false;
                        });
                        dojo.connect(this.div, "onkeyup", this, "onKeyUp");
                    },
                    onKeyUp: function(evt) {
                        var _10ef = dijit.byId(this.div_id);
                        if (evt.keyCode == 13) {
                            if (_10ef.item !== null) {
                                var id = _10ef.item.i.id;
                                this.currentSelection = id;
                                this.onChange(id);
                            }
                        }
                    },
                    setValue: function(value) {
                        this.filteringSelect.attr("displayedValue", value);
                    },
                    onChange: function(id) {},
                    destroy: function(id) {
                        dijit.byId(this.div_id).destroy();
                    },
                    getSelection: function() {
                        if (this.filteringSelect.item) {
                            if (this.filteringSelect.item.i) {
                                if (this.filteringSelect.item.i.id) {
                                    return this.filteringSelect.item.i.id;
                                }
                            }
                        }
                        return null;
                    },
                    setSelection: function(value, _10f0) {
                        this.disableNextOnChange = _10f0;
                        this.stateStore.url = this.query_url + "?q=" + value;
                        this.stateStore.close();
                        this.filteringSelect.set("displayedValue", value);
                    }
                });
            });
        },
        "dojox/data/QueryReadStore": function() {
            define(["dojo", "dojox", "dojo/data/util/sorter", "dojo/string"], function(dojo, dojox) {
                return dojo.declare("dojox.data.QueryReadStore", null, {
                    url: "",
                    requestMethod: "get",
                    _className: "dojox.data.QueryReadStore",
                    _items: [],
                    _lastServerQuery: null,
                    _numRows: -1,
                    lastRequestHash: null,
                    doClientPaging: false,
                    doClientSorting: false,
                    _itemsByIdentity: null,
                    _identifier: null,
                    _features: {
                        "dojo.data.api.Read": true,
                        "dojo.data.api.Identity": true
                    },
                    _labelAttr: "label",
                    constructor: function(_10f1) {
                        dojo.mixin(this, _10f1);
                    },
                    getValue: function(item, _10f2, _10f3) {
                        this._assertIsItem(item);
                        if (!dojo.isString(_10f2)) {
                            throw new Error(this._className + ".getValue(): Invalid attribute, string expected!");
                        }
                        if (!this.hasAttribute(item, _10f2)) {
                            if (_10f3) {
                                return _10f3;
                            }
                        }
                        return item.i[_10f2];
                    },
                    getValues: function(item, _10f4) {
                        this._assertIsItem(item);
                        var ret = [];
                        if (this.hasAttribute(item, _10f4)) {
                            ret.push(item.i[_10f4]);
                        }
                        return ret;
                    },
                    getAttributes: function(item) {
                        this._assertIsItem(item);
                        var ret = [];
                        for (var i in item.i) {
                            ret.push(i);
                        }
                        return ret;
                    },
                    hasAttribute: function(item, _10f5) {
                        return this.isItem(item) && typeof item.i[_10f5] != "undefined";
                    },
                    containsValue: function(item, _10f6, value) {
                        var _10f7 = this.getValues(item, _10f6);
                        var len = _10f7.length;
                        for (var i = 0; i < len; i++) {
                            if (_10f7[i] == value) {
                                return true;
                            }
                        }
                        return false;
                    },
                    isItem: function(_10f8) {
                        if (_10f8) {
                            return typeof _10f8.r != "undefined" && _10f8.r == this;
                        }
                        return false;
                    },
                    isItemLoaded: function(_10f9) {
                        return this.isItem(_10f9);
                    },
                    loadItem: function(args) {
                        if (this.isItemLoaded(args.item)) {
                            return;
                        }
                    },
                    fetch: function(_10fa) {
                        _10fa = _10fa || {};
                        if (!_10fa.store) {
                            _10fa.store = this;
                        }
                        var self = this;
                        var _10fb = function(_10fc, _10fd) {
                            if (_10fd.onError) {
                                var scope = _10fd.scope || dojo.global;
                                _10fd.onError.call(scope, _10fc, _10fd);
                            }
                        };
                        var _10fe = function(items, _10ff, _1100) {
                            var _1101 = _10ff.abort || null;
                            var _1102 = false;
                            var _1103 = _10ff.start ? _10ff.start : 0;
                            if (self.doClientPaging == false) {
                                _1103 = 0;
                            }
                            var _1104 = _10ff.count ? (_1103 + _10ff.count) : items.length;
                            _10ff.abort = function() {
                                _1102 = true;
                                if (_1101) {
                                    _1101.call(_10ff);
                                }
                            }
                            ;
                            var scope = _10ff.scope || dojo.global;
                            if (!_10ff.store) {
                                _10ff.store = self;
                            }
                            if (_10ff.onBegin) {
                                _10ff.onBegin.call(scope, _1100, _10ff);
                            }
                            if (_10ff.sort && self.doClientSorting) {
                                items.sort(dojo.data.util.sorter.createSortFunction(_10ff.sort, self));
                            }
                            if (_10ff.onItem) {
                                for (var i = _1103; (i < items.length) && (i < _1104); ++i) {
                                    var item = items[i];
                                    if (!_1102) {
                                        _10ff.onItem.call(scope, item, _10ff);
                                    }
                                }
                            }
                            if (_10ff.onComplete && !_1102) {
                                var _1105 = null;
                                if (!_10ff.onItem) {
                                    _1105 = items.slice(_1103, _1104);
                                }
                                _10ff.onComplete.call(scope, _1105, _10ff);
                            }
                        };
                        this._fetchItems(_10fa, _10fe, _10fb);
                        return _10fa;
                    },
                    getFeatures: function() {
                        return this._features;
                    },
                    close: function(_1106) {},
                    getLabel: function(item) {
                        if (this._labelAttr && this.isItem(item)) {
                            return this.getValue(item, this._labelAttr);
                        }
                        return undefined;
                    },
                    getLabelAttributes: function(item) {
                        if (this._labelAttr) {
                            return [this._labelAttr];
                        }
                        return null;
                    },
                    _xhrFetchHandler: function(data, _1107, _1108, _1109) {
                        data = this._filterResponse(data);
                        if (data.label) {
                            this._labelAttr = data.label;
                        }
                        var _110a = data.numRows || -1;
                        this._items = [];
                        dojo.forEach(data.items, function(e) {
                            this._items.push({
                                i: e,
                                r: this
                            });
                        }, this);
                        var _110b = data.identifier;
                        this._itemsByIdentity = {};
                        if (_110b) {
                            this._identifier = _110b;
                            var i;
                            for (i = 0; i < this._items.length; ++i) {
                                var item = this._items[i].i;
                                var _110c = item[_110b];
                                if (!this._itemsByIdentity[_110c]) {
                                    this._itemsByIdentity[_110c] = item;
                                } else {
                                    throw new Error(this._className + ":  The json data as specified by: [" + this.url + "] is malformed.  Items within the list have identifier: [" + _110b + "].  Value collided: [" + _110c + "]");
                                }
                            }
                        } else {
                            this._identifier = Number;
                            for (i = 0; i < this._items.length; ++i) {
                                this._items[i].n = i;
                            }
                        }
                        _110a = this._numRows = (_110a === -1) ? this._items.length : _110a;
                        _1108(this._items, _1107, _110a);
                        this._numRows = _110a;
                    },
                    _fetchItems: function(_110d, _110e, _110f) {
                        var _1110 = _110d.serverQuery || _110d.query || {};
                        if (!this.doClientPaging) {
                            _1110.start = _110d.start || 0;
                            if (_110d.count) {
                                _1110.count = _110d.count;
                            }
                        }
                        if (!this.doClientSorting && _110d.sort) {
                            var _1111 = [];
                            dojo.forEach(_110d.sort, function(sort) {
                                if (sort && sort.attribute) {
                                    _1111.push((sort.descending ? "-" : "") + sort.attribute);
                                }
                            });
                            _1110.sort = _1111.join(",");
                        }
                        if (this.doClientPaging && this._lastServerQuery !== null && dojo.toJson(_1110) == dojo.toJson(this._lastServerQuery)) {
                            this._numRows = (this._numRows === -1) ? this._items.length : this._numRows;
                            _110e(this._items, _110d, this._numRows);
                        } else {
                            var _1112 = this.requestMethod.toLowerCase() == "post" ? dojo.xhrPost : dojo.xhrGet;
                            var _1113 = _1112({
                                url: this.url,
                                handleAs: "json-comment-optional",
                                content: _1110,
                                failOk: true
                            });
                            _110d.abort = function() {
                                _1113.cancel();
                            }
                            ;
                            _1113.addCallback(dojo.hitch(this, function(data) {
                                this._xhrFetchHandler(data, _110d, _110e, _110f);
                            }));
                            _1113.addErrback(function(error) {
                                _110f(error, _110d);
                            });
                            this.lastRequestHash = new Date().getTime() + "-" + String(Math.random()).substring(2);
                            this._lastServerQuery = dojo.mixin({}, _1110);
                        }
                    },
                    _filterResponse: function(data) {
                        return data;
                    },
                    _assertIsItem: function(item) {
                        if (!this.isItem(item)) {
                            throw new Error(this._className + ": Invalid item argument.");
                        }
                    },
                    _assertIsAttribute: function(_1114) {
                        if (typeof _1114 !== "string") {
                            throw new Error(this._className + ": Invalid attribute argument ('" + _1114 + "').");
                        }
                    },
                    fetchItemByIdentity: function(_1115) {
                        if (this._itemsByIdentity) {
                            var item = this._itemsByIdentity[_1115.identity];
                            if (!(item === undefined)) {
                                if (_1115.onItem) {
                                    var scope = _1115.scope ? _1115.scope : dojo.global;
                                    _1115.onItem.call(scope, {
                                        i: item,
                                        r: this
                                    });
                                }
                                return;
                            }
                        }
                        var _1116 = function(_1117, _1118) {
                            var scope = _1115.scope ? _1115.scope : dojo.global;
                            if (_1115.onError) {
                                _1115.onError.call(scope, _1117);
                            }
                        };
                        var _1119 = function(items, _111a) {
                            var scope = _1115.scope ? _1115.scope : dojo.global;
                            try {
                                var item = null;
                                if (items && items.length == 1) {
                                    item = items[0];
                                }
                                if (_1115.onItem) {
                                    _1115.onItem.call(scope, item);
                                }
                            } catch (error) {
                                if (_1115.onError) {
                                    _1115.onError.call(scope, error);
                                }
                            }
                        };
                        var _111b = {
                            serverQuery: {
                                id: _1115.identity
                            }
                        };
                        this._fetchItems(_111b, _1119, _1116);
                    },
                    getIdentity: function(item) {
                        var _111c = null;
                        if (this._identifier === Number) {
                            _111c = item.n;
                        } else {
                            _111c = item.i[this._identifier];
                        }
                        return _111c;
                    },
                    getIdentityAttributes: function(item) {
                        return [this._identifier];
                    }
                });
            });
        },
        "dojox/main": function() {
            define(["dojo/_base/kernel"], function(dojo) {
                return dojo.dojox;
            });
        },
        "ebg/counter": function() {
            define(["dojo", "dojo/_base/declare"], function(dojo, _111d) {
                return _111d("ebg.counter", null, {
                    constructor: function() {
                        this.span = null;
                        this.current_value = 0;
                        this.target_value = 0;
                        this.speed = 100;
                    },
                    create: function(_111e) {
                        if (typeof _111e == "string") {
                            _111e = $(_111e);
                        }
                        this.span = _111e;
                        this.span.innerHTML = this.current_value;
                    },
                    getValue: function() {
                        return this.target_value;
                    },
                    setValue: function(value) {
                        this.current_value = toint(value);
                        this.target_value = toint(value);
                        this.span.innerHTML = this.current_value;
                    },
                    toValue: function(value) {
                        this.target_value = toint(value);
                        if (this.current_value != this.target_value) {
                            dojo.addClass(this.span, "counter_in_progress");
                        }
                        setTimeout(dojo.hitch(this, this.makeCounterProgress), this.speed);
                    },
                    incValue: function(_111f) {
                        this.toValue(parseInt(this.target_value, 10) + parseInt(toint(_111f), 10));
                        return this.target_value;
                    },
                    disable: function() {
                        this.span.innerHTML = "-";
                    },
                    makeCounterProgress: function() {
                        if (this.current_value == this.target_value) {
                            setTimeout(dojo.hitch(this, this.finishCounterMove), 1000);
                            return;
                        }
                        var _1120 = Math.ceil(Math.abs(this.target_value - this.current_value) / 5);
                        if (this.current_value < this.target_value) {
                            this.current_value += _1120;
                        } else {
                            this.current_value -= _1120;
                        }
                        this.span.innerHTML = this.current_value;
                        setTimeout(dojo.hitch(this, this.makeCounterProgress), this.speed);
                    },
                    finishCounterMove: function() {
                        if (this.current_value == this.target_value) {
                            dojo.removeClass(this.span, "counter_in_progress");
                        }
                    }
                });
            });
        },
        "ebg/scrollmap": function() {
            define(["dojo", "dojo/_base/declare"], function(dojo, _1121) {
                return _1121("ebg.scrollmap", null, {
                    constructor: function() {
                        this.container_div = null;
                        this.scrollable_div = null;
                        this.surface_div = null;
                        this.onsurface_div = null;
                        this.isdragging = false;
                        this.dragging_offset_x = 0;
                        this.dragging_offset_y = 0;
                        this.dragging_handler = null;
                        this.dragging_handler_touch = null;
                        this.board_x = 0;
                        this.board_y = 0;
                        this.bEnableScrolling = true;
                    },
                    create: function(_1122, _1123, _1124, _1125) {
                        this.container_div = _1122;
                        this.scrollable_div = _1123;
                        this.surface_div = _1124;
                        this.onsurface_div = _1125;
                        dojo.connect(this.surface_div, "onmousedown", this, "onMouseDown");
                        dojo.connect(this.surface_div, "ontouchstart", this, "onMouseDown");
                        dojo.connect($("ebd-body"), "onmouseup", this, "onMouseUp");
                        dojo.connect($("ebd-body"), "ontouchend", this, "onMouseUp");
                        this.scrollto(0, 0);
                    },
                    onMouseDown: function(evt) {
                        if (!this.bEnableScrolling) {
                            return;
                        }
                        this.isdragging = true;
                        var _1126 = dojo.position(this.scrollable_div);
                        var _1127 = dojo.position(this.container_div);
                        this.dragging_offset_x = evt.pageX - (_1126.x - _1127.x);
                        this.dragging_offset_y = evt.pageY - (_1126.y - _1127.y);
                        this.dragging_handler = dojo.connect($("ebd-body"), "onmousemove", this, "onMouseMove");
                        this.dragging_handler_touch = dojo.connect($("ebd-body"), "ontouchmove", this, "onMouseMove");
                    },
                    onMouseUp: function(evt) {
                        if (this.isdragging === true) {
                            this.isdragging = false;
                            dojo.disconnect(this.dragging_handler);
                            dojo.disconnect(this.dragging_handler_touch);
                        }
                    },
                    onMouseMove: function(evt) {
                        if (this.isdragging === true) {
                            var width = dojo.style(this.container_div, "width");
                            var _1128 = dojo.style(this.container_div, "height");
                            var x = evt.pageX - this.dragging_offset_x;
                            dojo.style(this.scrollable_div, "left", x + "px");
                            dojo.style(this.onsurface_div, "left", x + "px");
                            var y = evt.pageY - this.dragging_offset_y;
                            dojo.style(this.scrollable_div, "top", y + "px");
                            dojo.style(this.onsurface_div, "top", y + "px");
                            this.board_x = x - width / 2;
                            this.board_y = y - _1128 / 2;
                            dojo.style(dojo.body(), "backgroundPosition", x + "px " + y + "px");
                            dojo.stopEvent(evt);
                        }
                    },
                    scroll: function(dx, dy, _1129, delay) {
                        if (typeof _1129 == "undefined") {
                            _1129 = 350;
                        }
                        if (typeof delay == "undefined") {
                            delay = 0;
                        }
                        this.scrollto(toint(this.board_x) + dx, toint(this.board_y) + dy, _1129, delay);
                    },
                    scrollto: function(x, y, _112a, delay) {
                        if (typeof _112a == "undefined") {
                            _112a = 350;
                        }
                        if (typeof delay == "undefined") {
                            delay = 0;
                        }
                        var width = dojo.style(this.container_div, "width");
                        var _112b = dojo.style(this.container_div, "height");
                        var _112c = x + width / 2;
                        var _112d = y + _112b / 2;
                        this.board_x = x;
                        this.board_y = y;
                        var anim = dojo.fx.combine([dojo.fx.slideTo({
                            node: this.scrollable_div,
                            top: _112d,
                            left: _112c,
                            unit: "px",
                            duration: _112a,
                            delay: delay
                        }), dojo.fx.slideTo({
                            node: this.onsurface_div,
                            top: _112d,
                            left: _112c,
                            unit: "px",
                            duration: _112a,
                            delay: delay
                        })]);
                        anim.play();
                    },
                    scrollToCenter: function(_112e) {
                        var max_x = 0;
                        var max_y = 0;
                        var min_x = 0;
                        var min_y = 0;
                        var _112f = "#" + this.scrollable_div.id + " > *";
                        if (typeof _112e != "undefined") {
                            _112f = _112e;
                        }
                        dojo.query(_112f).forEach(dojo.hitch(this, function(node) {
                            max_x = Math.max(max_x, dojo.style(node, "left") + dojo.style(node, "width"));
                            min_x = Math.min(min_x, dojo.style(node, "left"));
                            max_y = Math.max(max_y, dojo.style(node, "top") + dojo.style(node, "height"));
                            min_y = Math.min(min_y, dojo.style(node, "top"));
                        }));
                        this.scrollto(-(min_x + max_x) / 2, -(min_y + max_y) / 2);
                    },
                    getMapCenter: function(_1130) {
                        var max_x = 0;
                        var max_y = 0;
                        var min_x = 0;
                        var min_y = 0;
                        var _1131 = "#" + this.scrollable_div.id + " > *";
                        if (typeof _1130 != "undefined") {
                            _1131 = _1130;
                        }
                        dojo.query(_1131).forEach(dojo.hitch(this, function(node) {
                            max_x = Math.max(max_x, dojo.style(node, "left") + dojo.style(node, "width"));
                            min_x = Math.min(min_x, dojo.style(node, "left"));
                            max_y = Math.max(max_y, dojo.style(node, "top") + dojo.style(node, "height"));
                            min_y = Math.min(min_y, dojo.style(node, "top"));
                        }));
                        return {
                            x: (min_x + max_x) / 2,
                            y: (min_y + max_y) / 2
                        };
                    },
                    setupOnScreenArrows: function(_1132) {
                        this.scrollDelta = _1132;
                        if ($("movetop")) {
                            dojo.connect($("movetop"), "onclick", this, "onMoveTop");
                        }
                        if ($("moveleft")) {
                            dojo.connect($("moveleft"), "onclick", this, "onMoveLeft");
                        }
                        if ($("moveright")) {
                            dojo.connect($("moveright"), "onclick", this, "onMoveRight");
                        }
                        if ($("movedown")) {
                            dojo.connect($("movedown"), "onclick", this, "onMoveDown");
                        }
                        dojo.query("#" + this.container_div.id + " .movetop").connect("onclick", this, "onMoveTop").style("cursor", "pointer");
                        dojo.query("#" + this.container_div.id + " .movedown").connect("onclick", this, "onMouseDown").style("cursor", "pointer");
                        dojo.query("#" + this.container_div.id + " .moveleft").connect("onclick", this, "onMoveLeft").style("cursor", "pointer");
                        dojo.query("#" + this.container_div.id + " .moveright").connect("onclick", this, "onMoveRight").style("cursor", "pointer");
                    },
                    onMoveTop: function(evt) {
                        evt.preventDefault();
                        this.scroll(0, this.scrollDelta);
                    },
                    onMoveLeft: function(evt) {
                        evt.preventDefault();
                        this.scroll(this.scrollDelta, 0);
                    },
                    onMoveRight: function(evt) {
                        evt.preventDefault();
                        this.scroll(-this.scrollDelta, 0);
                    },
                    onMoveDown: function(evt) {
                        evt.preventDefault();
                        this.scroll(0, -this.scrollDelta);
                    },
                    isVisible: function(x, y) {
                        var width = dojo.style(this.container_div, "width");
                        var _1133 = dojo.style(this.container_div, "height");
                        if (x >= (-this.board_x - width / 2) && x <= (-this.board_x + width / 2)) {
                            if (y >= (-this.board_y - _1133 / 2) && y < (-this.board_y + _1133 / 2)) {
                                return true;
                            }
                        }
                        return false;
                    },
                    enableScrolling: function() {
                        if (!this.bEnableScrolling) {
                            this.bEnableScrolling = true;
                            dojo.query("#" + this.container_div.id + " .movetop").style("display", "block");
                            dojo.query("#" + this.container_div.id + " .moveleft").style("display", "block");
                            dojo.query("#" + this.container_div.id + " .moveright").style("display", "block");
                            dojo.query("#" + this.container_div.id + " .movedown").style("display", "block");
                        }
                    },
                    disableScrolling: function() {
                        if (this.bEnableScrolling) {
                            this.bEnableScrolling = false;
                            dojo.query("#" + this.container_div.id + " .movetop").style("display", "none");
                            dojo.query("#" + this.container_div.id + " .moveleft").style("display", "none");
                            dojo.query("#" + this.container_div.id + " .moveright").style("display", "none");
                            dojo.query("#" + this.container_div.id + " .movedown").style("display", "none");
                        }
                    },
                });
            });
        },
        "ebg/stock": function() {
            define(["dojo", "dojo/_base/declare"], function(dojo, _1134) {
                return _1134("ebg.stock", null, {
                    constructor: function() {
                        this.page = null;
                        this.container_div = null;
                        this.item_height = null;
                        this.item_width = null;
                        this.backgroundSize = null;
                        this.item_type = {};
                        this.items = [];
                        this.item_selected = {};
                        this.next_item_id = 1;
                        this.control_name = null;
                        this.selectable = 2;
                        this.selectionApparance = "border";
                        this.apparenceBorderWidth = "1px";
                        this.selectionClass = "stockitem_selected";
                        this.extraClasses = "";
                        this.centerItems = false;
                        this.item_margin = 5;
                        this.autowidth = false;
                        this.order_items = true;
                        this.horizontal_overlap = 0;
                        this.vertical_overlap = 0;
                        this.use_vertical_overlap_as_offset = true;
                        this.onItemCreate = null;
                        this.onItemDelete = null;
                        this.jstpl_stock_item = "<div id=\"${id}\" class=\"stockitem ${extra_classes}\" style=\"top:${top}px;left:${left}px;width:${width}px;height:${height}px;${position};background-image:url('${image}');${additional_style}\"></div>";
                        this.image_items_per_row = null;
                        this.image_in_vertical_row = false;
                        this.hResize = null;
                    },
                    create: function(page, _1135, _1136, _1137) {
                        if (typeof _1135 == "string") {
                            console.error("stock::create: second argument must be a HTML object and not a string");
                        }
                        if (typeof _1136 == "undefined") {
                            console.error("stock::create: item_width is undefined");
                        }
                        if (typeof _1137 == "undefined") {
                            console.error("stock::create: item_height is undefined");
                        }
                        this.page = page;
                        this.container_div = _1135;
                        this.item_width = _1136;
                        this.item_height = _1137;
                        this.control_name = _1135.id;
                        if (dojo.style(this.container_div, "position") != "absolute") {
                            dojo.style(this.container_div, "position", "relative");
                        }
                        this.hResize = dojo.connect(window, "onresize", this, dojo.hitch(this, function(evt) {
                            this.updateDisplay();
                        }));
                        page.registerEbgControl(this);
                    },
                    destroy: function() {
                        if (this.hResize !== null) {
                            dojo.disconnect(this.hResize);
                        }
                        this.items = {};
                        this.page = null;
                        this.container_div = null;
                        this.control_name = null;
                    },
                    count: function() {
                        return this.items.length;
                    },
                    addItemType: function(type, _1138, image, _1139) {
                        if (!_1139) {
                            _1139 = 0;
                        }
                        this.item_type[type] = {
                            weight: toint(_1138),
                            image: image,
                            image_position: _1139
                        };
                    },
                    addToStock: function(type, from) {
                        var id = this.next_item_id;
                        this.next_item_id++;
                        this.addToStockWithId(type, id, from);
                    },
                    addToStockWithId: function(type, id, from, _113a) {
                        var _113b = {
                            id: id,
                            type: type
                        };
                        var _113c = true;
                        if (typeof _113a != "undefined") {
                            if (_113a == ":first") {
                                _113c = false;
                            } else {
                                _113b.loc = _113a;
                            }
                        }
                        if ($(this.getItemDivId(id))) {
                            for (var i in this.items) {
                                var item = this.items[i];
                                if (item.id == id) {
                                    this._removeFromStockItemInPosition(i);
                                }
                            }
                            dojo.destroy(this.getItemDivId(id));
                        }
                        if (_113c) {
                            this.items.push(_113b);
                        } else {
                            this.items.unshift(_113b);
                        }
                        if (this.order_items) {
                            var _113d = function(a, b) {
                                if (a.type > b.type) {
                                    return 1;
                                } else {
                                    if (a.type < b.type) {
                                        return -1;
                                    } else {
                                        return 0;
                                    }
                                }
                            };
                            this.sortItems();
                        }
                        this.updateDisplay(from);
                    },
                    removeFromStock: function(type, to) {
                        for (var i in this.items) {
                            var item = this.items[i];
                            if (item.type == type) {
                                this._removeFromStockItemInPosition(i, to);
                                return true;
                            }
                        }
                        return false;
                    },
                    removeFromStockById: function(id, to, _113e) {
                        for (var i in this.items) {
                            var item = this.items[i];
                            if (item.id == id) {
                                this._removeFromStockItemInPosition(i, to, _113e);
                                return true;
                            }
                        }
                        return false;
                    },
                    _removeFromStockItemInPosition: function(i, to, _113f) {
                        var _1140 = function(node) {
                            dojo.destroy(node);
                        };
                        var item = this.items[i];
                        if (this.onItemDelete) {
                            this.onItemDelete(this.getItemDivId(item.id), item.type, item.id);
                        }
                        this.items.splice(i, 1);
                        var _1141 = this.getItemDivId(item.id);
                        this.unselectItem(item.id);
                        item_div = $(_1141);
                        if (typeof to != "undefined") {
                            var anim = dojo.fx.chain([this.page.slideToObject(item_div, to), dojo.fadeOut({
                                node: item_div,
                                onEnd: _1140
                            })]).play();
                        } else {
                            dojo.fadeOut({
                                node: item_div,
                                onEnd: _1140
                            }).play();
                        }
                        dojo.addClass(item_div, "to_be_destroyed");
                        if (_113f !== true) {
                            this.updateDisplay();
                        }
                    },
                    removeAll: function() {
                        for (var i in this.items) {
                            var item = this.items[i];
                            if (this.onItemDelete) {
                                this.onItemDelete(this.getItemDivId(item.id), item.type, item.id);
                            }
                        }
                        this.items = [];
                        this.item_selected = {};
                        this.next_item_id = 1;
                        dojo.empty(this.control_name);
                    },
                    removeAllTo: function(to) {
                        var ids = [];
                        for (var i in this.items) {
                            ids.push(this.items[i].id);
                        }
                        for (var i in ids) {
                            this.removeFromStockById(ids[i], to, true);
                        }
                        this.updateDisplay();
                    },
                    getPresentTypeList: function() {
                        var _1142 = {};
                        for (var i in this.items) {
                            var item = this.items[i];
                            _1142[item.type] = 1;
                        }
                        return _1142;
                    },
                    getItemDivId: function(id) {
                        return this.control_name + "_item_" + id;
                    },
                    updateDisplay: function(from) {
                        if (!$(this.control_name)) {
                            return;
                        }
                        var _1143 = dojo.marginBox(this.control_name);
                        var _1144 = this.item_width;
                        var _1145 = 0;
                        var _1146 = "auto";
                        if (this.horizontal_overlap != 0) {
                            _1144 = Math.round(this.item_width * this.horizontal_overlap / 100);
                            _1145 = this.item_width - _1144;
                            _1146 = 1;
                        }
                        var _1147 = 0;
                        if (this.vertical_overlap != 0) {
                            _1147 = Math.round(this.item_height * this.vertical_overlap / 100) * (this.use_vertical_overlap_as_offset ? 1 : -1);
                        }
                        var _1148 = _1143.w;
                        if (this.autowidth) {
                            var _1149 = dojo.marginBox($("page-content"));
                            _1148 = _1149.w;
                        }
                        var _114a = 0;
                        var _114b = 0;
                        var _114c = 0;
                        var _114d = Math.max(1, Math.floor((_1148 - _1145) / (_1144 + this.item_margin)));
                        var _114e = 0;
                        var _114f = 0;
                        var n = 0;
                        for (var i in this.items) {
                            var item = this.items[i];
                            var _1150 = this.getItemDivId(item.id);
                            if (_1146 != "auto") {
                                _1146++;
                            }
                            if (typeof item.loc == "undefined") {
                                var _1151 = Math.floor(n / _114d);
                                _114e = Math.max(_114e, _1151);
                                _114a = _114e * (this.item_height + _1147 + this.item_margin);
                                _114b = (n - _114e * _114d) * (_1144 + this.item_margin);
                                _114f = Math.max(_114f, _114b + _1144);
                                if (this.vertical_overlap != 0 && n % 2 == 0 && this.use_vertical_overlap_as_offset) {
                                    _114a += _1147;
                                }
                                if (this.centerItems) {
                                    var _1152 = (_1151 == Math.floor(this.count() / _114d) ? this.count() % _114d : _114d);
                                    _114b += (_1148 - _1152 * (_1144 + this.item_margin)) / 2;
                                }
                                n++;
                            } else {}
                            var _1153 = $(_1150);
                            if (_1153) {
                                if (typeof item.loc == "undefined") {
                                    dojo.fx.slideTo({
                                        node: _1153,
                                        top: _114a,
                                        left: _114b,
                                        duration: 1000,
                                        unit: "px"
                                    }).play();
                                } else {
                                    this.page.slideToObject(_1153, item.loc, 1000).play();
                                }
                                if (_1146 != "auto") {
                                    dojo.style(_1153, "zIndex", _1146);
                                }
                            } else {
                                var type = this.item_type[item.type];
                                if (!type) {
                                    console.error("Stock control: Unknow type: " + type);
                                }
                                if (typeof _1150 == "undefined") {
                                    console.error("Stock control: Undefined item id");
                                } else {
                                    if (typeof _1150 == "object") {
                                        console.error("Stock control: Item id with 'object' type");
                                        console.error(_1150);
                                    }
                                }
                                additional_style = "";
                                if (this.backgroundSize !== null) {
                                    additional_style += "background-size:" + this.backgroundSize;
                                }
                                var _1154 = dojo.trim(dojo.string.substitute(this.jstpl_stock_item, {
                                    id: _1150,
                                    width: this.item_width,
                                    height: this.item_height,
                                    top: _114a,
                                    left: _114b,
                                    image: type.image,
                                    position: (_1146 == "auto") ? "" : ("z-index:" + _1146),
                                    extra_classes: this.extraClasses,
                                    additional_style: additional_style
                                }));
                                dojo.place(_1154, this.control_name);
                                _1153 = $(_1150);
                                if (typeof item.loc != "undefined") {
                                    this.page.placeOnObject(_1153, item.loc);
                                }
                                if (this.selectable == 0) {
                                    dojo.addClass(_1153, "stockitem_unselectable");
                                }
                                dojo.connect(_1153, "onclick", this, "onClickOnItem");
                                if (toint(type.image_position) !== 0) {
                                    var _1155 = 0;
                                    var _1156 = 0;
                                    if (this.image_items_per_row) {
                                        var row = Math.floor(type.image_position / this.image_items_per_row);
                                        if (!this.image_in_vertical_row) {
                                            _1155 = (type.image_position - (row * this.image_items_per_row)) * 100;
                                            _1156 = row * 100;
                                        } else {
                                            _1156 = (type.image_position - (row * this.image_items_per_row)) * 100;
                                            _1155 = row * 100;
                                        }
                                        dojo.style(_1153, "backgroundPosition", "-" + _1155 + "% -" + _1156 + "%");
                                    } else {
                                        _1155 = type.image_position * 100;
                                        dojo.style(_1153, "backgroundPosition", "-" + _1155 + "% 0%");
                                    }
                                }
                                if (this.onItemCreate) {
                                    this.onItemCreate(_1153, item.type, _1150);
                                }
                                if (typeof from != "undefined") {
                                    this.page.placeOnObject(_1153, from);
                                    if (typeof item.loc == "undefined") {
                                        var anim = dojo.fx.slideTo({
                                            node: _1153,
                                            top: _114a,
                                            left: _114b,
                                            duration: 1000,
                                            unit: "px"
                                        });
                                        anim = this.page.transformSlideAnimTo3d(anim, _1153, 1000, null);
                                        anim.play();
                                    } else {
                                        this.page.slideToObject(_1153, item.loc, 1000).play();
                                    }
                                } else {
                                    dojo.style(_1153, "opacity", 0);
                                    dojo.fadeIn({
                                        node: _1153
                                    }).play();
                                }
                            }
                        }
                        var _1157 = (_114e + 1) * (this.item_height + _1147 + this.item_margin);
                        dojo.style(this.control_name, "height", _1157 + "px");
                        if (this.autowidth) {
                            if (_114f > 0) {
                                _114f += (this.item_width - _1144);
                            }
                            dojo.style(this.control_name, "width", _114f + "px");
                        }
                    },
                    resetItemsPosition: function() {
                        this.updateDisplay();
                    },
                    changeItemsWeight: function(_1158) {
                        for (var type in _1158) {
                            var _1159 = _1158[type];
                            if (this.item_type[type]) {
                                this.item_type[type].weight = _1159;
                            } else {
                                console.error("unknow item type" + type);
                            }
                        }
                        this.sortItems();
                        this.updateDisplay();
                    },
                    sortItems: function() {
                        var _115a = dojo.hitch(this, function(a, b) {
                            if (this.item_type[a.type].weight > this.item_type[b.type].weight) {
                                return 1;
                            } else {
                                if (this.item_type[a.type].weight < this.item_type[b.type].weight) {
                                    return -1;
                                } else {
                                    return 0;
                                }
                            }
                        });
                        this.items.sort(_115a);
                    },
                    setSelectionMode: function(mode) {
                        if (mode != this.selectable) {
                            this.unselectAll();
                            this.selectable = mode;
                            if (mode == 0) {
                                dojo.query("#" + this.control_name + " .stockitem").addClass("stockitem_unselectable");
                            } else {
                                dojo.query("#" + this.control_name + " .stockitem_unselectable").removeClass("stockitem_unselectable");
                            }
                        }
                    },
                    setSelectionAppearance: function(mode) {
                        this.unselectAll();
                        this.selectionApparance = mode;
                    },
                    isSelected: function(id) {
                        if (this.item_selected[id]) {
                            if (this.item_selected[id] == 1) {
                                return true;
                            }
                        }
                        return false;
                    },
                    selectItem: function(id) {
                        var _115b = $(this.getItemDivId(id));
                        if (this.selectionApparance == "border") {
                            dojo.style(_115b, "borderWidth", this.apparenceBorderWidth);
                        } else {
                            if (this.selectionApparance == "disappear") {
                                dojo.fadeOut({
                                    node: _115b
                                }).play();
                            } else {
                                if (this.selectionApparance == "class") {
                                    dojo.addClass(_115b, this.selectionClass);
                                }
                            }
                        }
                        this.item_selected[id] = 1;
                    },
                    unselectItem: function(id) {
                        var _115c = $(this.getItemDivId(id));
                        if (this.selectionApparance == "border") {
                            dojo.style(_115c, "borderWidth", "0px");
                        } else {
                            if (this.selectionApparance == "disappear") {
                                dojo.fadeIn({
                                    node: _115c
                                }).play();
                            } else {
                                if (this.selectionApparance == "class") {
                                    dojo.removeClass(_115c, this.selectionClass);
                                }
                            }
                        }
                        this.item_selected[id] = 0;
                    },
                    selectAll: function() {
                        var _115d = false;
                        for (var i in this.items) {
                            if (!this.isSelected(this.items[i].id)) {
                                this.selectItem(this.items[i].id);
                                _115d = true;
                            }
                        }
                        if (_115d) {
                            this.onChangeSelection(this.control_name);
                        }
                    },
                    unselectAll: function() {
                        var _115e = false;
                        for (var i in this.items) {
                            if (this.isSelected(this.items[i].id)) {
                                this.unselectItem(this.items[i].id);
                                _115e = true;
                            }
                        }
                        if (_115e) {
                            this.onChangeSelection(this.control_name);
                        }
                    },
                    onClickOnItem: function(evt) {
                        evt.stopPropagation();
                        if (this.selectable !== 0) {
                            var _115f = (this.control_name + "_item_").length;
                            var _1160 = evt.currentTarget.id.substr(_115f);
                            if (this.isSelected(_1160)) {
                                this.unselectItem(_1160);
                            } else {
                                if (this.selectable === 1) {
                                    this.unselectAll();
                                }
                                this.selectItem(_1160);
                            }
                            this.onChangeSelection(this.control_name, _1160);
                        }
                    },
                    onChangeSelection: function(_1161, _1162) {},
                    getSelectedItems: function() {
                        var _1163 = [];
                        for (var i in this.items) {
                            var item = this.items[i];
                            if (this.isSelected(item.id)) {
                                _1163.push(item);
                            }
                        }
                        return _1163;
                    },
                    getUnselectedItems: function() {
                        var _1164 = [];
                        for (var i in this.items) {
                            var item = this.items[i];
                            if (!this.isSelected(item.id)) {
                                _1164.push(item);
                            }
                        }
                        return _1164;
                    },
                    getItemNumber: function() {
                        return this.items.length;
                    },
                    getAllItems: function() {
                        var _1165 = [];
                        for (var i in this.items) {
                            _1165.push(this.items[i]);
                        }
                        return _1165;
                    },
                    getItemsByType: function(type) {
                        var _1166 = [];
                        for (var i in this.items) {
                            if (this.items[i].type === type) {
                                _1166.push(this.items[i]);
                            }
                        }
                        return _1166;
                    },
                    getFirstItemOfType: function(type) {
                        for (var i in this.items) {
                            if (this.items[i].type === type) {
                                return this.items[i];
                            }
                        }
                        return null;
                    },
                    getItemsByWeight: function(_1167) {
                        var _1168 = [];
                        for (var i in this.items) {
                            if (this.item_type[this.items[i].type].weight === _1167) {
                                _1168.push(this.items[i]);
                            }
                        }
                        return _1168;
                    },
                    getFirstItemWithWeight: function(_1169) {
                        for (var i in this.items) {
                            if (this.item_type[this.items[i].type].weight === _1169) {
                                return this.items[i];
                            }
                        }
                        return null;
                    },
                    getItemById: function(_116a) {
                        for (var i in this.items) {
                            if (this.items[i].id == _116a) {
                                return this.items[i];
                            }
                        }
                        return null;
                    },
                    getItemTypeById: function(_116b) {
                        for (var i in this.items) {
                            if (this.items[i].id == _116b) {
                                return this.items[i].type;
                            }
                        }
                        return null;
                    },
                    getItemWeightById: function(_116c) {
                        for (var i in this.items) {
                            if (this.items[i].id == _116c) {
                                return this.item_type[this.items[i].type].weight;
                            }
                        }
                        return null;
                    },
                    selectItemsByType: function(type) {
                        for (var i in this.items) {
                            if (this.items[i].type == type && !this.isSelected(this.items[i].id)) {
                                this.selectItem(this.items[i].id);
                            }
                        }
                    },
                    unselectItemsByType: function(type) {
                        for (var i in this.items) {
                            if (this.items[i].type == type && this.isSelected(this.items[i].id)) {
                                this.unselectItem(this.items[i].id);
                            }
                        }
                    },
                    setOverlap: function(_116d, _116e) {
                        this.horizontal_overlap = _116d;
                        if (typeof _116e == "undefined") {
                            this.vertical_overlap = 0;
                        } else {
                            this.vertical_overlap = _116e;
                        }
                        this.updateDisplay();
                    },
                    resizeItems: function(width, _116f, _1170, _1171) {
                        this.item_height = _116f;
                        this.item_width = width;
                        dojo.query("#" + this.control_name + " .stockitem").style("width", width + "px");
                        dojo.query("#" + this.control_name + " .stockitem").style("height", _116f + "px");
                        dojo.query("#" + this.control_name + " .stockitem").style("backgroundSize", _1170 + "px " + _1171 + "px");
                        this.backgroundSize = _1170 + "px " + _1171 + "px";
                        this.updateDisplay();
                    },
                });
            });
        },
        "ebg/dices": function() {
            define(["dojo", "dojo/_base/declare"], function(dojo, _1172) {
                return _1172("ebg.dices", null, {
                    constructor: function() {
                        this.div_id = null;
                        this.div = null;
                        this.dice_nbr = 2;
                        this.dice_type = 6;
                    },
                    create: function(_1173, _1174, _1175) {
                        this.div_id = _1173;
                        this.div = $(_1173);
                        if (this.div === null) {
                            console.error("dices::create: " + this.div_id + " associated div is null");
                        }
                        this.dice_nbr = _1174;
                        this.dice_type = _1175;
                        var _1176 = "dice" + this.dice_nbr + "d" + this.dice_type;
                        dojo.addClass(this.div, _1176);
                        for (var i = 0; i < this.dice_nbr; i++) {
                            dojo.place("<div class='dice_inner_wrap'><div id='" + this.div_id + "_" + i + "' class='" + _1176 + "_inner'></div></div>", this.div);
                        }
                    },
                    setValue: function(_1177) {
                        var _1178 = dojo.position(this.div).h;
                        for (var i in _1177) {
                            var _1179 = _1177[i];
                            var _117a = (_1179 * this.dice_nbr + toint(i) - (this.dice_nbr - 1)) * _1178;
                            dojo.style($(this.div_id + "_" + i), "backgroundPosition", "0px -" + _117a + "px");
                        }
                    }
                });
            });
        },
        "ebg/premiumpanel": function() {
            define(["dojo", "dojo/_base/declare", "dojox/fx"], function(dojo, _117b) {
                return _117b("ebg.premiumpanel", null, {
                    constructor: function() {
                        this.page = null;
                        this.currentpanel = null;
                    },
                    create: function(page) {
                        this.page = page;
                        dojo.query(".premiummenuitem").connect("onclick", this, "onMenuItemClick");
                        this.switchToPanel(0);
                    },
                    panel_id_to_name: function(_117c) {
                        if (toint(_117c) === 0) {
                            return "premiumtime";
                        } else {
                            if (toint(_117c) === -1) {
                                return "premiumconfig";
                            } else {
                                return "premiumplayer_" + _117c;
                            }
                        }
                    },
                    switchToPanel: function(_117d) {
                        var _117e;
                        if (this.currentpanel !== null) {
                            _117e = this.panel_id_to_name(this.currentpanel);
                            dojo.style(_117e + "_title", "display", "none");
                        }
                        this.currentpanel = _117d;
                        _117e = this.panel_id_to_name(this.currentpanel);
                        dojo.style(_117e + "_title", "display", "inline-block");
                        dojo.query(".premiuminfopanel").style("display", "none");
                        if (toint(_117d) === 0) {
                            dojo.style("premiumtimepanel", "display", "block");
                        } else {
                            if (toint(_117d) === -1) {
                                dojo.style("premiumconfigpanel", "display", "block");
                            } else {
                                dojo.style("premiumplayerpanel", "display", "block");
                                if (!this.page.gamedatas.players[_117d]) {
                                    console.error("Invalid panel id: " + _117d);
                                    return;
                                } else {
                                    $("pr_seeplayerstat").href = "/playerstat?id=" + _117d + "&gamename=" + this.page.game_name;
                                }
                            }
                        }
                    },
                    onMenuItemClick: function(evt) {
                        evt.preventDefault();
                        if (evt.currentTarget.id == "premiumtime") {
                            this.switchToPanel(0);
                        } else {
                            if (evt.currentTarget.id == "premiumconfig") {
                                this.switchToPanel(-1);
                            } else {
                                var _117f = evt.currentTarget.id.substr(14);
                                this.switchToPanel(_117f);
                            }
                        }
                    },
                    seePlayerStats: function(evt) {
                        evt.preventDefault();
                        var _1180 = this.currentpanel;
                        var _1181 = this.page.game_name;
                    }
                });
            });
        },
        "dojox/fx": function() {
            define(["./fx/_base"], function(_1182) {
                return _1182;
            });
        },
        "dojox/fx/_base": function() {
            define(["dojo/_base/array", "dojo/_base/lang", "dojo/_base/fx", "dojo/fx", "dojo/dom", "dojo/dom-style", "dojo/dom-geometry", "dojo/_base/connect", "dojo/_base/html"], function(_1183, lang, _1184, _1185, dom, _1186, _1187, _1188, _1189) {
                var _118a = lang.getObject("dojox.fx", true);
                lang.mixin(_118a, {
                    anim: _1184.anim,
                    animateProperty: _1184.animateProperty,
                    fadeTo: _1184._fade,
                    fadeIn: _1184.fadeIn,
                    fadeOut: _1184.fadeOut,
                    combine: _1185.combine,
                    chain: _1185.chain,
                    slideTo: _1185.slideTo,
                    wipeIn: _1185.wipeIn,
                    wipeOut: _1185.wipeOut
                });
                _118a.sizeTo = function(args) {
                    var node = args.node = dom.byId(args.node)
                      , abs = "absolute";
                    var _118b = args.method || "chain";
                    if (!args.duration) {
                        args.duration = 500;
                    }
                    if (_118b == "chain") {
                        args.duration = Math.floor(args.duration / 2);
                    }
                    var top, _118c, left, _118d, width, _118e = null;
                    var init = (function(n) {
                        return function() {
                            var cs = _1186.getComputedStyle(n)
                              , pos = cs.position
                              , w = cs.width
                              , h = cs.height;
                            top = (pos == abs ? n.offsetTop : parseInt(cs.top) || 0);
                            left = (pos == abs ? n.offsetLeft : parseInt(cs.left) || 0);
                            width = (w == "auto" ? 0 : parseInt(w));
                            _118e = (h == "auto" ? 0 : parseInt(h));
                            _118d = left - Math.floor((args.width - width) / 2);
                            _118c = top - Math.floor((args.height - _118e) / 2);
                            if (pos != abs && pos != "relative") {
                                var ret = _1186.coords(n, true);
                                top = ret.y;
                                left = ret.x;
                                n.style.position = abs;
                                n.style.top = top + "px";
                                n.style.left = left + "px";
                            }
                        }
                        ;
                    }
                    )(node);
                    var anim1 = _1184.animateProperty(lang.mixin({
                        properties: {
                            height: function() {
                                init();
                                return {
                                    end: args.height || 0,
                                    start: _118e
                                };
                            },
                            top: function() {
                                return {
                                    start: top,
                                    end: _118c
                                };
                            }
                        }
                    }, args));
                    var anim2 = _1184.animateProperty(lang.mixin({
                        properties: {
                            width: function() {
                                return {
                                    start: width,
                                    end: args.width || 0
                                };
                            },
                            left: function() {
                                return {
                                    start: left,
                                    end: _118d
                                };
                            }
                        }
                    }, args));
                    var anim = _1185[(args.method == "combine" ? "combine" : "chain")]([anim1, anim2]);
                    return anim;
                }
                ;
                _118a.slideBy = function(args) {
                    var node = args.node = dom.byId(args.node), top, left;
                    var init = (function(n) {
                        return function() {
                            var cs = _1186.getComputedStyle(n);
                            var pos = cs.position;
                            top = (pos == "absolute" ? n.offsetTop : parseInt(cs.top) || 0);
                            left = (pos == "absolute" ? n.offsetLeft : parseInt(cs.left) || 0);
                            if (pos != "absolute" && pos != "relative") {
                                var ret = _1187.coords(n, true);
                                top = ret.y;
                                left = ret.x;
                                n.style.position = "absolute";
                                n.style.top = top + "px";
                                n.style.left = left + "px";
                            }
                        }
                        ;
                    }
                    )(node);
                    init();
                    var _118f = _1184.animateProperty(lang.mixin({
                        properties: {
                            top: top + (args.top || 0),
                            left: left + (args.left || 0)
                        }
                    }, args));
                    _1188.connect(_118f, "beforeBegin", _118f, init);
                    return _118f;
                }
                ;
                _118a.crossFade = function(args) {
                    var node1 = args.nodes[0] = dom.byId(args.nodes[0])
                      , op1 = _1189.style(node1, "opacity")
                      , node2 = args.nodes[1] = dom.byId(args.nodes[1])
                      , op2 = _1189.style(node2, "opacity");
                    var _1190 = _1185.combine([_1184[(op1 == 0 ? "fadeIn" : "fadeOut")](lang.mixin({
                        node: node1
                    }, args)), _1184[(op1 == 0 ? "fadeOut" : "fadeIn")](lang.mixin({
                        node: node2
                    }, args))]);
                    return _1190;
                }
                ;
                _118a.highlight = function(args) {
                    var node = args.node = dom.byId(args.node);
                    args.duration = args.duration || 400;
                    var _1191 = args.color || "#ffff99"
                      , _1192 = _1189.style(node, "backgroundColor");
                    if (_1192 == "rgba(0, 0, 0, 0)") {
                        _1192 = "transparent";
                    }
                    var anim = _1184.animateProperty(lang.mixin({
                        properties: {
                            backgroundColor: {
                                start: _1191,
                                end: _1192
                            }
                        }
                    }, args));
                    if (_1192 == "transparent") {
                        _1188.connect(anim, "onEnd", anim, function() {
                            node.style.backgroundColor = _1192;
                        });
                    }
                    return anim;
                }
                ;
                _118a.wipeTo = function(args) {
                    args.node = dom.byId(args.node);
                    var node = args.node
                      , s = node.style;
                    var dir = (args.width ? "width" : "height")
                      , _1193 = args[dir]
                      , props = {};
                    props[dir] = {
                        start: function() {
                            s.overflow = "hidden";
                            if (s.visibility == "hidden" || s.display == "none") {
                                s[dir] = "1px";
                                s.display = "";
                                s.visibility = "";
                                return 1;
                            } else {
                                var now = _1189.style(node, dir);
                                return Math.max(now, 1);
                            }
                        },
                        end: _1193
                    };
                    var anim = _1184.animateProperty(lang.mixin({
                        properties: props
                    }, args));
                    return anim;
                }
                ;
                return _118a;
            });
        },
        "ebg/wrapper": function() {
            define(["dojo", "dojo/_base/declare"], function(dojo, _1194) {
                return _1194("ebg.wrapper", null, {
                    constructor: function() {
                        this.page = null;
                        this.container_div = null;
                        this.container_id = null;
                        this.container_inner_div = null;
                        this.container_inner_id = null;
                    },
                    create: function(page, _1195, _1196) {
                        this.page = page;
                        this.container_div = _1195;
                        this.container_id = _1195.id;
                        this.container_inner_div = _1196;
                        this.container_inner_id = _1196.id;
                        if (dojo.style(this.container_div, "position") != "absolute") {
                            dojo.style(this.container_div, "position", "relative");
                        }
                        dojo.style(this.container_inner_div, "position", "absolute");
                        dojo.style(this.container_inner_div, "top", "0px");
                        dojo.style(this.container_inner_div, "left", "0px");
                    },
                    rewrap: function() {
                        var min_x = null;
                        var min_y = null;
                        var max_x = null;
                        var max_y = null;
                        var _1197 = dojo.query("#" + this.container_inner_id + " >");
                        _1197.forEach(function(node) {
                            var x = dojo.style(node, "left");
                            var y = dojo.style(node, "top");
                            if (min_x === null) {
                                min_x = x;
                                min_y = y;
                                max_x = x + 75;
                                max_y = y + 75;
                            } else {
                                min_x = Math.min(min_x, x);
                                min_y = Math.min(min_y, y);
                                max_x = Math.max(max_x, x + 75);
                                max_y = Math.max(max_y, y + 75);
                            }
                        });
                        dojo.style(this.container_div, "width", (max_x - min_x) + "px");
                        dojo.style(this.container_div, "height", (max_y - min_y) + "px");
                        var _1198 = -min_x;
                        var _1199 = -min_y;
                        dojo.style(this.container_inner_div, "top", _1199 + "px");
                        dojo.style(this.container_inner_div, "left", _1198 + "px");
                    }
                });
            });
        },
        "ebg/zone": function() {
            define(["dojo", "dojo/_base/declare"], function(dojo, _119a) {
                return _119a("ebg.zone", null, {
                    constructor: function() {
                        this.page = null;
                        this.container_div = null;
                        this.item_height = null;
                        this.item_width = null;
                        this.items = [];
                        this.control_name = null;
                        this.item_margin = 5;
                        this.autowidth = false;
                        this.autoheight = true;
                        this.item_pattern = "grid";
                    },
                    create: function(page, _119b, _119c, _119d) {
                        if (_119b === null) {
                            console.error("Null container in zone::create");
                        }
                        this.page = page;
                        this.container_div = _119b;
                        this.item_width = _119c;
                        this.item_height = _119d;
                        this.control_name = _119b.id;
                        if (dojo.style(this.container_div, "position") != "absolute") {
                            dojo.style(this.container_div, "position", "relative");
                        }
                    },
                    setFluidWidth: function() {
                        dojo.connect(window, "onresize", this, "updateDisplay");
                    },
                    setPattern: function(_119e) {
                        switch (_119e) {
                        case "grid":
                        case "diagonal":
                            this.autoheight = true;
                            this.item_pattern = _119e;
                            break;
                        case "verticalfit":
                        case "horizontalfit":
                        case "ellipticalfit":
                            this.autoheight = false;
                            this.item_pattern = _119e;
                            break;
                        default:
                            console.error("zone::setPattern: unknow pattern: " + _119e);
                            break;
                        }
                    },
                    isInZone: function(id) {
                        for (var i in this.items) {
                            var item = this.items[i];
                            if (item.id == id) {
                                return true;
                            }
                        }
                        return false;
                    },
                    placeInZone: function(id, _119f) {
                        if (typeof _119f == "undefined") {
                            _119f = 0;
                        }
                        if (this.isInZone(id)) {
                            return;
                        }
                        this.items.push({
                            id: id,
                            weight: _119f
                        });
                        this.page.attachToNewParent($(id), this.container_div);
                        var _11a0 = function(a, b) {
                            if (a.weight > b.weight) {
                                return 1;
                            } else {
                                if (a.weight < b.weight) {
                                    return -1;
                                } else {
                                    return 0;
                                }
                            }
                        };
                        this.items.sort(_11a0);
                        this.updateDisplay();
                    },
                    removeFromZone: function(id, _11a1, to) {
                        var _11a2 = function(node) {
                            dojo.destroy(node);
                        };
                        for (var i in this.items) {
                            var item = this.items[i];
                            if (item.id == id) {
                                var anim = null;
                                if (to) {
                                    anim = this.page.slideToObject($(item.id), to).play();
                                    if (_11a1 === true) {
                                        dojo.connect(anim, "onEnd", _11a2);
                                    }
                                    anim.play();
                                } else {
                                    if (_11a1 === true) {
                                        duration = 500;
                                        if (this.page.instantaneousMode) {
                                            duration = 1;
                                        }
                                        anim = dojo.fadeOut({
                                            node: $(item.id),
                                            duration: duration,
                                            onEnd: _11a2
                                        });
                                        anim.play();
                                    }
                                }
                                this.items.splice(i, 1);
                                this.updateDisplay();
                                return;
                            }
                        }
                    },
                    removeAll: function() {
                        var _11a3 = function(node) {
                            dojo.destroy(node);
                        };
                        for (var i in this.items) {
                            var item = this.items[i];
                            anim = dojo.fadeOut({
                                node: $(item.id),
                                onEnd: _11a3
                            });
                            anim.play();
                        }
                        this.items = [];
                        this.updateDisplay();
                    },
                    updateDisplay: function() {
                        var _11a4 = dojo.position(this.container_div);
                        var _11a5 = _11a4.w;
                        if (this.autowidth) {
                            var _11a6 = dojo.position($("page-content"));
                            _11a5 = _11a6.w;
                        }
                        var _11a7 = 0;
                        var _11a8 = 0;
                        var _11a9 = 0;
                        for (var i in this.items) {
                            var item = this.items[i];
                            var _11aa = item.id;
                            var _11ab = $(_11aa);
                            if (_11ab) {
                                var _11ac = this.itemIdToCoords(_11a9, _11a5, _11a4.h, this.items.length);
                                _11a9++;
                                _11a7 = Math.max(_11a7, _11ac.x + _11ac.w);
                                _11a8 = Math.max(_11a8, _11ac.y + _11ac.h);
                                var anim = dojo.fx.slideTo({
                                    node: _11ab,
                                    top: _11ac.y,
                                    left: _11ac.x,
                                    duration: 1000,
                                    unit: "px"
                                });
                                anim = this.page.transformSlideAnimTo3d(anim, _11ab, 1000, null);
                                anim.play();
                            }
                        }
                        if (this.autoheight) {
                            dojo.style(this.container_div, "height", _11a8 + "px");
                        }
                        if (this.autowidth) {
                            dojo.style(this.container_div, "width", _11a7 + "px");
                        }
                    },
                    itemIdToCoords: function(i, _11ad, _11ae, _11af) {
                        switch (this.item_pattern) {
                        case "grid":
                            return this.itemIdToCoordsGrid(i, _11ad, _11ae, _11af);
                        case "diagonal":
                            return this.itemIdToCoordsDiagonal(i, _11ad, _11ae, _11af);
                        case "verticalfit":
                            return this.itemIdToCoordsVerticalFit(i, _11ad, _11ae, _11af);
                        case "horizontalfit":
                            return this.itemIdToCoordsHorizontalFit(i, _11ad, _11ae, _11af);
                        case "ellipticalfit":
                            return this.itemIdToCoordsEllipticalFit(i, _11ad, _11ae, _11af);
                        }
                    },
                    itemIdToCoordsGrid: function(i, _11b0) {
                        var _11b1 = Math.max(1, Math.floor(_11b0 / (this.item_width + this.item_margin)));
                        var _11b2 = Math.floor(i / _11b1);
                        var res = {};
                        res.y = _11b2 * (this.item_height + this.item_margin);
                        res.x = (i - _11b2 * _11b1) * (this.item_width + this.item_margin);
                        res.w = this.item_width;
                        res.h = this.item_height;
                        return res;
                    },
                    itemIdToCoordsDiagonal: function(i, _11b3) {
                        var res = {};
                        res.y = i * this.item_margin;
                        res.x = i * this.item_margin;
                        res.w = this.item_width;
                        res.h = this.item_height;
                        return res;
                    },
                    itemIdToCoordsVerticalFit: function(i, _11b4, _11b5, _11b6) {
                        var res = {};
                        res.w = this.item_width;
                        res.h = this.item_height;
                        var _11b7 = _11b6 * this.item_height;
                        if (_11b7 <= _11b5) {
                            var _11b8 = this.item_height;
                            var _11b9 = (_11b5 - _11b7) / 2;
                        } else {
                            var _11b8 = (_11b5 - this.item_height) / (_11b6 - 1);
                            var _11b9 = 0;
                        }
                        res.y = Math.round(i * _11b8 + _11b9);
                        res.x = 0;
                        return res;
                    },
                    itemIdToCoordsHorizontalFit: function(i, _11ba, _11bb, _11bc) {
                        var res = {};
                        res.w = this.item_width;
                        res.h = this.item_height;
                        var _11bd = _11bc * this.item_width;
                        if (_11bd <= _11ba) {
                            var _11be = this.item_width;
                            var _11bf = (_11ba - _11bd) / 2;
                        } else {
                            var _11be = (_11ba - this.item_width) / (_11bc - 1);
                            var _11bf = 0;
                        }
                        res.x = Math.round(i * _11be + _11bf);
                        res.y = 0;
                        return res;
                    },
                    itemIdToCoordsEllipticalFit: function(i, _11c0, _11c1, _11c2) {
                        var _11c3 = _11c0 / 2;
                        var _11c4 = _11c1 / 2;
                        var pi = 3.1415927;
                        var res = {};
                        res.w = this.item_width;
                        res.h = this.item_height;
                        var j = _11c2 - (i + 1);
                        if (j <= 4) {
                            var _11c5 = res.w;
                            var _11c6 = res.h * _11c4 / _11c3;
                            var angle = pi + j * (2 * pi / 5);
                            res.x = _11c3 + _11c5 * Math.cos(angle) - res.w / 2;
                            res.y = _11c4 + _11c6 * Math.sin(angle) - res.h / 2;
                        } else {
                            if (j > 4) {
                                var _11c5 = res.w * 2;
                                var _11c6 = res.h * 2 * _11c4 / _11c3;
                                var angle = pi - pi / 2 + (j - 4) * (2 * pi / Math.max(10, _11c2 - 5));
                                res.x = _11c3 + _11c5 * Math.cos(angle) - res.w / 2;
                                res.y = _11c4 + _11c6 * Math.sin(angle) - res.h / 2;
                            }
                        }
                        return res;
                    },
                    getItemNumber: function() {
                        return this.items.length;
                    },
                    getAllItems: function() {
                        var _11c7 = [];
                        for (var i in this.items) {
                            _11c7.push(this.items[i].id);
                        }
                        return _11c7;
                    }
                });
            });
        },
        "dojo/selector/acme": function() {
            define(["../dom", "../sniff", "../_base/array", "../_base/lang", "../_base/window"], function(dom, has, array, lang, win) {
                var trim = lang.trim;
                var each = array.forEach;
                var _11c8 = function() {
                    return win.doc;
                };
                var _11c9 = (_11c8().compatMode) == "BackCompat";
                var _11ca = ">~+";
                var _11cb = false;
                var _11cc = function() {
                    return true;
                };
                var _11cd = function(query) {
                    if (_11ca.indexOf(query.slice(-1)) >= 0) {
                        query += " * ";
                    } else {
                        query += " ";
                    }
                    var ts = function(s, e) {
                        return trim(query.slice(s, e));
                    };
                    var _11ce = [];
                    var _11cf = -1, _11d0 = -1, _11d1 = -1, _11d2 = -1, _11d3 = -1, inId = -1, inTag = -1, _11d4, lc = "", cc = "", _11d5;
                    var x = 0
                      , ql = query.length
                      , _11d6 = null
                      , _11d7 = null;
                    var _11d8 = function() {
                        if (inTag >= 0) {
                            var tv = (inTag == x) ? null : ts(inTag, x);
                            _11d6[(_11ca.indexOf(tv) < 0) ? "tag" : "oper"] = tv;
                            inTag = -1;
                        }
                    };
                    var endId = function() {
                        if (inId >= 0) {
                            _11d6.id = ts(inId, x).replace(/\\/g, "");
                            inId = -1;
                        }
                    };
                    var _11d9 = function() {
                        if (_11d3 >= 0) {
                            _11d6.classes.push(ts(_11d3 + 1, x).replace(/\\/g, ""));
                            _11d3 = -1;
                        }
                    };
                    var _11da = function() {
                        endId();
                        _11d8();
                        _11d9();
                    };
                    var _11db = function() {
                        _11da();
                        if (_11d2 >= 0) {
                            _11d6.pseudos.push({
                                name: ts(_11d2 + 1, x)
                            });
                        }
                        _11d6.loops = (_11d6.pseudos.length || _11d6.attrs.length || _11d6.classes.length);
                        _11d6.oquery = _11d6.query = ts(_11d5, x);
                        _11d6.otag = _11d6.tag = (_11d6["oper"]) ? null : (_11d6.tag || "*");
                        if (_11d6.tag) {
                            _11d6.tag = _11d6.tag.toUpperCase();
                        }
                        if (_11ce.length && (_11ce[_11ce.length - 1].oper)) {
                            _11d6.infixOper = _11ce.pop();
                            _11d6.query = _11d6.infixOper.query + " " + _11d6.query;
                        }
                        _11ce.push(_11d6);
                        _11d6 = null;
                    };
                    for (; lc = cc,
                    cc = query.charAt(x),
                    x < ql; x++) {
                        if (lc == "\\") {
                            continue;
                        }
                        if (!_11d6) {
                            _11d5 = x;
                            _11d6 = {
                                query: null,
                                pseudos: [],
                                attrs: [],
                                classes: [],
                                tag: null,
                                oper: null,
                                id: null,
                                getTag: function() {
                                    return _11cb ? this.otag : this.tag;
                                }
                            };
                            inTag = x;
                        }
                        if (_11d4) {
                            if (cc == _11d4) {
                                _11d4 = null;
                            }
                            continue;
                        } else {
                            if (cc == "'" || cc == "\"") {
                                _11d4 = cc;
                                continue;
                            }
                        }
                        if (_11cf >= 0) {
                            if (cc == "]") {
                                if (!_11d7.attr) {
                                    _11d7.attr = ts(_11cf + 1, x);
                                } else {
                                    _11d7.matchFor = ts((_11d1 || _11cf + 1), x);
                                }
                                var cmf = _11d7.matchFor;
                                if (cmf) {
                                    if ((cmf.charAt(0) == "\"") || (cmf.charAt(0) == "'")) {
                                        _11d7.matchFor = cmf.slice(1, -1);
                                    }
                                }
                                if (_11d7.matchFor) {
                                    _11d7.matchFor = _11d7.matchFor.replace(/\\/g, "");
                                }
                                _11d6.attrs.push(_11d7);
                                _11d7 = null;
                                _11cf = _11d1 = -1;
                            } else {
                                if (cc == "=") {
                                    var _11dc = ("|~^$*".indexOf(lc) >= 0) ? lc : "";
                                    _11d7.type = _11dc + cc;
                                    _11d7.attr = ts(_11cf + 1, x - _11dc.length);
                                    _11d1 = x + 1;
                                }
                            }
                        } else {
                            if (_11d0 >= 0) {
                                if (cc == ")") {
                                    if (_11d2 >= 0) {
                                        _11d7.value = ts(_11d0 + 1, x);
                                    }
                                    _11d2 = _11d0 = -1;
                                }
                            } else {
                                if (cc == "#") {
                                    _11da();
                                    inId = x + 1;
                                } else {
                                    if (cc == ".") {
                                        _11da();
                                        _11d3 = x;
                                    } else {
                                        if (cc == ":") {
                                            _11da();
                                            _11d2 = x;
                                        } else {
                                            if (cc == "[") {
                                                _11da();
                                                _11cf = x;
                                                _11d7 = {};
                                            } else {
                                                if (cc == "(") {
                                                    if (_11d2 >= 0) {
                                                        _11d7 = {
                                                            name: ts(_11d2 + 1, x),
                                                            value: null
                                                        };
                                                        _11d6.pseudos.push(_11d7);
                                                    }
                                                    _11d0 = x;
                                                } else {
                                                    if ((cc == " ") && (lc != cc)) {
                                                        _11db();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    return _11ce;
                };
                var agree = function(first, _11dd) {
                    if (!first) {
                        return _11dd;
                    }
                    if (!_11dd) {
                        return first;
                    }
                    return function() {
                        return first.apply(window, arguments) && _11dd.apply(window, arguments);
                    }
                    ;
                };
                var _11de = function(i, arr) {
                    var r = arr || [];
                    if (i) {
                        r.push(i);
                    }
                    return r;
                };
                var _11df = function(n) {
                    return (1 == n.nodeType);
                };
                var blank = "";
                var _11e0 = function(elem, attr) {
                    if (!elem) {
                        return blank;
                    }
                    if (attr == "class") {
                        return elem.className || blank;
                    }
                    if (attr == "for") {
                        return elem.htmlFor || blank;
                    }
                    if (attr == "style") {
                        return elem.style.cssText || blank;
                    }
                    return (_11cb ? elem.getAttribute(attr) : elem.getAttribute(attr, 2)) || blank;
                };
                var attrs = {
                    "*=": function(attr, value) {
                        return function(elem) {
                            return (_11e0(elem, attr).indexOf(value) >= 0);
                        }
                        ;
                    },
                    "^=": function(attr, value) {
                        return function(elem) {
                            return (_11e0(elem, attr).indexOf(value) == 0);
                        }
                        ;
                    },
                    "$=": function(attr, value) {
                        return function(elem) {
                            var ea = " " + _11e0(elem, attr);
                            var _11e1 = ea.lastIndexOf(value);
                            return _11e1 > -1 && (_11e1 == (ea.length - value.length));
                        }
                        ;
                    },
                    "~=": function(attr, value) {
                        var tval = " " + value + " ";
                        return function(elem) {
                            var ea = " " + _11e0(elem, attr) + " ";
                            return (ea.indexOf(tval) >= 0);
                        }
                        ;
                    },
                    "|=": function(attr, value) {
                        var _11e2 = value + "-";
                        return function(elem) {
                            var ea = _11e0(elem, attr);
                            return ((ea == value) || (ea.indexOf(_11e2) == 0));
                        }
                        ;
                    },
                    "=": function(attr, value) {
                        return function(elem) {
                            return (_11e0(elem, attr) == value);
                        }
                        ;
                    }
                };
                var _11e3 = _11c8().documentElement;
                var _11e4 = !(_11e3.nextElementSibling || "nextElementSibling"in _11e3);
                var _11e5 = !_11e4 ? "nextElementSibling" : "nextSibling";
                var _11e6 = !_11e4 ? "previousElementSibling" : "previousSibling";
                var _11e7 = (_11e4 ? _11df : _11cc);
                var _11e8 = function(node) {
                    while (node = node[_11e6]) {
                        if (_11e7(node)) {
                            return false;
                        }
                    }
                    return true;
                };
                var _11e9 = function(node) {
                    while (node = node[_11e5]) {
                        if (_11e7(node)) {
                            return false;
                        }
                    }
                    return true;
                };
                var _11ea = function(node) {
                    var root = node.parentNode;
                    root = root.nodeType != 7 ? root : root.nextSibling;
                    var i = 0
                      , tret = root.children || root.childNodes
                      , ci = (node["_i"] || node.getAttribute("_i") || -1)
                      , cl = (root["_l"] || (typeof root.getAttribute !== "undefined" ? root.getAttribute("_l") : -1));
                    if (!tret) {
                        return -1;
                    }
                    var l = tret.length;
                    if (cl == l && ci >= 0 && cl >= 0) {
                        return ci;
                    }
                    if (has("ie") && typeof root.setAttribute !== "undefined") {
                        root.setAttribute("_l", l);
                    } else {
                        root["_l"] = l;
                    }
                    ci = -1;
                    for (var te = root["firstElementChild"] || root["firstChild"]; te; te = te[_11e5]) {
                        if (_11e7(te)) {
                            if (has("ie")) {
                                te.setAttribute("_i", ++i);
                            } else {
                                te["_i"] = ++i;
                            }
                            if (node === te) {
                                ci = i;
                            }
                        }
                    }
                    return ci;
                };
                var _11eb = function(elem) {
                    return !((_11ea(elem)) % 2);
                };
                var isOdd = function(elem) {
                    return ((_11ea(elem)) % 2);
                };
                var _11ec = {
                    "checked": function(name, _11ed) {
                        return function(elem) {
                            return !!("checked"in elem ? elem.checked : elem.selected);
                        }
                        ;
                    },
                    "disabled": function(name, _11ee) {
                        return function(elem) {
                            return elem.disabled;
                        }
                        ;
                    },
                    "enabled": function(name, _11ef) {
                        return function(elem) {
                            return !elem.disabled;
                        }
                        ;
                    },
                    "first-child": function() {
                        return _11e8;
                    },
                    "last-child": function() {
                        return _11e9;
                    },
                    "only-child": function(name, _11f0) {
                        return function(node) {
                            return _11e8(node) && _11e9(node);
                        }
                        ;
                    },
                    "empty": function(name, _11f1) {
                        return function(elem) {
                            var cn = elem.childNodes;
                            var cnl = elem.childNodes.length;
                            for (var x = cnl - 1; x >= 0; x--) {
                                var nt = cn[x].nodeType;
                                if ((nt === 1) || (nt == 3)) {
                                    return false;
                                }
                            }
                            return true;
                        }
                        ;
                    },
                    "contains": function(name, _11f2) {
                        var cz = _11f2.charAt(0);
                        if (cz == "\"" || cz == "'") {
                            _11f2 = _11f2.slice(1, -1);
                        }
                        return function(elem) {
                            return (elem.innerHTML.indexOf(_11f2) >= 0);
                        }
                        ;
                    },
                    "not": function(name, _11f3) {
                        var p = _11cd(_11f3)[0];
                        var _11f4 = {
                            el: 1
                        };
                        if (p.tag != "*") {
                            _11f4.tag = 1;
                        }
                        if (!p.classes.length) {
                            _11f4.classes = 1;
                        }
                        var ntf = _11f5(p, _11f4);
                        return function(elem) {
                            return (!ntf(elem));
                        }
                        ;
                    },
                    "nth-child": function(name, _11f6) {
                        var pi = parseInt;
                        if (_11f6 == "odd") {
                            return isOdd;
                        } else {
                            if (_11f6 == "even") {
                                return _11eb;
                            }
                        }
                        if (_11f6.indexOf("n") != -1) {
                            var _11f7 = _11f6.split("n", 2);
                            var pred = _11f7[0] ? ((_11f7[0] == "-") ? -1 : pi(_11f7[0])) : 1;
                            var idx = _11f7[1] ? pi(_11f7[1]) : 0;
                            var lb = 0
                              , ub = -1;
                            if (pred > 0) {
                                if (idx < 0) {
                                    idx = (idx % pred) && (pred + (idx % pred));
                                } else {
                                    if (idx > 0) {
                                        if (idx >= pred) {
                                            lb = idx - idx % pred;
                                        }
                                        idx = idx % pred;
                                    }
                                }
                            } else {
                                if (pred < 0) {
                                    pred *= -1;
                                    if (idx > 0) {
                                        ub = idx;
                                        idx = idx % pred;
                                    }
                                }
                            }
                            if (pred > 0) {
                                return function(elem) {
                                    var i = _11ea(elem);
                                    return (i >= lb) && (ub < 0 || i <= ub) && ((i % pred) == idx);
                                }
                                ;
                            } else {
                                _11f6 = idx;
                            }
                        }
                        var _11f8 = pi(_11f6);
                        return function(elem) {
                            return (_11ea(elem) == _11f8);
                        }
                        ;
                    }
                };
                var _11f9 = (has("ie") < 9 || has("ie") == 9 && has("quirks")) ? function(cond) {
                    var clc = cond.toLowerCase();
                    if (clc == "class") {
                        cond = "className";
                    }
                    return function(elem) {
                        return (_11cb ? elem.getAttribute(cond) : elem[cond] || elem[clc]);
                    }
                    ;
                }
                : function(cond) {
                    return function(elem) {
                        return (elem && elem.getAttribute && elem.hasAttribute(cond));
                    }
                    ;
                }
                ;
                var _11f5 = function(query, _11fa) {
                    if (!query) {
                        return _11cc;
                    }
                    _11fa = _11fa || {};
                    var ff = null;
                    if (!("el"in _11fa)) {
                        ff = agree(ff, _11df);
                    }
                    if (!("tag"in _11fa)) {
                        if (query.tag != "*") {
                            ff = agree(ff, function(elem) {
                                return (elem && ((_11cb ? elem.tagName : elem.tagName.toUpperCase()) == query.getTag()));
                            });
                        }
                    }
                    if (!("classes"in _11fa)) {
                        each(query.classes, function(cname, idx, arr) {
                            var re = new RegExp("(?:^|\\s)" + cname + "(?:\\s|$)");
                            ff = agree(ff, function(elem) {
                                return re.test(elem.className);
                            });
                            ff.count = idx;
                        });
                    }
                    if (!("pseudos"in _11fa)) {
                        each(query.pseudos, function(_11fb) {
                            var pn = _11fb.name;
                            if (_11ec[pn]) {
                                ff = agree(ff, _11ec[pn](pn, _11fb.value));
                            }
                        });
                    }
                    if (!("attrs"in _11fa)) {
                        each(query.attrs, function(attr) {
                            var _11fc;
                            var a = attr.attr;
                            if (attr.type && attrs[attr.type]) {
                                _11fc = attrs[attr.type](a, attr.matchFor);
                            } else {
                                if (a.length) {
                                    _11fc = _11f9(a);
                                }
                            }
                            if (_11fc) {
                                ff = agree(ff, _11fc);
                            }
                        });
                    }
                    if (!("id"in _11fa)) {
                        if (query.id) {
                            ff = agree(ff, function(elem) {
                                return (!!elem && (elem.id == query.id));
                            });
                        }
                    }
                    if (!ff) {
                        if (!("default"in _11fa)) {
                            ff = _11cc;
                        }
                    }
                    return ff;
                };
                var _11fd = function(_11fe) {
                    return function(node, ret, bag) {
                        while (node = node[_11e5]) {
                            if (_11e4 && (!_11df(node))) {
                                continue;
                            }
                            if ((!bag || _11ff(node, bag)) && _11fe(node)) {
                                ret.push(node);
                            }
                            break;
                        }
                        return ret;
                    }
                    ;
                };
                var _1200 = function(_1201) {
                    return function(root, ret, bag) {
                        var te = root[_11e5];
                        while (te) {
                            if (_11e7(te)) {
                                if (bag && !_11ff(te, bag)) {
                                    break;
                                }
                                if (_1201(te)) {
                                    ret.push(te);
                                }
                            }
                            te = te[_11e5];
                        }
                        return ret;
                    }
                    ;
                };
                var _1202 = function(_1203, _1204) {
                    var _1205 = function(_1206) {
                        var _1207 = [];
                        try {
                            _1207 = Array.prototype.slice.call(_1206);
                        } catch (e) {
                            for (var i = 0, len = _1206.length; i < len; i++) {
                                _1207.push(_1206[i]);
                            }
                        }
                        return _1207;
                    };
                    _1203 = _1203 || _11cc;
                    return function(root, ret, bag) {
                        var te, x = 0, tret = [];
                        tret = _1205(root.children || root.childNodes);
                        if (_1204) {
                            array.forEach(tret, function(node) {
                                if (node.nodeType === 1) {
                                    tret = tret.concat(_1205(node.getElementsByTagName("*")));
                                }
                            });
                        }
                        while (te = tret[x++]) {
                            if (_11e7(te) && (!bag || _11ff(te, bag)) && (_1203(te, x))) {
                                ret.push(te);
                            }
                        }
                        return ret;
                    }
                    ;
                };
                var _1208 = function(node, root) {
                    var pn = node.parentNode;
                    while (pn) {
                        if (pn == root) {
                            break;
                        }
                        pn = pn.parentNode;
                    }
                    return !!pn;
                };
                var _1209 = {};
                var _120a = function(query) {
                    var _120b = _1209[query.query];
                    if (_120b) {
                        return _120b;
                    }
                    var io = query.infixOper;
                    var oper = (io ? io.oper : "");
                    var _120c = _11f5(query, {
                        el: 1
                    });
                    var qt = query.tag;
                    var _120d = ("*" == qt);
                    var ecs = _11c8()["getElementsByClassName"];
                    if (!oper) {
                        if (query.id) {
                            _120c = (!query.loops && _120d) ? _11cc : _11f5(query, {
                                el: 1,
                                id: 1
                            });
                            _120b = function(root, arr) {
                                var te = dom.byId(query.id, (root.ownerDocument || root));
                                if (root.ownerDocument && !_1208(root, root.ownerDocument)) {
                                    var roots = root.nodeType === 11 ? root.childNodes : [root];
                                    array.some(roots, function(_120e) {
                                        var elems = _1202(function(node) {
                                            return node.id === query.id;
                                        }, true)(_120e, []);
                                        if (elems.length) {
                                            te = elems[0];
                                            return false;
                                        }
                                    });
                                }
                                if (!te || !_120c(te)) {
                                    return;
                                }
                                if (9 == root.nodeType) {
                                    return _11de(te, arr);
                                } else {
                                    if (_1208(te, root)) {
                                        return _11de(te, arr);
                                    }
                                }
                            }
                            ;
                        } else {
                            if (ecs && /\{\s*\[native code\]\s*\}/.test(String(ecs)) && query.classes.length && !_11c9) {
                                _120c = _11f5(query, {
                                    el: 1,
                                    classes: 1,
                                    id: 1
                                });
                                var _120f = query.classes.join(" ");
                                _120b = function(root, arr, bag) {
                                    var ret = _11de(0, arr), te, x = 0;
                                    var tret = root.getElementsByClassName(_120f);
                                    while ((te = tret[x++])) {
                                        if (_120c(te, root) && _11ff(te, bag)) {
                                            ret.push(te);
                                        }
                                    }
                                    return ret;
                                }
                                ;
                            } else {
                                if (!_120d && !query.loops) {
                                    _120b = function(root, arr, bag) {
                                        var ret = _11de(0, arr), te, x = 0;
                                        var tag = query.getTag()
                                          , tret = tag ? root.getElementsByTagName(tag) : [];
                                        while ((te = tret[x++])) {
                                            if (_11ff(te, bag)) {
                                                ret.push(te);
                                            }
                                        }
                                        return ret;
                                    }
                                    ;
                                } else {
                                    _120c = _11f5(query, {
                                        el: 1,
                                        tag: 1,
                                        id: 1
                                    });
                                    _120b = function(root, arr, bag) {
                                        var ret = _11de(0, arr), te, x = 0;
                                        var tag = query.getTag()
                                          , tret = tag ? root.getElementsByTagName(tag) : [];
                                        while ((te = tret[x++])) {
                                            if (_120c(te, root) && _11ff(te, bag)) {
                                                ret.push(te);
                                            }
                                        }
                                        return ret;
                                    }
                                    ;
                                }
                            }
                        }
                    } else {
                        var _1210 = {
                            el: 1
                        };
                        if (_120d) {
                            _1210.tag = 1;
                        }
                        _120c = _11f5(query, _1210);
                        if ("+" == oper) {
                            _120b = _11fd(_120c);
                        } else {
                            if ("~" == oper) {
                                _120b = _1200(_120c);
                            } else {
                                if (">" == oper) {
                                    _120b = _1202(_120c);
                                }
                            }
                        }
                    }
                    return _1209[query.query] = _120b;
                };
                var _1211 = function(root, _1212) {
                    var _1213 = _11de(root), qp, x, te, qpl = _1212.length, bag, ret;
                    for (var i = 0; i < qpl; i++) {
                        ret = [];
                        qp = _1212[i];
                        x = _1213.length - 1;
                        if (x > 0) {
                            bag = {};
                            ret.nozip = true;
                        }
                        var gef = _120a(qp);
                        for (var j = 0; (te = _1213[j]); j++) {
                            gef(te, ret, bag);
                        }
                        if (!ret.length) {
                            break;
                        }
                        _1213 = ret;
                    }
                    return ret;
                };
                var _1214 = {}
                  , _1215 = {};
                var _1216 = function(query) {
                    var _1217 = _11cd(trim(query));
                    if (_1217.length == 1) {
                        var tef = _120a(_1217[0]);
                        return function(root) {
                            var r = tef(root, []);
                            if (r) {
                                r.nozip = true;
                            }
                            return r;
                        }
                        ;
                    }
                    return function(root) {
                        return _1211(root, _1217);
                    }
                    ;
                };
                var noZip = has("ie") ? "commentStrip" : "nozip";
                var qsa = "querySelectorAll";
                var _1218 = !!_11c8()[qsa];
                var _1219 = /\\[>~+]|n\+\d|([^ \\])?([>~+])([^ =])?/g;
                var _121a = function(match, pre, ch, post) {
                    return ch ? (pre ? pre + " " : "") + ch + (post ? " " + post : "") : match;
                };
                var attRe = /([^[]*)([^\]]*])?/g;
                var _121b = function(match, _121c, att) {
                    return _121c.replace(_1219, _121a) + (att || "");
                };
                var _121d = function(query, _121e) {
                    query = query.replace(attRe, _121b);
                    if (_1218) {
                        var _121f = _1215[query];
                        if (_121f && !_121e) {
                            return _121f;
                        }
                    }
                    var _1220 = _1214[query];
                    if (_1220) {
                        return _1220;
                    }
                    var qcz = query.charAt(0);
                    var _1221 = (-1 == query.indexOf(" "));
                    if ((query.indexOf("#") >= 0) && (_1221)) {
                        _121e = true;
                    }
                    var _1222 = (_1218 && (!_121e) && (_11ca.indexOf(qcz) == -1) && (!has("ie") || (query.indexOf(":") == -1)) && (!(_11c9 && (query.indexOf(".") >= 0))) && (query.indexOf(":contains") == -1) && (query.indexOf(":checked") == -1) && (query.indexOf("|=") == -1));
                    if (_1222) {
                        var tq = (_11ca.indexOf(query.charAt(query.length - 1)) >= 0) ? (query + " *") : query;
                        return _1215[query] = function(root) {
                            if (9 == root.nodeType || _1221) {
                                try {
                                    var r = root[qsa](tq);
                                    r[noZip] = true;
                                    return r;
                                } catch (e) {}
                            }
                            return _121d(query, true)(root);
                        }
                        ;
                    } else {
                        var parts = query.match(/([^\s,](?:"(?:\\.|[^"])+"|'(?:\\.|[^'])+'|[^,])*)/g);
                        return _1214[query] = ((parts.length < 2) ? _1216(query) : function(root) {
                            var _1223 = 0, ret = [], tp;
                            while ((tp = parts[_1223++])) {
                                ret = ret.concat(_1216(tp)(root));
                            }
                            return ret;
                        }
                        );
                    }
                };
                var _1224 = 0;
                var _1225 = has("ie") ? function(node) {
                    if (_11cb) {
                        return (node.getAttribute("_uid") || node.setAttribute("_uid", ++_1224) || _1224);
                    } else {
                        return node.uniqueID;
                    }
                }
                : function(node) {
                    return (node._uid || (node._uid = ++_1224));
                }
                ;
                var _11ff = function(node, bag) {
                    if (!bag) {
                        return 1;
                    }
                    var id = _1225(node);
                    if (!bag[id]) {
                        return bag[id] = 1;
                    }
                    return 0;
                };
                var _1226 = "_zipIdx";
                var _1227 = function(arr) {
                    if (arr && arr.nozip) {
                        return arr;
                    }
                    if (!arr || !arr.length) {
                        return [];
                    }
                    if (arr.length < 2) {
                        return [arr[0]];
                    }
                    var ret = [];
                    _1224++;
                    var x, te;
                    if (has("ie") && _11cb) {
                        var szidx = _1224 + "";
                        for (x = 0; x < arr.length; x++) {
                            if ((te = arr[x]) && te.getAttribute(_1226) != szidx) {
                                ret.push(te);
                                te.setAttribute(_1226, szidx);
                            }
                        }
                    } else {
                        if (has("ie") && arr.commentStrip) {
                            try {
                                for (x = 0; x < arr.length; x++) {
                                    if ((te = arr[x]) && _11df(te)) {
                                        ret.push(te);
                                    }
                                }
                            } catch (e) {}
                        } else {
                            for (x = 0; x < arr.length; x++) {
                                if ((te = arr[x]) && te[_1226] != _1224) {
                                    ret.push(te);
                                    te[_1226] = _1224;
                                }
                            }
                        }
                    }
                    return ret;
                };
                var query = function(query, root) {
                    root = root || _11c8();
                    var od = root.ownerDocument || root;
                    _11cb = (od.createElement("div").tagName === "div");
                    var r = _121d(query)(root);
                    if (r && r.nozip) {
                        return r;
                    }
                    return _1227(r);
                };
                query.filter = function(_1228, _1229, root) {
                    var _122a = []
                      , parts = _11cd(_1229)
                      , _122b = (parts.length == 1 && !/[^\w#\.]/.test(_1229)) ? _11f5(parts[0]) : function(node) {
                        return array.indexOf(query(_1229, dom.byId(root)), node) != -1;
                    }
                    ;
                    for (var x = 0, te; te = _1228[x]; x++) {
                        if (_122b(te)) {
                            _122a.push(te);
                        }
                    }
                    return _122a;
                }
                ;
                return query;
            });
        },
        "url:dijit/templates/Dialog.html": "<div class=\"dijitDialog\" role=\"dialog\" aria-labelledby=\"${id}_title\">\n\t<div data-dojo-attach-point=\"titleBar\" class=\"dijitDialogTitleBar\">\n\t\t<span data-dojo-attach-point=\"titleNode\" class=\"dijitDialogTitle\" id=\"${id}_title\"\n\t\t\t\trole=\"heading\" level=\"1\"></span>\n\t\t<span data-dojo-attach-point=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" data-dojo-attach-event=\"ondijitclick: onCancel\" title=\"${buttonCancel}\" role=\"button\" tabindex=\"-1\">\n\t\t\t<span data-dojo-attach-point=\"closeText\" class=\"closeText\" title=\"${buttonCancel}\">x</span>\n\t\t</span>\n\t</div>\n\t<div data-dojo-attach-point=\"containerNode\" class=\"dijitDialogPaneContent\"></div>\n\t${!actionBarTemplate}\n</div>\n\n",
        "url:dijit/templates/Tooltip.html": "<div class=\"dijitTooltip dijitTooltipLeft\" id=\"dojoTooltip\" data-dojo-attach-event=\"mouseenter:onMouseEnter,mouseleave:onMouseLeave\"\n\t><div class=\"dijitTooltipConnector\" data-dojo-attach-point=\"connectorNode\"></div\n\t><div class=\"dijitTooltipContainer dijitTooltipContents\" data-dojo-attach-point=\"containerNode\" role='alert'></div\n></div>\n",
        "url:dijit/form/templates/TextBox.html": "<div class=\"dijit dijitReset dijitInline dijitLeft\" id=\"widget_${id}\" role=\"presentation\"\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class=\"dijitReset dijitInputInner\" data-dojo-attach-point='textbox,focusNode' autocomplete=\"off\"\n\t\t\t${!nameAttrSetting} type='${type}'\n\t/></div\n></div>\n",
        "url:dijit/form/templates/ValidationTextBox.html": "<div class=\"dijit dijitReset dijitInline dijitLeft\"\n\tid=\"widget_${id}\" role=\"presentation\"\n\t><div class='dijitReset dijitValidationContainer'\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t/></div\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class=\"dijitReset dijitInputInner\" data-dojo-attach-point='textbox,focusNode' autocomplete=\"off\"\n\t\t\t${!nameAttrSetting} type='${type}'\n\t/></div\n></div>\n",
        "url:dijit/form/templates/DropDownBox.html": "<div class=\"dijit dijitReset dijitInline dijitLeft\"\n\tid=\"widget_${id}\"\n\trole=\"combobox\"\n\taria-haspopup=\"true\"\n\tdata-dojo-attach-point=\"_popupStateNode\"\n\t><div class='dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton dijitArrowButtonContainer'\n\t\tdata-dojo-attach-point=\"_buttonNode\" role=\"presentation\"\n\t\t><input class=\"dijitReset dijitInputField dijitArrowButtonInner\" value=\"&#9660; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"button presentation\" aria-hidden=\"true\"\n\t\t\t${_buttonInputDisabled}\n\t/></div\n\t><div class='dijitReset dijitValidationContainer'\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t/></div\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class='dijitReset dijitInputInner' ${!nameAttrSetting} type=\"${type}\" autocomplete=\"off\"\n\t\t\tdata-dojo-attach-point=\"textbox,focusNode\" role=\"textbox\"\n\t/></div\n></div>\n",
        "url:dijit/form/templates/Button.html": "<span class=\"dijit dijitReset dijitInline\" role=\"presentation\"\n\t><span class=\"dijitReset dijitInline dijitButtonNode\"\n\t\tdata-dojo-attach-event=\"ondijitclick:__onClick\" role=\"presentation\"\n\t\t><span class=\"dijitReset dijitStretch dijitButtonContents\"\n\t\t\tdata-dojo-attach-point=\"titleNode,focusNode\"\n\t\t\trole=\"button\" aria-labelledby=\"${id}_label\"\n\t\t\t><span class=\"dijitReset dijitInline dijitIcon\" data-dojo-attach-point=\"iconNode\"></span\n\t\t\t><span class=\"dijitReset dijitToggleButtonIconChar\">&#x25CF;</span\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\n\t\t\t\tid=\"${id}_label\"\n\t\t\t\tdata-dojo-attach-point=\"containerNode\"\n\t\t\t></span\n\t\t></span\n\t></span\n\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\"\n\t\tdata-dojo-attach-event=\"onclick:_onClick\"\n\t\ttabIndex=\"-1\" aria-hidden=\"true\" data-dojo-attach-point=\"valueNode\"\n/></span>\n",
        "url:dijit/form/templates/DropDownButton.html": "<span class=\"dijit dijitReset dijitInline\"\n\t><span class='dijitReset dijitInline dijitButtonNode'\n\t\tdata-dojo-attach-event=\"ondijitclick:__onClick\" data-dojo-attach-point=\"_buttonNode\"\n\t\t><span class=\"dijitReset dijitStretch dijitButtonContents\"\n\t\t\tdata-dojo-attach-point=\"focusNode,titleNode,_arrowWrapperNode,_popupStateNode\"\n\t\t\trole=\"button\" aria-haspopup=\"true\" aria-labelledby=\"${id}_label\"\n\t\t\t><span class=\"dijitReset dijitInline dijitIcon\"\n\t\t\t\tdata-dojo-attach-point=\"iconNode\"\n\t\t\t></span\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\n\t\t\t\tdata-dojo-attach-point=\"containerNode\"\n\t\t\t\tid=\"${id}_label\"\n\t\t\t></span\n\t\t\t><span class=\"dijitReset dijitInline dijitArrowButtonInner\"></span\n\t\t\t><span class=\"dijitReset dijitInline dijitArrowButtonChar\">&#9660;</span\n\t\t></span\n\t></span\n\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-event=\"onclick:_onClick\" data-dojo-attach-point=\"valueNode\" aria-hidden=\"true\"\n/></span>\n",
        "url:dijit/templates/TooltipDialog.html": "<div role=\"alertdialog\" tabIndex=\"-1\">\n\t<div class=\"dijitTooltipContainer\" role=\"presentation\">\n\t\t<div data-dojo-attach-point=\"contentsNode\" class=\"dijitTooltipContents dijitTooltipFocusNode\">\n\t\t\t<div data-dojo-attach-point=\"containerNode\"></div>\n\t\t\t${!actionBarTemplate}\n\t\t</div>\n\t</div>\n\t<div class=\"dijitTooltipConnector\" role=\"presentation\" data-dojo-attach-point=\"connectorNode\"></div>\n</div>\n",
        "url:dijit/templates/Menu.html": "<table class=\"dijit dijitMenu dijitMenuPassive dijitReset dijitMenuTable\" role=\"menu\" tabIndex=\"${tabIndex}\"\n\t   cellspacing=\"0\">\n\t<tbody class=\"dijitReset\" data-dojo-attach-point=\"containerNode\"></tbody>\n</table>\n",
        "url:dijit/templates/MenuItem.html": "<tr class=\"dijitReset\" data-dojo-attach-point=\"focusNode\" role=\"menuitem\" tabIndex=\"-1\">\n\t<td class=\"dijitReset dijitMenuItemIconCell\" role=\"presentation\">\n\t\t<span role=\"presentation\" class=\"dijitInline dijitIcon dijitMenuItemIcon\" data-dojo-attach-point=\"iconNode\"></span>\n\t</td>\n\t<td class=\"dijitReset dijitMenuItemLabel\" colspan=\"2\" data-dojo-attach-point=\"containerNode,textDirNode\"\n\t\trole=\"presentation\"></td>\n\t<td class=\"dijitReset dijitMenuItemAccelKey\" style=\"display: none\" data-dojo-attach-point=\"accelKeyNode\"></td>\n\t<td class=\"dijitReset dijitMenuArrowCell\" role=\"presentation\">\n\t\t<span data-dojo-attach-point=\"arrowWrapper\" style=\"visibility: hidden\">\n\t\t\t<span class=\"dijitInline dijitIcon dijitMenuExpand\"></span>\n\t\t\t<span class=\"dijitMenuExpandA11y\">+</span>\n\t\t</span>\n\t</td>\n</tr>\n",
        "url:dijit/templates/MenuSeparator.html": "<tr class=\"dijitMenuSeparator\" role=\"separator\">\n\t<td class=\"dijitMenuSeparatorIconCell\">\n\t\t<div class=\"dijitMenuSeparatorTop\"></div>\n\t\t<div class=\"dijitMenuSeparatorBottom\"></div>\n\t</td>\n\t<td colspan=\"3\" class=\"dijitMenuSeparatorLabelCell\">\n\t\t<div class=\"dijitMenuSeparatorTop dijitMenuSeparatorLabel\"></div>\n\t\t<div class=\"dijitMenuSeparatorBottom\"></div>\n\t</td>\n</tr>\n",
        "url:dijit/form/templates/Select.html": "<table class=\"dijit dijitReset dijitInline dijitLeft\"\n\tdata-dojo-attach-point=\"_buttonNode,tableNode,focusNode,_popupStateNode\" cellspacing='0' cellpadding='0'\n\trole=\"listbox\" aria-haspopup=\"true\"\n\t><tbody role=\"presentation\"><tr role=\"presentation\"\n\t\t><td class=\"dijitReset dijitStretch dijitButtonContents\" role=\"presentation\"\n\t\t\t><div class=\"dijitReset dijitInputField dijitButtonText\"  data-dojo-attach-point=\"containerNode,textDirNode\" role=\"presentation\"></div\n\t\t\t><div class=\"dijitReset dijitValidationContainer\"\n\t\t\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t\t\t/></div\n\t\t\t><input type=\"hidden\" ${!nameAttrSetting} data-dojo-attach-point=\"valueNode\" value=\"${value}\" aria-hidden=\"true\"\n\t\t/></td\n\t\t><td class=\"dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton dijitArrowButtonContainer\"\n\t\t\tdata-dojo-attach-point=\"titleNode\" role=\"presentation\"\n\t\t\t><input class=\"dijitReset dijitInputField dijitArrowButtonInner\" value=\"&#9660; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t\t\t\t${_buttonInputDisabled}\n\t\t/></td\n\t></tr></tbody\n></table>\n",
        "*now": function(r) {
            r(["dojo/i18n!*preload*ebg/layer/nls/ly_studio*[\"ar\",\"ca\",\"cs\",\"da\",\"de\",\"el\",\"en-gb\",\"en-us\",\"es-es\",\"fi-fi\",\"fr-fr\",\"he-il\",\"hu\",\"it-it\",\"ja-jp\",\"ko-kr\",\"nl-nl\",\"nb\",\"pl\",\"pt-br\",\"pt-pt\",\"ru\",\"sk\",\"sl\",\"sv\",\"th\",\"tr\",\"zh-tw\",\"zh-cn\",\"ROOT\"]"]);
        }
    }
});
define("ebg/layer/ly_studio", ["dojo/_base/fx", "dijit/Dialog", "dojox/html/entities", "dojo/string", "dojo/fx", "dojo/parser", "dojo/io/iframe", "dijit/Tooltip", "dojox/uuid/generateRandomUuid", "dojo/back", "dojo/hash", "dojox/dtl/filter/strings", "dojo/i18n", "dijit/form/FilteringSelect", "dijit/Editor", "dijit/_editor/plugins/FontChoice", "dijit/_editor/plugins/TextColor", "dijit/_editor/plugins/LinkDialog", "dijit/_editor/plugins/ViewSource", "ebg/core/core", "ebg/core/i18n", "ebg/gamenotif", "ebg/core/gamegui", "ebg/counter", "ebg/scrollmap", "ebg/stock", "ebg/chatinput", "ebg/dices", "ebg/draggable", "ebg/expandablesection", "ebg/premiumpanel", "ebg/scrollmap", "ebg/wrapper", "ebg/zone"], function(dojo, _122c) {
    return _122c("ebg.layer.ly_studio", null, {});
});
