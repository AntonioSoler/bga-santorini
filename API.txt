Hi Antonio,

I had never had the occasion of playing Santorini, and had not realized that it was actually simple on the server side (god powers excepted, but this can come later).

I read the rules, and seing that it was simple, I took the time today to implement it server side.

So you can play with the interface when you have some time now :)

It would be great if we could have a working version without god powers that I can demonstrate to the publisher at Essen.

Quick summary of what's interesting for you on the interface side:

Variables you get from the getAllDatas:

        $result['players'] = $this->getPlayers();
        $result['spaces'] = $this->getSpaces();
        $result['placed_pieces'] = $this->getPlacedPieces();
        $result['available_pieces'] = $this->getAvailablePieces();
        $result['moved_worker'] = self::getGamestateValue('moved_worker');

Arguments you get for playerPlaceWorker state:

        // Return unoccupied spaces that are accessible
        $result = array( 'accessible_spaces' => self::getAccessibleSpaces() );
        return $result;

Arguments you get for playerMove state:

        // Return for each worker of this player the spaces he can move to
        $workers = $this->pieces->getCardsInLocation('board', self::getActivePlayerId());
 
        $destinations = array();
        foreach ($workers as $worker_id => $worker) {
            //$destinations[$worker_id] = self::getNeighbouringSpaces($worker_id);
        }
        
        $result = array( 'destinations_by_worker' => $destinations );
        return $result;

Arguments you get for playerBuild state:

        // Return available spaces neighbouring the moved player
        $worker_id = self::getGamestateValue('moved_worker');
         
        $result = array( 'neighbouring_spaces' => self::getNeighbouringSpaces($worker_id) );
        return $result;

Actions you can call with ajax or from the chat to move the game forward:

        place(x,y,z)

        move(worker_id, x, y, z)

        build(x, y, z)

Notifications you'll receive in return:

        $args = array(
            'i18n' => array(),
            'player_id' => $player_id,
            'player_name' => self::getActivePlayerName(),
            'worker_id' => $worker_id,
            'space_id' => $space_id,
        );
        self::notifyAllPlayers('workerPlaced', clienttranslate('${player_name} places a worker'), $args);

        $args = array(
            'i18n' => array(),
            'player_id' => $player_id,
            'player_name' => self::getActivePlayerName(),
            'worker_id' => $worker_id,
            'space_id' => $space_id,
        );
        self::notifyAllPlayers('workerMoved', clienttranslate('${player_name} moves a worker'), $args);

        $args = array(
            'i18n' => array(),
            'player_id' => $player_id,
            'player_name' => self::getActivePlayerName(),
            'block' => $block,
            'space_id' => $space_id,
            'level' => $z
        );
        $msg = clienttranslate('${player_name} builds at ground level');
        if ($z > 0) $msg = clienttranslate('${player_name} builds at level ${level}');
        self::notifyAllPlayers('blockBuilt', $msg, $args);


Please let me know if you need anything else on the server side or if there are any bugs! (I tested very quickly but there are certainly some quirks)

Cheers!